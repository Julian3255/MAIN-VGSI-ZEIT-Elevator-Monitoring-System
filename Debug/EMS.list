
EMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a394  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800a4d0  0800a4d0  0001a4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a788  0800a788  0001a788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a78c  0800a78c  0001a78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000008  0800a790  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 MB_MEM2       00000883  20000034  0800a7bc  00020034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200008b8  0800b03f  000208b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200008f0  0800b074  000208f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000904  0800b085  00020904  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e0  0800b085  000210e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020901  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  00020931  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002e39f  00000000  00000000  00020974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006213  00000000  00000000  0004ed13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a10  00000000  00000000  00054f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002030  00000000  00000000  00057938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c238  00000000  00000000  00059968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002d36d  00000000  00000000  00085ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9639  00000000  00000000  000b2f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000af24  00000000  00000000  001ac548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  001b746c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000904 	.word	0x20000904
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a4b8 	.word	0x0800a4b8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000908 	.word	0x20000908
 8000178:	0800a4b8 	.word	0x0800a4b8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000196:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800019a:	4905      	ldr	r1, [pc, #20]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4313      	orrs	r3, r2
 80001a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr
 80001b0:	58000800 	.word	0x58000800

080001b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4013      	ands	r3, r2
 80001d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d8:	68fb      	ldr	r3, [r7, #12]
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b085      	sub	sp, #20
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80001f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4013      	ands	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000210:	68fb      	ldr	r3, [r7, #12]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021e:	b580      	push	{r7, lr}
 8000220:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000222:	f002 fdd1 	bl	8002dc8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000226:	f002 fdd5 	bl	8002dd4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800022a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800022e:	f7ff ffad 	bl	800018c <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000232:	f000 f821 	bl	8000278 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000236:	f000 f8c1 	bl	80003bc <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800023a:	bf00      	nop
}
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <APPD_EnableCPU2+0x34>)
 8000248:	1d3c      	adds	r4, r7, #4
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000254:	c403      	stmia	r4!, {r0, r1}
 8000256:	8022      	strh	r2, [r4, #0]
 8000258:	3402      	adds	r4, #2
 800025a:	0c13      	lsrs	r3, r2, #16
 800025c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800025e:	f008 fe09 	bl	8008e74 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f008 f8a4 	bl	80083b2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800026a:	bf00      	nop
}
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	bf00      	nop
 8000274:	0800a4d0 	.word	0x0800a4d0

08000278 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000298:	2300      	movs	r3, #0
 800029a:	77fb      	strb	r3, [r7, #31]
 800029c:	e036      	b.n	800030c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800029e:	7ffb      	ldrb	r3, [r7, #31]
 80002a0:	4a43      	ldr	r2, [pc, #268]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	4413      	add	r3, r2
 80002a6:	799b      	ldrb	r3, [r3, #6]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d02c      	beq.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002ac:	7ffb      	ldrb	r3, [r7, #31]
 80002ae:	4a40      	ldr	r2, [pc, #256]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002b4:	4a3f      	ldr	r2, [pc, #252]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d01b      	beq.n	80002f2 <APPD_SetCPU2GpioConfig+0x7a>
 80002ba:	4a3e      	ldr	r2, [pc, #248]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d821      	bhi.n	8000304 <APPD_SetCPU2GpioConfig+0x8c>
 80002c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002c4:	d003      	beq.n	80002ce <APPD_SetCPU2GpioConfig+0x56>
 80002c6:	4a3c      	ldr	r2, [pc, #240]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d009      	beq.n	80002e0 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 80002cc:	e01a      	b.n	8000304 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002ce:	7ffb      	ldrb	r3, [r7, #31]
 80002d0:	4a37      	ldr	r2, [pc, #220]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	4413      	add	r3, r2
 80002d6:	889a      	ldrh	r2, [r3, #4]
 80002d8:	8bbb      	ldrh	r3, [r7, #28]
 80002da:	4313      	orrs	r3, r2
 80002dc:	83bb      	strh	r3, [r7, #28]
          break;
 80002de:	e012      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002e0:	7ffb      	ldrb	r3, [r7, #31]
 80002e2:	4a33      	ldr	r2, [pc, #204]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	4413      	add	r3, r2
 80002e8:	889a      	ldrh	r2, [r3, #4]
 80002ea:	8b7b      	ldrh	r3, [r7, #26]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	837b      	strh	r3, [r7, #26]
          break;
 80002f0:	e009      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80002f2:	7ffb      	ldrb	r3, [r7, #31]
 80002f4:	4a2e      	ldr	r2, [pc, #184]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4413      	add	r3, r2
 80002fa:	889a      	ldrh	r2, [r3, #4]
 80002fc:	8b3b      	ldrh	r3, [r7, #24]
 80002fe:	4313      	orrs	r3, r2
 8000300:	833b      	strh	r3, [r7, #24]
          break;
 8000302:	e000      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000304:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000306:	7ffb      	ldrb	r3, [r7, #31]
 8000308:	3301      	adds	r3, #1
 800030a:	77fb      	strb	r3, [r7, #31]
 800030c:	7ffb      	ldrb	r3, [r7, #31]
 800030e:	2b25      	cmp	r3, #37	; 0x25
 8000310:	d9c5      	bls.n	800029e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	2301      	movs	r3, #1
 8000318:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800031a:	2303      	movs	r3, #3
 800031c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800031e:	8bbb      	ldrh	r3, [r7, #28]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d014      	beq.n	800034e <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000324:	8bbb      	ldrh	r3, [r7, #28]
 8000326:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ff43 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff59 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033c:	f003 f856 	bl	80033ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000340:	8bbb      	ldrh	r3, [r7, #28]
 8000342:	2200      	movs	r2, #0
 8000344:	4619      	mov	r1, r3
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034a:	f003 f9d7 	bl	80036fc <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800034e:	8b7b      	ldrh	r3, [r7, #26]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d012      	beq.n	800037a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000354:	8b7b      	ldrh	r3, [r7, #26]
 8000356:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000358:	2002      	movs	r0, #2
 800035a:	f7ff ff2b 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800035e:	2002      	movs	r0, #2
 8000360:	f7ff ff41 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4813      	ldr	r0, [pc, #76]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 800036a:	f003 f83f 	bl	80033ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800036e:	8b7b      	ldrh	r3, [r7, #26]
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	4810      	ldr	r0, [pc, #64]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 8000376:	f003 f9c1 	bl	80036fc <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800037a:	8b3b      	ldrh	r3, [r7, #24]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d013      	beq.n	80003a8 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000380:	8b3b      	ldrh	r3, [r7, #24]
 8000382:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000384:	2004      	movs	r0, #4
 8000386:	f7ff ff15 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800038a:	2004      	movs	r0, #4
 800038c:	f7ff ff2b 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4619      	mov	r1, r3
 8000394:	4807      	ldr	r0, [pc, #28]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000396:	f003 f829 	bl	80033ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800039a:	8b3b      	ldrh	r3, [r7, #24]
 800039c:	2200      	movs	r2, #0
 800039e:	4619      	mov	r1, r3
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80003a2:	f003 f9ab 	bl	80036fc <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
}
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	0800a560 	.word	0x0800a560
 80003b4:	48000800 	.word	0x48000800
 80003b8:	48000400 	.word	0x48000400

080003bc <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80003c0:	bf00      	nop
}
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80003d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003da:	f023 0207 	bic.w	r2, r3, #7
 80003de:	4905      	ldr	r1, [pc, #20]	; (80003f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	58000400 	.word	0x58000400

080003f8 <LL_EXTI_EnableIT_32_63>:
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <LL_EXTI_EnableIT_32_63+0x24>)
 8000402:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000406:	4905      	ldr	r1, [pc, #20]	; (800041c <LL_EXTI_EnableIT_32_63+0x24>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4313      	orrs	r3, r2
 800040c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	58000800 	.word	0x58000800

08000420 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800042e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800043a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	021b      	lsls	r3, r3, #8
 8000442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	cafecafe 	.word	0xcafecafe

0800045c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800046e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	608b      	str	r3, [r1, #8]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80004aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80004cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80004dc:	d101      	bne.n	80004e2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80004de:	2301      	movs	r3, #1
 80004e0:	e000      	b.n	80004e4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000502:	d101      	bne.n	8000508 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000504:	2301      	movs	r3, #1
 8000506:	e000      	b.n	800050a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <LL_AHB3_GRP1_EnableClock>:
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000538:	68fb      	ldr	r3, [r7, #12]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <LL_DBGMCU_GetDeviceID+0x18>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e0042000 	.word	0xe0042000

08000564 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_DBGMCU_GetRevisionID+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	0c1b      	lsrs	r3, r3, #16
 800056e:	b29b      	uxth	r3, r3
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e0042000 	.word	0xe0042000

08000580 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	685a      	ldr	r2, [r3, #4]
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	431a      	orrs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	431a      	orrs	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	041b      	lsls	r3, r3, #16
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	615a      	str	r2, [r3, #20]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	431a      	orrs	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	615a      	str	r2, [r3, #20]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	609a      	str	r2, [r3, #8]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	619a      	str	r2, [r3, #24]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <LL_LPM_EnableSleep+0x1c>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <LL_LPM_EnableSleep+0x1c>)
 800064e:	f023 0304 	bic.w	r3, r3, #4
 8000652:	6113      	str	r3, [r2, #16]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	22ff      	movs	r2, #255	; 0xff
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	22ca      	movs	r2, #202	; 0xca
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2253      	movs	r2, #83	; 0x53
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f023 0207 	bic.w	r2, r3, #7
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	431a      	orrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <MX_APPE_Config+0x18>)
 80006ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006ce:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80006d0:	f000 f826 	bl	8000720 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80006d4:	f000 f866 	bl	80007a4 <Config_HSE>

  return;
 80006d8:	bf00      	nop
}
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	58004000 	.word	0x58004000

080006e0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80006e4:	f000 f872 	bl	80007cc <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80006e8:	f000 f88a 	bl	8000800 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80006ec:	4904      	ldr	r1, [pc, #16]	; (8000700 <MX_APPE_Init+0x20>)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 fdce 	bl	8001290 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  // Yang Junyoung
  APPD_Init();
 80006f4:	f7ff fd93 	bl	800021e <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80006f8:	f000 f890 	bl	800081c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80006fc:	bf00      	nop
}
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000dd8 	.word	0x20000dd8

08000704 <Init_Smps>:

void Init_Smps(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000708:	bf00      	nop
}
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <Init_Exti>:

void Init_Exti(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000716:	2050      	movs	r0, #80	; 0x50
 8000718:	f7ff fe6e 	bl	80003f8 <LL_EXTI_EnableIT_32_63>

  return;
 800071c:	bf00      	nop
}
 800071e:	bd80      	pop	{r7, pc}

08000720 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000724:	f000 f804 	bl	8000730 <Reset_BackupDomain>

  Reset_IPCC();
 8000728:	f000 f81a 	bl	8000760 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800072c:	bf00      	nop
}
 800072e:	bd80      	pop	{r7, pc}

08000730 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000734:	f7ff fec8 	bl	80004c8 <LL_RCC_IsActiveFlag_PINRST>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00d      	beq.n	800075a <Reset_BackupDomain+0x2a>
 800073e:	f7ff fed6 	bl	80004ee <LL_RCC_IsActiveFlag_SFTRST>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d108      	bne.n	800075a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000748:	f003 f89a 	bl	8003880 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800074c:	f003 f898 	bl	8003880 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000750:	f7ff fe98 	bl	8000484 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000754:	f7ff fea7 	bl	80004a6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000758:	bf00      	nop
 800075a:	bf00      	nop
}
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000764:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000768:	f7ff fed4 	bl	8000514 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800076c:	213f      	movs	r1, #63	; 0x3f
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <Reset_IPCC+0x40>)
 8000770:	f7ff ff4c 	bl	800060c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000774:	213f      	movs	r1, #63	; 0x3f
 8000776:	480a      	ldr	r0, [pc, #40]	; (80007a0 <Reset_IPCC+0x40>)
 8000778:	f7ff ff56 	bl	8000628 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800077c:	213f      	movs	r1, #63	; 0x3f
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <Reset_IPCC+0x40>)
 8000780:	f7ff fefe 	bl	8000580 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000784:	213f      	movs	r1, #63	; 0x3f
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <Reset_IPCC+0x40>)
 8000788:	f7ff ff1d 	bl	80005c6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800078c:	213f      	movs	r1, #63	; 0x3f
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <Reset_IPCC+0x40>)
 8000790:	f7ff ff08 	bl	80005a4 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000794:	213f      	movs	r1, #63	; 0x3f
 8000796:	4802      	ldr	r0, [pc, #8]	; (80007a0 <Reset_IPCC+0x40>)
 8000798:	f7ff ff27 	bl	80005ea <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800079c:	bf00      	nop
}
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58000c00 	.word	0x58000c00

080007a4 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f008 fbee 	bl	8008f8c <OTP_Read>
 80007b0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	799b      	ldrb	r3, [r3, #6]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe2f 	bl	8000420 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
}
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <System_Init>:

static void System_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  Init_Smps();
 80007d0:	f7ff ff98 	bl	8000704 <Init_Smps>

  Init_Exti();
 80007d4:	f7ff ff9d 	bl	8000712 <Init_Exti>

  Init_Rtc();
 80007d8:	f000 f802 	bl	80007e0 <Init_Rtc>

  return;
 80007dc:	bf00      	nop
}
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <Init_Rtc+0x1c>)
 80007e6:	f7ff ff4a 	bl	800067e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <Init_Rtc+0x1c>)
 80007ee:	f7ff ff56 	bl	800069e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80007f2:	4802      	ldr	r0, [pc, #8]	; (80007fc <Init_Rtc+0x1c>)
 80007f4:	f7ff ff36 	bl	8000664 <LL_RTC_EnableWriteProtection>

  return;
 80007f8:	bf00      	nop
}
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40002800 	.word	0x40002800

08000800 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000804:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000808:	f7ff fe28 	bl	800045c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800080c:	f009 fb9a 	bl	8009f44 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000810:	2004      	movs	r0, #4
 8000812:	f7ff fddb 	bl	80003cc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000816:	bf00      	nop
}
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000822:	f008 f971 	bl	8008b08 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <appe_Tl_Init+0x50>)
 8000828:	2100      	movs	r1, #0
 800082a:	2008      	movs	r0, #8
 800082c:	f009 fcc8 	bl	800a1c0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <appe_Tl_Init+0x54>)
 8000832:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <appe_Tl_Init+0x58>)
 8000836:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	480e      	ldr	r0, [pc, #56]	; (8000878 <appe_Tl_Init+0x5c>)
 800083e:	f008 f829 	bl	8008894 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <appe_Tl_Init+0x60>)
 8000844:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <appe_Tl_Init+0x64>)
 8000848:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <appe_Tl_Init+0x68>)
 800084c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800084e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000852:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	4618      	mov	r0, r3
 800085a:	f008 fa97 	bl	8008d8c <TL_MM_Init>

  TL_Enable();
 800085e:	f008 f94d 	bl	8008afc <TL_Enable>

  return;
 8000862:	bf00      	nop
}
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080088cd 	.word	0x080088cd
 8000870:	20000584 	.word	0x20000584
 8000874:	08000889 	.word	0x08000889
 8000878:	080008a1 	.word	0x080008a1
 800087c:	2000079c 	.word	0x2000079c
 8000880:	20000690 	.word	0x20000690
 8000884:	20000048 	.word	0x20000048

08000888 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000892:	bf00      	nop
}
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	330b      	adds	r3, #11
 80008ae:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80008ba:	2b07      	cmp	r3, #7
 80008bc:	d81f      	bhi.n	80008fe <APPE_SysUserEvtRx+0x5e>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <APPE_SysUserEvtRx+0x24>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008e5 	.word	0x080008e5
 80008c8:	080008f7 	.word	0x080008f7
 80008cc:	080008ff 	.word	0x080008ff
 80008d0:	080008ff 	.word	0x080008ff
 80008d4:	080008ff 	.word	0x080008ff
 80008d8:	080008ff 	.word	0x080008ff
 80008dc:	080008ff 	.word	0x080008ff
 80008e0:	080008ff 	.word	0x080008ff
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f007 fd8f 	bl	800840c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f81b 	bl	800092a <APPE_SysEvtReadyProcessing>
    break;
 80008f4:	e004      	b.n	8000900 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f806 	bl	8000908 <APPE_SysEvtError>
    break;
 80008fc:	e000      	b.n	8000900 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80008fe:	bf00      	nop
  }

  return;
 8000900:	bf00      	nop
}
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	330b      	adds	r3, #11
 8000916:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3302      	adds	r3, #2
 800091c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800091e:	bf00      	nop
}
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b08a      	sub	sp, #40	; 0x28
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	330b      	adds	r3, #11
 800094e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	3302      	adds	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d11d      	bne.n	800099a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800095e:	f7ff fc6f 	bl	8000240 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000962:	230f      	movs	r3, #15
 8000964:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000966:	237f      	movs	r3, #127	; 0x7f
 8000968:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800096a:	f7ff fdfb 	bl	8000564 <LL_DBGMCU_GetRevisionID>
 800096e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	b29b      	uxth	r3, r3
 8000974:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000976:	f7ff fde7 	bl	8000548 <LL_DBGMCU_GetDeviceID>
 800097a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	b29b      	uxth	r3, r3
 8000980:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fd2a 	bl	80083e0 <SHCI_C2_Config>

    APP_BLE_Init();
 800098c:	f008 fc08 	bl	80091a0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000990:	2100      	movs	r1, #0
 8000992:	2001      	movs	r0, #1
 8000994:	f009 fae8 	bl	8009f68 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000998:	e007      	b.n	80009aa <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d103      	bne.n	80009aa <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
  return;
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
}
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ba:	f002 f9e1 	bl	8002d80 <HAL_GetTick>
 80009be:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ca:	d00a      	beq.n	80009e2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80009cc:	f002 f9f0 	bl	8002db0 <HAL_GetTickFreq>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009da:	e002      	b.n	80009e2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80009dc:	f7ff fe32 	bl	8000644 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80009e0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80009e2:	f002 f9cd 	bl	8002d80 <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d8f4      	bhi.n	80009dc <HAL_Delay+0x2a>
  }
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <UTIL_SEQ_Idle>:

  /* USER CODE END MX_APPE_Process_2 */
}

void UTIL_SEQ_Idle(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000a00:	bf00      	nop
}
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f009 fad6 	bl	8009fc8 <UTIL_SEQ_Run>

  return;
 8000a1c:	bf00      	nop
}
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f009 fbe8 	bl	800a204 <UTIL_SEQ_SetTask>
  return;
 8000a34:	bf00      	nop
}
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000a44:	2002      	movs	r0, #2
 8000a46:	f009 fc49 	bl	800a2dc <UTIL_SEQ_SetEvt>
  return;
 8000a4a:	bf00      	nop
}
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f009 fc5e 	bl	800a31c <UTIL_SEQ_WaitEvt>
  return;
 8000a60:	bf00      	nop
}
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <LL_EXTI_EnableIT_0_31>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a72:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a76:	4905      	ldr	r1, [pc, #20]	; (8000a8c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	58000800 	.word	0x58000800

08000a90 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	600b      	str	r3, [r1, #0]

}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	58000800 	.word	0x58000800

08000ab4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <ReadRtcSsrValue+0x3c>)
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <ReadRtcSsrValue+0x3c>)
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000aca:	e005      	b.n	8000ad8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <ReadRtcSsrValue+0x3c>)
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d1f5      	bne.n	8000acc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000ae0:	683b      	ldr	r3, [r7, #0]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40002800 	.word	0x40002800

08000af4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	460a      	mov	r2, r1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	491d      	ldr	r1, [pc, #116]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d009      	beq.n	8000b32 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000b1e:	7bfa      	ldrb	r2, [r7, #15]
 8000b20:	4916      	ldr	r1, [pc, #88]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4911      	ldr	r1, [pc, #68]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	440b      	add	r3, r1
 8000b40:	3315      	adds	r3, #21
 8000b42:	7bfa      	ldrb	r2, [r7, #15]
 8000b44:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	490c      	ldr	r1, [pc, #48]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	3314      	adds	r3, #20
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000b5a:	79ba      	ldrb	r2, [r7, #6]
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	440b      	add	r3, r1
 8000b68:	3315      	adds	r3, #21
 8000b6a:	79fa      	ldrb	r2, [r7, #7]
 8000b6c:	701a      	strb	r2, [r3, #0]

  return;
 8000b6e:	bf00      	nop
}
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000920 	.word	0x20000920

08000b80 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <LinkTimerBefore+0xb8>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	79ba      	ldrb	r2, [r7, #6]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d032      	beq.n	8000c02 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b9c:	79ba      	ldrb	r2, [r7, #6]
 8000b9e:	4927      	ldr	r1, [pc, #156]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	440b      	add	r3, r1
 8000baa:	3314      	adds	r3, #20
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	4922      	ldr	r1, [pc, #136]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3315      	adds	r3, #21
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	491d      	ldr	r1, [pc, #116]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	440b      	add	r3, r1
 8000bd2:	3315      	adds	r3, #21
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	4918      	ldr	r1, [pc, #96]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	440b      	add	r3, r1
 8000be6:	3314      	adds	r3, #20
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	4913      	ldr	r1, [pc, #76]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3314      	adds	r3, #20
 8000bfc:	79fa      	ldrb	r2, [r7, #7]
 8000bfe:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000c00:	e014      	b.n	8000c2c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	440b      	add	r3, r1
 8000c10:	3315      	adds	r3, #21
 8000c12:	79ba      	ldrb	r2, [r7, #6]
 8000c14:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c16:	79ba      	ldrb	r2, [r7, #6]
 8000c18:	4908      	ldr	r1, [pc, #32]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	440b      	add	r3, r1
 8000c24:	3314      	adds	r3, #20
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	701a      	strb	r2, [r3, #0]
  return;
 8000c2a:	bf00      	nop
}
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200009b0 	.word	0x200009b0
 8000c3c:	20000920 	.word	0x20000920

08000c40 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c4a:	4b4e      	ldr	r3, [pc, #312]	; (8000d84 <linkTimer+0x144>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b06      	cmp	r3, #6
 8000c52:	d118      	bne.n	8000c86 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c54:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <linkTimer+0x144>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <linkTimer+0x148>)
 8000c5c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000c5e:	4a49      	ldr	r2, [pc, #292]	; (8000d84 <linkTimer+0x144>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	4949      	ldr	r1, [pc, #292]	; (8000d8c <linkTimer+0x14c>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3315      	adds	r3, #21
 8000c74:	2206      	movs	r2, #6
 8000c76:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c78:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <linkTimer+0x150>)
 8000c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	81fb      	strh	r3, [r7, #14]
 8000c84:	e078      	b.n	8000d78 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c86:	f000 f909 	bl	8000e9c <ReturnTimeElapsed>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	493e      	ldr	r1, [pc, #248]	; (8000d8c <linkTimer+0x14c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	6819      	ldr	r1, [r3, #0]
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	79fa      	ldrb	r2, [r7, #7]
 8000ca4:	4419      	add	r1, r3
 8000ca6:	4839      	ldr	r0, [pc, #228]	; (8000d8c <linkTimer+0x14c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	4934      	ldr	r1, [pc, #208]	; (8000d8c <linkTimer+0x14c>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <linkTimer+0x144>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <linkTimer+0x14c>)
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	440b      	add	r3, r1
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4413      	add	r3, r2
 8000cde:	3308      	adds	r3, #8
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d337      	bcc.n	8000d58 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <linkTimer+0x144>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000cee:	7b7a      	ldrb	r2, [r7, #13]
 8000cf0:	4926      	ldr	r1, [pc, #152]	; (8000d8c <linkTimer+0x14c>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3315      	adds	r3, #21
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d02:	e013      	b.n	8000d2c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000d04:	7b7a      	ldrb	r2, [r7, #13]
 8000d06:	4921      	ldr	r1, [pc, #132]	; (8000d8c <linkTimer+0x14c>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	440b      	add	r3, r1
 8000d12:	3315      	adds	r3, #21
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000d18:	7b7a      	ldrb	r2, [r7, #13]
 8000d1a:	491c      	ldr	r1, [pc, #112]	; (8000d8c <linkTimer+0x14c>)
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	440b      	add	r3, r1
 8000d26:	3315      	adds	r3, #21
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d2c:	7b3b      	ldrb	r3, [r7, #12]
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d00b      	beq.n	8000d4a <linkTimer+0x10a>
 8000d32:	7b3a      	ldrb	r2, [r7, #12]
 8000d34:	4915      	ldr	r1, [pc, #84]	; (8000d8c <linkTimer+0x14c>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3308      	adds	r3, #8
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d2dc      	bcs.n	8000d04 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000d4a:	7b7a      	ldrb	r2, [r7, #13]
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fecf 	bl	8000af4 <LinkTimerAfter>
 8000d56:	e00f      	b.n	8000d78 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <linkTimer+0x144>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff0c 	bl	8000b80 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <linkTimer+0x144>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <linkTimer+0x148>)
 8000d70:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <linkTimer+0x144>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d78:	89fb      	ldrh	r3, [r7, #14]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200009b0 	.word	0x200009b0
 8000d88:	200009b1 	.word	0x200009b1
 8000d8c:	20000920 	.word	0x20000920
 8000d90:	200009b4 	.word	0x200009b4

08000d94 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <UnlinkTimer+0xf8>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d111      	bne.n	8000dd4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <UnlinkTimer+0xf8>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <UnlinkTimer+0xfc>)
 8000db8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000dba:	79fa      	ldrb	r2, [r7, #7]
 8000dbc:	4935      	ldr	r1, [pc, #212]	; (8000e94 <UnlinkTimer+0x100>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3315      	adds	r3, #21
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <UnlinkTimer+0xf8>)
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e03e      	b.n	8000e52 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000dd4:	79fa      	ldrb	r2, [r7, #7]
 8000dd6:	492f      	ldr	r1, [pc, #188]	; (8000e94 <UnlinkTimer+0x100>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	3314      	adds	r3, #20
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000de8:	79fa      	ldrb	r2, [r7, #7]
 8000dea:	492a      	ldr	r1, [pc, #168]	; (8000e94 <UnlinkTimer+0x100>)
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	440b      	add	r3, r1
 8000df6:	3315      	adds	r3, #21
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000dfc:	79f9      	ldrb	r1, [r7, #7]
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	4824      	ldr	r0, [pc, #144]	; (8000e94 <UnlinkTimer+0x100>)
 8000e02:	460b      	mov	r3, r1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	440b      	add	r3, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4403      	add	r3, r0
 8000e0c:	3315      	adds	r3, #21
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2d8      	uxtb	r0, r3
 8000e12:	4920      	ldr	r1, [pc, #128]	; (8000e94 <UnlinkTimer+0x100>)
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3315      	adds	r3, #21
 8000e20:	4602      	mov	r2, r0
 8000e22:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d013      	beq.n	8000e52 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000e2a:	79f9      	ldrb	r1, [r7, #7]
 8000e2c:	7bba      	ldrb	r2, [r7, #14]
 8000e2e:	4819      	ldr	r0, [pc, #100]	; (8000e94 <UnlinkTimer+0x100>)
 8000e30:	460b      	mov	r3, r1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	440b      	add	r3, r1
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4403      	add	r3, r0
 8000e3a:	3314      	adds	r3, #20
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2d8      	uxtb	r0, r3
 8000e40:	4914      	ldr	r1, [pc, #80]	; (8000e94 <UnlinkTimer+0x100>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3314      	adds	r3, #20
 8000e4e:	4602      	mov	r2, r0
 8000e50:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	490f      	ldr	r1, [pc, #60]	; (8000e94 <UnlinkTimer+0x100>)
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	440b      	add	r3, r1
 8000e60:	330c      	adds	r3, #12
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <UnlinkTimer+0xf8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b06      	cmp	r3, #6
 8000e6e:	d107      	bne.n	8000e80 <UnlinkTimer+0xec>
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <UnlinkTimer+0x104>)
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
}
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	200009b0 	.word	0x200009b0
 8000e90:	200009b1 	.word	0x200009b1
 8000e94:	20000920 	.word	0x20000920
 8000e98:	200009b4 	.word	0x200009b4

08000e9c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eaa:	d026      	beq.n	8000efa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000eac:	f7ff fe02 	bl	8000ab4 <ReadRtcSsrValue>
 8000eb0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d805      	bhi.n	8000ec8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	e00a      	b.n	8000ede <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <ReturnTimeElapsed+0x74>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <ReturnTimeElapsed+0x78>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <ReturnTimeElapsed+0x7c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	40d3      	lsrs	r3, r2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	e001      	b.n	8000efe <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	b29b      	uxth	r3, r3
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200009b4 	.word	0x200009b4
 8000f10:	200009bc 	.word	0x200009bc
 8000f14:	200009ba 	.word	0x200009ba
 8000f18:	200009b9 	.word	0x200009b9

08000f1c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d108      	bne.n	8000f3e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f2c:	f7ff fdc2 	bl	8000ab4 <ReadRtcSsrValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <RestartWakeupCounter+0x9c>)
 8000f34:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f002 f8cf 	bl	80030da <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000f3c:	e039      	b.n	8000fb2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d803      	bhi.n	8000f4c <RestartWakeupCounter+0x30>
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <RestartWakeupCounter+0xa0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d002      	beq.n	8000f52 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000f52:	bf00      	nop
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f8      	beq.n	8000f54 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f72:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <RestartWakeupCounter+0xa8>)
 8000f76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f7a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f002 f8ba 	bl	80030f6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <RestartWakeupCounter+0xac>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	0c1b      	lsrs	r3, r3, #16
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	88fa      	ldrh	r2, [r7, #6]
 8000f8c:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <RestartWakeupCounter+0xac>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f92:	f7ff fd8f 	bl	8000ab4 <ReadRtcSsrValue>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <RestartWakeupCounter+0x9c>)
 8000f9a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000faa:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000fac:	f3af 8000 	nop.w
  return ;
 8000fb0:	bf00      	nop
}
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200009b4 	.word	0x200009b4
 8000fbc:	200009b9 	.word	0x200009b9
 8000fc0:	20000dd8 	.word	0x20000dd8
 8000fc4:	58000800 	.word	0x58000800
 8000fc8:	40002800 	.word	0x40002800

08000fcc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <RescheduleTimerList+0x11c>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fde:	d107      	bne.n	8000ff0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000fe0:	bf00      	nop
 8000fe2:	4b42      	ldr	r3, [pc, #264]	; (80010ec <RescheduleTimerList+0x120>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f8      	bne.n	8000fe2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000ff0:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <RescheduleTimerList+0x120>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <RescheduleTimerList+0x120>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ffe:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001000:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <RescheduleTimerList+0x124>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	493a      	ldr	r1, [pc, #232]	; (80010f4 <RescheduleTimerList+0x128>)
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	3308      	adds	r3, #8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800101a:	f7ff ff3f 	bl	8000e9c <ReturnTimeElapsed>
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	429a      	cmp	r2, r3
 8001028:	d205      	bcs.n	8001036 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <RescheduleTimerList+0x12c>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e04d      	b.n	80010d2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4a30      	ldr	r2, [pc, #192]	; (80010fc <RescheduleTimerList+0x130>)
 800103a:	8812      	ldrh	r2, [r2, #0]
 800103c:	b292      	uxth	r2, r2
 800103e:	4413      	add	r3, r2
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4293      	cmp	r3, r2
 8001046:	d906      	bls.n	8001056 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <RescheduleTimerList+0x130>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <RescheduleTimerList+0x12c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e03d      	b.n	80010d2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	b29a      	uxth	r2, r3
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <RescheduleTimerList+0x12c>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001066:	e034      	b.n	80010d2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	4922      	ldr	r1, [pc, #136]	; (80010f4 <RescheduleTimerList+0x128>)
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	3308      	adds	r3, #8
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	429a      	cmp	r2, r3
 800107e:	d20a      	bcs.n	8001096 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	491c      	ldr	r1, [pc, #112]	; (80010f4 <RescheduleTimerList+0x128>)
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	3308      	adds	r3, #8
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e013      	b.n	80010be <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	4916      	ldr	r1, [pc, #88]	; (80010f4 <RescheduleTimerList+0x128>)
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	3308      	adds	r3, #8
 80010a6:	6819      	ldr	r1, [r3, #0]
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	1ac9      	subs	r1, r1, r3
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <RescheduleTimerList+0x128>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4403      	add	r3, r0
 80010ba:	3308      	adds	r3, #8
 80010bc:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <RescheduleTimerList+0x128>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	3315      	adds	r3, #21
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	d1c7      	bne.n	8001068 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80010d8:	89bb      	ldrh	r3, [r7, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff1e 	bl	8000f1c <RestartWakeupCounter>

  return ;
 80010e0:	bf00      	nop
}
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40002800 	.word	0x40002800
 80010ec:	20000dd8 	.word	0x20000dd8
 80010f0:	200009b0 	.word	0x200009b0
 80010f4:	20000920 	.word	0x20000920
 80010f8:	200009b8 	.word	0x200009b8
 80010fc:	200009be 	.word	0x200009be

08001100 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001106:	f3ef 8310 	mrs	r3, PRIMASK
 800110a:	617b      	str	r3, [r7, #20]
  return(result);
 800110c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001114:	4b59      	ldr	r3, [pc, #356]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	22ca      	movs	r2, #202	; 0xca
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
 800111c:	4b57      	ldr	r3, [pc, #348]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2253      	movs	r2, #83	; 0x53
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	4b54      	ldr	r3, [pc, #336]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001132:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001134:	4b52      	ldr	r3, [pc, #328]	; (8001280 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800113c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001140:	4950      	ldr	r1, [pc, #320]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	330c      	adds	r3, #12
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d16e      	bne.n	8001234 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001156:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800115a:	494a      	ldr	r1, [pc, #296]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800116a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800116e:	4945      	ldr	r1, [pc, #276]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	3310      	adds	r3, #16
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001180:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04c      	beq.n	8001224 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800118a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800118e:	493d      	ldr	r1, [pc, #244]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	330d      	adds	r3, #13
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d124      	bne.n	80011ee <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80011a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fdf2 	bl	8000d94 <UnlinkTimer>
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f383 8810 	msr	PRIMASK, r3
}
 80011ba:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80011bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011c0:	4930      	ldr	r1, [pc, #192]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	3304      	adds	r3, #4
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f9b8 	bl	800154c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	22ca      	movs	r2, #202	; 0xca
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2253      	movs	r2, #83	; 0x53
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
 80011ec:	e012      	b.n	8001214 <HW_TS_RTC_Wakeup_Handler+0x114>
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f383 8810 	msr	PRIMASK, r3
}
 80011f8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80011fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f920 	bl	8001444 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	22ca      	movs	r2, #202	; 0xca
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2253      	movs	r2, #83	; 0x53
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	4619      	mov	r1, r3
 800121c:	69b8      	ldr	r0, [r7, #24]
 800121e:	f000 fa1b 	bl	8001658 <HW_TS_RTC_Int_AppNot>
 8001222:	e022      	b.n	800126a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001224:	f7ff fed2 	bl	8000fcc <RescheduleTimerList>
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f383 8810 	msr	PRIMASK, r3
}
 8001232:	e01a      	b.n	800126a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001234:	bf00      	nop
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f8      	beq.n	8001236 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001254:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001258:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f383 8810 	msr	PRIMASK, r3
}
 8001268:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001272:	bf00      	nop
}
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000dd8 	.word	0x20000dd8
 8001280:	200009b0 	.word	0x200009b0
 8001284:	20000920 	.word	0x20000920
 8001288:	200009b8 	.word	0x200009b8
 800128c:	58000800 	.word	0x58000800

08001290 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800129c:	4b5e      	ldr	r3, [pc, #376]	; (8001418 <HW_TS_Init+0x188>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	22ca      	movs	r2, #202	; 0xca
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <HW_TS_Init+0x188>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2253      	movs	r2, #83	; 0x53
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80012ac:	4b5b      	ldr	r3, [pc, #364]	; (800141c <HW_TS_Init+0x18c>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a5a      	ldr	r2, [pc, #360]	; (800141c <HW_TS_Init+0x18c>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <HW_TS_Init+0x18c>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f1c3 0304 	rsb	r3, r3, #4
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <HW_TS_Init+0x190>)
 80012cc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <HW_TS_Init+0x18c>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012d6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80012da:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	fa92 f2a2 	rbit	r2, r2
 80012e2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d101      	bne.n	80012f2 <HW_TS_Init+0x62>
  {
    return 32U;
 80012ee:	2220      	movs	r2, #32
 80012f0:	e003      	b.n	80012fa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	fab2 f282 	clz	r2, r2
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	40d3      	lsrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b48      	ldr	r3, [pc, #288]	; (8001424 <HW_TS_Init+0x194>)
 8001304:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <HW_TS_Init+0x18c>)
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	b29b      	uxth	r3, r3
 800130c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001310:	b29b      	uxth	r3, r3
 8001312:	3301      	adds	r3, #1
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HW_TS_Init+0x198>)
 8001318:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HW_TS_Init+0x198>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a40      	ldr	r2, [pc, #256]	; (8001424 <HW_TS_Init+0x194>)
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800132c:	4a3c      	ldr	r2, [pc, #240]	; (8001420 <HW_TS_Init+0x190>)
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	40d3      	lsrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800133a:	4293      	cmp	r3, r2
 800133c:	d904      	bls.n	8001348 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HW_TS_Init+0x19c>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	801a      	strh	r2, [r3, #0]
 8001346:	e003      	b.n	8001350 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <HW_TS_Init+0x19c>)
 800134e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001350:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001354:	f7ff fb9c 	bl	8000a90 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001358:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800135c:	f7ff fb84 	bl	8000a68 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d13d      	bne.n	80013e2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <HW_TS_Init+0x1a0>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HW_TS_Init+0x1a4>)
 800136e:	f04f 32ff 	mov.w	r2, #4294967295
 8001372:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001374:	2300      	movs	r3, #0
 8001376:	77fb      	strb	r3, [r7, #31]
 8001378:	e00c      	b.n	8001394 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800137a:	7ffa      	ldrb	r2, [r7, #31]
 800137c:	492e      	ldr	r1, [pc, #184]	; (8001438 <HW_TS_Init+0x1a8>)
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	330c      	adds	r3, #12
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	3301      	adds	r3, #1
 8001392:	77fb      	strb	r3, [r7, #31]
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	2b05      	cmp	r3, #5
 8001398:	d9ef      	bls.n	800137a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <HW_TS_Init+0x1ac>)
 800139c:	2206      	movs	r2, #6
 800139e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HW_TS_Init+0x188>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HW_TS_Init+0x188>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ae:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HW_TS_Init+0x188>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HW_TS_Init+0x188>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013c0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HW_TS_Init+0x1b0>)
 80013c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013c8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80013ca:	2003      	movs	r0, #3
 80013cc:	f001 fe93 	bl	80030f6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HW_TS_Init+0x188>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HW_TS_Init+0x188>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e009      	b.n	80013f6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HW_TS_Init+0x188>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f001 fe72 	bl	80030da <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HW_TS_Init+0x188>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	22ff      	movs	r2, #255	; 0xff
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80013fe:	2200      	movs	r2, #0
 8001400:	2103      	movs	r1, #3
 8001402:	2003      	movs	r0, #3
 8001404:	f001 fe27 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001408:	2003      	movs	r0, #3
 800140a:	f001 fe3e 	bl	800308a <HAL_NVIC_EnableIRQ>

  return;
 800140e:	bf00      	nop
}
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000dd8 	.word	0x20000dd8
 800141c:	40002800 	.word	0x40002800
 8001420:	200009b9 	.word	0x200009b9
 8001424:	200009ba 	.word	0x200009ba
 8001428:	200009bc 	.word	0x200009bc
 800142c:	200009be 	.word	0x200009be
 8001430:	200009b8 	.word	0x200009b8
 8001434:	200009b4 	.word	0x200009b4
 8001438:	20000920 	.word	0x20000920
 800143c:	200009b0 	.word	0x200009b0
 8001440:	58000800 	.word	0x58000800

08001444 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144e:	f3ef 8310 	mrs	r3, PRIMASK
 8001452:	60fb      	str	r3, [r7, #12]
  return(result);
 8001454:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800145c:	2003      	movs	r0, #3
 800145e:	f001 fe22 	bl	80030a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001462:	4b34      	ldr	r3, [pc, #208]	; (8001534 <HW_TS_Stop+0xf0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	22ca      	movs	r2, #202	; 0xca
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HW_TS_Stop+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2253      	movs	r2, #83	; 0x53
 8001470:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001472:	79fa      	ldrb	r2, [r7, #7]
 8001474:	4930      	ldr	r1, [pc, #192]	; (8001538 <HW_TS_Stop+0xf4>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	330c      	adds	r3, #12
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d142      	bne.n	8001510 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc80 	bl	8000d94 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <HW_TS_Stop+0xf8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	2b06      	cmp	r3, #6
 800149e:	d12f      	bne.n	8001500 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HW_TS_Stop+0xfc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ac:	d107      	bne.n	80014be <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80014ae:	bf00      	nop
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HW_TS_Stop+0xf0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f8      	bne.n	80014b0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HW_TS_Stop+0xf0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HW_TS_Stop+0xf0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014cc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80014ce:	bf00      	nop
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HW_TS_Stop+0xf0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f8      	beq.n	80014d0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HW_TS_Stop+0xf0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HW_TS_Stop+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014ee:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HW_TS_Stop+0x100>)
 80014f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014f6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80014f8:	2003      	movs	r0, #3
 80014fa:	f001 fdfc 	bl	80030f6 <HAL_NVIC_ClearPendingIRQ>
 80014fe:	e007      	b.n	8001510 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HW_TS_Stop+0x104>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	7cfa      	ldrb	r2, [r7, #19]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800150c:	f7ff fd5e 	bl	8000fcc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HW_TS_Stop+0xf0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001518:	2003      	movs	r0, #3
 800151a:	f001 fdb6 	bl	800308a <HAL_NVIC_EnableIRQ>
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f383 8810 	msr	PRIMASK, r3
}
 8001528:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800152a:	bf00      	nop
}
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000dd8 	.word	0x20000dd8
 8001538:	20000920 	.word	0x20000920
 800153c:	200009b0 	.word	0x200009b0
 8001540:	40002800 	.word	0x40002800
 8001544:	58000800 	.word	0x58000800
 8001548:	200009b1 	.word	0x200009b1

0800154c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001558:	79fa      	ldrb	r2, [r7, #7]
 800155a:	493b      	ldr	r1, [pc, #236]	; (8001648 <HW_TS_Start+0xfc>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	330c      	adds	r3, #12
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d103      	bne.n	8001578 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff66 	bl	8001444 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001578:	f3ef 8310 	mrs	r3, PRIMASK
 800157c:	60fb      	str	r3, [r7, #12]
  return(result);
 800157e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001582:	b672      	cpsid	i
}
 8001584:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001586:	2003      	movs	r0, #3
 8001588:	f001 fd8d 	bl	80030a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HW_TS_Start+0x100>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	22ca      	movs	r2, #202	; 0xca
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HW_TS_Start+0x100>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2253      	movs	r2, #83	; 0x53
 800159a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800159c:	79fa      	ldrb	r2, [r7, #7]
 800159e:	492a      	ldr	r1, [pc, #168]	; (8001648 <HW_TS_Start+0xfc>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	330c      	adds	r3, #12
 80015ac:	2202      	movs	r2, #2
 80015ae:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	4925      	ldr	r1, [pc, #148]	; (8001648 <HW_TS_Start+0xfc>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3308      	adds	r3, #8
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	4920      	ldr	r1, [pc, #128]	; (8001648 <HW_TS_Start+0xfc>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	3304      	adds	r3, #4
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb30 	bl	8000c40 <linkTimer>
 80015e0:	4603      	mov	r3, r0
 80015e2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HW_TS_Start+0x104>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HW_TS_Start+0x108>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	7c7a      	ldrb	r2, [r7, #17]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d002      	beq.n	80015fc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80015f6:	f7ff fce9 	bl	8000fcc <RescheduleTimerList>
 80015fa:	e013      	b.n	8001624 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	4912      	ldr	r1, [pc, #72]	; (8001648 <HW_TS_Start+0xfc>)
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3308      	adds	r3, #8
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	8a7b      	ldrh	r3, [r7, #18]
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	1ac9      	subs	r1, r1, r3
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <HW_TS_Start+0xfc>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4403      	add	r3, r0
 8001620:	3308      	adds	r3, #8
 8001622:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HW_TS_Start+0x100>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	22ff      	movs	r2, #255	; 0xff
 800162a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800162c:	2003      	movs	r0, #3
 800162e:	f001 fd2c 	bl	800308a <HAL_NVIC_EnableIRQ>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f383 8810 	msr	PRIMASK, r3
}
 800163c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800163e:	bf00      	nop
}
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000920 	.word	0x20000920
 800164c:	20000dd8 	.word	0x20000dd8
 8001650:	200009b0 	.word	0x200009b0
 8001654:	200009b1 	.word	0x200009b1

08001658 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	460b      	mov	r3, r1
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4798      	blx	r3

  return;
 800166a:	bf00      	nop
}
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <LL_RCC_LSE_SetDriveCapability>:
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	f023 0218 	bic.w	r2, r3, #24
 8001686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_AHB1_GRP1_EnableClock>:
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_AHB2_GRP1_EnableClock>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001708:	f001 facc 	bl	8002ca4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800170c:	f7fe ffda 	bl	80006c4 <MX_APPE_Config>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001710:	f000 f862 	bl	80017d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001714:	f000 f8c2 	bl	800189c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001718:	f000 f8e0 	bl	80018dc <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f000 f9c4 	bl	8001aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001720:	f000 f9a8 	bl	8001a74 <MX_DMA_Init>
  MX_SPI2_Init();
 8001724:	f000 f968 	bl	80019f8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001728:	f000 f928 	bl	800197c <MX_SPI1_Init>
  MX_RTC_Init();
 800172c:	f000 f8f2 	bl	8001914 <MX_RTC_Init>
  MX_RF_Init();
 8001730:	f000 f8e8 	bl	8001904 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  MCP2515_SPI1_CanInit();
 8001734:	f001 f932 	bl	800299c <MCP2515_SPI1_CanInit>
  MCP2515_SPI2_CanInit();
 8001738:	f001 fa76 	bl	8002c28 <MCP2515_SPI2_CanInit>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800173c:	f7fe ffd0 	bl	80006e0 <MX_APPE_Init>
  //EMS_data Master_EMS;

  while (1)
  {
    // Yang Junyoung
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f008 fc40 	bl	8009fc8 <UTIL_SEQ_Run>

    /* Read value from SW2 and SW3 to get open and close door signal */
    SW2_CloseButton_Scan();
 8001748:	f000 fa2a 	bl	8001ba0 <SW2_CloseButton_Scan>
    SW3_OpenButton_Scan();
 800174c:	f000 fa84 	bl	8001c58 <SW3_OpenButton_Scan>

  #if(TEST_FUNCTION == RTX_FUNCTION)
    /*  READ  */
    /* Read the interrupt flag from both SPI channels*/
    MCP2515_SPI1_ReadReg(MCP_CANINTF, &can_intf, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	491b      	ldr	r1, [pc, #108]	; (80017c0 <main+0xbc>)
 8001754:	202c      	movs	r0, #44	; 0x2c
 8001756:	f001 f838 	bl	80027ca <MCP2515_SPI1_ReadReg>
    MCP2515_SPI2_ReadReg(MCP_CANINTF, &can_intf2, 1);
 800175a:	2201      	movs	r2, #1
 800175c:	4919      	ldr	r1, [pc, #100]	; (80017c4 <main+0xc0>)
 800175e:	202c      	movs	r0, #44	; 0x2c
 8001760:	f001 f972 	bl	8002a48 <MCP2515_SPI2_ReadReg>

   /* The data flag ensure the */
  //  if(!data_flag) {
    // If the interrupt for RX0B buffer is full -> extract the data
      if ((can_intf & (0x01))) {
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <main+0xbc>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d015      	beq.n	800179c <main+0x98>
          base_adr = 0x66;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <main+0xc4>)
 8001772:	2266      	movs	r2, #102	; 0x66
 8001774:	701a      	strb	r2, [r3, #0]
          rx_done++;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <main+0xc8>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	3301      	adds	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <main+0xc8>)
 8001782:	801a      	strh	r2, [r3, #0]
      // Read the high-level and low-level address extracted from the CAN ID
        Read_CAN_ID();
 8001784:	f000 fd08 	bl	8002198 <Read_CAN_ID>

        Read_RXdata(&rx_id, &base_adr);
 8001788:	490f      	ldr	r1, [pc, #60]	; (80017c8 <main+0xc4>)
 800178a:	4811      	ldr	r0, [pc, #68]	; (80017d0 <main+0xcc>)
 800178c:	f000 fd48 	bl	8002220 <Read_RXdata>
          Read_TXdata(SPI_CHANNEL_2);
          CAN_rx++;
		#endif

      // Clear the interrupt flags
        MCP2515_SPI1_RegModify(MCP_CANINTF, 0xFF, 0x00);
 8001790:	2200      	movs	r2, #0
 8001792:	21ff      	movs	r1, #255	; 0xff
 8001794:	202c      	movs	r0, #44	; 0x2c
 8001796:	f001 f870 	bl	800287a <MCP2515_SPI1_RegModify>
 800179a:	e7d1      	b.n	8001740 <main+0x3c>
      }
	  #if(EMS_TYPE == MASTER_EMS)
		  else if ((can_intf2 & (0x01))) {
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <main+0xc0>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0cb      	beq.n	8001740 <main+0x3c>
			  Read_CAN2_ID();
 80017a8:	f000 fd18 	bl	80021dc <Read_CAN2_ID>
			  Read_Slave1_RXdata(&rx_id2, &base_adr);
 80017ac:	4906      	ldr	r1, [pc, #24]	; (80017c8 <main+0xc4>)
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <main+0xd0>)
 80017b0:	f000 fe50 	bl	8002454 <Read_Slave1_RXdata>
			  MCP2515_SPI2_RegModify(MCP_CANINTF, 0xFF, 0x00);
 80017b4:	2200      	movs	r2, #0
 80017b6:	21ff      	movs	r1, #255	; 0xff
 80017b8:	202c      	movs	r0, #44	; 0x2c
 80017ba:	f001 f9a1 	bl	8002b00 <MCP2515_SPI2_RegModify>
  {
 80017be:	e7bf      	b.n	8001740 <main+0x3c>
 80017c0:	200009f0 	.word	0x200009f0
 80017c4:	200009f1 	.word	0x200009f1
 80017c8:	200009ea 	.word	0x200009ea
 80017cc:	200009e0 	.word	0x200009e0
 80017d0:	200009e6 	.word	0x200009e6
 80017d4:	200009e8 	.word	0x200009e8

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b09a      	sub	sp, #104	; 0x68
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	2248      	movs	r2, #72	; 0x48
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f008 fe2c 	bl	800a444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	615a      	str	r2, [r3, #20]
 80017fc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017fe:	f002 f83f 	bl	8003880 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001802:	2010      	movs	r0, #16
 8001804:	f7ff ff35 	bl	8001672 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <SystemClock_Config+0xc0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <SystemClock_Config+0xc0>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <SystemClock_Config+0xc0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001824:	2327      	movs	r3, #39	; 0x27
 8001826:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800182e:	2301      	movs	r3, #1
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001838:	2301      	movs	r3, #1
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183c:	2340      	movs	r3, #64	; 0x40
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001840:	2300      	movs	r3, #0
 8001842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001844:	23a0      	movs	r3, #160	; 0xa0
 8001846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001848:	2300      	movs	r3, #0
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fb91 	bl	8003f78 <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800185c:	f000 fa58 	bl	8001d10 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001860:	236f      	movs	r3, #111	; 0x6f
 8001862:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2101      	movs	r1, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f002 feed 	bl	8004660 <HAL_RCC_ClockConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800188c:	f000 fa40 	bl	8001d10 <Error_Handler>
  }
}
 8001890:	bf00      	nop
 8001892:	3768      	adds	r7, #104	; 0x68
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	58000400 	.word	0x58000400

0800189c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	; 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2250      	movs	r2, #80	; 0x50
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f008 fdcb 	bl	800a444 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80018ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018b2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80018b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80018ba:	2300      	movs	r3, #0
 80018bc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80018be:	2310      	movs	r3, #16
 80018c0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c2:	463b      	mov	r3, r7
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 fadc 	bl	8004e82 <HAL_RCCEx_PeriphCLKConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80018d0:	f000 fa1e 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */


  /* USER CODE END Smps */
}
 80018d4:	bf00      	nop
 80018d6:	3750      	adds	r7, #80	; 0x50
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN IPCC_Init 1 */


  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_IPCC_Init+0x20>)
 80018e2:	4a07      	ldr	r2, [pc, #28]	; (8001900 <MX_IPCC_Init+0x24>)
 80018e4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_IPCC_Init+0x20>)
 80018e8:	f001 ff44 	bl	8003774 <HAL_IPCC_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80018f2:	f000 fa0d 	bl	8001d10 <Error_Handler>
  /* USER CODE BEGIN IPCC_Init 2 */


  /* USER CODE END IPCC_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000c40 	.word	0x20000c40
 8001900:	58000c00 	.word	0x58000c00

08001904 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RF_Init 2 */


  /* USER CODE END RF_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_RTC_Init+0x60>)
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <MX_RTC_Init+0x64>)
 800191c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_RTC_Init+0x60>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_RTC_Init+0x60>)
 8001926:	220f      	movs	r2, #15
 8001928:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_RTC_Init+0x60>)
 800192c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001930:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <MX_RTC_Init+0x60>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_RTC_Init+0x60>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <MX_RTC_Init+0x60>)
 8001940:	2200      	movs	r2, #0
 8001942:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_RTC_Init+0x60>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800194a:	480a      	ldr	r0, [pc, #40]	; (8001974 <MX_RTC_Init+0x60>)
 800194c:	f003 fd20 	bl	8005390 <HAL_RTC_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001956:	f000 f9db 	bl	8001d10 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_RTC_Init+0x60>)
 8001960:	f003 fe16 	bl	8005590 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800196a:	f000 f9d1 	bl	8001d10 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000dd8 	.word	0x20000dd8
 8001978:	40002800 	.word	0x40002800

0800197c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 1 */


  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <MX_SPI1_Init+0x74>)
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <MX_SPI1_Init+0x78>)
 8001984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <MX_SPI1_Init+0x74>)
 8001988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800198c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <MX_SPI1_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_SPI1_Init+0x74>)
 8001996:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800199a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_SPI1_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019b2:	2228      	movs	r2, #40	; 0x28
 80019b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019ca:	2207      	movs	r2, #7
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019dc:	f003 fe94 	bl	8005708 <HAL_SPI_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019e6:	f000 f993 	bl	8001d10 <Error_Handler>
  /* USER CODE BEGIN SPI1_Init 2 */


  /* USER CODE END SPI1_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000e3c 	.word	0x20000e3c
 80019f4:	40013000 	.word	0x40013000

080019f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 1 */


  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_SPI2_Init+0x74>)
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <MX_SPI2_Init+0x78>)
 8001a00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a2e:	2228      	movs	r2, #40	; 0x28
 8001a30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a46:	2207      	movs	r2, #7
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_SPI2_Init+0x74>)
 8001a58:	f003 fe56 	bl	8005708 <HAL_SPI_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a62:	f000 f955 	bl	8001d10 <Error_Handler>
  /* USER CODE BEGIN SPI2_Init 2 */


  /* USER CODE END SPI2_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000ba4 	.word	0x20000ba4
 8001a70:	40003800 	.word	0x40003800

08001a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a78:	2004      	movs	r0, #4
 8001a7a:	f7ff fe10 	bl	800169e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff fe0d 	bl	800169e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	200b      	movs	r0, #11
 8001a8a:	f001 fae4 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a8e:	200b      	movs	r0, #11
 8001a90:	f001 fafb 	bl	800308a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	200c      	movs	r0, #12
 8001a9a:	f001 fadc 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a9e:	200c      	movs	r0, #12
 8001aa0:	f001 faf3 	bl	800308a <HAL_NVIC_EnableIRQ>

}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abc:	2004      	movs	r0, #4
 8001abe:	f7ff fe07 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7ff fe04 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f7ff fe01 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ace:	2008      	movs	r0, #8
 8001ad0:	f7ff fdfe 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|EMS_CS_Pin, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ade:	f001 fe0d 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_12|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f241 0123 	movw	r1, #4131	; 0x1023
 8001ae8:	482a      	ldr	r0, [pc, #168]	; (8001b94 <MX_GPIO_Init+0xec>)
 8001aea:	f001 fe07 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001aee:	2310      	movs	r3, #16
 8001af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f001 fc71 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EMS_CS_Pin */
  GPIO_InitStruct.Pin = EMS_CS_Pin;
 8001b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EMS_CS_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f001 fc62 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4817      	ldr	r0, [pc, #92]	; (8001b98 <MX_GPIO_Init+0xf0>)
 8001b3a:	f001 fc57 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8001b3e:	2323      	movs	r3, #35	; 0x23
 8001b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4810      	ldr	r0, [pc, #64]	; (8001b94 <MX_GPIO_Init+0xec>)
 8001b54:	f001 fc4a 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4809      	ldr	r0, [pc, #36]	; (8001b94 <MX_GPIO_Init+0xec>)
 8001b70:	f001 fc3c 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_3_Pin;
 8001b74:	2303      	movs	r3, #3
 8001b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_GPIO_Init+0xf4>)
 8001b86:	f001 fc31 	bl	80033ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	48000400 	.word	0x48000400
 8001b98:	48000800 	.word	0x48000800
 8001b9c:	48000c00 	.word	0x48000c00

08001ba0 <SW2_CloseButton_Scan>:

/* USER CODE BEGIN 4 */
int SW2_CloseButton_Scan(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
    /* Button SW2 debounce*/
      int reading = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4821      	ldr	r0, [pc, #132]	; (8001c30 <SW2_CloseButton_Scan+0x90>)
 8001baa:	f001 fd8f 	bl	80036cc <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	607b      	str	r3, [r7, #4]
      // (i.e. the input went from LOW to HIGH), and you've waited long enough
      // since the last press to ignore any noise:


      // If the switch changed, due to noise or pressing:
      if (reading != lastButtonState2) {
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <SW2_CloseButton_Scan+0x94>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d004      	beq.n	8001bc6 <SW2_CloseButton_Scan+0x26>
        // reset the debouncing timer
        lastDebounceTime2 = HAL_GetTick();
 8001bbc:	f001 f8e0 	bl	8002d80 <HAL_GetTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <SW2_CloseButton_Scan+0x98>)
 8001bc4:	6013      	str	r3, [r2, #0]
      }


      if ((HAL_GetTick() - lastDebounceTime2) > debounceDelay) {
 8001bc6:	f001 f8db 	bl	8002d80 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <SW2_CloseButton_Scan+0x98>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	1ad2      	subs	r2, r2, r3
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <SW2_CloseButton_Scan+0x9c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d920      	bls.n	8001c1c <SW2_CloseButton_Scan+0x7c>
        // whatever the reading is at, it's been there for longer than the debounce
        // delay, so take it as the actual current state:


        // if the button state has changed:
        if (reading != buttonState2) {
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <SW2_CloseButton_Scan+0xa0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d01b      	beq.n	8001c1c <SW2_CloseButton_Scan+0x7c>
          buttonState2 = reading;
 8001be4:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <SW2_CloseButton_Scan+0xa0>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]


          // only toggle the LED if the new button state is HIGH
        if (buttonState2 == 1) {
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <SW2_CloseButton_Scan+0xa0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d114      	bne.n	8001c1c <SW2_CloseButton_Scan+0x7c>
          sw2_count++;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <SW2_CloseButton_Scan+0xa4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <SW2_CloseButton_Scan+0xa4>)
 8001bfa:	6013      	str	r3, [r2, #0]
          tx_close_door = 1;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <SW2_CloseButton_Scan+0xa8>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
          tx_open_door = 0;
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <SW2_CloseButton_Scan+0xac>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
          send = 1;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <SW2_CloseButton_Scan+0xb0>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
          if (sw2_count == 2) {
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <SW2_CloseButton_Scan+0xa4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d102      	bne.n	8001c1c <SW2_CloseButton_Scan+0x7c>
            start_tx = 1;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <SW2_CloseButton_Scan+0xb4>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
            }
          }
        }
      }
      // save the reading. Next time through the loop, it'll be the lastButtonState:
      lastButtonState2 = reading;
 8001c1c:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <SW2_CloseButton_Scan+0x94>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
    return tx_close_door;
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <SW2_CloseButton_Scan+0xa8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	48000c00 	.word	0x48000c00
 8001c34:	20000008 	.word	0x20000008
 8001c38:	200009c0 	.word	0x200009c0
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	20000cdc 	.word	0x20000cdc
 8001c44:	200009c8 	.word	0x200009c8
 8001c48:	200009d0 	.word	0x200009d0
 8001c4c:	200009d4 	.word	0x200009d4
 8001c50:	200009d8 	.word	0x200009d8
 8001c54:	200009dc 	.word	0x200009dc

08001c58 <SW3_OpenButton_Scan>:


int SW3_OpenButton_Scan(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
    /* Button SW3 debounce*/
      int reading = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8001c5e:	2102      	movs	r1, #2
 8001c60:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <SW3_OpenButton_Scan+0x90>)
 8001c62:	f001 fd33 	bl	80036cc <HAL_GPIO_ReadPin>
 8001c66:	4603      	mov	r3, r0
 8001c68:	607b      	str	r3, [r7, #4]
      // (i.e. the input went from LOW to HIGH), and you've waited long enough
      // since the last press to ignore any noise:


      // If the switch changed, due to noise or pressing:
      if (reading != lastButtonState3) {
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <SW3_OpenButton_Scan+0x94>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d004      	beq.n	8001c7e <SW3_OpenButton_Scan+0x26>
        // reset the debouncing timer
        lastDebounceTime3 = HAL_GetTick();
 8001c74:	f001 f884 	bl	8002d80 <HAL_GetTick>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <SW3_OpenButton_Scan+0x98>)
 8001c7c:	6013      	str	r3, [r2, #0]
      }


      if ((HAL_GetTick() - lastDebounceTime3) > debounceDelay) {
 8001c7e:	f001 f87f 	bl	8002d80 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <SW3_OpenButton_Scan+0x98>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1ad2      	subs	r2, r2, r3
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <SW3_OpenButton_Scan+0x9c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d920      	bls.n	8001cd4 <SW3_OpenButton_Scan+0x7c>
        // whatever the reading is at, it's been there for longer than the debounce
        // delay, so take it as the actual current state:


        // if the button state has changed:
        if (reading != buttonState3) {
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <SW3_OpenButton_Scan+0xa0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d01b      	beq.n	8001cd4 <SW3_OpenButton_Scan+0x7c>
          buttonState3 = reading;
 8001c9c:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <SW3_OpenButton_Scan+0xa0>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]


          // only toggle the LED if the new button state is HIGH
        if (buttonState3 == 1) {
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <SW3_OpenButton_Scan+0xa0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d114      	bne.n	8001cd4 <SW3_OpenButton_Scan+0x7c>
          sw3_count++;
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <SW3_OpenButton_Scan+0xa4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <SW3_OpenButton_Scan+0xa4>)
 8001cb2:	6013      	str	r3, [r2, #0]
          tx_close_door = 0;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <SW3_OpenButton_Scan+0xa8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
          tx_open_door = 1;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <SW3_OpenButton_Scan+0xac>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
          send = 1;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <SW3_OpenButton_Scan+0xb0>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
          if (sw3_count == 2) {
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <SW3_OpenButton_Scan+0xa4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d102      	bne.n	8001cd4 <SW3_OpenButton_Scan+0x7c>
              start_tx = 1;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <SW3_OpenButton_Scan+0xb4>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
      // save the reading. Next time through the loop, it'll be the lastButtonState:
      lastButtonState3 = reading;
 8001cd4:	4a05      	ldr	r2, [pc, #20]	; (8001cec <SW3_OpenButton_Scan+0x94>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
    return tx_open_door;
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <SW3_OpenButton_Scan+0xac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	48000c00 	.word	0x48000c00
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	200009c4 	.word	0x200009c4
 8001cf4:	20000010 	.word	0x20000010
 8001cf8:	20000ea0 	.word	0x20000ea0
 8001cfc:	200009cc 	.word	0x200009cc
 8001d00:	200009d0 	.word	0x200009d0
 8001d04:	200009d4 	.word	0x200009d4
 8001d08:	200009d8 	.word	0x200009d8
 8001d0c:	200009dc 	.word	0x200009dc

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <Error_Handler+0x8>

08001d1a <LL_RCC_EnableRTC>:
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_AHB2_GRP1_EnableClock>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d60:	68fb      	ldr	r3, [r7, #12]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_AHB3_GRP1_EnableClock>:
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_APB1_GRP1_EnableClock>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_APB2_GRP1_EnableClock>:
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001e08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e0c:	f7ff ffaf 	bl	8001d6e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	202e      	movs	r0, #46	; 0x2e
 8001e16:	f001 f91e 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001e1a:	202e      	movs	r0, #46	; 0x2e
 8001e1c:	f001 f935 	bl	800308a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <HAL_IPCC_MspInit+0x44>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d113      	bne.n	8001e5e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001e36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e3a:	f7ff ff98 	bl	8001d6e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	202c      	movs	r0, #44	; 0x2c
 8001e44:	f001 f907 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e48:	202c      	movs	r0, #44	; 0x2c
 8001e4a:	f001 f91e 	bl	800308a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	202d      	movs	r0, #45	; 0x2d
 8001e54:	f001 f8ff 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e58:	202d      	movs	r0, #45	; 0x2d
 8001e5a:	f001 f916 	bl	800308a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	58000c00 	.word	0x58000c00

08001e6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b096      	sub	sp, #88	; 0x58
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	2250      	movs	r2, #80	; 0x50
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f008 fae1 	bl	800a444 <memset>
  if(hrtc->Instance==RTC)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <HAL_RTC_MspInit+0x64>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d11d      	bne.n	8001ec8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e90:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e96:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fff0 	bl	8004e82 <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ea8:	f7ff ff32 	bl	8001d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001eac:	f7ff ff35 	bl	8001d1a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001eb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001eb4:	f7ff ff74 	bl	8001da0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f001 f8ca 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001ec2:	2003      	movs	r0, #3
 8001ec4:	f001 f8e1 	bl	800308a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ec8:	bf00      	nop
 8001eca:	3758      	adds	r7, #88	; 0x58
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40002800 	.word	0x40002800

08001ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_SPI_MspInit+0xb8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d120      	bne.n	8001f38 <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ef6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001efa:	f7ff ff6a 	bl	8001dd2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2001      	movs	r0, #1
 8001f00:	f7ff ff1c 	bl	8001d3c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f04:	23e0      	movs	r3, #224	; 0xe0
 8001f06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f14:	2305      	movs	r3, #5
 8001f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f22:	f001 fa63 	bl	80033ec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2022      	movs	r0, #34	; 0x22
 8001f2c:	f001 f893 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f30:	2022      	movs	r0, #34	; 0x22
 8001f32:	f001 f8aa 	bl	800308a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f36:	e024      	b.n	8001f82 <HAL_SPI_MspInit+0xae>
  else if(hspi->Instance==SPI2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_SPI_MspInit+0xbc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d11f      	bne.n	8001f82 <HAL_SPI_MspInit+0xae>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f46:	f7ff ff2b 	bl	8001da0 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f7ff fef6 	bl	8001d3c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f50:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f62:	2305      	movs	r3, #5
 8001f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4809      	ldr	r0, [pc, #36]	; (8001f94 <HAL_SPI_MspInit+0xc0>)
 8001f6e:	f001 fa3d 	bl	80033ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	2023      	movs	r0, #35	; 0x23
 8001f78:	f001 f86d 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f7c:	2023      	movs	r0, #35	; 0x23
 8001f7e:	f001 f884 	bl	800308a <HAL_NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40013000 	.word	0x40013000
 8001f90:	40003800 	.word	0x40003800
 8001f94:	48000400 	.word	0x48000400

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <NMI_Handler+0x4>

08001f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler+0x4>

08001faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe4:	f000 feb8 	bl	8002d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001ff0:	f7ff f886 	bl	8001100 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <DMA1_Channel1_IRQHandler+0x10>)
 8001ffe:	f001 f946 	bl	800328e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000ce4 	.word	0x20000ce4

0800200c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <DMA1_Channel2_IRQHandler+0x10>)
 8002012:	f001 f93c 	bl	800328e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000c7c 	.word	0x20000c7c

08002020 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <SPI1_IRQHandler+0x10>)
 8002026:	f004 f8c3 	bl	80061b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000e3c 	.word	0x20000e3c

08002034 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <SPI2_IRQHandler+0x10>)
 800203a:	f004 f8b9 	bl	80061b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000ba4 	.word	0x20000ba4

08002048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <USART1_IRQHandler+0x10>)
 800204e:	f004 fb7f 	bl	8006750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000d44 	.word	0x20000d44

0800205c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002060:	f007 fe32 	bl	8009cc8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800206c:	f007 fe62 	bl	8009d34 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002078:	f001 fb58 	bl	800372c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <SystemInit+0x98>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	4a23      	ldr	r2, [pc, #140]	; (8002118 <SystemInit+0x98>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80020ac:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <SystemInit+0x9c>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ca:	f023 0305 	bic.w	r3, r3, #5
 80020ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ea:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <SystemInit+0xa0>)
 80020ec:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80020ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <SystemInit+0xa0>)
 80020f4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00
 800211c:	faf6fefb 	.word	0xfaf6fefb
 8002120:	22041000 	.word	0x22041000

08002124 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002124:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002126:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002128:	3304      	adds	r3, #4

0800212a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800212e:	d3f9      	bcc.n	8002124 <CopyDataInit>
  bx lr
 8002130:	4770      	bx	lr

08002132 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002132:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002134:	3004      	adds	r0, #4

08002136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002136:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002138:	d3fb      	bcc.n	8002132 <FillZerobss>
  bx lr
 800213a:	4770      	bx	lr

0800213c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800213e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002140:	f7ff ff9e 	bl	8002080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <LoopForever+0x6>)
 8002146:	490c      	ldr	r1, [pc, #48]	; (8002178 <LoopForever+0xa>)
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <LoopForever+0xe>)
 800214a:	2300      	movs	r3, #0
 800214c:	f7ff ffed 	bl	800212a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002150:	480b      	ldr	r0, [pc, #44]	; (8002180 <LoopForever+0x12>)
 8002152:	490c      	ldr	r1, [pc, #48]	; (8002184 <LoopForever+0x16>)
 8002154:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <LoopForever+0x1a>)
 8002156:	2300      	movs	r3, #0
 8002158:	f7ff ffe7 	bl	800212a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800215c:	480b      	ldr	r0, [pc, #44]	; (800218c <LoopForever+0x1e>)
 800215e:	490c      	ldr	r1, [pc, #48]	; (8002190 <LoopForever+0x22>)
 8002160:	2300      	movs	r3, #0
 8002162:	f7ff ffe8 	bl	8002136 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002166:	f008 f975 	bl	800a454 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800216a:	f7ff facb 	bl	8001704 <main>

0800216e <LoopForever>:

LoopForever:
  b LoopForever
 800216e:	e7fe      	b.n	800216e <LoopForever>
  ldr   r0, =_estack
 8002170:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002174:	20000008 	.word	0x20000008
 8002178:	20000034 	.word	0x20000034
 800217c:	0800a790 	.word	0x0800a790
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002180:	200301e3 	.word	0x200301e3
 8002184:	200301e3 	.word	0x200301e3
 8002188:	0800b085 	.word	0x0800b085
  INIT_BSS _sbss, _ebss
 800218c:	20000904 	.word	0x20000904
 8002190:	200010e0 	.word	0x200010e0

08002194 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002194:	e7fe      	b.n	8002194 <ADC1_IRQHandler>
	...

08002198 <Read_CAN_ID>:
extern uint8 TxBufferData_SPI1[8];
extern uint8 TxBufferData_SPI2[8];
extern volatile uint8 rxLength;
extern volatile uint8 rxLength2;

void Read_CAN_ID(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
    MCP2515_SPI1_ReadReg(0x61, &rx_sidh, 1);
 800219c:	2201      	movs	r2, #1
 800219e:	490c      	ldr	r1, [pc, #48]	; (80021d0 <Read_CAN_ID+0x38>)
 80021a0:	2061      	movs	r0, #97	; 0x61
 80021a2:	f000 fb12 	bl	80027ca <MCP2515_SPI1_ReadReg>
    MCP2515_SPI1_ReadReg(0x62, &rx_sidl, 1);
 80021a6:	2201      	movs	r2, #1
 80021a8:	490a      	ldr	r1, [pc, #40]	; (80021d4 <Read_CAN_ID+0x3c>)
 80021aa:	2062      	movs	r0, #98	; 0x62
 80021ac:	f000 fb0d 	bl	80027ca <MCP2515_SPI1_ReadReg>
    rx_id = (rx_sidh << 3) | (rx_sidl >> 5);
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <Read_CAN_ID+0x38>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <Read_CAN_ID+0x3c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <Read_CAN_ID+0x40>)
 80021ca:	801a      	strh	r2, [r3, #0]
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200009e2 	.word	0x200009e2
 80021d4:	200009e3 	.word	0x200009e3
 80021d8:	200009e6 	.word	0x200009e6

080021dc <Read_CAN2_ID>:

void Read_CAN2_ID(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
    MCP2515_SPI2_ReadReg(0x61, &rx_sidh2, 1);
 80021e0:	2201      	movs	r2, #1
 80021e2:	490c      	ldr	r1, [pc, #48]	; (8002214 <Read_CAN2_ID+0x38>)
 80021e4:	2061      	movs	r0, #97	; 0x61
 80021e6:	f000 fc2f 	bl	8002a48 <MCP2515_SPI2_ReadReg>
    MCP2515_SPI2_ReadReg(0x62, &rx_sidl2, 1);
 80021ea:	2201      	movs	r2, #1
 80021ec:	490a      	ldr	r1, [pc, #40]	; (8002218 <Read_CAN2_ID+0x3c>)
 80021ee:	2062      	movs	r0, #98	; 0x62
 80021f0:	f000 fc2a 	bl	8002a48 <MCP2515_SPI2_ReadReg>
    rx_id2 = (rx_sidh2 << 3) | (rx_sidl2 >> 5);
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <Read_CAN2_ID+0x38>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <Read_CAN2_ID+0x3c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	b2db      	uxtb	r3, r3
 8002204:	b21b      	sxth	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b21b      	sxth	r3, r3
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <Read_CAN2_ID+0x40>)
 800220e:	801a      	strh	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	200009e4 	.word	0x200009e4
 8002218:	200009e5 	.word	0x200009e5
 800221c:	200009e8 	.word	0x200009e8

08002220 <Read_RXdata>:
extern EMS_data Slave_EMS_1;
extern volatile uint16 send_rx;
extern volatile int ID_481_flag;
extern volatile int rx_flag;

void Read_RXdata(uint16* rx_id, uint8* base_adr) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
	 MCP2515_SPI1_ReadReg(0x65, &rxLength, 1);
 800222a:	2201      	movs	r2, #1
 800222c:	4986      	ldr	r1, [pc, #536]	; (8002448 <Read_RXdata+0x228>)
 800222e:	2065      	movs	r0, #101	; 0x65
 8002230:	f000 facb 	bl	80027ca <MCP2515_SPI1_ReadReg>
    switch(*rx_id) 
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	f240 628b 	movw	r2, #1675	; 0x68b
 800223c:	4293      	cmp	r3, r2
 800223e:	f000 80d5 	beq.w	80023ec <Read_RXdata+0x1cc>
 8002242:	f240 628b 	movw	r2, #1675	; 0x68b
 8002246:	4293      	cmp	r3, r2
 8002248:	f300 80f4 	bgt.w	8002434 <Read_RXdata+0x214>
 800224c:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8002250:	d072      	beq.n	8002338 <Read_RXdata+0x118>
 8002252:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8002256:	f300 80ed 	bgt.w	8002434 <Read_RXdata+0x214>
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	d004      	beq.n	800226a <Read_RXdata+0x4a>
 8002260:	f240 4281 	movw	r2, #1153	; 0x481
 8002264:	4293      	cmp	r3, r2
 8002266:	d02a      	beq.n	80022be <Read_RXdata+0x9e>
            }
            getEMStime_Master();
        break;

        default:
        break;
 8002268:	e0e4      	b.n	8002434 <Read_RXdata+0x214>
            for (int i = 0; i < rxLength; i++) {
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e014      	b.n	800229a <Read_RXdata+0x7a>
              Master.ID_400_buffer[i] = 0x00;
 8002270:	4a76      	ldr	r2, [pc, #472]	; (800244c <Read_RXdata+0x22c>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
              MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_400_buffer[i], 1);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4413      	add	r3, r2
 8002284:	b2d8      	uxtb	r0, r3
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4a70      	ldr	r2, [pc, #448]	; (800244c <Read_RXdata+0x22c>)
 800228a:	4413      	add	r3, r2
 800228c:	2201      	movs	r2, #1
 800228e:	4619      	mov	r1, r3
 8002290:	f000 fa9b 	bl	80027ca <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3301      	adds	r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	4b6b      	ldr	r3, [pc, #428]	; (8002448 <Read_RXdata+0x228>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4293      	cmp	r3, r2
 80022a6:	dbe3      	blt.n	8002270 <Read_RXdata+0x50>
			if(Master.ID_400_buffer[0] == 0x40) {
 80022a8:	4b68      	ldr	r3, [pc, #416]	; (800244c <Read_RXdata+0x22c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b40      	cmp	r3, #64	; 0x40
 80022ae:	f040 80c3 	bne.w	8002438 <Read_RXdata+0x218>
				Master_EMS.curren_floor = Master.ID_400_buffer[1];
 80022b2:	4b66      	ldr	r3, [pc, #408]	; (800244c <Read_RXdata+0x22c>)
 80022b4:	785b      	ldrb	r3, [r3, #1]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b65      	ldr	r3, [pc, #404]	; (8002450 <Read_RXdata+0x230>)
 80022ba:	61da      	str	r2, [r3, #28]
        break;
 80022bc:	e0bc      	b.n	8002438 <Read_RXdata+0x218>
            for (int i = 0; i < rxLength; i++) {
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	e010      	b.n	80022e6 <Read_RXdata+0xc6>
                MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_481_buffer[i], 1);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	b2d8      	uxtb	r0, r3
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	3308      	adds	r3, #8
 80022d4:	4a5d      	ldr	r2, [pc, #372]	; (800244c <Read_RXdata+0x22c>)
 80022d6:	4413      	add	r3, r2
 80022d8:	2201      	movs	r2, #1
 80022da:	4619      	mov	r1, r3
 80022dc:	f000 fa75 	bl	80027ca <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	4b58      	ldr	r3, [pc, #352]	; (8002448 <Read_RXdata+0x228>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4293      	cmp	r3, r2
 80022f2:	dbe7      	blt.n	80022c4 <Read_RXdata+0xa4>
            for(int j = rxLength; j < 8; j++) {
 80022f4:	4b54      	ldr	r3, [pc, #336]	; (8002448 <Read_RXdata+0x228>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e008      	b.n	8002310 <Read_RXdata+0xf0>
                Master.ID_481_buffer[j] = 0x00;
 80022fe:	4a53      	ldr	r2, [pc, #332]	; (800244c <Read_RXdata+0x22c>)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	4413      	add	r3, r2
 8002304:	3308      	adds	r3, #8
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength; j < 8; j++) {
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	3301      	adds	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b07      	cmp	r3, #7
 8002314:	ddf3      	ble.n	80022fe <Read_RXdata+0xde>
			if(Master.ID_481_buffer[0] == 0x0E) {
 8002316:	4b4d      	ldr	r3, [pc, #308]	; (800244c <Read_RXdata+0x22c>)
 8002318:	7a1b      	ldrb	r3, [r3, #8]
 800231a:	2b0e      	cmp	r3, #14
 800231c:	f040 808e 	bne.w	800243c <Read_RXdata+0x21c>
				if(Master.ID_481_buffer[5] == 0x00) {
 8002320:	4b4a      	ldr	r3, [pc, #296]	; (800244c <Read_RXdata+0x22c>)
 8002322:	7b5b      	ldrb	r3, [r3, #13]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <Read_RXdata+0x110>
					Master_EMS.door_status = DOOR_OPENED;
 8002328:	4b49      	ldr	r3, [pc, #292]	; (8002450 <Read_RXdata+0x230>)
 800232a:	2200      	movs	r2, #0
 800232c:	621a      	str	r2, [r3, #32]
        break;
 800232e:	e085      	b.n	800243c <Read_RXdata+0x21c>
					Master_EMS.door_status = DOOR_CLOSED;
 8002330:	4b47      	ldr	r3, [pc, #284]	; (8002450 <Read_RXdata+0x230>)
 8002332:	2201      	movs	r2, #1
 8002334:	621a      	str	r2, [r3, #32]
        break;
 8002336:	e081      	b.n	800243c <Read_RXdata+0x21c>
            for (int i = 0; i < rxLength; i++) {
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e010      	b.n	8002360 <Read_RXdata+0x140>
              MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_490_buffer[i], 1);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4413      	add	r3, r2
 8002348:	b2d8      	uxtb	r0, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	3310      	adds	r3, #16
 800234e:	4a3f      	ldr	r2, [pc, #252]	; (800244c <Read_RXdata+0x22c>)
 8002350:	4413      	add	r3, r2
 8002352:	2201      	movs	r2, #1
 8002354:	4619      	mov	r1, r3
 8002356:	f000 fa38 	bl	80027ca <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	3301      	adds	r3, #1
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <Read_RXdata+0x228>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4293      	cmp	r3, r2
 800236c:	dbe7      	blt.n	800233e <Read_RXdata+0x11e>
            for(int j = rxLength; j < 8; j++) {
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <Read_RXdata+0x228>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e008      	b.n	800238a <Read_RXdata+0x16a>
                Master.ID_490_buffer[j] = 0x00;
 8002378:	4a34      	ldr	r2, [pc, #208]	; (800244c <Read_RXdata+0x22c>)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	3310      	adds	r3, #16
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength; j < 8; j++) {
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b07      	cmp	r3, #7
 800238e:	ddf3      	ble.n	8002378 <Read_RXdata+0x158>
            switch (Master.ID_490_buffer[0])
 8002390:	4b2e      	ldr	r3, [pc, #184]	; (800244c <Read_RXdata+0x22c>)
 8002392:	7c1b      	ldrb	r3, [r3, #16]
 8002394:	2b05      	cmp	r3, #5
 8002396:	d002      	beq.n	800239e <Read_RXdata+0x17e>
 8002398:	2b0e      	cmp	r3, #14
 800239a:	d006      	beq.n	80023aa <Read_RXdata+0x18a>
        break;
 800239c:	e04f      	b.n	800243e <Read_RXdata+0x21e>
                    Master_EMS.chosen_floor = Master.ID_490_buffer[1];
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <Read_RXdata+0x22c>)
 80023a0:	7c5b      	ldrb	r3, [r3, #17]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <Read_RXdata+0x230>)
 80023a6:	619a      	str	r2, [r3, #24]
                    break;
 80023a8:	e01f      	b.n	80023ea <Read_RXdata+0x1ca>
                    if(Master.ID_490_buffer[1] == 0x09) {
 80023aa:	4b28      	ldr	r3, [pc, #160]	; (800244c <Read_RXdata+0x22c>)
 80023ac:	7c5b      	ldrb	r3, [r3, #17]
 80023ae:	2b09      	cmp	r3, #9
 80023b0:	d10b      	bne.n	80023ca <Read_RXdata+0x1aa>
                        if(Master.ID_490_buffer[5] == 0x00) {
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <Read_RXdata+0x22c>)
 80023b4:	7d5b      	ldrb	r3, [r3, #21]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d103      	bne.n	80023c2 <Read_RXdata+0x1a2>
                            Master_EMS.open_door_button_stat = BUTTON_OFF;
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <Read_RXdata+0x230>)
 80023bc:	2200      	movs	r2, #0
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 80023c0:	e012      	b.n	80023e8 <Read_RXdata+0x1c8>
                            Master_EMS.open_door_button_stat = BUTTON_ON;
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <Read_RXdata+0x230>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 80023c8:	e00e      	b.n	80023e8 <Read_RXdata+0x1c8>
                    else if (Master.ID_490_buffer[1] == 0x0A){
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <Read_RXdata+0x22c>)
 80023cc:	7c5b      	ldrb	r3, [r3, #17]
 80023ce:	2b0a      	cmp	r3, #10
 80023d0:	d10a      	bne.n	80023e8 <Read_RXdata+0x1c8>
                        if(Master.ID_490_buffer[5] == 0x00) {
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <Read_RXdata+0x22c>)
 80023d4:	7d5b      	ldrb	r3, [r3, #21]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <Read_RXdata+0x1c2>
                            Master_EMS.close_door_button_stat = BUTTON_OFF;
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <Read_RXdata+0x230>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
                    break;
 80023e0:	e002      	b.n	80023e8 <Read_RXdata+0x1c8>
                            Master_EMS.close_door_button_stat = BUTTON_ON;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <Read_RXdata+0x230>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
                    break;
 80023e8:	bf00      	nop
        break;
 80023ea:	e028      	b.n	800243e <Read_RXdata+0x21e>
            for (int i = 0; i < rxLength; i++) {
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	e016      	b.n	8002420 <Read_RXdata+0x200>
              Master.ID_68B_buffer[i] = 0x00;
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <Read_RXdata+0x22c>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4413      	add	r3, r2
 80023f8:	3318      	adds	r3, #24
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
              MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_68B_buffer[i], 1);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4413      	add	r3, r2
 8002408:	b2d8      	uxtb	r0, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3318      	adds	r3, #24
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <Read_RXdata+0x22c>)
 8002410:	4413      	add	r3, r2
 8002412:	2201      	movs	r2, #1
 8002414:	4619      	mov	r1, r3
 8002416:	f000 f9d8 	bl	80027ca <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3301      	adds	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <Read_RXdata+0x228>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4293      	cmp	r3, r2
 800242c:	dbe1      	blt.n	80023f2 <Read_RXdata+0x1d2>
            getEMStime_Master();
 800242e:	f000 f943 	bl	80026b8 <getEMStime_Master>
        break;
 8002432:	e004      	b.n	800243e <Read_RXdata+0x21e>
        break;
 8002434:	bf00      	nop
 8002436:	e002      	b.n	800243e <Read_RXdata+0x21e>
        break;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <Read_RXdata+0x21e>
        break;
 800243c:	bf00      	nop
    }  
} 
 800243e:	bf00      	nop
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000ba0 	.word	0x20000ba0
 800244c:	20000ea8 	.word	0x20000ea8
 8002450:	20000dfc 	.word	0x20000dfc

08002454 <Read_Slave1_RXdata>:

void Read_Slave1_RXdata(uint16* rx_id, uint8* base_adr) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
	MCP2515_SPI2_ReadReg(0x65, &rxLength2, 1);
 800245e:	2201      	movs	r2, #1
 8002460:	4991      	ldr	r1, [pc, #580]	; (80026a8 <Read_Slave1_RXdata+0x254>)
 8002462:	2065      	movs	r0, #101	; 0x65
 8002464:	f000 faf0 	bl	8002a48 <MCP2515_SPI2_ReadReg>

    switch(*rx_id)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	f240 3231 	movw	r2, #817	; 0x331
 8002470:	4293      	cmp	r3, r2
 8002472:	f000 80f1 	beq.w	8002658 <Read_Slave1_RXdata+0x204>
 8002476:	f240 3231 	movw	r2, #817	; 0x331
 800247a:	4293      	cmp	r3, r2
 800247c:	f300 810f 	bgt.w	800269e <Read_Slave1_RXdata+0x24a>
 8002480:	f240 3221 	movw	r2, #801	; 0x321
 8002484:	4293      	cmp	r3, r2
 8002486:	f000 8088 	beq.w	800259a <Read_Slave1_RXdata+0x146>
 800248a:	f240 3221 	movw	r2, #801	; 0x321
 800248e:	4293      	cmp	r3, r2
 8002490:	f300 8105 	bgt.w	800269e <Read_Slave1_RXdata+0x24a>
 8002494:	f240 3201 	movw	r2, #769	; 0x301
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <Read_Slave1_RXdata+0x52>
 800249c:	f240 3211 	movw	r2, #785	; 0x311
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d039      	beq.n	8002518 <Read_Slave1_RXdata+0xc4>
            getEMStime_Slave1();
            CAN_rx++;
        break;
        
        default:
            break;       
 80024a4:	e0fb      	b.n	800269e <Read_Slave1_RXdata+0x24a>
            for (int i = 0; i < rxLength2; i++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	e00f      	b.n	80024cc <Read_Slave1_RXdata+0x78>
              MCP2515_SPI2_ReadReg(*base_adr+i, &Slave_1.ID_400_buffer[i], 1);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	b2d8      	uxtb	r0, r3
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	4a7c      	ldr	r2, [pc, #496]	; (80026ac <Read_Slave1_RXdata+0x258>)
 80024bc:	4413      	add	r3, r2
 80024be:	2201      	movs	r2, #1
 80024c0:	4619      	mov	r1, r3
 80024c2:	f000 fac1 	bl	8002a48 <MCP2515_SPI2_ReadReg>
            for (int i = 0; i < rxLength2; i++) {
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	3301      	adds	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <Read_Slave1_RXdata+0x254>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	4293      	cmp	r3, r2
 80024d8:	dbe8      	blt.n	80024ac <Read_Slave1_RXdata+0x58>
            for(int j = rxLength2; j < 8; j++) {
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <Read_Slave1_RXdata+0x254>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	e007      	b.n	80024f4 <Read_Slave1_RXdata+0xa0>
                Slave_1.ID_400_buffer[j] = 0x00;
 80024e4:	4a71      	ldr	r2, [pc, #452]	; (80026ac <Read_Slave1_RXdata+0x258>)
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	4413      	add	r3, r2
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength2; j < 8; j++) {
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	3301      	adds	r3, #1
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2b07      	cmp	r3, #7
 80024f8:	ddf4      	ble.n	80024e4 <Read_Slave1_RXdata+0x90>
            if(Slave_1.ID_400_buffer[0] == 0x40) {
 80024fa:	4b6c      	ldr	r3, [pc, #432]	; (80026ac <Read_Slave1_RXdata+0x258>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d104      	bne.n	800250c <Read_Slave1_RXdata+0xb8>
                    Slave_EMS_1.curren_floor = Slave_1.ID_400_buffer[1];
 8002502:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <Read_Slave1_RXdata+0x258>)
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	461a      	mov	r2, r3
 8002508:	4b69      	ldr	r3, [pc, #420]	; (80026b0 <Read_Slave1_RXdata+0x25c>)
 800250a:	61da      	str	r2, [r3, #28]
            CAN_rx++;
 800250c:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <Read_Slave1_RXdata+0x260>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4a68      	ldr	r2, [pc, #416]	; (80026b4 <Read_Slave1_RXdata+0x260>)
 8002514:	6013      	str	r3, [r2, #0]
        break;
 8002516:	e0c3      	b.n	80026a0 <Read_Slave1_RXdata+0x24c>
            for (int i = 0; i < rxLength2; i++) {
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e010      	b.n	8002540 <Read_Slave1_RXdata+0xec>
                MCP2515_SPI2_ReadReg(*base_adr+i, &Slave_1.ID_481_buffer[i], 1);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4413      	add	r3, r2
 8002528:	b2d8      	uxtb	r0, r3
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3308      	adds	r3, #8
 800252e:	4a5f      	ldr	r2, [pc, #380]	; (80026ac <Read_Slave1_RXdata+0x258>)
 8002530:	4413      	add	r3, r2
 8002532:	2201      	movs	r2, #1
 8002534:	4619      	mov	r1, r3
 8002536:	f000 fa87 	bl	8002a48 <MCP2515_SPI2_ReadReg>
            for (int i = 0; i < rxLength2; i++) {
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3301      	adds	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <Read_Slave1_RXdata+0x254>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4293      	cmp	r3, r2
 800254c:	dbe7      	blt.n	800251e <Read_Slave1_RXdata+0xca>
            for(int j = rxLength2; j < 8; j++) {
 800254e:	4b56      	ldr	r3, [pc, #344]	; (80026a8 <Read_Slave1_RXdata+0x254>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e008      	b.n	800256a <Read_Slave1_RXdata+0x116>
                Slave_1.ID_481_buffer[j] = 0x00;
 8002558:	4a54      	ldr	r2, [pc, #336]	; (80026ac <Read_Slave1_RXdata+0x258>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4413      	add	r3, r2
 800255e:	3308      	adds	r3, #8
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength2; j < 8; j++) {
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	3301      	adds	r3, #1
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b07      	cmp	r3, #7
 800256e:	ddf3      	ble.n	8002558 <Read_Slave1_RXdata+0x104>
            if(Slave_1.ID_481_buffer[0] == 0x0E) {
 8002570:	4b4e      	ldr	r3, [pc, #312]	; (80026ac <Read_Slave1_RXdata+0x258>)
 8002572:	7a1b      	ldrb	r3, [r3, #8]
 8002574:	2b0e      	cmp	r3, #14
 8002576:	d10a      	bne.n	800258e <Read_Slave1_RXdata+0x13a>
                if(Slave_1.ID_481_buffer[5] == 0x00) {
 8002578:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <Read_Slave1_RXdata+0x258>)
 800257a:	7b5b      	ldrb	r3, [r3, #13]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d103      	bne.n	8002588 <Read_Slave1_RXdata+0x134>
                    Slave_EMS_1.door_status = DOOR_OPENED;
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <Read_Slave1_RXdata+0x25c>)
 8002582:	2200      	movs	r2, #0
 8002584:	621a      	str	r2, [r3, #32]
 8002586:	e002      	b.n	800258e <Read_Slave1_RXdata+0x13a>
                    Slave_EMS_1.door_status = DOOR_CLOSED;
 8002588:	4b49      	ldr	r3, [pc, #292]	; (80026b0 <Read_Slave1_RXdata+0x25c>)
 800258a:	2201      	movs	r2, #1
 800258c:	621a      	str	r2, [r3, #32]
            CAN_rx++;
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <Read_Slave1_RXdata+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a47      	ldr	r2, [pc, #284]	; (80026b4 <Read_Slave1_RXdata+0x260>)
 8002596:	6013      	str	r3, [r2, #0]
        break;  
 8002598:	e082      	b.n	80026a0 <Read_Slave1_RXdata+0x24c>
            for (int i = 0; i < rxLength2; i++) {
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e010      	b.n	80025c2 <Read_Slave1_RXdata+0x16e>
              MCP2515_SPI2_ReadReg(*base_adr+i, &Slave_1.ID_490_buffer[i], 1);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	b2d8      	uxtb	r0, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3310      	adds	r3, #16
 80025b0:	4a3e      	ldr	r2, [pc, #248]	; (80026ac <Read_Slave1_RXdata+0x258>)
 80025b2:	4413      	add	r3, r2
 80025b4:	2201      	movs	r2, #1
 80025b6:	4619      	mov	r1, r3
 80025b8:	f000 fa46 	bl	8002a48 <MCP2515_SPI2_ReadReg>
            for (int i = 0; i < rxLength2; i++) {
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <Read_Slave1_RXdata+0x254>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	4293      	cmp	r3, r2
 80025ce:	dbe7      	blt.n	80025a0 <Read_Slave1_RXdata+0x14c>
            for(int j = rxLength2; j < 8; j++) {
 80025d0:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <Read_Slave1_RXdata+0x254>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	e008      	b.n	80025ec <Read_Slave1_RXdata+0x198>
                Slave_1.ID_490_buffer[j] = 0x00;
 80025da:	4a34      	ldr	r2, [pc, #208]	; (80026ac <Read_Slave1_RXdata+0x258>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	3310      	adds	r3, #16
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength2; j < 8; j++) {
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	3301      	adds	r3, #1
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b07      	cmp	r3, #7
 80025f0:	ddf3      	ble.n	80025da <Read_Slave1_RXdata+0x186>
            switch (Slave_1.ID_490_buffer[0])
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <Read_Slave1_RXdata+0x258>)
 80025f4:	7c1b      	ldrb	r3, [r3, #16]
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d002      	beq.n	8002600 <Read_Slave1_RXdata+0x1ac>
 80025fa:	2b0e      	cmp	r3, #14
 80025fc:	d007      	beq.n	800260e <Read_Slave1_RXdata+0x1ba>
                break;
 80025fe:	e04f      	b.n	80026a0 <Read_Slave1_RXdata+0x24c>
                    Slave_EMS_1.chosen_floor = Slave_1.ID_490_buffer[1];
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <Read_Slave1_RXdata+0x258>)
 8002602:	7c5b      	ldrb	r3, [r3, #17]
 8002604:	461a      	mov	r2, r3
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <Read_Slave1_RXdata+0x25c>)
 8002608:	619a      	str	r2, [r3, #24]
                    break;
 800260a:	bf00      	nop
                break;
 800260c:	e048      	b.n	80026a0 <Read_Slave1_RXdata+0x24c>
                    if(Slave_1.ID_490_buffer[1] == 0x09) {
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <Read_Slave1_RXdata+0x258>)
 8002610:	7c5b      	ldrb	r3, [r3, #17]
 8002612:	2b09      	cmp	r3, #9
 8002614:	d10b      	bne.n	800262e <Read_Slave1_RXdata+0x1da>
                        if(Slave_1.ID_490_buffer[5] == 0x00) {
 8002616:	4b25      	ldr	r3, [pc, #148]	; (80026ac <Read_Slave1_RXdata+0x258>)
 8002618:	7d5b      	ldrb	r3, [r3, #21]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <Read_Slave1_RXdata+0x1d2>
                            Slave_EMS_1.open_door_button_stat = BUTTON_OFF;
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <Read_Slave1_RXdata+0x25c>)
 8002620:	2200      	movs	r2, #0
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
 8002624:	e012      	b.n	800264c <Read_Slave1_RXdata+0x1f8>
                            Slave_EMS_1.open_door_button_stat = BUTTON_ON;
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <Read_Slave1_RXdata+0x25c>)
 8002628:	2201      	movs	r2, #1
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
 800262c:	e00e      	b.n	800264c <Read_Slave1_RXdata+0x1f8>
                    else if (Slave_1.ID_490_buffer[1] == 0x0A){
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <Read_Slave1_RXdata+0x258>)
 8002630:	7c5b      	ldrb	r3, [r3, #17]
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d10a      	bne.n	800264c <Read_Slave1_RXdata+0x1f8>
                        if(Slave_1.ID_490_buffer[5] == 0x00) {
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <Read_Slave1_RXdata+0x258>)
 8002638:	7d5b      	ldrb	r3, [r3, #21]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <Read_Slave1_RXdata+0x1f2>
                            Slave_EMS_1.close_door_button_stat = BUTTON_OFF;
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <Read_Slave1_RXdata+0x25c>)
 8002640:	2200      	movs	r2, #0
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
 8002644:	e002      	b.n	800264c <Read_Slave1_RXdata+0x1f8>
                            Slave_EMS_1.close_door_button_stat = BUTTON_ON;
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <Read_Slave1_RXdata+0x25c>)
 8002648:	2201      	movs	r2, #1
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
                    CAN_rx++;
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <Read_Slave1_RXdata+0x260>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <Read_Slave1_RXdata+0x260>)
 8002654:	6013      	str	r3, [r2, #0]
                break;
 8002656:	e023      	b.n	80026a0 <Read_Slave1_RXdata+0x24c>
            for (int i = 0; i < rxLength2; i++) {
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	e010      	b.n	8002680 <Read_Slave1_RXdata+0x22c>
              MCP2515_SPI2_ReadReg(*base_adr+i, &Slave_1.ID_68B_buffer[i], 1);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4413      	add	r3, r2
 8002668:	b2d8      	uxtb	r0, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3318      	adds	r3, #24
 800266e:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <Read_Slave1_RXdata+0x258>)
 8002670:	4413      	add	r3, r2
 8002672:	2201      	movs	r2, #1
 8002674:	4619      	mov	r1, r3
 8002676:	f000 f9e7 	bl	8002a48 <MCP2515_SPI2_ReadReg>
            for (int i = 0; i < rxLength2; i++) {
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3301      	adds	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <Read_Slave1_RXdata+0x254>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4293      	cmp	r3, r2
 800268c:	dbe7      	blt.n	800265e <Read_Slave1_RXdata+0x20a>
            getEMStime_Slave1();
 800268e:	f000 f83d 	bl	800270c <getEMStime_Slave1>
            CAN_rx++;
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <Read_Slave1_RXdata+0x260>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <Read_Slave1_RXdata+0x260>)
 800269a:	6013      	str	r3, [r2, #0]
        break;
 800269c:	e000      	b.n	80026a0 <Read_Slave1_RXdata+0x24c>
            break;       
 800269e:	bf00      	nop
    }
}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000ea5 	.word	0x20000ea5
 80026ac:	20000ec8 	.word	0x20000ec8
 80026b0:	20000c08 	.word	0x20000c08
 80026b4:	200009ec 	.word	0x200009ec

080026b8 <getEMStime_Master>:

void getEMStime_Master(void) {
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    Master_EMS.EMS_time.second = Master.ID_68B_buffer[0];
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <getEMStime_Master+0x4c>)
 80026be:	7e1b      	ldrb	r3, [r3, #24]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <getEMStime_Master+0x50>)
 80026c4:	601a      	str	r2, [r3, #0]
    Master_EMS.EMS_time.minute = Master.ID_68B_buffer[1];
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <getEMStime_Master+0x4c>)
 80026c8:	7e5b      	ldrb	r3, [r3, #25]
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <getEMStime_Master+0x50>)
 80026ce:	605a      	str	r2, [r3, #4]
    Master_EMS.EMS_time.hour = Master.ID_68B_buffer[2];
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <getEMStime_Master+0x4c>)
 80026d2:	7e9b      	ldrb	r3, [r3, #26]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <getEMStime_Master+0x50>)
 80026d8:	609a      	str	r2, [r3, #8]
    Master_EMS.EMS_time.day = Master.ID_68B_buffer[3];
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <getEMStime_Master+0x4c>)
 80026dc:	7edb      	ldrb	r3, [r3, #27]
 80026de:	461a      	mov	r2, r3
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <getEMStime_Master+0x50>)
 80026e2:	60da      	str	r2, [r3, #12]
    Master_EMS.EMS_time.weekday = Master.ID_68B_buffer[4] & (0x07);  // Weekday is the first 3 bits of 5th byte
 80026e4:	4b07      	ldr	r3, [pc, #28]	; (8002704 <getEMStime_Master+0x4c>)
 80026e6:	7f1b      	ldrb	r3, [r3, #28]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <getEMStime_Master+0x50>)
 80026ee:	6113      	str	r3, [r2, #16]
    Master_EMS.EMS_time.year = Master.ID_68B_buffer[5];
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <getEMStime_Master+0x4c>)
 80026f2:	7f5b      	ldrb	r3, [r3, #29]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <getEMStime_Master+0x50>)
 80026f8:	615a      	str	r2, [r3, #20]
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	20000ea8 	.word	0x20000ea8
 8002708:	20000dfc 	.word	0x20000dfc

0800270c <getEMStime_Slave1>:

void getEMStime_Slave1(void) {
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
    Slave_EMS_1.EMS_time.second = Slave_1.ID_68B_buffer[0];
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <getEMStime_Slave1+0x4c>)
 8002712:	7e1b      	ldrb	r3, [r3, #24]
 8002714:	461a      	mov	r2, r3
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <getEMStime_Slave1+0x50>)
 8002718:	601a      	str	r2, [r3, #0]
    Slave_EMS_1.EMS_time.minute = Slave_1.ID_68B_buffer[1];
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <getEMStime_Slave1+0x4c>)
 800271c:	7e5b      	ldrb	r3, [r3, #25]
 800271e:	461a      	mov	r2, r3
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <getEMStime_Slave1+0x50>)
 8002722:	605a      	str	r2, [r3, #4]
    Slave_EMS_1.EMS_time.hour = Slave_1.ID_68B_buffer[2];
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <getEMStime_Slave1+0x4c>)
 8002726:	7e9b      	ldrb	r3, [r3, #26]
 8002728:	461a      	mov	r2, r3
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <getEMStime_Slave1+0x50>)
 800272c:	609a      	str	r2, [r3, #8]
    Slave_EMS_1.EMS_time.day = Slave_1.ID_68B_buffer[3];
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <getEMStime_Slave1+0x4c>)
 8002730:	7edb      	ldrb	r3, [r3, #27]
 8002732:	461a      	mov	r2, r3
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <getEMStime_Slave1+0x50>)
 8002736:	60da      	str	r2, [r3, #12]
    Slave_EMS_1.EMS_time.weekday = (Slave_1.ID_68B_buffer[4] & (0x07));  // Weekday is the first 3 bits of 5th byte
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <getEMStime_Slave1+0x4c>)
 800273a:	7f1b      	ldrb	r3, [r3, #28]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4a06      	ldr	r2, [pc, #24]	; (800275c <getEMStime_Slave1+0x50>)
 8002742:	6113      	str	r3, [r2, #16]
    Slave_EMS_1.EMS_time.year = Slave_1.ID_68B_buffer[5];
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <getEMStime_Slave1+0x4c>)
 8002746:	7f5b      	ldrb	r3, [r3, #29]
 8002748:	461a      	mov	r2, r3
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <getEMStime_Slave1+0x50>)
 800274c:	615a      	str	r2, [r3, #20]
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	20000ec8 	.word	0x20000ec8
 800275c:	20000c08 	.word	0x20000c08

08002760 <SPI1_Tx>:
	{MCP_RXF5SIDH, 0x00},
};

/* SPI Tx wrapper function  */
static void SPI1_Tx(uint8_t data)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 800276a:	1df9      	adds	r1, r7, #7
 800276c:	2364      	movs	r3, #100	; 0x64
 800276e:	2201      	movs	r2, #1
 8002770:	4803      	ldr	r0, [pc, #12]	; (8002780 <SPI1_Tx+0x20>)
 8002772:	f003 f86c 	bl	800584e <HAL_SPI_Transmit>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000e3c 	.word	0x20000e3c

08002784 <SPI1_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI1_Rx(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800278a:	1df9      	adds	r1, r7, #7
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	2201      	movs	r2, #1
 8002790:	4803      	ldr	r0, [pc, #12]	; (80027a0 <SPI1_Rx+0x1c>)
 8002792:	f003 f9ca 	bl	8005b2a <HAL_SPI_Receive>
  return retVal;
 8002796:	79fb      	ldrb	r3, [r7, #7]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000e3c 	.word	0x20000e3c

080027a4 <MCP2515_SPI1_Reset>:

void MCP2515_SPI1_Reset(void)
{    
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  SPI1_CS_OFF();
 80027a8:	2200      	movs	r2, #0
 80027aa:	2110      	movs	r1, #16
 80027ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b0:	f000 ffa4 	bl	80036fc <HAL_GPIO_WritePin>
      
  SPI1_Tx(MCP_RESET);
 80027b4:	20c0      	movs	r0, #192	; 0xc0
 80027b6:	f7ff ffd3 	bl	8002760 <SPI1_Tx>
      
  SPI1_CS_ON();
 80027ba:	2201      	movs	r2, #1
 80027bc:	2110      	movs	r1, #16
 80027be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c2:	f000 ff9b 	bl	80036fc <HAL_GPIO_WritePin>
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}

080027ca <MCP2515_SPI1_ReadReg>:

void MCP2515_SPI1_ReadReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 80027ca:	b590      	push	{r4, r7, lr}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	6039      	str	r1, [r7, #0]
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	4613      	mov	r3, r2
 80027d8:	71bb      	strb	r3, [r7, #6]
	SPI1_CS_OFF();
 80027da:	2200      	movs	r2, #0
 80027dc:	2110      	movs	r1, #16
 80027de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e2:	f000 ff8b 	bl	80036fc <HAL_GPIO_WritePin>
	SPI1_Tx(MCP_READ);
 80027e6:	2003      	movs	r0, #3
 80027e8:	f7ff ffba 	bl	8002760 <SPI1_Tx>
	SPI1_Tx(addr);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ffb6 	bl	8002760 <SPI1_Tx>
	while(size--) {
 80027f4:	e006      	b.n	8002804 <MCP2515_SPI1_ReadReg+0x3a>
		*buff ++= SPI1_Rx();
 80027f6:	683c      	ldr	r4, [r7, #0]
 80027f8:	1c63      	adds	r3, r4, #1
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	f7ff ffc2 	bl	8002784 <SPI1_Rx>
 8002800:	4603      	mov	r3, r0
 8002802:	7023      	strb	r3, [r4, #0]
	while(size--) {
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	1e5a      	subs	r2, r3, #1
 8002808:	71ba      	strb	r2, [r7, #6]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f3      	bne.n	80027f6 <MCP2515_SPI1_ReadReg+0x2c>
	}
	SPI1_CS_ON();
 800280e:	2201      	movs	r2, #1
 8002810:	2110      	movs	r1, #16
 8002812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002816:	f000 ff71 	bl	80036fc <HAL_GPIO_WritePin>
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}

08002822 <MCP2515_SPI1_WriteReg>:

void MCP2515_SPI1_WriteReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	6039      	str	r1, [r7, #0]
 800282c:	71fb      	strb	r3, [r7, #7]
 800282e:	4613      	mov	r3, r2
 8002830:	71bb      	strb	r3, [r7, #6]
	SPI1_CS_OFF();
 8002832:	2200      	movs	r2, #0
 8002834:	2110      	movs	r1, #16
 8002836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283a:	f000 ff5f 	bl	80036fc <HAL_GPIO_WritePin>
	SPI1_Tx(MCP_WRITE);
 800283e:	2002      	movs	r0, #2
 8002840:	f7ff ff8e 	bl	8002760 <SPI1_Tx>
	SPI1_Tx(addr);
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff8a 	bl	8002760 <SPI1_Tx>
	while(size--) {
 800284c:	e006      	b.n	800285c <MCP2515_SPI1_WriteReg+0x3a>
		SPI1_Tx(buff++);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	603a      	str	r2, [r7, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff82 	bl	8002760 <SPI1_Tx>
	while(size--) {
 800285c:	79bb      	ldrb	r3, [r7, #6]
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	71ba      	strb	r2, [r7, #6]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f3      	bne.n	800284e <MCP2515_SPI1_WriteReg+0x2c>
	}
	SPI1_CS_ON();
 8002866:	2201      	movs	r2, #1
 8002868:	2110      	movs	r1, #16
 800286a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800286e:	f000 ff45 	bl	80036fc <HAL_GPIO_WritePin>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <MCP2515_SPI1_RegModify>:

void MCP2515_SPI1_RegModify(uint8_t addr, uint8_t mask, uint8_t data) {
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	460b      	mov	r3, r1
 8002886:	71bb      	strb	r3, [r7, #6]
 8002888:	4613      	mov	r3, r2
 800288a:	717b      	strb	r3, [r7, #5]
	SPI1_CS_OFF();
 800288c:	2200      	movs	r2, #0
 800288e:	2110      	movs	r1, #16
 8002890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002894:	f000 ff32 	bl	80036fc <HAL_GPIO_WritePin>
	SPI1_Tx(MCP_BITMOD);
 8002898:	2005      	movs	r0, #5
 800289a:	f7ff ff61 	bl	8002760 <SPI1_Tx>
	SPI1_Tx(addr);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff5d 	bl	8002760 <SPI1_Tx>
	SPI1_Tx(mask);
 80028a6:	79bb      	ldrb	r3, [r7, #6]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff59 	bl	8002760 <SPI1_Tx>
	SPI1_Tx(data);
 80028ae:	797b      	ldrb	r3, [r7, #5]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff55 	bl	8002760 <SPI1_Tx>
	SPI1_CS_ON();
 80028b6:	2201      	movs	r2, #1
 80028b8:	2110      	movs	r1, #16
 80028ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028be:	f000 ff1d 	bl	80036fc <HAL_GPIO_WritePin>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <MCP2515_SPI1_RateConfig>:

void MCP2515_SPI1_RateConfig(void) {
 80028ca:	b580      	push	{r7, lr}
 80028cc:	af00      	add	r7, sp, #0
	MCP2515_SPI1_WriteReg(MCP_CNF1, MCP_8M_125K_CF1, 1);
 80028ce:	2201      	movs	r2, #1
 80028d0:	2101      	movs	r1, #1
 80028d2:	202a      	movs	r0, #42	; 0x2a
 80028d4:	f7ff ffa5 	bl	8002822 <MCP2515_SPI1_WriteReg>
	MCP2515_SPI1_WriteReg(MCP_CNF2, MCP_8M_125K_CF2, 1);
 80028d8:	2201      	movs	r2, #1
 80028da:	219a      	movs	r1, #154	; 0x9a
 80028dc:	2029      	movs	r0, #41	; 0x29
 80028de:	f7ff ffa0 	bl	8002822 <MCP2515_SPI1_WriteReg>
	MCP2515_SPI1_WriteReg(MCP_CNF3, MCP_8M_125K_CF3, 1);
 80028e2:	2201      	movs	r2, #1
 80028e4:	2107      	movs	r1, #7
 80028e6:	2028      	movs	r0, #40	; 0x28
 80028e8:	f7ff ff9b 	bl	8002822 <MCP2515_SPI1_WriteReg>
	HAL_Delay(5);
 80028ec:	2005      	movs	r0, #5
 80028ee:	f7fe f860 	bl	80009b2 <HAL_Delay>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <MCP2515_SPI1_AddrReset>:

void MCP2515_SPI1_AddrReset(void) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	e040      	b.n	8002986 <MCP2515_SPI1_AddrReset+0x8e>
		SPI1_CS_OFF();
 8002904:	2200      	movs	r2, #0
 8002906:	2110      	movs	r1, #16
 8002908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290c:	f000 fef6 	bl	80036fc <HAL_GPIO_WritePin>
		SPI1_Tx(MCP_WRITE);
 8002910:	2002      	movs	r0, #2
 8002912:	f7ff ff25 	bl	8002760 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][0]);
 8002916:	4a20      	ldr	r2, [pc, #128]	; (8002998 <MCP2515_SPI1_AddrReset+0xa0>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff1d 	bl	8002760 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1]);
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <MCP2515_SPI1_AddrReset+0xa0>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff14 	bl	8002760 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1] >> 8);
 8002938:	4a17      	ldr	r2, [pc, #92]	; (8002998 <MCP2515_SPI1_AddrReset+0xa0>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	b2db      	uxtb	r3, r3
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff0a 	bl	8002760 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1] >> 16);
 800294c:	4a12      	ldr	r2, [pc, #72]	; (8002998 <MCP2515_SPI1_AddrReset+0xa0>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	b2db      	uxtb	r3, r3
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff00 	bl	8002760 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1] >> 24);
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <MCP2515_SPI1_AddrReset+0xa0>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	0e1b      	lsrs	r3, r3, #24
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fef6 	bl	8002760 <SPI1_Tx>
		SPI1_CS_ON();
 8002974:	2201      	movs	r2, #1
 8002976:	2110      	movs	r1, #16
 8002978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297c:	f000 febe 	bl	80036fc <HAL_GPIO_WritePin>
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3301      	adds	r3, #1
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b07      	cmp	r3, #7
 800298a:	d9bb      	bls.n	8002904 <MCP2515_SPI1_AddrReset+0xc>
	}
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	0800a710 	.word	0x0800a710

0800299c <MCP2515_SPI1_CanInit>:
void MCP2515_SPI1_CanInit(void) {
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
	MCP2515_SPI1_Reset();
 80029a0:	f7ff ff00 	bl	80027a4 <MCP2515_SPI1_Reset>
	MCP2515_SPI1_RegModify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	21e0      	movs	r1, #224	; 0xe0
 80029a8:	200f      	movs	r0, #15
 80029aa:	f7ff ff66 	bl	800287a <MCP2515_SPI1_RegModify>
	MCP2515_SPI1_AddrReset();
 80029ae:	f7ff ffa3 	bl	80028f8 <MCP2515_SPI1_AddrReset>
	MCP2515_SPI1_RateConfig();
 80029b2:	f7ff ff8a 	bl	80028ca <MCP2515_SPI1_RateConfig>
	MCP2515_SPI1_RegModify(MCP_CANINTE, 0xFF, 0xFF);
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	21ff      	movs	r1, #255	; 0xff
 80029ba:	202b      	movs	r0, #43	; 0x2b
 80029bc:	f7ff ff5d 	bl	800287a <MCP2515_SPI1_RegModify>
	MCP2515_SPI1_RegModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 80029c0:	2200      	movs	r2, #0
 80029c2:	21e0      	movs	r1, #224	; 0xe0
 80029c4:	200f      	movs	r0, #15
 80029c6:	f7ff ff58 	bl	800287a <MCP2515_SPI1_RegModify>
	MCP2515_SPI1_RegModify(MCP_RXB0CTRL,0xFF,0x00);
 80029ca:	2200      	movs	r2, #0
 80029cc:	21ff      	movs	r1, #255	; 0xff
 80029ce:	2060      	movs	r0, #96	; 0x60
 80029d0:	f7ff ff53 	bl	800287a <MCP2515_SPI1_RegModify>

}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <SPI2_Tx>:
}


/* SPI Tx wrapper function  */
static void SPI2_Tx(uint8_t data)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_EMS, &data, 1, SPI_TIMEOUT);    
 80029e2:	1df9      	adds	r1, r7, #7
 80029e4:	2364      	movs	r3, #100	; 0x64
 80029e6:	2201      	movs	r2, #1
 80029e8:	4803      	ldr	r0, [pc, #12]	; (80029f8 <SPI2_Tx+0x20>)
 80029ea:	f002 ff30 	bl	800584e <HAL_SPI_Transmit>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000ba4 	.word	0x20000ba4

080029fc <SPI2_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI2_Rx(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_EMS, &retVal, 1, SPI_TIMEOUT);
 8002a02:	1df9      	adds	r1, r7, #7
 8002a04:	2364      	movs	r3, #100	; 0x64
 8002a06:	2201      	movs	r2, #1
 8002a08:	4803      	ldr	r0, [pc, #12]	; (8002a18 <SPI2_Rx+0x1c>)
 8002a0a:	f003 f88e 	bl	8005b2a <HAL_SPI_Receive>
  return retVal;
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000ba4 	.word	0x20000ba4

08002a1c <MCP2515_SPI2_Reset>:

void MCP2515_SPI2_Reset(void)
{    
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  SPI2_CS_OFF();
 8002a20:	2200      	movs	r2, #0
 8002a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a26:	4807      	ldr	r0, [pc, #28]	; (8002a44 <MCP2515_SPI2_Reset+0x28>)
 8002a28:	f000 fe68 	bl	80036fc <HAL_GPIO_WritePin>
      
  SPI2_Tx(MCP_RESET);
 8002a2c:	20c0      	movs	r0, #192	; 0xc0
 8002a2e:	f7ff ffd3 	bl	80029d8 <SPI2_Tx>

  SPI2_CS_ON();
 8002a32:	2201      	movs	r2, #1
 8002a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <MCP2515_SPI2_Reset+0x28>)
 8002a3a:	f000 fe5f 	bl	80036fc <HAL_GPIO_WritePin>
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	48000400 	.word	0x48000400

08002a48 <MCP2515_SPI2_ReadReg>:

void MCP2515_SPI2_ReadReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6039      	str	r1, [r7, #0]
 8002a52:	71fb      	strb	r3, [r7, #7]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71bb      	strb	r3, [r7, #6]
	SPI2_CS_OFF();
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a5e:	4810      	ldr	r0, [pc, #64]	; (8002aa0 <MCP2515_SPI2_ReadReg+0x58>)
 8002a60:	f000 fe4c 	bl	80036fc <HAL_GPIO_WritePin>
	SPI2_Tx(MCP_READ);
 8002a64:	2003      	movs	r0, #3
 8002a66:	f7ff ffb7 	bl	80029d8 <SPI2_Tx>
	SPI2_Tx(addr);
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ffb3 	bl	80029d8 <SPI2_Tx>
	while(size--) {
 8002a72:	e006      	b.n	8002a82 <MCP2515_SPI2_ReadReg+0x3a>
		*buff ++= SPI2_Rx();
 8002a74:	683c      	ldr	r4, [r7, #0]
 8002a76:	1c63      	adds	r3, r4, #1
 8002a78:	603b      	str	r3, [r7, #0]
 8002a7a:	f7ff ffbf 	bl	80029fc <SPI2_Rx>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	7023      	strb	r3, [r4, #0]
	while(size--) {
 8002a82:	79bb      	ldrb	r3, [r7, #6]
 8002a84:	1e5a      	subs	r2, r3, #1
 8002a86:	71ba      	strb	r2, [r7, #6]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f3      	bne.n	8002a74 <MCP2515_SPI2_ReadReg+0x2c>
	}
	SPI2_CS_ON();
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a92:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <MCP2515_SPI2_ReadReg+0x58>)
 8002a94:	f000 fe32 	bl	80036fc <HAL_GPIO_WritePin>
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	48000400 	.word	0x48000400

08002aa4 <MCP2515_SPI2_WriteReg>:

void MCP2515_SPI2_WriteReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	71bb      	strb	r3, [r7, #6]
	SPI2_CS_OFF();
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002aba:	4810      	ldr	r0, [pc, #64]	; (8002afc <MCP2515_SPI2_WriteReg+0x58>)
 8002abc:	f000 fe1e 	bl	80036fc <HAL_GPIO_WritePin>
	SPI2_Tx(MCP_WRITE);
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	f7ff ff89 	bl	80029d8 <SPI2_Tx>
	SPI2_Tx(addr);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff85 	bl	80029d8 <SPI2_Tx>
	while(size--) {
 8002ace:	e006      	b.n	8002ade <MCP2515_SPI2_WriteReg+0x3a>
		SPI2_Tx(buff++);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	603a      	str	r2, [r7, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff7d 	bl	80029d8 <SPI2_Tx>
	while(size--) {
 8002ade:	79bb      	ldrb	r3, [r7, #6]
 8002ae0:	1e5a      	subs	r2, r3, #1
 8002ae2:	71ba      	strb	r2, [r7, #6]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f3      	bne.n	8002ad0 <MCP2515_SPI2_WriteReg+0x2c>
	}
	SPI2_CS_ON();
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002aee:	4803      	ldr	r0, [pc, #12]	; (8002afc <MCP2515_SPI2_WriteReg+0x58>)
 8002af0:	f000 fe04 	bl	80036fc <HAL_GPIO_WritePin>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	48000400 	.word	0x48000400

08002b00 <MCP2515_SPI2_RegModify>:

void MCP2515_SPI2_RegModify(uint8_t addr, uint8_t mask, uint8_t data) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	71bb      	strb	r3, [r7, #6]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	717b      	strb	r3, [r7, #5]
	SPI2_CS_OFF();
 8002b12:	2200      	movs	r2, #0
 8002b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <MCP2515_SPI2_RegModify+0x50>)
 8002b1a:	f000 fdef 	bl	80036fc <HAL_GPIO_WritePin>
	SPI2_Tx(MCP_BITMOD);
 8002b1e:	2005      	movs	r0, #5
 8002b20:	f7ff ff5a 	bl	80029d8 <SPI2_Tx>
	SPI2_Tx(addr);
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff56 	bl	80029d8 <SPI2_Tx>
	SPI2_Tx(mask);
 8002b2c:	79bb      	ldrb	r3, [r7, #6]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff52 	bl	80029d8 <SPI2_Tx>
	SPI2_Tx(data);
 8002b34:	797b      	ldrb	r3, [r7, #5]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff4e 	bl	80029d8 <SPI2_Tx>
	SPI2_CS_ON();
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b42:	4803      	ldr	r0, [pc, #12]	; (8002b50 <MCP2515_SPI2_RegModify+0x50>)
 8002b44:	f000 fdda 	bl	80036fc <HAL_GPIO_WritePin>
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	48000400 	.word	0x48000400

08002b54 <MCP2515_SPI2_RateConfig>:

void MCP2515_SPI2_RateConfig(void) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	MCP2515_SPI2_WriteReg(MCP_CNF1, MCP_8M_125K_CF1, 1);
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	202a      	movs	r0, #42	; 0x2a
 8002b5e:	f7ff ffa1 	bl	8002aa4 <MCP2515_SPI2_WriteReg>
	MCP2515_SPI2_WriteReg(MCP_CNF2, MCP_8M_125K_CF2, 1);
 8002b62:	2201      	movs	r2, #1
 8002b64:	219a      	movs	r1, #154	; 0x9a
 8002b66:	2029      	movs	r0, #41	; 0x29
 8002b68:	f7ff ff9c 	bl	8002aa4 <MCP2515_SPI2_WriteReg>
	MCP2515_SPI2_WriteReg(MCP_CNF3, MCP_8M_125K_CF3, 1);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2107      	movs	r1, #7
 8002b70:	2028      	movs	r0, #40	; 0x28
 8002b72:	f7ff ff97 	bl	8002aa4 <MCP2515_SPI2_WriteReg>
	HAL_Delay(5);
 8002b76:	2005      	movs	r0, #5
 8002b78:	f7fd ff1b 	bl	80009b2 <HAL_Delay>
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <MCP2515_SPI2_AddrReset>:

void MCP2515_SPI2_AddrReset(void) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	e040      	b.n	8002c0e <MCP2515_SPI2_AddrReset+0x8e>
		SPI2_CS_OFF();
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b92:	4823      	ldr	r0, [pc, #140]	; (8002c20 <MCP2515_SPI2_AddrReset+0xa0>)
 8002b94:	f000 fdb2 	bl	80036fc <HAL_GPIO_WritePin>
		SPI2_Tx(MCP_WRITE);
 8002b98:	2002      	movs	r0, #2
 8002b9a:	f7ff ff1d 	bl	80029d8 <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][0]);
 8002b9e:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <MCP2515_SPI2_AddrReset+0xa4>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff15 	bl	80029d8 <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1]);
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <MCP2515_SPI2_AddrReset+0xa4>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff0c 	bl	80029d8 <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1] >> 8);
 8002bc0:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <MCP2515_SPI2_AddrReset+0xa4>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff02 	bl	80029d8 <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1] >> 16);
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <MCP2515_SPI2_AddrReset+0xa4>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fef8 	bl	80029d8 <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1] >> 24);
 8002be8:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <MCP2515_SPI2_AddrReset+0xa4>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0e1b      	lsrs	r3, r3, #24
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff feee 	bl	80029d8 <SPI2_Tx>
		SPI2_CS_ON();
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c02:	4807      	ldr	r0, [pc, #28]	; (8002c20 <MCP2515_SPI2_AddrReset+0xa0>)
 8002c04:	f000 fd7a 	bl	80036fc <HAL_GPIO_WritePin>
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b07      	cmp	r3, #7
 8002c12:	d9bb      	bls.n	8002b8c <MCP2515_SPI2_AddrReset+0xc>
	}
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	48000400 	.word	0x48000400
 8002c24:	0800a710 	.word	0x0800a710

08002c28 <MCP2515_SPI2_CanInit>:

void MCP2515_SPI2_CanInit(void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	MCP2515_SPI2_Reset();
 8002c2c:	f7ff fef6 	bl	8002a1c <MCP2515_SPI2_Reset>
	MCP2515_SPI2_RegModify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	21e0      	movs	r1, #224	; 0xe0
 8002c34:	200f      	movs	r0, #15
 8002c36:	f7ff ff63 	bl	8002b00 <MCP2515_SPI2_RegModify>
	MCP2515_SPI2_AddrReset();
 8002c3a:	f7ff ffa1 	bl	8002b80 <MCP2515_SPI2_AddrReset>
	MCP2515_SPI2_RateConfig();
 8002c3e:	f7ff ff89 	bl	8002b54 <MCP2515_SPI2_RateConfig>
	MCP2515_SPI2_RegModify(MCP_CANINTE, 0xFF, 0xFF);
 8002c42:	22ff      	movs	r2, #255	; 0xff
 8002c44:	21ff      	movs	r1, #255	; 0xff
 8002c46:	202b      	movs	r0, #43	; 0x2b
 8002c48:	f7ff ff5a 	bl	8002b00 <MCP2515_SPI2_RegModify>
	MCP2515_SPI2_RegModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	21e0      	movs	r1, #224	; 0xe0
 8002c50:	200f      	movs	r0, #15
 8002c52:	f7ff ff55 	bl	8002b00 <MCP2515_SPI2_RegModify>
	MCP2515_SPI1_RegModify(MCP_RXB0CTRL,0xFF,0x00);
 8002c56:	2200      	movs	r2, #0
 8002c58:	21ff      	movs	r1, #255	; 0xff
 8002c5a:	2060      	movs	r0, #96	; 0x60
 8002c5c:	f7ff fe0d 	bl	800287a <MCP2515_SPI1_RegModify>

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6053      	str	r3, [r2, #4]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e0042000 	.word	0xe0042000

08002c84 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002c8e:	f043 0302 	orr.w	r3, r3, #2
 8002c92:	6053      	str	r3, [r2, #4]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e0042000 	.word	0xe0042000

08002ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_Init+0x3c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <HAL_Init+0x3c>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cba:	2003      	movs	r0, #3
 8002cbc:	f000 f9c0 	bl	8003040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cc0:	200f      	movs	r0, #15
 8002cc2:	f000 f80f 	bl	8002ce4 <HAL_InitTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	71fb      	strb	r3, [r7, #7]
 8002cd0:	e001      	b.n	8002cd6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cd2:	f7ff f897 	bl	8001e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	58004000 	.word	0x58004000

08002ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002cf0:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_InitTick+0x6c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d024      	beq.n	8002d42 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002cf8:	f001 fe5e 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <HAL_InitTick+0x6c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	4619      	mov	r1, r3
 8002d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d08:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f9d6 	bl	80030c2 <HAL_SYSTICK_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10f      	bne.n	8002d3c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	d809      	bhi.n	8002d36 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d22:	2200      	movs	r2, #0
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2a:	f000 f994 	bl	8003056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_InitTick+0x70>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e007      	b.n	8002d46 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e004      	b.n	8002d46 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e001      	b.n	8002d46 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	2000001c 	.word	0x2000001c
 8002d54:	20000018 	.word	0x20000018

08002d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x20>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x24>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_IncTick+0x24>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	2000001c 	.word	0x2000001c
 8002d7c:	20000ee8 	.word	0x20000ee8

08002d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_GetTick+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000ee8 	.word	0x20000ee8

08002d98 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_GetTickPrio+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000018 	.word	0x20000018

08002db0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_GetTickFreq+0x14>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	2000001c 	.word	0x2000001c

08002dc8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002dcc:	f7ff ff4a 	bl	8002c64 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002dd8:	f7ff ff54 	bl	8002c84 <LL_DBGMCU_EnableDBGStopMode>
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e12:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	60d3      	str	r3, [r2, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <__NVIC_GetPriorityGrouping+0x18>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	f003 0307 	and.w	r3, r3, #7
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	db0b      	blt.n	8002e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	4907      	ldr	r1, [pc, #28]	; (8002e7c <__NVIC_EnableIRQ+0x38>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2001      	movs	r0, #1
 8002e66:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100

08002e80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db12      	blt.n	8002eb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <__NVIC_DisableIRQ+0x44>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea6:	3320      	adds	r3, #32
 8002ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002eac:	f3bf 8f4f 	dsb	sy
}
 8002eb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002eb2:	f3bf 8f6f 	isb	sy
}
 8002eb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0c      	blt.n	8002ef4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <__NVIC_SetPendingIRQ+0x38>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	3340      	adds	r3, #64	; 0x40
 8002ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	db0c      	blt.n	8002f30 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4907      	ldr	r1, [pc, #28]	; (8002f3c <__NVIC_ClearPendingIRQ+0x38>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2001      	movs	r0, #1
 8002f26:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2a:	3360      	adds	r3, #96	; 0x60
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100

08002f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	db0a      	blt.n	8002f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	490c      	ldr	r1, [pc, #48]	; (8002f8c <__NVIC_SetPriority+0x4c>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	440b      	add	r3, r1
 8002f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f68:	e00a      	b.n	8002f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4908      	ldr	r1, [pc, #32]	; (8002f90 <__NVIC_SetPriority+0x50>)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	3b04      	subs	r3, #4
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	761a      	strb	r2, [r3, #24]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e100 	.word	0xe000e100
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f1c3 0307 	rsb	r3, r3, #7
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	bf28      	it	cs
 8002fb2:	2304      	movcs	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d902      	bls.n	8002fc4 <NVIC_EncodePriority+0x30>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3b03      	subs	r3, #3
 8002fc2:	e000      	b.n	8002fc6 <NVIC_EncodePriority+0x32>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	4313      	orrs	r3, r2
         );
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800300c:	d301      	bcc.n	8003012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800300e:	2301      	movs	r3, #1
 8003010:	e00f      	b.n	8003032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <SysTick_Config+0x40>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301a:	210f      	movs	r1, #15
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f7ff ff8e 	bl	8002f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <SysTick_Config+0x40>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <SysTick_Config+0x40>)
 800302c:	2207      	movs	r2, #7
 800302e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	e000e010 	.word	0xe000e010

08003040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fec9 	bl	8002de0 <__NVIC_SetPriorityGrouping>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003064:	f7ff fee0 	bl	8002e28 <__NVIC_GetPriorityGrouping>
 8003068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	6978      	ldr	r0, [r7, #20]
 8003070:	f7ff ff90 	bl	8002f94 <NVIC_EncodePriority>
 8003074:	4602      	mov	r2, r0
 8003076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff5f 	bl	8002f40 <__NVIC_SetPriority>
}
 8003082:	bf00      	nop
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fed3 	bl	8002e44 <__NVIC_EnableIRQ>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fee3 	bl	8002e80 <__NVIC_DisableIRQ>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ff96 	bl	8002ffc <SysTick_Config>
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff feed 	bl	8002ec8 <__NVIC_SetPendingIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fefd 	bl	8002f04 <__NVIC_ClearPendingIRQ>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e04f      	b.n	80031c4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d008      	beq.n	8003142 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2204      	movs	r2, #4
 8003134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e040      	b.n	80031c4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 020e 	bic.w	r2, r2, #14
 8003150:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f003 021c 	and.w	r2, r3, #28
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f202 	lsl.w	r2, r1, r2
 8003184:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800318e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d005      	beq.n	80031f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2204      	movs	r2, #4
 80031ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	e047      	b.n	8003284 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 020e 	bic.w	r2, r2, #14
 8003202:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f003 021c 	and.w	r2, r3, #28
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003240:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00c      	beq.n	8003264 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003262:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
    }
  }
  return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f003 031c 	and.w	r3, r3, #28
 80032ae:	2204      	movs	r2, #4
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d026      	beq.n	8003308 <HAL_DMA_IRQHandler+0x7a>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d021      	beq.n	8003308 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0204 	bic.w	r2, r2, #4
 80032e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f003 021c 	and.w	r2, r3, #28
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2104      	movs	r1, #4
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d071      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003306:	e06c      	b.n	80033e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f003 031c 	and.w	r3, r3, #28
 8003310:	2202      	movs	r2, #2
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02e      	beq.n	800337a <HAL_DMA_IRQHandler+0xec>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d029      	beq.n	800337a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 020a 	bic.w	r2, r2, #10
 8003342:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	f003 021c 	and.w	r2, r3, #28
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	2102      	movs	r1, #2
 800335a:	fa01 f202 	lsl.w	r2, r1, r2
 800335e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d038      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003378:	e033      	b.n	80033e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f003 031c 	and.w	r3, r3, #28
 8003382:	2208      	movs	r2, #8
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x156>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d025      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 020e 	bic.w	r2, r2, #14
 80033a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	f003 021c 	and.w	r2, r3, #28
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033e2:	bf00      	nop
 80033e4:	bf00      	nop
}
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fa:	e14c      	b.n	8003696 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	4013      	ands	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 813e 	beq.w	8003690 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d005      	beq.n	800342c <HAL_GPIO_Init+0x40>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d130      	bne.n	800348e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003462:	2201      	movs	r2, #1
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 0201 	and.w	r2, r3, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b03      	cmp	r3, #3
 8003498:	d017      	beq.n	80034ca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2203      	movs	r2, #3
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d123      	bne.n	800351e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	08da      	lsrs	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3208      	adds	r2, #8
 80034de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	6939      	ldr	r1, [r7, #16]
 800351a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	2203      	movs	r2, #3
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0203 	and.w	r2, r3, #3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8098 	beq.w	8003690 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003560:	4a54      	ldr	r2, [pc, #336]	; (80036b4 <HAL_GPIO_Init+0x2c8>)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	3302      	adds	r3, #2
 8003568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	220f      	movs	r2, #15
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800358a:	d019      	beq.n	80035c0 <HAL_GPIO_Init+0x1d4>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a4a      	ldr	r2, [pc, #296]	; (80036b8 <HAL_GPIO_Init+0x2cc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_GPIO_Init+0x1d0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a49      	ldr	r2, [pc, #292]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00d      	beq.n	80035b8 <HAL_GPIO_Init+0x1cc>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a48      	ldr	r2, [pc, #288]	; (80036c0 <HAL_GPIO_Init+0x2d4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <HAL_GPIO_Init+0x1c8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a47      	ldr	r2, [pc, #284]	; (80036c4 <HAL_GPIO_Init+0x2d8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_GPIO_Init+0x1c4>
 80035ac:	2304      	movs	r3, #4
 80035ae:	e008      	b.n	80035c2 <HAL_GPIO_Init+0x1d6>
 80035b0:	2307      	movs	r3, #7
 80035b2:	e006      	b.n	80035c2 <HAL_GPIO_Init+0x1d6>
 80035b4:	2303      	movs	r3, #3
 80035b6:	e004      	b.n	80035c2 <HAL_GPIO_Init+0x1d6>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e002      	b.n	80035c2 <HAL_GPIO_Init+0x1d6>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_GPIO_Init+0x1d6>
 80035c0:	2300      	movs	r3, #0
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	f002 0203 	and.w	r2, r2, #3
 80035c8:	0092      	lsls	r2, r2, #2
 80035ca:	4093      	lsls	r3, r2
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035d2:	4938      	ldr	r1, [pc, #224]	; (80036b4 <HAL_GPIO_Init+0x2c8>)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3302      	adds	r3, #2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003604:	4a30      	ldr	r2, [pc, #192]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800362e:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 8003636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800365a:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 8003664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	43db      	mvns	r3, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003688:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <HAL_GPIO_Init+0x2dc>)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3301      	adds	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f aeab 	bne.w	80033fc <HAL_GPIO_Init+0x10>
  }
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40010000 	.word	0x40010000
 80036b8:	48000400 	.word	0x48000400
 80036bc:	48000800 	.word	0x48000800
 80036c0:	48000c00 	.word	0x48000c00
 80036c4:	48001000 	.word	0x48001000
 80036c8:	58000800 	.word	0x58000800

080036cc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e001      	b.n	80036ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003718:	e002      	b.n	8003720 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <HAL_HSEM_IRQHandler+0x30>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_HSEM_IRQHandler+0x30>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	43db      	mvns	r3, r3
 8003740:	4906      	ldr	r1, [pc, #24]	; (800375c <HAL_HSEM_IRQHandler+0x30>)
 8003742:	4013      	ands	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <HAL_HSEM_IRQHandler+0x30>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f807 	bl	8003760 <HAL_HSEM_FreeCallback>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	58001500 	.word	0x58001500

08003760 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01e      	beq.n	80037c4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_IPCC_Init+0x60>)
 8003788:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fe fb44 	bl	8001e24 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800379c:	68b8      	ldr	r0, [r7, #8]
 800379e:	f000 f85b 	bl	8003858 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f82c 	bl	800380c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80037c2:	e001      	b.n	80037c8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	58000c00 	.word	0x58000c00

080037d8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	4613      	mov	r3, r2
 80037fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e00f      	b.n	800383a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <IPCC_SetDefaultCallbacks+0x44>)
 8003824:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3306      	adds	r3, #6
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	4a08      	ldr	r2, [pc, #32]	; (8003854 <IPCC_SetDefaultCallbacks+0x48>)
 8003832:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3301      	adds	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b05      	cmp	r3, #5
 800383e:	d9ec      	bls.n	800381a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	080037d9 	.word	0x080037d9
 8003854:	080037f3 	.word	0x080037f3

08003858 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800386c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	223f      	movs	r2, #63	; 0x3f
 8003872:	609a      	str	r2, [r3, #8]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	58000400 	.word	0x58000400

080038a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	58000400 	.word	0x58000400

080038bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ce:	d101      	bne.n	80038d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_RCC_HSE_Enable>:
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80038e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <LL_RCC_HSE_Disable>:
{
 80038fe:	b480      	push	{r7}
 8003900:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800390c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003910:	6013      	str	r3, [r2, #0]
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_RCC_HSE_IsReady>:
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800392e:	d101      	bne.n	8003934 <LL_RCC_HSE_IsReady+0x18>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <LL_RCC_HSE_IsReady+0x1a>
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_RCC_HSI_Enable>:
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <LL_RCC_HSI_Disable>:
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]
}
 8003972:	bf00      	nop
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_RCC_HSI_IsReady>:
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398e:	d101      	bne.n	8003994 <LL_RCC_HSI_IsReady+0x18>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_RCC_HSI_IsReady+0x1a>
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_RCC_HSI48_Enable>:
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_RCC_HSI48_Disable>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_RCC_HSI48_IsReady>:
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d101      	bne.n	8003a26 <LL_RCC_HSI48_IsReady+0x18>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <LL_RCC_HSI48_IsReady+0x1a>
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_LSE_Enable>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <LL_RCC_LSE_Disable>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_RCC_LSE_EnableBypass>:
{
 8003a76:	b480      	push	{r7}
 8003a78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a86:	f043 0304 	orr.w	r3, r3, #4
 8003a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_RCC_LSE_DisableBypass>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_RCC_LSE_IsReady>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d101      	bne.n	8003ad2 <LL_RCC_LSE_IsReady+0x18>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <LL_RCC_LSE_IsReady+0x1a>
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LL_RCC_LSI1_Enable>:
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_RCC_LSI1_Disable>:
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_RCC_LSI1_IsReady>:
{
 8003b22:	b480      	push	{r7}
 8003b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d101      	bne.n	8003b3a <LL_RCC_LSI1_IsReady+0x18>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <LL_RCC_LSI1_IsReady+0x1a>
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_LSI2_Enable>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_LSI2_Disable>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_LSI2_IsReady>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d101      	bne.n	8003ba2 <LL_RCC_LSI2_IsReady+0x18>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_RCC_LSI2_IsReady+0x1a>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_LSI2_SetTrimming>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_MSI_Enable>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <LL_RCC_MSI_Disable>:
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	6013      	str	r3, [r2, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_RCC_MSI_IsReady>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d101      	bne.n	8003c2e <LL_RCC_MSI_IsReady+0x16>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <LL_RCC_MSI_IsReady+0x18>
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_RCC_MSI_SetRange>:
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_RCC_MSI_GetRange>:
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c72:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2bb0      	cmp	r3, #176	; 0xb0
 8003c78:	d901      	bls.n	8003c7e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003c7a:	23b0      	movs	r3, #176	; 0xb0
 8003c7c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003c7e:	687b      	ldr	r3, [r7, #4]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_RCC_MSI_SetCalibTrimming>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_RCC_SetSysClkSource>:
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 0203 	bic.w	r2, r3, #3
 8003cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_RCC_GetSysClkSource>:
{
 8003cde:	b480      	push	{r7}
 8003ce0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_SetAHBPrescaler>:
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_C2_RCC_SetAHBPrescaler>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_RCC_SetAHB4Prescaler>:
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d5a:	f023 020f 	bic.w	r2, r3, #15
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <LL_RCC_SetAPB1Prescaler>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_RCC_SetAPB2Prescaler>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_RCC_GetAHBPrescaler>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <LL_RCC_GetAHB4Prescaler>:
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_RCC_PLL_Enable>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_RCC_PLL_Disable>:
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2c:	6013      	str	r3, [r2, #0]
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_RCC_PLL_IsReady>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e4a:	d101      	bne.n	8003e50 <LL_RCC_PLL_IsReady+0x18>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <LL_RCC_PLL_IsReady+0x1a>
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_PLL_GetN>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LL_RCC_PLL_GetR>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <LL_RCC_PLL_GetDivider>:
{
 8003e8e:	b480      	push	{r7}
 8003e90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <LL_RCC_PLL_GetMainSource>:
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_RCC_IsActiveFlag_HPRE>:
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d101      	bne.n	8003ed6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ef6:	d101      	bne.n	8003efc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d101      	bne.n	8003f22 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f40:	d101      	bne.n	8003f46 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f64:	d101      	bne.n	8003f6a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b08d      	sub	sp, #52	; 0x34
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e363      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 808d 	beq.w	80040b2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f98:	f7ff fea1 	bl	8003cde <LL_RCC_GetSysClkSource>
 8003f9c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f9e:	f7ff ff82 	bl	8003ea6 <LL_RCC_PLL_GetMainSource>
 8003fa2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x3e>
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d147      	bne.n	8004040 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d144      	bne.n	8004040 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e347      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003fc6:	f7ff fe4c 	bl	8003c62 <LL_RCC_MSI_GetRange>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	429c      	cmp	r4, r3
 8003fce:	d914      	bls.n	8003ffa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fd03 	bl	80049e0 <RCC_SetFlashLatencyFromMSIRange>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e336      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fe26 	bl	8003c3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fe4a 	bl	8003c8c <LL_RCC_MSI_SetCalibTrimming>
 8003ff8:	e013      	b.n	8004022 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fe1b 	bl	8003c3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fe3f 	bl	8003c8c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fce4 	bl	80049e0 <RCC_SetFlashLatencyFromMSIRange>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e317      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004022:	f000 fcc9 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 8004026:	4603      	mov	r3, r0
 8004028:	4aa4      	ldr	r2, [pc, #656]	; (80042bc <HAL_RCC_OscConfig+0x344>)
 800402a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800402c:	4ba4      	ldr	r3, [pc, #656]	; (80042c0 <HAL_RCC_OscConfig+0x348>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe fe57 	bl	8002ce4 <HAL_InitTick>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d039      	beq.n	80040b0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e308      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01e      	beq.n	8004086 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004048:	f7ff fdc8 	bl	8003bdc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800404c:	f7fe fe98 	bl	8002d80 <HAL_GetTick>
 8004050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004054:	f7fe fe94 	bl	8002d80 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e2f5      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004066:	f7ff fdd7 	bl	8003c18 <LL_RCC_MSI_IsReady>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f1      	beq.n	8004054 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fde0 	bl	8003c3a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fe04 	bl	8003c8c <LL_RCC_MSI_SetCalibTrimming>
 8004084:	e015      	b.n	80040b2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004086:	f7ff fdb8 	bl	8003bfa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800408a:	f7fe fe79 	bl	8002d80 <HAL_GetTick>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004092:	f7fe fe75 	bl	8002d80 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e2d6      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80040a4:	f7ff fdb8 	bl	8003c18 <LL_RCC_MSI_IsReady>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f1      	bne.n	8004092 <HAL_RCC_OscConfig+0x11a>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80040b0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d047      	beq.n	800414e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040be:	f7ff fe0e 	bl	8003cde <LL_RCC_GetSysClkSource>
 80040c2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c4:	f7ff feef 	bl	8003ea6 <LL_RCC_PLL_GetMainSource>
 80040c8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_OscConfig+0x164>
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d108      	bne.n	80040e8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d105      	bne.n	80040e8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d134      	bne.n	800414e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e2b4      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d102      	bne.n	80040f8 <HAL_RCC_OscConfig+0x180>
 80040f2:	f7ff fbf5 	bl	80038e0 <LL_RCC_HSE_Enable>
 80040f6:	e001      	b.n	80040fc <HAL_RCC_OscConfig+0x184>
 80040f8:	f7ff fc01 	bl	80038fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d012      	beq.n	800412a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fe3c 	bl	8002d80 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fe fe38 	bl	8002d80 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e299      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800411e:	f7ff fbfd 	bl	800391c <LL_RCC_HSE_IsReady>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f1      	beq.n	800410c <HAL_RCC_OscConfig+0x194>
 8004128:	e011      	b.n	800414e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fe fe29 	bl	8002d80 <HAL_GetTick>
 800412e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004132:	f7fe fe25 	bl	8002d80 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b64      	cmp	r3, #100	; 0x64
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e286      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004144:	f7ff fbea 	bl	800391c <LL_RCC_HSE_IsReady>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f1      	bne.n	8004132 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d04c      	beq.n	80041f4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800415a:	f7ff fdc0 	bl	8003cde <LL_RCC_GetSysClkSource>
 800415e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004160:	f7ff fea1 	bl	8003ea6 <LL_RCC_PLL_GetMainSource>
 8004164:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d005      	beq.n	8004178 <HAL_RCC_OscConfig+0x200>
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d10e      	bne.n	8004190 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d10b      	bne.n	8004190 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e266      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fc09 	bl	80039a0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800418e:	e031      	b.n	80041f4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d019      	beq.n	80041cc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004198:	f7ff fbd2 	bl	8003940 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe fdf0 	bl	8002d80 <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a4:	f7fe fdec 	bl	8002d80 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e24d      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80041b6:	f7ff fbe1 	bl	800397c <LL_RCC_HSI_IsReady>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f1      	beq.n	80041a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fbeb 	bl	80039a0 <LL_RCC_HSI_SetCalibTrimming>
 80041ca:	e013      	b.n	80041f4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041cc:	f7ff fbc7 	bl	800395e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fe fdd6 	bl	8002d80 <HAL_GetTick>
 80041d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d8:	f7fe fdd2 	bl	8002d80 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e233      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80041ea:	f7ff fbc7 	bl	800397c <LL_RCC_HSI_IsReady>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f1      	bne.n	80041d8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80a3 	beq.w	8004354 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d076      	beq.n	8004304 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d046      	beq.n	80042b0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004222:	f7ff fc7e 	bl	8003b22 <LL_RCC_LSI1_IsReady>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d113      	bne.n	8004254 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800422c:	f7ff fc57 	bl	8003ade <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004230:	f7fe fda6 	bl	8002d80 <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004238:	f7fe fda2 	bl	8002d80 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e203      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800424a:	f7ff fc6a 	bl	8003b22 <LL_RCC_LSI1_IsReady>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f1      	beq.n	8004238 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004254:	f7ff fc77 	bl	8003b46 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe fd92 	bl	8002d80 <HAL_GetTick>
 800425c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004260:	f7fe fd8e 	bl	8002d80 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b03      	cmp	r3, #3
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e1ef      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004272:	f7ff fc8a 	bl	8003b8a <LL_RCC_LSI2_IsReady>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f1      	beq.n	8004260 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fc94 	bl	8003bae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004286:	f7ff fc3b 	bl	8003b00 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fe fd79 	bl	8002d80 <HAL_GetTick>
 800428e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004292:	f7fe fd75 	bl	8002d80 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e1d6      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80042a4:	f7ff fc3d 	bl	8003b22 <LL_RCC_LSI1_IsReady>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f1      	bne.n	8004292 <HAL_RCC_OscConfig+0x31a>
 80042ae:	e051      	b.n	8004354 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80042b0:	f7ff fc15 	bl	8003ade <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fe fd64 	bl	8002d80 <HAL_GetTick>
 80042b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80042ba:	e00c      	b.n	80042d6 <HAL_RCC_OscConfig+0x35e>
 80042bc:	20000014 	.word	0x20000014
 80042c0:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042c4:	f7fe fd5c 	bl	8002d80 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1bd      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80042d6:	f7ff fc24 	bl	8003b22 <LL_RCC_LSI1_IsReady>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f1      	beq.n	80042c4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80042e0:	f7ff fc42 	bl	8003b68 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80042e6:	f7fe fd4b 	bl	8002d80 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e1ac      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80042f8:	f7ff fc47 	bl	8003b8a <LL_RCC_LSI2_IsReady>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f1      	bne.n	80042e6 <HAL_RCC_OscConfig+0x36e>
 8004302:	e027      	b.n	8004354 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004304:	f7ff fc30 	bl	8003b68 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fe fd3a 	bl	8002d80 <HAL_GetTick>
 800430c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004310:	f7fe fd36 	bl	8002d80 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b03      	cmp	r3, #3
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e197      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004322:	f7ff fc32 	bl	8003b8a <LL_RCC_LSI2_IsReady>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f1      	bne.n	8004310 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800432c:	f7ff fbe8 	bl	8003b00 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fe fd26 	bl	8002d80 <HAL_GetTick>
 8004334:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004338:	f7fe fd22 	bl	8002d80 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e183      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800434a:	f7ff fbea 	bl	8003b22 <LL_RCC_LSI1_IsReady>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f1      	bne.n	8004338 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d05b      	beq.n	8004418 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004360:	4ba7      	ldr	r3, [pc, #668]	; (8004600 <HAL_RCC_OscConfig+0x688>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d114      	bne.n	8004396 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800436c:	f7ff fa88 	bl	8003880 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004370:	f7fe fd06 	bl	8002d80 <HAL_GetTick>
 8004374:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004378:	f7fe fd02 	bl	8002d80 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e163      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438a:	4b9d      	ldr	r3, [pc, #628]	; (8004600 <HAL_RCC_OscConfig+0x688>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_RCC_OscConfig+0x42c>
 800439e:	f7ff fb48 	bl	8003a32 <LL_RCC_LSE_Enable>
 80043a2:	e00c      	b.n	80043be <HAL_RCC_OscConfig+0x446>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d104      	bne.n	80043b6 <HAL_RCC_OscConfig+0x43e>
 80043ac:	f7ff fb63 	bl	8003a76 <LL_RCC_LSE_EnableBypass>
 80043b0:	f7ff fb3f 	bl	8003a32 <LL_RCC_LSE_Enable>
 80043b4:	e003      	b.n	80043be <HAL_RCC_OscConfig+0x446>
 80043b6:	f7ff fb4d 	bl	8003a54 <LL_RCC_LSE_Disable>
 80043ba:	f7ff fb6d 	bl	8003a98 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d014      	beq.n	80043f0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fe fcdb 	bl	8002d80 <HAL_GetTick>
 80043ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fe fcd7 	bl	8002d80 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e136      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80043e4:	f7ff fb69 	bl	8003aba <LL_RCC_LSE_IsReady>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ef      	beq.n	80043ce <HAL_RCC_OscConfig+0x456>
 80043ee:	e013      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f0:	f7fe fcc6 	bl	8002d80 <HAL_GetTick>
 80043f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80043f6:	e00a      	b.n	800440e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f8:	f7fe fcc2 	bl	8002d80 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	; 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e121      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800440e:	f7ff fb54 	bl	8003aba <LL_RCC_LSE_IsReady>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ef      	bne.n	80043f8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02c      	beq.n	800447e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d014      	beq.n	8004456 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800442c:	f7ff facd 	bl	80039ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fe fca6 	bl	8002d80 <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004438:	f7fe fca2 	bl	8002d80 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e103      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800444a:	f7ff fae0 	bl	8003a0e <LL_RCC_HSI48_IsReady>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f1      	beq.n	8004438 <HAL_RCC_OscConfig+0x4c0>
 8004454:	e013      	b.n	800447e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004456:	f7ff fac9 	bl	80039ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445a:	f7fe fc91 	bl	8002d80 <HAL_GetTick>
 800445e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004462:	f7fe fc8d 	bl	8002d80 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0ee      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004474:	f7ff facb 	bl	8003a0e <LL_RCC_HSI48_IsReady>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f1      	bne.n	8004462 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80e4 	beq.w	8004650 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004488:	f7ff fc29 	bl	8003cde <LL_RCC_GetSysClkSource>
 800448c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	2b02      	cmp	r3, #2
 800449c:	f040 80b4 	bne.w	8004608 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 0203 	and.w	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d123      	bne.n	80044f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d11c      	bne.n	80044f6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d114      	bne.n	80044f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d10d      	bne.n	80044f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d05d      	beq.n	80045b2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b0c      	cmp	r3, #12
 80044fa:	d058      	beq.n	80045ae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e0a1      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800450e:	f7ff fc84 	bl	8003e1a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004512:	f7fe fc35 	bl	8002d80 <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451a:	f7fe fc31 	bl	8002d80 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e092      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1ef      	bne.n	800451a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_RCC_OscConfig+0x68c>)
 8004542:	4013      	ands	r3, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004552:	0212      	lsls	r2, r2, #8
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800455a:	4311      	orrs	r1, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004566:	430a      	orrs	r2, r1
 8004568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800456c:	4313      	orrs	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004570:	f7ff fc44 	bl	8003dfc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004584:	f7fe fbfc 	bl	8002d80 <HAL_GetTick>
 8004588:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7fe fbf8 	bl	8002d80 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e059      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0ef      	beq.n	800458c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ac:	e050      	b.n	8004650 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e04f      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d147      	bne.n	8004650 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045c0:	f7ff fc1c 	bl	8003dfc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045d4:	f7fe fbd4 	bl	8002d80 <HAL_GetTick>
 80045d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fe fbd0 	bl	8002d80 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e031      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ef      	beq.n	80045dc <HAL_RCC_OscConfig+0x664>
 80045fc:	e028      	b.n	8004650 <HAL_RCC_OscConfig+0x6d8>
 80045fe:	bf00      	nop
 8004600:	58000400 	.word	0x58000400
 8004604:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d01e      	beq.n	800464c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	f7ff fc04 	bl	8003e1a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fe fbb5 	bl	8002d80 <HAL_GetTick>
 8004616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461a:	f7fe fbb1 	bl	8002d80 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e012      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ef      	bne.n	800461a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800463a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCC_OscConfig+0x6e4>)
 8004646:	4013      	ands	r3, r2
 8004648:	60cb      	str	r3, [r1, #12]
 800464a:	e001      	b.n	8004650 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3734      	adds	r7, #52	; 0x34
 8004656:	46bd      	mov	sp, r7
 8004658:	bd90      	pop	{r4, r7, pc}
 800465a:	bf00      	nop
 800465c:	eefefffc 	.word	0xeefefffc

08004660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e12d      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004674:	4b98      	ldr	r3, [pc, #608]	; (80048d8 <HAL_RCC_ClockConfig+0x278>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d91b      	bls.n	80046ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b95      	ldr	r3, [pc, #596]	; (80048d8 <HAL_RCC_ClockConfig+0x278>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 0207 	bic.w	r2, r3, #7
 800468a:	4993      	ldr	r1, [pc, #588]	; (80048d8 <HAL_RCC_ClockConfig+0x278>)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004692:	f7fe fb75 	bl	8002d80 <HAL_GetTick>
 8004696:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004698:	e008      	b.n	80046ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800469a:	f7fe fb71 	bl	8002d80 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e111      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ac:	4b8a      	ldr	r3, [pc, #552]	; (80048d8 <HAL_RCC_ClockConfig+0x278>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d1ef      	bne.n	800469a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fb13 	bl	8003cf6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046d0:	f7fe fb56 	bl	8002d80 <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80046d8:	f7fe fb52 	bl	8002d80 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0f2      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80046ea:	f7ff fbe8 	bl	8003ebe <LL_RCC_IsActiveFlag_HPRE>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f1      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d016      	beq.n	800472e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fb0a 	bl	8003d1e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800470a:	f7fe fb39 	bl	8002d80 <HAL_GetTick>
 800470e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004712:	f7fe fb35 	bl	8002d80 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0d5      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004724:	f7ff fbdd 	bl	8003ee2 <LL_RCC_IsActiveFlag_C2HPRE>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f1      	beq.n	8004712 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fb03 	bl	8003d4a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004744:	f7fe fb1c 	bl	8002d80 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800474c:	f7fe fb18 	bl	8002d80 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e0b8      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800475e:	f7ff fbd3 	bl	8003f08 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f1      	beq.n	800474c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d016      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fafd 	bl	8003d78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800477e:	f7fe faff 	bl	8002d80 <HAL_GetTick>
 8004782:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004786:	f7fe fafb 	bl	8002d80 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e09b      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004798:	f7ff fbc9 	bl	8003f2e <LL_RCC_IsActiveFlag_PPRE1>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f1      	beq.n	8004786 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff faf3 	bl	8003da0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047ba:	f7fe fae1 	bl	8002d80 <HAL_GetTick>
 80047be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047c2:	f7fe fadd 	bl	8002d80 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e07d      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80047d4:	f7ff fbbd 	bl	8003f52 <LL_RCC_IsActiveFlag_PPRE2>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f1      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d043      	beq.n	8004872 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d106      	bne.n	8004800 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80047f2:	f7ff f893 	bl	800391c <LL_RCC_HSE_IsReady>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d11e      	bne.n	800483a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e067      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d106      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004808:	f7ff fb16 	bl	8003e38 <LL_RCC_PLL_IsReady>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d113      	bne.n	800483a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e05c      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800481e:	f7ff f9fb 	bl	8003c18 <LL_RCC_MSI_IsReady>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e051      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800482c:	f7ff f8a6 	bl	800397c <LL_RCC_HSI_IsReady>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e04a      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fa39 	bl	8003cb6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004844:	f7fe fa9c 	bl	8002d80 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	e00a      	b.n	8004862 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484c:	f7fe fa98 	bl	8002d80 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e036      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	f7ff fa3c 	bl	8003cde <LL_RCC_GetSysClkSource>
 8004866:	4602      	mov	r2, r0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	429a      	cmp	r2, r3
 8004870:	d1ec      	bne.n	800484c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004872:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <HAL_RCC_ClockConfig+0x278>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d21b      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004880:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <HAL_RCC_ClockConfig+0x278>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f023 0207 	bic.w	r2, r3, #7
 8004888:	4913      	ldr	r1, [pc, #76]	; (80048d8 <HAL_RCC_ClockConfig+0x278>)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004890:	f7fe fa76 	bl	8002d80 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	e008      	b.n	80048aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004898:	f7fe fa72 	bl	8002d80 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e012      	b.n	80048d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_RCC_ClockConfig+0x278>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1ef      	bne.n	8004898 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048b8:	f000 f87e 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80048bc:	4603      	mov	r3, r0
 80048be:	4a07      	ldr	r2, [pc, #28]	; (80048dc <HAL_RCC_ClockConfig+0x27c>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80048c2:	f7fe fa69 	bl	8002d98 <HAL_GetTickPrio>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe fa0b 	bl	8002ce4 <HAL_InitTick>
 80048ce:	4603      	mov	r3, r0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	58004000 	.word	0x58004000
 80048dc:	20000014 	.word	0x20000014

080048e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e6:	f7ff f9fa 	bl	8003cde <LL_RCC_GetSysClkSource>
 80048ea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80048f2:	f7ff f9b6 	bl	8003c62 <LL_RCC_MSI_GetRange>
 80048f6:	4603      	mov	r3, r0
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	4a2b      	ldr	r2, [pc, #172]	; (80049ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8004900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	e04b      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b04      	cmp	r3, #4
 800490c:	d102      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800490e:	4b28      	ldr	r3, [pc, #160]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	e045      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b08      	cmp	r3, #8
 8004918:	d10a      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800491a:	f7fe ffcf 	bl	80038bc <LL_RCC_HSE_IsEnabledDiv2>
 800491e:	4603      	mov	r3, r0
 8004920:	2b01      	cmp	r3, #1
 8004922:	d102      	bne.n	800492a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004924:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e03a      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800492a:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e037      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004930:	f7ff fab9 	bl	8003ea6 <LL_RCC_PLL_GetMainSource>
 8004934:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d003      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x64>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d003      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0x6a>
 8004942:	e00d      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004946:	60bb      	str	r3, [r7, #8]
        break;
 8004948:	e015      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800494a:	f7fe ffb7 	bl	80038bc <LL_RCC_HSE_IsEnabledDiv2>
 800494e:	4603      	mov	r3, r0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d102      	bne.n	800495a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004954:	4b16      	ldr	r3, [pc, #88]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004956:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004958:	e00d      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800495a:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800495c:	60bb      	str	r3, [r7, #8]
        break;
 800495e:	e00a      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004960:	f7ff f97f 	bl	8003c62 <LL_RCC_MSI_GetRange>
 8004964:	4603      	mov	r3, r0
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	4a0f      	ldr	r2, [pc, #60]	; (80049ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800496e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004972:	60bb      	str	r3, [r7, #8]
        break;
 8004974:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004976:	f7ff fa71 	bl	8003e5c <LL_RCC_PLL_GetN>
 800497a:	4602      	mov	r2, r0
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	fb03 f402 	mul.w	r4, r3, r2
 8004982:	f7ff fa84 	bl	8003e8e <LL_RCC_PLL_GetDivider>
 8004986:	4603      	mov	r3, r0
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	3301      	adds	r3, #1
 800498c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004990:	f7ff fa71 	bl	8003e76 <LL_RCC_PLL_GetR>
 8004994:	4603      	mov	r3, r0
 8004996:	0f5b      	lsrs	r3, r3, #29
 8004998:	3301      	adds	r3, #1
 800499a:	fbb4 f3f3 	udiv	r3, r4, r3
 800499e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80049a0:	68fb      	ldr	r3, [r7, #12]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd90      	pop	{r4, r7, pc}
 80049aa:	bf00      	nop
 80049ac:	0800a6d0 	.word	0x0800a6d0
 80049b0:	00f42400 	.word	0x00f42400
 80049b4:	01e84800 	.word	0x01e84800

080049b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b8:	b598      	push	{r3, r4, r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80049bc:	f7ff ff90 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 80049c0:	4604      	mov	r4, r0
 80049c2:	f7ff fa01 	bl	8003dc8 <LL_RCC_GetAHBPrescaler>
 80049c6:	4603      	mov	r3, r0
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	4a03      	ldr	r2, [pc, #12]	; (80049dc <HAL_RCC_GetHCLKFreq+0x24>)
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd98      	pop	{r3, r4, r7, pc}
 80049dc:	0800a690 	.word	0x0800a690

080049e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2bb0      	cmp	r3, #176	; 0xb0
 80049ec:	d903      	bls.n	80049f6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80049ee:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e007      	b.n	8004a06 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	4a11      	ldr	r2, [pc, #68]	; (8004a44 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a04:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004a06:	f7ff f9eb 	bl	8003de0 <LL_RCC_GetAHB4Prescaler>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	0c9c      	lsrs	r4, r3, #18
 8004a2a:	f7fe ff39 	bl	80038a0 <HAL_PWREx_GetVoltageRange>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4619      	mov	r1, r3
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 f80c 	bl	8004a50 <RCC_SetFlashLatency>
 8004a38:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd90      	pop	{r4, r7, pc}
 8004a42:	bf00      	nop
 8004a44:	0800a6d0 	.word	0x0800a6d0
 8004a48:	0800a690 	.word	0x0800a690
 8004a4c:	431bde83 	.word	0x431bde83

08004a50 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b093      	sub	sp, #76	; 0x4c
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004a5a:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <RCC_SetFlashLatency+0xe8>)
 8004a5c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004a66:	4a35      	ldr	r2, [pc, #212]	; (8004b3c <RCC_SetFlashLatency+0xec>)
 8004a68:	f107 031c 	add.w	r3, r7, #28
 8004a6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004a72:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <RCC_SetFlashLatency+0xf0>)
 8004a74:	f107 040c 	add.w	r4, r7, #12
 8004a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004a7e:	2300      	movs	r3, #0
 8004a80:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a88:	d11a      	bne.n	8004ac0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a8e:	e013      	b.n	8004ab8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	3348      	adds	r3, #72	; 0x48
 8004a96:	443b      	add	r3, r7
 8004a98:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d807      	bhi.n	8004ab2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	3348      	adds	r3, #72	; 0x48
 8004aa8:	443b      	add	r3, r7
 8004aaa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004aae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004ab0:	e020      	b.n	8004af4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d9e8      	bls.n	8004a90 <RCC_SetFlashLatency+0x40>
 8004abe:	e019      	b.n	8004af4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac4:	e013      	b.n	8004aee <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	3348      	adds	r3, #72	; 0x48
 8004acc:	443b      	add	r3, r7
 8004ace:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d807      	bhi.n	8004ae8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	3348      	adds	r3, #72	; 0x48
 8004ade:	443b      	add	r3, r7
 8004ae0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ae4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004ae6:	e005      	b.n	8004af4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	3301      	adds	r3, #1
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d9e8      	bls.n	8004ac6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <RCC_SetFlashLatency+0xf4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 0207 	bic.w	r2, r3, #7
 8004afc:	4911      	ldr	r1, [pc, #68]	; (8004b44 <RCC_SetFlashLatency+0xf4>)
 8004afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b04:	f7fe f93c 	bl	8002d80 <HAL_GetTick>
 8004b08:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b0a:	e008      	b.n	8004b1e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b0c:	f7fe f938 	bl	8002d80 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e007      	b.n	8004b2e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <RCC_SetFlashLatency+0xf4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d1ef      	bne.n	8004b0c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	374c      	adds	r7, #76	; 0x4c
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}
 8004b36:	bf00      	nop
 8004b38:	0800a4ec 	.word	0x0800a4ec
 8004b3c:	0800a4fc 	.word	0x0800a4fc
 8004b40:	0800a508 	.word	0x0800a508
 8004b44:	58004000 	.word	0x58004000

08004b48 <LL_RCC_LSE_IsEnabled>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <LL_RCC_LSE_IsEnabled+0x18>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <LL_RCC_LSE_IsEnabled+0x1a>
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <LL_RCC_LSE_IsReady>:
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d101      	bne.n	8004b84 <LL_RCC_LSE_IsReady+0x18>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <LL_RCC_LSE_IsReady+0x1a>
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_RCC_SetRFWKPClockSource>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <LL_RCC_SetSMPSClockSource>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	f023 0203 	bic.w	r2, r3, #3
 8004bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <LL_RCC_SetSMPSPrescaler>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_RCC_SetUSARTClockSource>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f023 0203 	bic.w	r2, r3, #3
 8004c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <LL_RCC_SetLPUARTClockSource>:
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <LL_RCC_SetI2CClockSource>:
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	091b      	lsrs	r3, r3, #4
 8004c78:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	401a      	ands	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <LL_RCC_SetLPTIMClockSource>:
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004caa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_RCC_SetSAIClockSource>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <LL_RCC_SetRNGClockSource>:
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <LL_RCC_SetCLK48ClockSource>:
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_SetUSBClockSource>:
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ffe3 	bl	8004d2a <LL_RCC_SetCLK48ClockSource>
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <LL_RCC_SetADCClockSource>:
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <LL_RCC_SetRTCClockSource>:
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <LL_RCC_GetRTCClockSource>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_RCC_ForceBackupDomainReset>:
{
 8004dde:	b480      	push	{r7}
 8004de0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004df6:	bf00      	nop
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_RCC_PLLSAI1_Enable>:
{
 8004e22:	b480      	push	{r7}
 8004e24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e34:	6013      	str	r3, [r2, #0]
}
 8004e36:	bf00      	nop
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_RCC_PLLSAI1_Disable>:
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <LL_RCC_PLLSAI1_IsReady>:
{
 8004e5e:	b480      	push	{r7}
 8004e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e70:	d101      	bne.n	8004e76 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b088      	sub	sp, #32
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004e8e:	2300      	movs	r3, #0
 8004e90:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d034      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ea6:	d021      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004ea8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eac:	d81b      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb2:	d01d      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004eb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb8:	d815      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec2:	d110      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ed4:	e00d      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f947 	bl	800516e <RCCEx_PLLSAI1_ConfigNP>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ee4:	e005      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	77fb      	strb	r3, [r7, #31]
        break;
 8004eea:	e002      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004eec:	bf00      	nop
 8004eee:	e000      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef2:	7ffb      	ldrb	r3, [r7, #31]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fee8 	bl	8004cd2 <LL_RCC_SetSAIClockSource>
 8004f02:	e001      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	7ffb      	ldrb	r3, [r7, #31]
 8004f06:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d046      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004f14:	f7ff ff56 	bl	8004dc4 <LL_RCC_GetRTCClockSource>
 8004f18:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d03c      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f24:	f7fe fcac 	bl	8003880 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d105      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff30 	bl	8004d98 <LL_RCC_SetRTCClockSource>
 8004f38:	e02e      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004f44:	f7ff ff4b 	bl	8004dde <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004f48:	f7ff ff5a 	bl	8004e00 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004f64:	f7ff fdf0 	bl	8004b48 <LL_RCC_LSE_IsEnabled>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d114      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f6e:	f7fd ff07 	bl	8002d80 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004f74:	e00b      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f76:	f7fd ff03 	bl	8002d80 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d902      	bls.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	77fb      	strb	r3, [r7, #31]
              break;
 8004f8c:	e004      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004f8e:	f7ff fded 	bl	8004b6c <LL_RCC_LSE_IsReady>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d1ee      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004f98:	7ffb      	ldrb	r3, [r7, #31]
 8004f9a:	77bb      	strb	r3, [r7, #30]
 8004f9c:	e001      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9e:	7ffb      	ldrb	r3, [r7, #31]
 8004fa0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fe2a 	bl	8004c0c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fe35 	bl	8004c38 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fe5d 	bl	8004c9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fe52 	bl	8004c9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d004      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fe2a 	bl	8004c64 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fe1f 	bl	8004c64 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d022      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fe8d 	bl	8004d56 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005044:	d107      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005054:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800505e:	d10b      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f8dd 	bl	8005224 <RCCEx_PLLSAI1_ConfigNQ>
 800506a:	4603      	mov	r3, r0
 800506c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800506e:	7ffb      	ldrb	r3, [r7, #31]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005074:	7ffb      	ldrb	r3, [r7, #31]
 8005076:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005080:	2b00      	cmp	r3, #0
 8005082:	d02b      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d008      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005096:	d003      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fe2a 	bl	8004cfe <LL_RCC_SetRNGClockSource>
 80050aa:	e00a      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	2000      	movs	r0, #0
 80050b8:	f7ff fe21 	bl	8004cfe <LL_RCC_SetRNGClockSource>
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff fe34 	bl	8004d2a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80050ca:	d107      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d022      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fe3d 	bl	8004d6c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fa:	d107      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005114:	d10b      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3304      	adds	r3, #4
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f8dd 	bl	80052da <RCCEx_PLLSAI1_ConfigNR>
 8005120:	4603      	mov	r3, r0
 8005122:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005124:	7ffb      	ldrb	r3, [r7, #31]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800512a:	7ffb      	ldrb	r3, [r7, #31]
 800512c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fd26 	bl	8004b90 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fd45 	bl	8004be4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fd2c 	bl	8004bbc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005164:	7fbb      	ldrb	r3, [r7, #30]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800517a:	f7ff fe61 	bl	8004e40 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800517e:	f7fd fdff 	bl	8002d80 <HAL_GetTick>
 8005182:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005184:	e009      	b.n	800519a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005186:	f7fd fdfb 	bl	8002d80 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d902      	bls.n	800519a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	73fb      	strb	r3, [r7, #15]
      break;
 8005198:	e004      	b.n	80051a4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800519a:	f7ff fe60 	bl	8004e5e <LL_RCC_PLLSAI1_IsReady>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f0      	bne.n	8005186 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d137      	bne.n	800521a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80051aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051be:	4313      	orrs	r3, r2
 80051c0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d4:	4313      	orrs	r3, r2
 80051d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80051d8:	f7ff fe23 	bl	8004e22 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fd fdd0 	bl	8002d80 <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051e2:	e009      	b.n	80051f8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051e4:	f7fd fdcc 	bl	8002d80 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d902      	bls.n	80051f8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	73fb      	strb	r3, [r7, #15]
        break;
 80051f6:	e004      	b.n	8005202 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051f8:	f7ff fe31 	bl	8004e5e <LL_RCC_PLLSAI1_IsReady>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d1f0      	bne.n	80051e4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d108      	bne.n	800521a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005216:	4313      	orrs	r3, r2
 8005218:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005230:	f7ff fe06 	bl	8004e40 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005234:	f7fd fda4 	bl	8002d80 <HAL_GetTick>
 8005238:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800523a:	e009      	b.n	8005250 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800523c:	f7fd fda0 	bl	8002d80 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d902      	bls.n	8005250 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	73fb      	strb	r3, [r7, #15]
      break;
 800524e:	e004      	b.n	800525a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005250:	f7ff fe05 	bl	8004e5e <LL_RCC_PLLSAI1_IsReady>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d137      	bne.n	80052d0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005274:	4313      	orrs	r3, r2
 8005276:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800528a:	4313      	orrs	r3, r2
 800528c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800528e:	f7ff fdc8 	bl	8004e22 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005292:	f7fd fd75 	bl	8002d80 <HAL_GetTick>
 8005296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005298:	e009      	b.n	80052ae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800529a:	f7fd fd71 	bl	8002d80 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d902      	bls.n	80052ae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	73fb      	strb	r3, [r7, #15]
        break;
 80052ac:	e004      	b.n	80052b8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052ae:	f7ff fdd6 	bl	8004e5e <LL_RCC_PLLSAI1_IsReady>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d1f0      	bne.n	800529a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80052be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052cc:	4313      	orrs	r3, r2
 80052ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80052e6:	f7ff fdab 	bl	8004e40 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052ea:	f7fd fd49 	bl	8002d80 <HAL_GetTick>
 80052ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052f0:	e009      	b.n	8005306 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052f2:	f7fd fd45 	bl	8002d80 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d902      	bls.n	8005306 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	73fb      	strb	r3, [r7, #15]
      break;
 8005304:	e004      	b.n	8005310 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005306:	f7ff fdaa 	bl	8004e5e <LL_RCC_PLLSAI1_IsReady>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f0      	bne.n	80052f2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d137      	bne.n	8005386 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800532a:	4313      	orrs	r3, r2
 800532c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005340:	4313      	orrs	r3, r2
 8005342:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005344:	f7ff fd6d 	bl	8004e22 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fd fd1a 	bl	8002d80 <HAL_GetTick>
 800534c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800534e:	e009      	b.n	8005364 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005350:	f7fd fd16 	bl	8002d80 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d902      	bls.n	8005364 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	73fb      	strb	r3, [r7, #15]
        break;
 8005362:	e004      	b.n	800536e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005364:	f7ff fd7b 	bl	8004e5e <LL_RCC_PLLSAI1_IsReady>
 8005368:	4603      	mov	r3, r0
 800536a:	2b01      	cmp	r3, #1
 800536c:	d1f0      	bne.n	8005350 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d108      	bne.n	8005386 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005382:	4313      	orrs	r3, r2
 8005384:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005386:	7bfb      	ldrb	r3, [r7, #15]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e09f      	b.n	80054e2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc fd58 	bl	8001e6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80053c4:	4b49      	ldr	r3, [pc, #292]	; (80054ec <HAL_RTC_Init+0x15c>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d07e      	beq.n	80054ce <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	22ca      	movs	r2, #202	; 0xca
 80053d6:	625a      	str	r2, [r3, #36]	; 0x24
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2253      	movs	r2, #83	; 0x53
 80053de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8ab 	bl	800553c <RTC_EnterInitMode>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	22ff      	movs	r2, #255	; 0xff
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2204      	movs	r2, #4
 80053f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
 8005400:	e067      	b.n	80054d2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005414:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6899      	ldr	r1, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68d2      	ldr	r2, [r2, #12]
 800543c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6919      	ldr	r1, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	041a      	lsls	r2, r3, #16
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005460:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0203 	bic.w	r2, r2, #3
 8005470:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b00      	cmp	r3, #0
 8005496:	d113      	bne.n	80054c0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f829 	bl	80054f0 <HAL_RTC_WaitForSynchro>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00d      	beq.n	80054c0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	22ff      	movs	r2, #255	; 0xff
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2204      	movs	r2, #4
 80054b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e010      	b.n	80054e2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
 80054cc:	e001      	b.n	80054d2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d103      	bne.n	80054e0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40002800 	.word	0x40002800

080054f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005506:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005508:	f7fd fc3a 	bl	8002d80 <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800550e:	e009      	b.n	8005524 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005510:	f7fd fc36 	bl	8002d80 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800551e:	d901      	bls.n	8005524 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e007      	b.n	8005534 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ee      	beq.n	8005510 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d119      	bne.n	8005586 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f04f 32ff 	mov.w	r2, #4294967295
 800555a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800555c:	f7fd fc10 	bl	8002d80 <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005562:	e009      	b.n	8005578 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005564:	f7fd fc0c 	bl	8002d80 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005572:	d901      	bls.n	8005578 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e007      	b.n	8005588 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0ee      	beq.n	8005564 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e0a8      	b.n	80056fc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	22ca      	movs	r2, #202	; 0xca
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2253      	movs	r2, #83	; 0x53
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d020      	beq.n	800561a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80055d8:	f7fd fbd2 	bl	8002d80 <HAL_GetTick>
 80055dc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80055de:	e015      	b.n	800560c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055e0:	f7fd fbce 	bl	8002d80 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ee:	d90d      	bls.n	800560c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	22ff      	movs	r2, #255	; 0xff
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2203      	movs	r2, #3
 80055fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e077      	b.n	80056fc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e2      	bne.n	80055e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005628:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800563a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800563c:	f7fd fba0 	bl	8002d80 <HAL_GetTick>
 8005640:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005642:	e015      	b.n	8005670 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005644:	f7fd fb9c 	bl	8002d80 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005652:	d90d      	bls.n	8005670 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	22ff      	movs	r2, #255	; 0xff
 800565a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2203      	movs	r2, #3
 8005660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e045      	b.n	80056fc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0e2      	beq.n	8005644 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0207 	bic.w	r2, r2, #7
 8005694:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6899      	ldr	r1, [r3, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80056a6:	4b17      	ldr	r3, [pc, #92]	; (8005704 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80056a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ac:	4a15      	ldr	r2, [pc, #84]	; (8005704 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80056ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80056b6:	4b13      	ldr	r3, [pc, #76]	; (8005704 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80056bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056d0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056e0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	22ff      	movs	r2, #255	; 0xff
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	58000800 	.word	0x58000800

08005708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e095      	b.n	8005846 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d108      	bne.n	8005734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800572a:	d009      	beq.n	8005740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	61da      	str	r2, [r3, #28]
 8005732:	e005      	b.n	8005740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc fbba 	bl	8001ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005776:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005780:	d902      	bls.n	8005788 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e002      	b.n	800578e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800578c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005796:	d007      	beq.n	80057a8 <HAL_SPI_Init+0xa0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057a0:	d002      	beq.n	80057a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ea:	ea42 0103 	orr.w	r1, r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	f003 0204 	and.w	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005824:	ea42 0103 	orr.w	r1, r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b088      	sub	sp, #32
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_SPI_Transmit+0x22>
 800586c:	2302      	movs	r3, #2
 800586e:	e158      	b.n	8005b22 <HAL_SPI_Transmit+0x2d4>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005878:	f7fd fa82 	bl	8002d80 <HAL_GetTick>
 800587c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800588e:	2302      	movs	r3, #2
 8005890:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005892:	e13d      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Transmit+0x52>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058a4:	e134      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2203      	movs	r2, #3
 80058aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f0:	d10f      	bne.n	8005912 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005900:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005910:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b40      	cmp	r3, #64	; 0x40
 800591e:	d007      	beq.n	8005930 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005938:	d94b      	bls.n	80059d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <HAL_SPI_Transmit+0xfa>
 8005942:	8afb      	ldrh	r3, [r7, #22]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d13e      	bne.n	80059c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	881a      	ldrh	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	1c9a      	adds	r2, r3, #2
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800596c:	e02b      	b.n	80059c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d112      	bne.n	80059a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	881a      	ldrh	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059a0:	e011      	b.n	80059c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059a2:	f7fd f9ed 	bl	8002d80 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d803      	bhi.n	80059ba <HAL_SPI_Transmit+0x16c>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b8:	d102      	bne.n	80059c0 <HAL_SPI_Transmit+0x172>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059c4:	e0a4      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ce      	bne.n	800596e <HAL_SPI_Transmit+0x120>
 80059d0:	e07c      	b.n	8005acc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_SPI_Transmit+0x192>
 80059da:	8afb      	ldrh	r3, [r7, #22]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d170      	bne.n	8005ac2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d912      	bls.n	8005a10 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	881a      	ldrh	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b02      	subs	r3, #2
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a0e:	e058      	b.n	8005ac2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a36:	e044      	b.n	8005ac2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d12b      	bne.n	8005a9e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d912      	bls.n	8005a76 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b02      	subs	r3, #2
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a74:	e025      	b.n	8005ac2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	7812      	ldrb	r2, [r2, #0]
 8005a82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a9c:	e011      	b.n	8005ac2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a9e:	f7fd f96f 	bl	8002d80 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d803      	bhi.n	8005ab6 <HAL_SPI_Transmit+0x268>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d102      	bne.n	8005abc <HAL_SPI_Transmit+0x26e>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ac0:	e026      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1b5      	bne.n	8005a38 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fdf7 	bl	80066c4 <SPI_EndRxTxTransaction>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e000      	b.n	8005b10 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b088      	sub	sp, #32
 8005b2e:	af02      	add	r7, sp, #8
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	603b      	str	r3, [r7, #0]
 8005b36:	4613      	mov	r3, r2
 8005b38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b46:	d112      	bne.n	8005b6e <HAL_SPI_Receive+0x44>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10e      	bne.n	8005b6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2204      	movs	r2, #4
 8005b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f910 	bl	8005d8a <HAL_SPI_TransmitReceive>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	e109      	b.n	8005d82 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_SPI_Receive+0x52>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e102      	b.n	8005d82 <HAL_SPI_Receive+0x258>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b84:	f7fd f8fc 	bl	8002d80 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d002      	beq.n	8005b9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
 8005b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b9a:	e0e9      	b.n	8005d70 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_SPI_Receive+0x7e>
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bac:	e0e0      	b.n	8005d70 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	88fa      	ldrh	r2, [r7, #6]
 8005bce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bf8:	d908      	bls.n	8005c0c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	e007      	b.n	8005c1c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c1a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c24:	d10f      	bne.n	8005c46 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d007      	beq.n	8005c64 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c6c:	d867      	bhi.n	8005d3e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c6e:	e030      	b.n	8005cd2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d117      	bne.n	8005cae <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f103 020c 	add.w	r2, r3, #12
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005cac:	e011      	b.n	8005cd2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cae:	f7fd f867 	bl	8002d80 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d803      	bhi.n	8005cc6 <HAL_SPI_Receive+0x19c>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d102      	bne.n	8005ccc <HAL_SPI_Receive+0x1a2>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005cd0:	e04e      	b.n	8005d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1c8      	bne.n	8005c70 <HAL_SPI_Receive+0x146>
 8005cde:	e034      	b.n	8005d4a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d115      	bne.n	8005d1a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	1c9a      	adds	r2, r3, #2
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d18:	e011      	b.n	8005d3e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d1a:	f7fd f831 	bl	8002d80 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d803      	bhi.n	8005d32 <HAL_SPI_Receive+0x208>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d30:	d102      	bne.n	8005d38 <HAL_SPI_Receive+0x20e>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d3c:	e018      	b.n	8005d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ca      	bne.n	8005ce0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fc60 	bl	8006614 <SPI_EndRxTransaction>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	75fb      	strb	r3, [r7, #23]
 8005d6c:	e000      	b.n	8005d70 <HAL_SPI_Receive+0x246>
  }

error :
 8005d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b08a      	sub	sp, #40	; 0x28
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_SPI_TransmitReceive+0x26>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e1fb      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x41e>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db8:	f7fc ffe2 	bl	8002d80 <HAL_GetTick>
 8005dbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dd4:	7efb      	ldrb	r3, [r7, #27]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d00e      	beq.n	8005df8 <HAL_SPI_TransmitReceive+0x6e>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de0:	d106      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d102      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x66>
 8005dea:	7efb      	ldrb	r3, [r7, #27]
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d003      	beq.n	8005df8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005df6:	e1cd      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x80>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x80>
 8005e04:	887b      	ldrh	r3, [r7, #2]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e10:	e1c0      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d003      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2205      	movs	r2, #5
 8005e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	887a      	ldrh	r2, [r7, #2]
 8005e36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	887a      	ldrh	r2, [r7, #2]
 8005e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	887a      	ldrh	r2, [r7, #2]
 8005e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e68:	d802      	bhi.n	8005e70 <HAL_SPI_TransmitReceive+0xe6>
 8005e6a:	8a3b      	ldrh	r3, [r7, #16]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d908      	bls.n	8005e82 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	e007      	b.n	8005e92 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e90:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	d007      	beq.n	8005eb0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eb8:	d97c      	bls.n	8005fb4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0x13e>
 8005ec2:	8a7b      	ldrh	r3, [r7, #18]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d169      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	881a      	ldrh	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eec:	e056      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d11b      	bne.n	8005f34 <HAL_SPI_TransmitReceive+0x1aa>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <HAL_SPI_TransmitReceive+0x1aa>
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d113      	bne.n	8005f34 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	881a      	ldrh	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d11c      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x1f2>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f7c:	f7fc ff00 	bl	8002d80 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d807      	bhi.n	8005f9c <HAL_SPI_TransmitReceive+0x212>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f92:	d003      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f9a:	e0fb      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1a3      	bne.n	8005eee <HAL_SPI_TransmitReceive+0x164>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d19d      	bne.n	8005eee <HAL_SPI_TransmitReceive+0x164>
 8005fb2:	e0df      	b.n	8006174 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x23a>
 8005fbc:	8a7b      	ldrh	r3, [r7, #18]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	f040 80cb 	bne.w	800615a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d912      	bls.n	8005ff4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	881a      	ldrh	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	1c9a      	adds	r2, r3, #2
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b02      	subs	r3, #2
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ff2:	e0b2      	b.n	800615a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	7812      	ldrb	r2, [r2, #0]
 8006000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800601a:	e09e      	b.n	800615a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b02      	cmp	r3, #2
 8006028:	d134      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x30a>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d02f      	beq.n	8006094 <HAL_SPI_TransmitReceive+0x30a>
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	2b01      	cmp	r3, #1
 8006038:	d12c      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d912      	bls.n	800606a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	881a      	ldrh	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	1c9a      	adds	r2, r3, #2
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b02      	subs	r3, #2
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006068:	e012      	b.n	8006090 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	7812      	ldrb	r2, [r2, #0]
 8006076:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d148      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x3aa>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d042      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d923      	bls.n	8006102 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	b292      	uxth	r2, r2
 80060c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b02      	subs	r3, #2
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d81f      	bhi.n	8006130 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	e016      	b.n	8006130 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f103 020c 	add.w	r2, r3, #12
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	7812      	ldrb	r2, [r2, #0]
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006130:	2301      	movs	r3, #1
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006134:	f7fc fe24 	bl	8002d80 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006140:	429a      	cmp	r2, r3
 8006142:	d803      	bhi.n	800614c <HAL_SPI_TransmitReceive+0x3c2>
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d102      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x3c8>
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006158:	e01c      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f af5b 	bne.w	800601c <HAL_SPI_TransmitReceive+0x292>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	f47f af54 	bne.w	800601c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 faa3 	bl	80066c4 <SPI_EndRxTxTransaction>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d006      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	661a      	str	r2, [r3, #96]	; 0x60
 8006190:	e000      	b.n	8006194 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3728      	adds	r7, #40	; 0x28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10e      	bne.n	80061f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d009      	beq.n	80061f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	4798      	blx	r3
    return;
 80061ee:	e0ce      	b.n	800638e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <HAL_SPI_IRQHandler+0x5e>
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
    return;
 800620c:	e0bf      	b.n	800638e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <HAL_SPI_IRQHandler+0x7e>
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d105      	bne.n	800622e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80b0 	beq.w	800638e <HAL_SPI_IRQHandler+0x1de>
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 80aa 	beq.w	800638e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d023      	beq.n	800628c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b03      	cmp	r3, #3
 800624e:	d011      	beq.n	8006274 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006254:	f043 0204 	orr.w	r2, r3, #4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	e00b      	b.n	800628c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	693b      	ldr	r3, [r7, #16]
        return;
 800628a:	e080      	b.n	800638e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d014      	beq.n	80062c0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629a:	f043 0201 	orr.w	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ce:	f043 0208 	orr.w	r2, r3, #8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d04f      	beq.n	800638c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d104      	bne.n	8006318 <HAL_SPI_IRQHandler+0x168>
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d034      	beq.n	8006382 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0203 	bic.w	r2, r2, #3
 8006326:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	2b00      	cmp	r3, #0
 800632e:	d011      	beq.n	8006354 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <HAL_SPI_IRQHandler+0x1e4>)
 8006336:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	4618      	mov	r0, r3
 800633e:	f7fc ff47 	bl	80031d0 <HAL_DMA_Abort_IT>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	2b00      	cmp	r3, #0
 800635a:	d016      	beq.n	800638a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	4a0c      	ldr	r2, [pc, #48]	; (8006394 <HAL_SPI_IRQHandler+0x1e4>)
 8006362:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006368:	4618      	mov	r0, r3
 800636a:	f7fc ff31 	bl	80031d0 <HAL_DMA_Abort_IT>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006378:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006380:	e003      	b.n	800638a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f808 	bl	8006398 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006388:	e000      	b.n	800638c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800638a:	bf00      	nop
    return;
 800638c:	bf00      	nop
  }
}
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	080063ad 	.word	0x080063ad

08006398 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7ff ffe5 	bl	8006398 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	4613      	mov	r3, r2
 80063e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063e8:	f7fc fcca 	bl	8002d80 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	4413      	add	r3, r2
 80063f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063f8:	f7fc fcc2 	bl	8002d80 <HAL_GetTick>
 80063fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063fe:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	015b      	lsls	r3, r3, #5
 8006404:	0d1b      	lsrs	r3, r3, #20
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	fb02 f303 	mul.w	r3, r2, r3
 800640c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800640e:	e054      	b.n	80064ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006416:	d050      	beq.n	80064ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006418:	f7fc fcb2 	bl	8002d80 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	429a      	cmp	r2, r3
 8006426:	d902      	bls.n	800642e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d13d      	bne.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800643c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006446:	d111      	bne.n	800646c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	d004      	beq.n	800645c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645a:	d107      	bne.n	800646c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006474:	d10f      	bne.n	8006496 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006494:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e017      	b.n	80064da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4013      	ands	r3, r2
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d19b      	bne.n	8006410 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000014 	.word	0x20000014

080064e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064fa:	f7fc fc41 	bl	8002d80 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	1a9b      	subs	r3, r3, r2
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	4413      	add	r3, r2
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800650a:	f7fc fc39 	bl	8002d80 <HAL_GetTick>
 800650e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006518:	4b3d      	ldr	r3, [pc, #244]	; (8006610 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	00da      	lsls	r2, r3, #3
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	0d1b      	lsrs	r3, r3, #20
 8006528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006530:	e060      	b.n	80065f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006538:	d107      	bne.n	800654a <SPI_WaitFifoStateUntilTimeout+0x62>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006548:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d050      	beq.n	80065f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006552:	f7fc fc15 	bl	8002d80 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655e:	429a      	cmp	r2, r3
 8006560:	d902      	bls.n	8006568 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d13d      	bne.n	80065e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006576:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006580:	d111      	bne.n	80065a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658a:	d004      	beq.n	8006596 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006594:	d107      	bne.n	80065a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ae:	d10f      	bne.n	80065d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e010      	b.n	8006606 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4013      	ands	r3, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	429a      	cmp	r2, r3
 8006602:	d196      	bne.n	8006532 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3728      	adds	r7, #40	; 0x28
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000014 	.word	0x20000014

08006614 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006628:	d111      	bne.n	800664e <SPI_EndRxTransaction+0x3a>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006632:	d004      	beq.n	800663e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d107      	bne.n	800664e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2200      	movs	r2, #0
 8006656:	2180      	movs	r1, #128	; 0x80
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff febd 	bl	80063d8 <SPI_WaitFlagStateUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	f043 0220 	orr.w	r2, r3, #32
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e023      	b.n	80066bc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800667c:	d11d      	bne.n	80066ba <SPI_EndRxTransaction+0xa6>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006686:	d004      	beq.n	8006692 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006690:	d113      	bne.n	80066ba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2200      	movs	r2, #0
 800669a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff ff22 	bl	80064e8 <SPI_WaitFifoStateUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d007      	beq.n	80066ba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e000      	b.n	80066bc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff ff03 	bl	80064e8 <SPI_WaitFifoStateUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e027      	b.n	8006748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff fe68 	bl	80063d8 <SPI_WaitFlagStateUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e014      	b.n	8006748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7ff fedc 	bl	80064e8 <SPI_WaitFifoStateUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e000      	b.n	8006748 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b0ba      	sub	sp, #232	; 0xe8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006776:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800677a:	f640 030f 	movw	r3, #2063	; 0x80f
 800677e:	4013      	ands	r3, r2
 8006780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11b      	bne.n	80067c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800678c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d015      	beq.n	80067c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 82e3 	beq.w	8006d80 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
      }
      return;
 80067c2:	e2dd      	b.n	8006d80 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8123 	beq.w	8006a14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80067ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80067d2:	4b8d      	ldr	r3, [pc, #564]	; (8006a08 <HAL_UART_IRQHandler+0x2b8>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80067da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80067de:	4b8b      	ldr	r3, [pc, #556]	; (8006a0c <HAL_UART_IRQHandler+0x2bc>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8116 	beq.w	8006a14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d011      	beq.n	8006818 <HAL_UART_IRQHandler+0xc8>
 80067f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2201      	movs	r2, #1
 8006806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	f043 0201 	orr.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d011      	beq.n	8006848 <HAL_UART_IRQHandler+0xf8>
 8006824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2202      	movs	r2, #2
 8006836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683e:	f043 0204 	orr.w	r2, r3, #4
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d011      	beq.n	8006878 <HAL_UART_IRQHandler+0x128>
 8006854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2204      	movs	r2, #4
 8006866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f043 0202 	orr.w	r2, r3, #2
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d017      	beq.n	80068b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006890:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006894:	4b5c      	ldr	r3, [pc, #368]	; (8006a08 <HAL_UART_IRQHandler+0x2b8>)
 8006896:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2208      	movs	r2, #8
 80068a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	f043 0208 	orr.w	r2, r3, #8
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <HAL_UART_IRQHandler+0x196>
 80068c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00c      	beq.n	80068e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068dc:	f043 0220 	orr.w	r2, r3, #32
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 8249 	beq.w	8006d84 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d013      	beq.n	8006926 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d105      	bne.n	8006916 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800690a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800690e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d007      	beq.n	8006926 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d005      	beq.n	800694a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800693e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006942:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006946:	2b00      	cmp	r3, #0
 8006948:	d054      	beq.n	80069f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fa44 	bl	8006dd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d146      	bne.n	80069ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800698a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800698e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1d9      	bne.n	800695e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d017      	beq.n	80069e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ba:	4a15      	ldr	r2, [pc, #84]	; (8006a10 <HAL_UART_IRQHandler+0x2c0>)
 80069bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fc fc03 	bl	80031d0 <HAL_DMA_Abort_IT>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d019      	beq.n	8006a04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80069de:	4610      	mov	r0, r2
 80069e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e2:	e00f      	b.n	8006a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9e1 	bl	8006dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ea:	e00b      	b.n	8006a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f9dd 	bl	8006dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f2:	e007      	b.n	8006a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9d9 	bl	8006dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006a02:	e1bf      	b.n	8006d84 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	bf00      	nop
    return;
 8006a06:	e1bd      	b.n	8006d84 <HAL_UART_IRQHandler+0x634>
 8006a08:	10000001 	.word	0x10000001
 8006a0c:	04000120 	.word	0x04000120
 8006a10:	08006ea5 	.word	0x08006ea5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	f040 8153 	bne.w	8006cc4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 814c 	beq.w	8006cc4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8145 	beq.w	8006cc4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2210      	movs	r2, #16
 8006a40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	f040 80bb 	bne.w	8006bc8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 818f 	beq.w	8006d88 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a74:	429a      	cmp	r2, r3
 8006a76:	f080 8187 	bcs.w	8006d88 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f040 8087 	bne.w	8006ba6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ac6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1da      	bne.n	8006a98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e1      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e3      	bne.n	8006b1e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b74:	f023 0310 	bic.w	r3, r3, #16
 8006b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b86:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e4      	bne.n	8006b64 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fc fab6 	bl	8003112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f8fd 	bl	8006dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bc6:	e0df      	b.n	8006d88 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80d1 	beq.w	8006d8c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 80cc 	beq.w	8006d8c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c16:	647b      	str	r3, [r7, #68]	; 0x44
 8006c18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e4      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	623b      	str	r3, [r7, #32]
   return(result);
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c52:	633a      	str	r2, [r7, #48]	; 0x30
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e1      	bne.n	8006c2a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0310 	bic.w	r3, r3, #16
 8006c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e4      	bne.n	8006c7a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f87f 	bl	8006dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cc2:	e063      	b.n	8006d8c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <HAL_UART_IRQHandler+0x59e>
 8006cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f91d 	bl	8006f26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cec:	e051      	b.n	8006d92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d014      	beq.n	8006d24 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d105      	bne.n	8006d12 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d008      	beq.n	8006d24 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d03a      	beq.n	8006d90 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
    }
    return;
 8006d22:	e035      	b.n	8006d90 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <HAL_UART_IRQHandler+0x5f4>
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f8c7 	bl	8006ed0 <UART_EndTransmit_IT>
    return;
 8006d42:	e026      	b.n	8006d92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d009      	beq.n	8006d64 <HAL_UART_IRQHandler+0x614>
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f8f6 	bl	8006f4e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d62:	e016      	b.n	8006d92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d010      	beq.n	8006d92 <HAL_UART_IRQHandler+0x642>
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	da0c      	bge.n	8006d92 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f8de 	bl	8006f3a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d7e:	e008      	b.n	8006d92 <HAL_UART_IRQHandler+0x642>
      return;
 8006d80:	bf00      	nop
 8006d82:	e006      	b.n	8006d92 <HAL_UART_IRQHandler+0x642>
    return;
 8006d84:	bf00      	nop
 8006d86:	e004      	b.n	8006d92 <HAL_UART_IRQHandler+0x642>
      return;
 8006d88:	bf00      	nop
 8006d8a:	e002      	b.n	8006d92 <HAL_UART_IRQHandler+0x642>
      return;
 8006d8c:	bf00      	nop
 8006d8e:	e000      	b.n	8006d92 <HAL_UART_IRQHandler+0x642>
    return;
 8006d90:	bf00      	nop
  }
}
 8006d92:	37e8      	adds	r7, #232	; 0xe8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b095      	sub	sp, #84	; 0x54
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006df4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8006e00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3308      	adds	r3, #8
 8006e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e3      	bne.n	8006e12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d118      	bne.n	8006e84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f023 0310 	bic.w	r3, r3, #16
 8006e66:	647b      	str	r3, [r7, #68]	; 0x44
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6979      	ldr	r1, [r7, #20]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e6      	bne.n	8006e52 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006e98:	bf00      	nop
 8006e9a:	3754      	adds	r7, #84	; 0x54
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f7ff ff72 	bl	8006dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec8:	bf00      	nop
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eec:	61fb      	str	r3, [r7, #28]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6979      	ldr	r1, [r7, #20]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	613b      	str	r3, [r7, #16]
   return(result);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e6      	bne.n	8006ed8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff ff3d 	bl	8006d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f1e:	bf00      	nop
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b088      	sub	sp, #32
 8006f66:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f6c:	f107 0308 	add.w	r3, r7, #8
 8006f70:	2218      	movs	r2, #24
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 f8d8 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f7a:	233f      	movs	r3, #63	; 0x3f
 8006f7c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006f7e:	2381      	movs	r3, #129	; 0x81
 8006f80:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006f82:	1dfb      	adds	r3, r7, #7
 8006f84:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006f86:	2301      	movs	r3, #1
 8006f88:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f8a:	f107 0308 	add.w	r3, r7, #8
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 fb53 	bl	800863c <hci_send_req>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	da01      	bge.n	8006fa0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006f9c:	23ff      	movs	r3, #255	; 0xff
 8006f9e:	e000      	b.n	8006fa2 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006faa:	b5b0      	push	{r4, r5, r7, lr}
 8006fac:	b0ce      	sub	sp, #312	; 0x138
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fbc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006fcc:	4622      	mov	r2, r4
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fd4:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006fd8:	4602      	mov	r2, r0
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fe0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006fe4:	460a      	mov	r2, r1
 8006fe6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006ff0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	f107 0210 	add.w	r2, r7, #16
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007000:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007004:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007008:	4413      	add	r3, r2
 800700a:	3309      	adds	r3, #9
 800700c:	f107 0210 	add.w	r2, r7, #16
 8007010:	4413      	add	r3, r2
 8007012:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007016:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800701a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800701e:	2200      	movs	r2, #0
 8007020:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007028:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800702c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007030:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007038:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800703c:	3301      	adds	r3, #1
 800703e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007042:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007046:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800704a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800704e:	8812      	ldrh	r2, [r2, #0]
 8007050:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007054:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007058:	3302      	adds	r3, #2
 800705a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800705e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007062:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007066:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800706a:	8812      	ldrh	r2, [r2, #0]
 800706c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007070:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007074:	3302      	adds	r3, #2
 8007076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800707a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800707e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007082:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007086:	7812      	ldrb	r2, [r2, #0]
 8007088:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800708a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800708e:	3301      	adds	r3, #1
 8007090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007094:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007098:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800709c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800709e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070a2:	3301      	adds	r3, #1
 80070a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80070a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070ac:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80070b0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80070b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070b6:	3301      	adds	r3, #1
 80070b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80070bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070c0:	3308      	adds	r3, #8
 80070c2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80070c6:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 f81d 	bl	800810a <Osal_MemCpy>
    index_input += Local_Name_Length;
 80070d0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80070d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80070d8:	4413      	add	r3, r2
 80070da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80070de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070e2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80070e6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80070e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070ec:	3301      	adds	r3, #1
 80070ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80070f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070f6:	3301      	adds	r3, #1
 80070f8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80070fc:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007100:	4618      	mov	r0, r3
 8007102:	f001 f802 	bl	800810a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007106:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800710a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800710e:	4413      	add	r3, r2
 8007110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007118:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800711c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800711e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007122:	3302      	adds	r3, #2
 8007124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007130:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007132:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007136:	3302      	adds	r3, #2
 8007138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800713c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007140:	2218      	movs	r2, #24
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fff0 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 800714a:	233f      	movs	r3, #63	; 0x3f
 800714c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007150:	2383      	movs	r3, #131	; 0x83
 8007152:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007156:	f107 0310 	add.w	r3, r7, #16
 800715a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800715e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007162:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007166:	f107 030f 	add.w	r3, r7, #15
 800716a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800716e:	2301      	movs	r3, #1
 8007170:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007174:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007178:	2100      	movs	r1, #0
 800717a:	4618      	mov	r0, r3
 800717c:	f001 fa5e 	bl	800863c <hci_send_req>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	da01      	bge.n	800718a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007186:	23ff      	movs	r3, #255	; 0xff
 8007188:	e004      	b.n	8007194 <aci_gap_set_discoverable+0x1ea>
  return status;
 800718a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800718e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007192:	781b      	ldrb	r3, [r3, #0]
}
 8007194:	4618      	mov	r0, r3
 8007196:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800719a:	46bd      	mov	sp, r7
 800719c:	bdb0      	pop	{r4, r5, r7, pc}

0800719e <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b0cc      	sub	sp, #304	; 0x130
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	4602      	mov	r2, r0
 80071a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071aa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80071ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80071b0:	f107 0310 	add.w	r3, r7, #16
 80071b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80071b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071bc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80071ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071d2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80071d6:	7812      	ldrb	r2, [r2, #0]
 80071d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071de:	3301      	adds	r3, #1
 80071e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071e8:	2218      	movs	r2, #24
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 ff9c 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 80071f2:	233f      	movs	r3, #63	; 0x3f
 80071f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80071f8:	2385      	movs	r3, #133	; 0x85
 80071fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80071fe:	f107 0310 	add.w	r3, r7, #16
 8007202:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007206:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800720a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800720e:	f107 030f 	add.w	r3, r7, #15
 8007212:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007216:	2301      	movs	r3, #1
 8007218:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800721c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007220:	2100      	movs	r1, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f001 fa0a 	bl	800863c <hci_send_req>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	da01      	bge.n	8007232 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800722e:	23ff      	movs	r3, #255	; 0xff
 8007230:	e004      	b.n	800723c <aci_gap_set_io_capability+0x9e>
  return status;
 8007232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007236:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800723a:	781b      	ldrb	r3, [r3, #0]
}
 800723c:	4618      	mov	r0, r3
 800723e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007246:	b5b0      	push	{r4, r5, r7, lr}
 8007248:	b0cc      	sub	sp, #304	; 0x130
 800724a:	af00      	add	r7, sp, #0
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	4610      	mov	r0, r2
 8007252:	4619      	mov	r1, r3
 8007254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007258:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800725c:	462a      	mov	r2, r5
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007264:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007268:	4622      	mov	r2, r4
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007274:	4602      	mov	r2, r0
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007280:	460a      	mov	r2, r1
 8007282:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072a6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b2:	3301      	adds	r3, #1
 80072b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80072b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072c0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80072c4:	7812      	ldrb	r2, [r2, #0]
 80072c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80072c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072cc:	3301      	adds	r3, #1
 80072ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80072d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072da:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80072de:	7812      	ldrb	r2, [r2, #0]
 80072e0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80072e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e6:	3301      	adds	r3, #1
 80072e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80072ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80072fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007300:	3301      	adds	r3, #1
 8007302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730a:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800730e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007310:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007314:	3301      	adds	r3, #1
 8007316:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800731a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731e:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007322:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007328:	3301      	adds	r3, #1
 800732a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800732e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007332:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007336:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007338:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800733c:	3301      	adds	r3, #1
 800733e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007346:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800734a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800734e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007352:	3304      	adds	r3, #4
 8007354:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007360:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007362:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007366:	3301      	adds	r3, #1
 8007368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800736c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007370:	2218      	movs	r2, #24
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fed8 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 800737a:	233f      	movs	r3, #63	; 0x3f
 800737c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007380:	2386      	movs	r3, #134	; 0x86
 8007382:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007386:	f107 0310 	add.w	r3, r7, #16
 800738a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800738e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007392:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007396:	f107 030f 	add.w	r3, r7, #15
 800739a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800739e:	2301      	movs	r3, #1
 80073a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 f946 	bl	800863c <hci_send_req>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da01      	bge.n	80073ba <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80073b6:	23ff      	movs	r3, #255	; 0xff
 80073b8:	e004      	b.n	80073c4 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80073ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073c2:	781b      	ldrb	r3, [r3, #0]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bdb0      	pop	{r4, r5, r7, pc}

080073ce <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b0cc      	sub	sp, #304	; 0x130
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	4602      	mov	r2, r0
 80073d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073de:	6019      	str	r1, [r3, #0]
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80073e8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80073ea:	f107 0310 	add.w	r3, r7, #16
 80073ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007408:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800740c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007410:	8812      	ldrh	r2, [r2, #0]
 8007412:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007414:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007418:	3302      	adds	r3, #2
 800741a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800741e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007422:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007426:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800742a:	6812      	ldr	r2, [r2, #0]
 800742c:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007434:	3304      	adds	r3, #4
 8007436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800743a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800743e:	2218      	movs	r2, #24
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fe71 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007448:	233f      	movs	r3, #63	; 0x3f
 800744a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800744e:	2388      	movs	r3, #136	; 0x88
 8007450:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007454:	f107 0310 	add.w	r3, r7, #16
 8007458:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800745c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007460:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007464:	f107 030f 	add.w	r3, r7, #15
 8007468:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800746c:	2301      	movs	r3, #1
 800746e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f001 f8df 	bl	800863c <hci_send_req>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	da01      	bge.n	8007488 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007484:	23ff      	movs	r3, #255	; 0xff
 8007486:	e004      	b.n	8007492 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007490:	781b      	ldrb	r3, [r3, #0]
}
 8007492:	4618      	mov	r0, r3
 8007494:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800749c:	b590      	push	{r4, r7, lr}
 800749e:	b0cd      	sub	sp, #308	; 0x134
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074ac:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80074ba:	4622      	mov	r2, r4
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80074c6:	4602      	mov	r2, r0
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80074d2:	460a      	mov	r2, r1
 80074d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80074d6:	f107 0310 	add.w	r3, r7, #16
 80074da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80074de:	f107 0308 	add.w	r3, r7, #8
 80074e2:	2207      	movs	r2, #7
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fe1f 	bl	800812a <Osal_MemSet>
  int index_input = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80074f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074fa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80074fe:	7812      	ldrb	r2, [r2, #0]
 8007500:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007506:	3301      	adds	r3, #1
 8007508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800750c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007510:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007514:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007518:	7812      	ldrb	r2, [r2, #0]
 800751a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800751c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007520:	3301      	adds	r3, #1
 8007522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800752e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007532:	7812      	ldrb	r2, [r2, #0]
 8007534:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800753a:	3301      	adds	r3, #1
 800753c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007540:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007544:	2218      	movs	r2, #24
 8007546:	2100      	movs	r1, #0
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fdee 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 800754e:	233f      	movs	r3, #63	; 0x3f
 8007550:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007554:	238a      	movs	r3, #138	; 0x8a
 8007556:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800755a:	f107 0310 	add.w	r3, r7, #16
 800755e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007562:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007566:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800756a:	f107 0308 	add.w	r3, r7, #8
 800756e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007572:	2307      	movs	r3, #7
 8007574:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007578:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f001 f85c 	bl	800863c <hci_send_req>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	da01      	bge.n	800758e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800758a:	23ff      	movs	r3, #255	; 0xff
 800758c:	e02e      	b.n	80075ec <aci_gap_init+0x150>
  if ( resp.Status )
 800758e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007592:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d005      	beq.n	80075a8 <aci_gap_init+0x10c>
    return resp.Status;
 800759c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	e021      	b.n	80075ec <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80075a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80075b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80075c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80075ca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80075d4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80075d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80075de:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80075e8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd90      	pop	{r4, r7, pc}

080075f6 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b0cc      	sub	sp, #304	; 0x130
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	4602      	mov	r2, r0
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007606:	6019      	str	r1, [r3, #0]
 8007608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007610:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007612:	f107 0310 	add.w	r3, r7, #16
 8007616:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800762c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007630:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007634:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007638:	7812      	ldrb	r2, [r2, #0]
 800763a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800763c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007640:	3301      	adds	r3, #1
 8007642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800764a:	1c58      	adds	r0, r3, #1
 800764c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007650:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007654:	781a      	ldrb	r2, [r3, #0]
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	f000 fd53 	bl	800810a <Osal_MemCpy>
  index_input += AdvDataLen;
 8007664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007668:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007672:	4413      	add	r3, r2
 8007674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007678:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800767c:	2218      	movs	r2, #24
 800767e:	2100      	movs	r1, #0
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fd52 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007686:	233f      	movs	r3, #63	; 0x3f
 8007688:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800768c:	238e      	movs	r3, #142	; 0x8e
 800768e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007692:	f107 0310 	add.w	r3, r7, #16
 8007696:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800769a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800769e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80076a2:	f107 030f 	add.w	r3, r7, #15
 80076a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076b4:	2100      	movs	r1, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 ffc0 	bl	800863c <hci_send_req>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	da01      	bge.n	80076c6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80076c2:	23ff      	movs	r3, #255	; 0xff
 80076c4:	e004      	b.n	80076d0 <aci_gap_update_adv_data+0xda>
  return status;
 80076c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076ce:	781b      	ldrb	r3, [r3, #0]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b088      	sub	sp, #32
 80076de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076e4:	f107 0308 	add.w	r3, r7, #8
 80076e8:	2218      	movs	r2, #24
 80076ea:	2100      	movs	r1, #0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fd1c 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 80076f2:	233f      	movs	r3, #63	; 0x3f
 80076f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80076f6:	2392      	movs	r3, #146	; 0x92
 80076f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80076fa:	1dfb      	adds	r3, r7, #7
 80076fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80076fe:	2301      	movs	r3, #1
 8007700:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007702:	f107 0308 	add.w	r3, r7, #8
 8007706:	2100      	movs	r1, #0
 8007708:	4618      	mov	r0, r3
 800770a:	f000 ff97 	bl	800863c <hci_send_req>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	da01      	bge.n	8007718 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007714:	23ff      	movs	r3, #255	; 0xff
 8007716:	e000      	b.n	800771a <aci_gap_configure_whitelist+0x40>
  return status;
 8007718:	79fb      	ldrb	r3, [r7, #7]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b0cc      	sub	sp, #304	; 0x130
 8007726:	af00      	add	r7, sp, #0
 8007728:	4602      	mov	r2, r0
 800772a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007738:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800773c:	460a      	mov	r2, r1
 800773e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007740:	f107 0310 	add.w	r3, r7, #16
 8007744:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007750:	2200      	movs	r2, #0
 8007752:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800775a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800775e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007762:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007766:	8812      	ldrh	r2, [r2, #0]
 8007768:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800776a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800776e:	3302      	adds	r3, #2
 8007770:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007778:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800777c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007788:	3301      	adds	r3, #1
 800778a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800778e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007792:	2218      	movs	r2, #24
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fcc7 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 800779c:	233f      	movs	r3, #63	; 0x3f
 800779e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80077a2:	23a5      	movs	r3, #165	; 0xa5
 80077a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80077a8:	f107 0310 	add.w	r3, r7, #16
 80077ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077b8:	f107 030f 	add.w	r3, r7, #15
 80077bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077ca:	2100      	movs	r1, #0
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 ff35 	bl	800863c <hci_send_req>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da01      	bge.n	80077dc <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80077d8:	23ff      	movs	r3, #255	; 0xff
 80077da:	e004      	b.n	80077e6 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80077e4:	781b      	ldrb	r3, [r3, #0]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077fa:	f107 0308 	add.w	r3, r7, #8
 80077fe:	2218      	movs	r2, #24
 8007800:	2100      	movs	r1, #0
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fc91 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007808:	233f      	movs	r3, #63	; 0x3f
 800780a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800780c:	f240 1301 	movw	r3, #257	; 0x101
 8007810:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007812:	1dfb      	adds	r3, r7, #7
 8007814:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007816:	2301      	movs	r3, #1
 8007818:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800781a:	f107 0308 	add.w	r3, r7, #8
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f000 ff0b 	bl	800863c <hci_send_req>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	da01      	bge.n	8007830 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800782c:	23ff      	movs	r3, #255	; 0xff
 800782e:	e000      	b.n	8007832 <aci_gatt_init+0x42>
  return status;
 8007830:	79fb      	ldrb	r3, [r7, #7]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800783a:	b590      	push	{r4, r7, lr}
 800783c:	b0cf      	sub	sp, #316	; 0x13c
 800783e:	af00      	add	r7, sp, #0
 8007840:	4604      	mov	r4, r0
 8007842:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8007846:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800784a:	6001      	str	r1, [r0, #0]
 800784c:	4610      	mov	r0, r2
 800784e:	4619      	mov	r1, r3
 8007850:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007854:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007858:	4622      	mov	r2, r4
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007860:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007864:	4602      	mov	r2, r0
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800786c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007870:	460a      	mov	r2, r1
 8007872:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007874:	f107 0310 	add.w	r3, r7, #16
 8007878:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800787c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007880:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d00a      	beq.n	80078a0 <aci_gatt_add_service+0x66>
 800788a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800788e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d101      	bne.n	800789c <aci_gatt_add_service+0x62>
 8007898:	2311      	movs	r3, #17
 800789a:	e002      	b.n	80078a2 <aci_gatt_add_service+0x68>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <aci_gatt_add_service+0x68>
 80078a0:	2303      	movs	r3, #3
 80078a2:	f107 0210 	add.w	r2, r7, #16
 80078a6:	4413      	add	r3, r2
 80078a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80078ac:	f107 030c 	add.w	r3, r7, #12
 80078b0:	2203      	movs	r2, #3
 80078b2:	2100      	movs	r1, #0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fc38 	bl	800812a <Osal_MemSet>
  int index_input = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80078c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80078c4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80078c8:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80078d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078d4:	3301      	adds	r3, #1
 80078d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80078da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80078de:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d002      	beq.n	80078ee <aci_gatt_add_service+0xb4>
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d004      	beq.n	80078f6 <aci_gatt_add_service+0xbc>
 80078ec:	e007      	b.n	80078fe <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80078ee:	2302      	movs	r3, #2
 80078f0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80078f4:	e005      	b.n	8007902 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80078f6:	2310      	movs	r3, #16
 80078f8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80078fc:	e001      	b.n	8007902 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80078fe:	2397      	movs	r3, #151	; 0x97
 8007900:	e06c      	b.n	80079dc <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007902:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007906:	1c58      	adds	r0, r3, #1
 8007908:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800790c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007910:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007914:	6819      	ldr	r1, [r3, #0]
 8007916:	f000 fbf8 	bl	800810a <Osal_MemCpy>
    index_input += size;
 800791a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800791e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007922:	4413      	add	r3, r2
 8007924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007930:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007934:	7812      	ldrb	r2, [r2, #0]
 8007936:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800793c:	3301      	adds	r3, #1
 800793e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007946:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800794a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007956:	3301      	adds	r3, #1
 8007958:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800795c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007960:	2218      	movs	r2, #24
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f000 fbe0 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 800796a:	233f      	movs	r3, #63	; 0x3f
 800796c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007970:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007974:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007978:	f107 0310 	add.w	r3, r7, #16
 800797c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007980:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007984:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007988:	f107 030c 	add.w	r3, r7, #12
 800798c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007990:	2303      	movs	r3, #3
 8007992:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007996:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fe4d 	bl	800863c <hci_send_req>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da01      	bge.n	80079ac <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80079a8:	23ff      	movs	r3, #255	; 0xff
 80079aa:	e017      	b.n	80079dc <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80079ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80079ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	e00a      	b.n	80079dc <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80079c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80079d8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd90      	pop	{r4, r7, pc}

080079e6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80079e6:	b590      	push	{r4, r7, lr}
 80079e8:	b0d1      	sub	sp, #324	; 0x144
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	4604      	mov	r4, r0
 80079ee:	4608      	mov	r0, r1
 80079f0:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80079f4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80079f8:	600a      	str	r2, [r1, #0]
 80079fa:	4619      	mov	r1, r3
 80079fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a00:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007a04:	4622      	mov	r2, r4
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a0c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007a10:	4602      	mov	r2, r0
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a18:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007a20:	f107 0318 	add.w	r3, r7, #24
 8007a24:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007a28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a2c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d00a      	beq.n	8007a4c <aci_gatt_add_char+0x66>
 8007a36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a3a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d101      	bne.n	8007a48 <aci_gatt_add_char+0x62>
 8007a44:	2313      	movs	r3, #19
 8007a46:	e002      	b.n	8007a4e <aci_gatt_add_char+0x68>
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e000      	b.n	8007a4e <aci_gatt_add_char+0x68>
 8007a4c:	2305      	movs	r3, #5
 8007a4e:	f107 0218 	add.w	r2, r7, #24
 8007a52:	4413      	add	r3, r2
 8007a54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007a58:	f107 0314 	add.w	r3, r7, #20
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	2100      	movs	r1, #0
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fb62 	bl	800812a <Osal_MemSet>
  int index_input = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007a6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a70:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007a74:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007a78:	8812      	ldrh	r2, [r2, #0]
 8007a7a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a80:	3302      	adds	r3, #2
 8007a82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007a86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a8a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007a8e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007a96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007aa0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007aa4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d002      	beq.n	8007ab4 <aci_gatt_add_char+0xce>
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d004      	beq.n	8007abc <aci_gatt_add_char+0xd6>
 8007ab2:	e007      	b.n	8007ac4 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007aba:	e005      	b.n	8007ac8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007abc:	2310      	movs	r3, #16
 8007abe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007ac2:	e001      	b.n	8007ac8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007ac4:	2397      	movs	r3, #151	; 0x97
 8007ac6:	e091      	b.n	8007bec <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007ac8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007acc:	1cd8      	adds	r0, r3, #3
 8007ace:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007ad2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ad6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007ada:	6819      	ldr	r1, [r3, #0]
 8007adc:	f000 fb15 	bl	800810a <Osal_MemCpy>
    index_input += size;
 8007ae0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007ae4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007ae8:	4413      	add	r3, r2
 8007aea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007aee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007af2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007af6:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007afa:	8812      	ldrh	r2, [r2, #0]
 8007afc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007afe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b02:	3302      	adds	r3, #2
 8007b04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007b08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b0c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007b10:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007b12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b16:	3301      	adds	r3, #1
 8007b18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007b1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b20:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007b24:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007b30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b34:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007b38:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007b3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b3e:	3301      	adds	r3, #1
 8007b40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007b44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b48:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007b4c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007b4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b52:	3301      	adds	r3, #1
 8007b54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007b58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b5c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007b60:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007b62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b66:	3301      	adds	r3, #1
 8007b68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b70:	2218      	movs	r2, #24
 8007b72:	2100      	movs	r1, #0
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 fad8 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b7a:	233f      	movs	r3, #63	; 0x3f
 8007b7c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007b80:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007b84:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007b88:	f107 0318 	add.w	r3, r7, #24
 8007b8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007b90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007b98:	f107 0314 	add.w	r3, r7, #20
 8007b9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ba6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007baa:	2100      	movs	r1, #0
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fd45 	bl	800863c <hci_send_req>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	da01      	bge.n	8007bbc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007bb8:	23ff      	movs	r3, #255	; 0xff
 8007bba:	e017      	b.n	8007bec <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007bbc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d005      	beq.n	8007bd6 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007bca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	e00a      	b.n	8007bec <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007bd6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bde:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007be8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd90      	pop	{r4, r7, pc}

08007bf6 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007bf6:	b5b0      	push	{r4, r5, r7, lr}
 8007bf8:	b0cc      	sub	sp, #304	; 0x130
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	4610      	mov	r0, r2
 8007c02:	4619      	mov	r1, r3
 8007c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c08:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	801a      	strh	r2, [r3, #0]
 8007c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c18:	4622      	mov	r2, r4
 8007c1a:	801a      	strh	r2, [r3, #0]
 8007c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c20:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007c24:	4602      	mov	r2, r0
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007c30:	460a      	mov	r2, r1
 8007c32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007c34:	f107 0310 	add.w	r3, r7, #16
 8007c38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c56:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007c5a:	8812      	ldrh	r2, [r2, #0]
 8007c5c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c62:	3302      	adds	r3, #2
 8007c64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c70:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007c74:	8812      	ldrh	r2, [r2, #0]
 8007c76:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c8a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007c8e:	7812      	ldrb	r2, [r2, #0]
 8007c90:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007c92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c96:	3301      	adds	r3, #1
 8007c98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ca4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007ca8:	7812      	ldrb	r2, [r2, #0]
 8007caa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cba:	1d98      	adds	r0, r3, #6
 8007cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007ccc:	f000 fa1d 	bl	800810a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007cde:	4413      	add	r3, r2
 8007ce0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ce4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ce8:	2218      	movs	r2, #24
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fa1c 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cf2:	233f      	movs	r3, #63	; 0x3f
 8007cf4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007cf8:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007cfc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d00:	f107 0310 	add.w	r3, r7, #16
 8007d04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d10:	f107 030f 	add.w	r3, r7, #15
 8007d14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d22:	2100      	movs	r1, #0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fc89 	bl	800863c <hci_send_req>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da01      	bge.n	8007d34 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007d30:	23ff      	movs	r3, #255	; 0xff
 8007d32:	e004      	b.n	8007d3e <aci_gatt_update_char_value+0x148>
  return status;
 8007d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d38:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d3c:	781b      	ldrb	r3, [r3, #0]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bdb0      	pop	{r4, r5, r7, pc}

08007d48 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b0cc      	sub	sp, #304	; 0x130
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007d60:	4602      	mov	r2, r0
 8007d62:	701a      	strb	r2, [r3, #0]
 8007d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d68:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d6c:	460a      	mov	r2, r1
 8007d6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007d70:	f107 0310 	add.w	r3, r7, #16
 8007d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d80:	2200      	movs	r2, #0
 8007d82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d92:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d9e:	3301      	adds	r3, #1
 8007da0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007db0:	7812      	ldrb	r2, [r2, #0]
 8007db2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007db8:	3301      	adds	r3, #1
 8007dba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc2:	1c98      	adds	r0, r3, #2
 8007dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd6:	6819      	ldr	r1, [r3, #0]
 8007dd8:	f000 f997 	bl	800810a <Osal_MemCpy>
  index_input += Length;
 8007ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007dea:	4413      	add	r3, r2
 8007dec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007df0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007df4:	2218      	movs	r2, #24
 8007df6:	2100      	movs	r1, #0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 f996 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007dfe:	233f      	movs	r3, #63	; 0x3f
 8007e00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007e04:	230c      	movs	r3, #12
 8007e06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e0a:	f107 0310 	add.w	r3, r7, #16
 8007e0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e1a:	f107 030f 	add.w	r3, r7, #15
 8007e1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e22:	2301      	movs	r3, #1
 8007e24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fc04 	bl	800863c <hci_send_req>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	da01      	bge.n	8007e3e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007e3a:	23ff      	movs	r3, #255	; 0xff
 8007e3c:	e004      	b.n	8007e48 <aci_hal_write_config_data+0x100>
  return status;
 8007e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e46:	781b      	ldrb	r3, [r3, #0]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b0cc      	sub	sp, #304	; 0x130
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	4602      	mov	r2, r0
 8007e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e68:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007e6c:	460a      	mov	r2, r1
 8007e6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007e70:	f107 0310 	add.w	r3, r7, #16
 8007e74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e80:	2200      	movs	r2, #0
 8007e82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e92:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007e96:	7812      	ldrb	r2, [r2, #0]
 8007e98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007eac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007eb0:	7812      	ldrb	r2, [r2, #0]
 8007eb2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eb8:	3301      	adds	r3, #1
 8007eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ebe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ec2:	2218      	movs	r2, #24
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f92f 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ecc:	233f      	movs	r3, #63	; 0x3f
 8007ece:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007ed2:	230f      	movs	r3, #15
 8007ed4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ed8:	f107 0310 	add.w	r3, r7, #16
 8007edc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ee4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ee8:	f107 030f 	add.w	r3, r7, #15
 8007eec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007efa:	2100      	movs	r1, #0
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fb9d 	bl	800863c <hci_send_req>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	da01      	bge.n	8007f0c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007f08:	23ff      	movs	r3, #255	; 0xff
 8007f0a:	e004      	b.n	8007f16 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f10:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f14:	781b      	ldrb	r3, [r3, #0]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b0cc      	sub	sp, #304	; 0x130
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4602      	mov	r2, r0
 8007f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007f30:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007f32:	f107 0310 	add.w	r3, r7, #16
 8007f36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f54:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007f58:	8812      	ldrh	r2, [r2, #0]
 8007f5a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f60:	3302      	adds	r3, #2
 8007f62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f6a:	2218      	movs	r2, #24
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 f8db 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f74:	233f      	movs	r3, #63	; 0x3f
 8007f76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007f7a:	2318      	movs	r3, #24
 8007f7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f80:	f107 0310 	add.w	r3, r7, #16
 8007f84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f90:	f107 030f 	add.w	r3, r7, #15
 8007f94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fb49 	bl	800863c <hci_send_req>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da01      	bge.n	8007fb4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007fb0:	23ff      	movs	r3, #255	; 0xff
 8007fb2:	e004      	b.n	8007fbe <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007fbc:	781b      	ldrb	r3, [r3, #0]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	2218      	movs	r2, #24
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f8a5 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x03;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007fe8:	1dfb      	adds	r3, r7, #7
 8007fea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007fec:	2301      	movs	r3, #1
 8007fee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ff0:	f107 0308 	add.w	r3, r7, #8
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fb20 	bl	800863c <hci_send_req>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	da01      	bge.n	8008006 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008002:	23ff      	movs	r3, #255	; 0xff
 8008004:	e000      	b.n	8008008 <hci_reset+0x40>
  return status;
 8008006:	79fb      	ldrb	r3, [r7, #7]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008010:	b590      	push	{r4, r7, lr}
 8008012:	b0cd      	sub	sp, #308	; 0x134
 8008014:	af00      	add	r7, sp, #0
 8008016:	4604      	mov	r4, r0
 8008018:	4608      	mov	r0, r1
 800801a:	4611      	mov	r1, r2
 800801c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008020:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008024:	4622      	mov	r2, r4
 8008026:	701a      	strb	r2, [r3, #0]
 8008028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008030:	4602      	mov	r2, r0
 8008032:	701a      	strb	r2, [r3, #0]
 8008034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008038:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800803c:	460a      	mov	r2, r1
 800803e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008040:	f107 0310 	add.w	r3, r7, #16
 8008044:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008050:	2200      	movs	r2, #0
 8008052:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800805a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008062:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008066:	7812      	ldrb	r2, [r2, #0]
 8008068:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800806a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800806e:	3301      	adds	r3, #1
 8008070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008078:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800807c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008080:	7812      	ldrb	r2, [r2, #0]
 8008082:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008084:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008088:	3301      	adds	r3, #1
 800808a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800808e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008092:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008096:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800809a:	7812      	ldrb	r2, [r2, #0]
 800809c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800809e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a2:	3301      	adds	r3, #1
 80080a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080ac:	2218      	movs	r2, #24
 80080ae:	2100      	movs	r1, #0
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 f83a 	bl	800812a <Osal_MemSet>
  rq.ogf = 0x08;
 80080b6:	2308      	movs	r3, #8
 80080b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80080bc:	2331      	movs	r3, #49	; 0x31
 80080be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80080c2:	f107 0310 	add.w	r3, r7, #16
 80080c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80080d2:	f107 030f 	add.w	r3, r7, #15
 80080d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80080da:	2301      	movs	r3, #1
 80080dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080e4:	2100      	movs	r1, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 faa8 	bl	800863c <hci_send_req>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	da01      	bge.n	80080f6 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80080f2:	23ff      	movs	r3, #255	; 0xff
 80080f4:	e004      	b.n	8008100 <hci_le_set_default_phy+0xf0>
  return status;
 80080f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80080fe:	781b      	ldrb	r3, [r3, #0]
}
 8008100:	4618      	mov	r0, r3
 8008102:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008106:	46bd      	mov	sp, r7
 8008108:	bd90      	pop	{r4, r7, pc}

0800810a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	68b9      	ldr	r1, [r7, #8]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f002 f9be 	bl	800a49c <memcpy>
 8008120:	4603      	mov	r3, r0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f002 f982 	bl	800a444 <memset>
 8008140:	4603      	mov	r3, r0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800814a:	b480      	push	{r7}
 800814c:	af00      	add	r7, sp, #0
  return;
 800814e:	bf00      	nop
}
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
  return;
 800815c:	bf00      	nop
}
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008166:	b480      	push	{r7}
 8008168:	af00      	add	r7, sp, #0
  return;
 800816a:	bf00      	nop
}
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
  return;
 8008178:	bf00      	nop
}
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008182:	b480      	push	{r7}
 8008184:	af00      	add	r7, sp, #0
  return;
 8008186:	bf00      	nop
}
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8008190:	b480      	push	{r7}
 8008192:	af00      	add	r7, sp, #0
  return;
 8008194:	bf00      	nop
}
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800819e:	b480      	push	{r7}
 80081a0:	af00      	add	r7, sp, #0
  return;
 80081a2:	bf00      	nop
}
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  return;
 80081b0:	bf00      	nop
}
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80081ba:	b480      	push	{r7}
 80081bc:	af00      	add	r7, sp, #0
  return;
 80081be:	bf00      	nop
}
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return;
 80081cc:	bf00      	nop
}
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80081d6:	b480      	push	{r7}
 80081d8:	af00      	add	r7, sp, #0
  return;
 80081da:	bf00      	nop
}
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  return;
 80081e8:	bf00      	nop
}
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80081f2:	b480      	push	{r7}
 80081f4:	af00      	add	r7, sp, #0
  return;
 80081f6:	bf00      	nop
}
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return;
 8008204:	bf00      	nop
}
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800820e:	b480      	push	{r7}
 8008210:	af00      	add	r7, sp, #0
  return;
 8008212:	bf00      	nop
}
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800821c:	b480      	push	{r7}
 800821e:	af00      	add	r7, sp, #0
  return;
 8008220:	bf00      	nop
}
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800822a:	b480      	push	{r7}
 800822c:	af00      	add	r7, sp, #0
  return;
 800822e:	bf00      	nop
}
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800823c:	4b04      	ldr	r3, [pc, #16]	; (8008250 <SVCCTL_Init+0x18>)
 800823e:	2200      	movs	r2, #0
 8008240:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008242:	4b04      	ldr	r3, [pc, #16]	; (8008254 <SVCCTL_Init+0x1c>)
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008248:	f000 f806 	bl	8008258 <SVCCTL_SvcInit>

  return;
 800824c:	bf00      	nop
}
 800824e:	bd80      	pop	{r7, pc}
 8008250:	200008b8 	.word	0x200008b8
 8008254:	200008d8 	.word	0x200008d8

08008258 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  BAS_Init();
 800825c:	f7ff ff75 	bl	800814a <BAS_Init>

  BLS_Init();
 8008260:	f7ff ff7a 	bl	8008158 <BLS_Init>

  CRS_STM_Init();
 8008264:	f7ff ff7f 	bl	8008166 <CRS_STM_Init>

  DIS_Init();
 8008268:	f7ff ff84 	bl	8008174 <DIS_Init>

  EDS_STM_Init();
 800826c:	f7ff ff89 	bl	8008182 <EDS_STM_Init>

  HIDS_Init();
 8008270:	f7ff ff8e 	bl	8008190 <HIDS_Init>

  HRS_Init();
 8008274:	f7ff ff93 	bl	800819e <HRS_Init>

  HTS_Init();
 8008278:	f7ff ff98 	bl	80081ac <HTS_Init>

  IAS_Init();
 800827c:	f7ff ff9d 	bl	80081ba <IAS_Init>

  LLS_Init();
 8008280:	f7ff ffa2 	bl	80081c8 <LLS_Init>

  TPS_Init();
 8008284:	f7ff ffa7 	bl	80081d6 <TPS_Init>

  MOTENV_STM_Init();
 8008288:	f7ff ffac 	bl	80081e4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800828c:	f7ff ffb1 	bl	80081f2 <P2PS_STM_Init>

  ZDD_STM_Init();
 8008290:	f7ff ffb6 	bl	8008200 <ZDD_STM_Init>

  OTAS_STM_Init();
 8008294:	f7ff ffbb 	bl	800820e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008298:	f7ff ffc7 	bl	800822a <BVOPUS_STM_Init>

  MESH_Init();
 800829c:	f7ff ffbe 	bl	800821c <MESH_Init>

  SVCCTL_InitCustomSvc();
 80082a0:	f001 fb20 	bl	80098e4 <SVCCTL_InitCustomSvc>
  
  return;
 80082a4:	bf00      	nop
}
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80082b0:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <SVCCTL_RegisterSvcHandler+0x30>)
 80082b2:	7f1b      	ldrb	r3, [r3, #28]
 80082b4:	4619      	mov	r1, r3
 80082b6:	4a08      	ldr	r2, [pc, #32]	; (80082d8 <SVCCTL_RegisterSvcHandler+0x30>)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80082be:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <SVCCTL_RegisterSvcHandler+0x30>)
 80082c0:	7f1b      	ldrb	r3, [r3, #28]
 80082c2:	3301      	adds	r3, #1
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <SVCCTL_RegisterSvcHandler+0x30>)
 80082c8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80082ca:	bf00      	nop
}
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	200008b8 	.word	0x200008b8

080082dc <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3301      	adds	r3, #1
 80082e8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80082ea:	2300      	movs	r3, #0
 80082ec:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2bff      	cmp	r3, #255	; 0xff
 80082f4:	d125      	bne.n	8008342 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	3302      	adds	r3, #2
 80082fa:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800830a:	d118      	bne.n	800833e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800830c:	2300      	movs	r3, #0
 800830e:	757b      	strb	r3, [r7, #21]
 8008310:	e00d      	b.n	800832e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008312:	7d7b      	ldrb	r3, [r7, #21]
 8008314:	4a1a      	ldr	r2, [pc, #104]	; (8008380 <SVCCTL_UserEvtRx+0xa4>)
 8008316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
 800831e:	4603      	mov	r3, r0
 8008320:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d108      	bne.n	800833a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008328:	7d7b      	ldrb	r3, [r7, #21]
 800832a:	3301      	adds	r3, #1
 800832c:	757b      	strb	r3, [r7, #21]
 800832e:	4b14      	ldr	r3, [pc, #80]	; (8008380 <SVCCTL_UserEvtRx+0xa4>)
 8008330:	7f1b      	ldrb	r3, [r3, #28]
 8008332:	7d7a      	ldrb	r2, [r7, #21]
 8008334:	429a      	cmp	r2, r3
 8008336:	d3ec      	bcc.n	8008312 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008338:	e002      	b.n	8008340 <SVCCTL_UserEvtRx+0x64>
              break;
 800833a:	bf00      	nop
          break;
 800833c:	e000      	b.n	8008340 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800833e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008340:	e000      	b.n	8008344 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008342:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	2b02      	cmp	r3, #2
 8008348:	d00f      	beq.n	800836a <SVCCTL_UserEvtRx+0x8e>
 800834a:	2b02      	cmp	r3, #2
 800834c:	dc10      	bgt.n	8008370 <SVCCTL_UserEvtRx+0x94>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <SVCCTL_UserEvtRx+0x7c>
 8008352:	2b01      	cmp	r3, #1
 8008354:	d006      	beq.n	8008364 <SVCCTL_UserEvtRx+0x88>
 8008356:	e00b      	b.n	8008370 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 ff85 	bl	8009268 <SVCCTL_App_Notification>
 800835e:	4603      	mov	r3, r0
 8008360:	75bb      	strb	r3, [r7, #22]
      break;
 8008362:	e008      	b.n	8008376 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008364:	2301      	movs	r3, #1
 8008366:	75bb      	strb	r3, [r7, #22]
      break;
 8008368:	e005      	b.n	8008376 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800836a:	2300      	movs	r3, #0
 800836c:	75bb      	strb	r3, [r7, #22]
      break;
 800836e:	e002      	b.n	8008376 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008370:	2301      	movs	r3, #1
 8008372:	75bb      	strb	r3, [r7, #22]
      break;
 8008374:	bf00      	nop
  }

  return (return_status);
 8008376:	7dbb      	ldrb	r3, [r7, #22]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	200008b8 	.word	0x200008b8

08008384 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800838c:	f107 030c 	add.w	r3, r7, #12
 8008390:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	212e      	movs	r1, #46	; 0x2e
 800839c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80083a0:	f000 fae2 	bl	8008968 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	330b      	adds	r3, #11
 80083a8:	78db      	ldrb	r3, [r3, #3]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3720      	adds	r7, #32
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b088      	sub	sp, #32
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083ba:	f107 030c 	add.w	r3, r7, #12
 80083be:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	210f      	movs	r1, #15
 80083ca:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80083ce:	f000 facb 	bl	8008968 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	330b      	adds	r3, #11
 80083d6:	78db      	ldrb	r3, [r3, #3]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3720      	adds	r7, #32
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083e8:	f107 030c 	add.w	r3, r7, #12
 80083ec:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	2110      	movs	r1, #16
 80083f4:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80083f8:	f000 fab6 	bl	8008968 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	330b      	adds	r3, #11
 8008400:	78db      	ldrb	r3, [r3, #3]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800840c:	b480      	push	{r7}
 800840e:	b08b      	sub	sp, #44	; 0x2c
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008428:	2300      	movs	r3, #0
 800842a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008434:	4b4a      	ldr	r3, [pc, #296]	; (8008560 <SHCI_GetWirelessFwInfo+0x154>)
 8008436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008438:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800843c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008446:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a44      	ldr	r2, [pc, #272]	; (8008564 <SHCI_GetWirelessFwInfo+0x158>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d10f      	bne.n	8008478 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e01a      	b.n	80084ae <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008480:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008484:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	0e1b      	lsrs	r3, r3, #24
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	0c1b      	lsrs	r3, r3, #16
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	0a1b      	lsrs	r3, r3, #8
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	091b      	lsrs	r3, r3, #4
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	f003 030f 	and.w	r3, r3, #15
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	0e1b      	lsrs	r3, r3, #24
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	0c1b      	lsrs	r3, r3, #16
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	0a1b      	lsrs	r3, r3, #8
 8008502:	b2da      	uxtb	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	b2da      	uxtb	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	b2da      	uxtb	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	0e1b      	lsrs	r3, r3, #24
 800851c:	b2da      	uxtb	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	0c1b      	lsrs	r3, r3, #16
 8008526:	b2da      	uxtb	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	0a1b      	lsrs	r3, r3, #8
 8008530:	b2da      	uxtb	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	0e1b      	lsrs	r3, r3, #24
 800853a:	b2da      	uxtb	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	0c1b      	lsrs	r3, r3, #16
 8008544:	b2da      	uxtb	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	b2da      	uxtb	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	372c      	adds	r7, #44	; 0x2c
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	58004000 	.word	0x58004000
 8008564:	a94656b9 	.word	0xa94656b9

08008568 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	4a08      	ldr	r2, [pc, #32]	; (8008598 <hci_init+0x30>)
 8008578:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800857a:	4a08      	ldr	r2, [pc, #32]	; (800859c <hci_init+0x34>)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008580:	4806      	ldr	r0, [pc, #24]	; (800859c <hci_init+0x34>)
 8008582:	f000 f973 	bl	800886c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f8d4 	bl	8008738 <TlInit>

  return;
 8008590:	bf00      	nop
}
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20000a1c 	.word	0x20000a1c
 800859c:	200009f4 	.word	0x200009f4

080085a0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80085a6:	4822      	ldr	r0, [pc, #136]	; (8008630 <hci_user_evt_proc+0x90>)
 80085a8:	f000 fd28 	bl	8008ffc <LST_is_empty>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d12b      	bne.n	800860a <hci_user_evt_proc+0x6a>
 80085b2:	4b20      	ldr	r3, [pc, #128]	; (8008634 <hci_user_evt_proc+0x94>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d027      	beq.n	800860a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80085ba:	f107 030c 	add.w	r3, r7, #12
 80085be:	4619      	mov	r1, r3
 80085c0:	481b      	ldr	r0, [pc, #108]	; (8008630 <hci_user_evt_proc+0x90>)
 80085c2:	f000 fdaa 	bl	800911a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80085c6:	4b1c      	ldr	r3, [pc, #112]	; (8008638 <hci_user_evt_proc+0x98>)
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00c      	beq.n	80085e8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80085d2:	2301      	movs	r3, #1
 80085d4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80085d6:	4b18      	ldr	r3, [pc, #96]	; (8008638 <hci_user_evt_proc+0x98>)
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	1d3a      	adds	r2, r7, #4
 80085dc:	4610      	mov	r0, r2
 80085de:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80085e0:	793a      	ldrb	r2, [r7, #4]
 80085e2:	4b14      	ldr	r3, [pc, #80]	; (8008634 <hci_user_evt_proc+0x94>)
 80085e4:	701a      	strb	r2, [r3, #0]
 80085e6:	e002      	b.n	80085ee <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80085e8:	4b12      	ldr	r3, [pc, #72]	; (8008634 <hci_user_evt_proc+0x94>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80085ee:	4b11      	ldr	r3, [pc, #68]	; (8008634 <hci_user_evt_proc+0x94>)
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d004      	beq.n	8008600 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fc03 	bl	8008e04 <TL_MM_EvtDone>
 80085fe:	e004      	b.n	800860a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4619      	mov	r1, r3
 8008604:	480a      	ldr	r0, [pc, #40]	; (8008630 <hci_user_evt_proc+0x90>)
 8008606:	f000 fd1b 	bl	8009040 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800860a:	4809      	ldr	r0, [pc, #36]	; (8008630 <hci_user_evt_proc+0x90>)
 800860c:	f000 fcf6 	bl	8008ffc <LST_is_empty>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d107      	bne.n	8008626 <hci_user_evt_proc+0x86>
 8008616:	4b07      	ldr	r3, [pc, #28]	; (8008634 <hci_user_evt_proc+0x94>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800861e:	4804      	ldr	r0, [pc, #16]	; (8008630 <hci_user_evt_proc+0x90>)
 8008620:	f001 f83a 	bl	8009698 <hci_notify_asynch_evt>
  }


  return;
 8008624:	bf00      	nop
 8008626:	bf00      	nop
}
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	200008e0 	.word	0x200008e0
 8008634:	200008ec 	.word	0x200008ec
 8008638:	200009f4 	.word	0x200009f4

0800863c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008648:	2000      	movs	r0, #0
 800864a:	f000 f8cb 	bl	80087e4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800864e:	2300      	movs	r3, #0
 8008650:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	885b      	ldrh	r3, [r3, #2]
 8008656:	b21b      	sxth	r3, r3
 8008658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800865c:	b21a      	sxth	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	029b      	lsls	r3, r3, #10
 8008664:	b21b      	sxth	r3, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	b21b      	sxth	r3, r3
 800866a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	b2d9      	uxtb	r1, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	8bbb      	ldrh	r3, [r7, #28]
 8008678:	4618      	mov	r0, r3
 800867a:	f000 f88d 	bl	8008798 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800867e:	e04e      	b.n	800871e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008680:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008684:	f001 f81f 	bl	80096c6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008688:	e043      	b.n	8008712 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800868a:	f107 030c 	add.w	r3, r7, #12
 800868e:	4619      	mov	r1, r3
 8008690:	4828      	ldr	r0, [pc, #160]	; (8008734 <hci_send_req+0xf8>)
 8008692:	f000 fd42 	bl	800911a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	7a5b      	ldrb	r3, [r3, #9]
 800869a:	2b0f      	cmp	r3, #15
 800869c:	d114      	bne.n	80086c8 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	330b      	adds	r3, #11
 80086a2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	885b      	ldrh	r3, [r3, #2]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	8bba      	ldrh	r2, [r7, #28]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d104      	bne.n	80086ba <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	7812      	ldrb	r2, [r2, #0]
 80086b8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	785b      	ldrb	r3, [r3, #1]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d027      	beq.n	8008712 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80086c2:	2301      	movs	r3, #1
 80086c4:	77fb      	strb	r3, [r7, #31]
 80086c6:	e024      	b.n	8008712 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	330b      	adds	r3, #11
 80086cc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	8bba      	ldrh	r2, [r7, #28]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d114      	bne.n	8008706 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	7a9b      	ldrb	r3, [r3, #10]
 80086e0:	3b03      	subs	r3, #3
 80086e2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	695a      	ldr	r2, [r3, #20]
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	bfa8      	it	ge
 80086ee:	461a      	movge	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6918      	ldr	r0, [r3, #16]
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	1cd9      	adds	r1, r3, #3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	461a      	mov	r2, r3
 8008702:	f001 fecb 	bl	800a49c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800870e:	2301      	movs	r3, #1
 8008710:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008712:	4808      	ldr	r0, [pc, #32]	; (8008734 <hci_send_req+0xf8>)
 8008714:	f000 fc72 	bl	8008ffc <LST_is_empty>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0b5      	beq.n	800868a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800871e:	7ffb      	ldrb	r3, [r7, #31]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0ad      	beq.n	8008680 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008724:	2001      	movs	r0, #1
 8008726:	f000 f85d 	bl	80087e4 <NotifyCmdStatus>

  return 0;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000a14 	.word	0x20000a14

08008738 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008740:	480f      	ldr	r0, [pc, #60]	; (8008780 <TlInit+0x48>)
 8008742:	f000 fc4b 	bl	8008fdc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008746:	4a0f      	ldr	r2, [pc, #60]	; (8008784 <TlInit+0x4c>)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800874c:	480e      	ldr	r0, [pc, #56]	; (8008788 <TlInit+0x50>)
 800874e:	f000 fc45 	bl	8008fdc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008752:	4b0e      	ldr	r3, [pc, #56]	; (800878c <TlInit+0x54>)
 8008754:	2201      	movs	r2, #1
 8008756:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008758:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <TlInit+0x58>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008764:	4b0b      	ldr	r3, [pc, #44]	; (8008794 <TlInit+0x5c>)
 8008766:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008768:	4b09      	ldr	r3, [pc, #36]	; (8008790 <TlInit+0x58>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f107 0208 	add.w	r2, r7, #8
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
  }

  return;
 8008774:	bf00      	nop
 8008776:	bf00      	nop
}
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000a14 	.word	0x20000a14
 8008784:	200008e8 	.word	0x200008e8
 8008788:	200008e0 	.word	0x200008e0
 800878c:	200008ec 	.word	0x200008ec
 8008790:	200009f4 	.word	0x200009f4
 8008794:	08008825 	.word	0x08008825

08008798 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	603a      	str	r2, [r7, #0]
 80087a2:	80fb      	strh	r3, [r7, #6]
 80087a4:	460b      	mov	r3, r1
 80087a6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80087a8:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <SendCmd+0x44>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	88fa      	ldrh	r2, [r7, #6]
 80087ae:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80087b2:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <SendCmd+0x44>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	797a      	ldrb	r2, [r7, #5]
 80087b8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80087ba:	4b08      	ldr	r3, [pc, #32]	; (80087dc <SendCmd+0x44>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	330c      	adds	r3, #12
 80087c0:	797a      	ldrb	r2, [r7, #5]
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 fe69 	bl	800a49c <memcpy>

  hciContext.io.Send(0,0);
 80087ca:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <SendCmd+0x48>)
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2100      	movs	r1, #0
 80087d0:	2000      	movs	r0, #0
 80087d2:	4798      	blx	r3

  return;
 80087d4:	bf00      	nop
}
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	200008e8 	.word	0x200008e8
 80087e0:	200009f4 	.word	0x200009f4

080087e4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d108      	bne.n	8008806 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80087f4:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <NotifyCmdStatus+0x3c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00d      	beq.n	8008818 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80087fc:	4b08      	ldr	r3, [pc, #32]	; (8008820 <NotifyCmdStatus+0x3c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2000      	movs	r0, #0
 8008802:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008804:	e008      	b.n	8008818 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008806:	4b06      	ldr	r3, [pc, #24]	; (8008820 <NotifyCmdStatus+0x3c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d004      	beq.n	8008818 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800880e:	4b04      	ldr	r3, [pc, #16]	; (8008820 <NotifyCmdStatus+0x3c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2001      	movs	r0, #1
 8008814:	4798      	blx	r3
  return;
 8008816:	bf00      	nop
 8008818:	bf00      	nop
}
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20000a1c 	.word	0x20000a1c

08008824 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7a5b      	ldrb	r3, [r3, #9]
 8008830:	2b0f      	cmp	r3, #15
 8008832:	d003      	beq.n	800883c <TlEvtReceived+0x18>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7a5b      	ldrb	r3, [r3, #9]
 8008838:	2b0e      	cmp	r3, #14
 800883a:	d107      	bne.n	800884c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800883c:	6879      	ldr	r1, [r7, #4]
 800883e:	4809      	ldr	r0, [pc, #36]	; (8008864 <TlEvtReceived+0x40>)
 8008840:	f000 fc24 	bl	800908c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008844:	2000      	movs	r0, #0
 8008846:	f000 ff33 	bl	80096b0 <hci_cmd_resp_release>
 800884a:	e006      	b.n	800885a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	4806      	ldr	r0, [pc, #24]	; (8008868 <TlEvtReceived+0x44>)
 8008850:	f000 fc1c 	bl	800908c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008854:	4804      	ldr	r0, [pc, #16]	; (8008868 <TlEvtReceived+0x44>)
 8008856:	f000 ff1f 	bl	8009698 <hci_notify_asynch_evt>
  }

  return;
 800885a:	bf00      	nop
}
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20000a14 	.word	0x20000a14
 8008868:	200008e0 	.word	0x200008e0

0800886c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a05      	ldr	r2, [pc, #20]	; (800888c <hci_register_io_bus+0x20>)
 8008878:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a04      	ldr	r2, [pc, #16]	; (8008890 <hci_register_io_bus+0x24>)
 800887e:	611a      	str	r2, [r3, #16]

  return;
 8008880:	bf00      	nop
}
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	08008b7d 	.word	0x08008b7d
 8008890:	08008be5 	.word	0x08008be5

08008894 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	4a08      	ldr	r2, [pc, #32]	; (80088c4 <shci_init+0x30>)
 80088a4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80088a6:	4a08      	ldr	r2, [pc, #32]	; (80088c8 <shci_init+0x34>)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80088ac:	4806      	ldr	r0, [pc, #24]	; (80088c8 <shci_init+0x34>)
 80088ae:	f000 f911 	bl	8008ad4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f894 	bl	80089e4 <TlInit>

  return;
 80088bc:	bf00      	nop
}
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20000a40 	.word	0x20000a40
 80088c8:	20000a20 	.word	0x20000a20

080088cc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80088d2:	4822      	ldr	r0, [pc, #136]	; (800895c <shci_user_evt_proc+0x90>)
 80088d4:	f000 fb92 	bl	8008ffc <LST_is_empty>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d12b      	bne.n	8008936 <shci_user_evt_proc+0x6a>
 80088de:	4b20      	ldr	r3, [pc, #128]	; (8008960 <shci_user_evt_proc+0x94>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d027      	beq.n	8008936 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80088e6:	f107 030c 	add.w	r3, r7, #12
 80088ea:	4619      	mov	r1, r3
 80088ec:	481b      	ldr	r0, [pc, #108]	; (800895c <shci_user_evt_proc+0x90>)
 80088ee:	f000 fc14 	bl	800911a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80088f2:	4b1c      	ldr	r3, [pc, #112]	; (8008964 <shci_user_evt_proc+0x98>)
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00c      	beq.n	8008914 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80088fe:	2301      	movs	r3, #1
 8008900:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008902:	4b18      	ldr	r3, [pc, #96]	; (8008964 <shci_user_evt_proc+0x98>)
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	1d3a      	adds	r2, r7, #4
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800890c:	793a      	ldrb	r2, [r7, #4]
 800890e:	4b14      	ldr	r3, [pc, #80]	; (8008960 <shci_user_evt_proc+0x94>)
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	e002      	b.n	800891a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008914:	4b12      	ldr	r3, [pc, #72]	; (8008960 <shci_user_evt_proc+0x94>)
 8008916:	2201      	movs	r2, #1
 8008918:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800891a:	4b11      	ldr	r3, [pc, #68]	; (8008960 <shci_user_evt_proc+0x94>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d004      	beq.n	800892c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fa6d 	bl	8008e04 <TL_MM_EvtDone>
 800892a:	e004      	b.n	8008936 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4619      	mov	r1, r3
 8008930:	480a      	ldr	r0, [pc, #40]	; (800895c <shci_user_evt_proc+0x90>)
 8008932:	f000 fb85 	bl	8009040 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008936:	4809      	ldr	r0, [pc, #36]	; (800895c <shci_user_evt_proc+0x90>)
 8008938:	f000 fb60 	bl	8008ffc <LST_is_empty>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d107      	bne.n	8008952 <shci_user_evt_proc+0x86>
 8008942:	4b07      	ldr	r3, [pc, #28]	; (8008960 <shci_user_evt_proc+0x94>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800894a:	4804      	ldr	r0, [pc, #16]	; (800895c <shci_user_evt_proc+0x90>)
 800894c:	f7f8 f86a 	bl	8000a24 <shci_notify_asynch_evt>
  }


  return;
 8008950:	bf00      	nop
 8008952:	bf00      	nop
}
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	200008f0 	.word	0x200008f0
 8008960:	20000900 	.word	0x20000900
 8008964:	20000a20 	.word	0x20000a20

08008968 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	60ba      	str	r2, [r7, #8]
 8008970:	607b      	str	r3, [r7, #4]
 8008972:	4603      	mov	r3, r0
 8008974:	81fb      	strh	r3, [r7, #14]
 8008976:	460b      	mov	r3, r1
 8008978:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800897a:	2000      	movs	r0, #0
 800897c:	f000 f864 	bl	8008a48 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008980:	4b16      	ldr	r3, [pc, #88]	; (80089dc <shci_send+0x74>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	89fa      	ldrh	r2, [r7, #14]
 8008986:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800898a:	4b14      	ldr	r3, [pc, #80]	; (80089dc <shci_send+0x74>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	7b7a      	ldrb	r2, [r7, #13]
 8008990:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008992:	4b12      	ldr	r3, [pc, #72]	; (80089dc <shci_send+0x74>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	330c      	adds	r3, #12
 8008998:	7b7a      	ldrb	r2, [r7, #13]
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	4618      	mov	r0, r3
 800899e:	f001 fd7d 	bl	800a49c <memcpy>

  shciContext.io.Send(0,0);
 80089a2:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <shci_send+0x78>)
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2100      	movs	r1, #0
 80089a8:	2000      	movs	r0, #0
 80089aa:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80089ac:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80089b0:	f7f8 f84f 	bl	8000a52 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f103 0008 	add.w	r0, r3, #8
 80089ba:	4b08      	ldr	r3, [pc, #32]	; (80089dc <shci_send+0x74>)
 80089bc:	6819      	ldr	r1, [r3, #0]
 80089be:	4b07      	ldr	r3, [pc, #28]	; (80089dc <shci_send+0x74>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	789b      	ldrb	r3, [r3, #2]
 80089c4:	3303      	adds	r3, #3
 80089c6:	461a      	mov	r2, r3
 80089c8:	f001 fd68 	bl	800a49c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80089cc:	2001      	movs	r0, #1
 80089ce:	f000 f83b 	bl	8008a48 <Cmd_SetStatus>

  return;
 80089d2:	bf00      	nop
}
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	200008fc 	.word	0x200008fc
 80089e0:	20000a20 	.word	0x20000a20

080089e4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80089ec:	4a10      	ldr	r2, [pc, #64]	; (8008a30 <TlInit+0x4c>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80089f2:	4810      	ldr	r0, [pc, #64]	; (8008a34 <TlInit+0x50>)
 80089f4:	f000 faf2 	bl	8008fdc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80089f8:	2001      	movs	r0, #1
 80089fa:	f000 f825 	bl	8008a48 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80089fe:	4b0e      	ldr	r3, [pc, #56]	; (8008a38 <TlInit+0x54>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008a04:	4b0d      	ldr	r3, [pc, #52]	; (8008a3c <TlInit+0x58>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00c      	beq.n	8008a26 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <TlInit+0x5c>)
 8008a12:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <TlInit+0x60>)
 8008a16:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008a18:	4b08      	ldr	r3, [pc, #32]	; (8008a3c <TlInit+0x58>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f107 020c 	add.w	r2, r7, #12
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
  }

  return;
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop
}
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	200008fc 	.word	0x200008fc
 8008a34:	200008f0 	.word	0x200008f0
 8008a38:	20000900 	.word	0x20000900
 8008a3c:	20000a20 	.word	0x20000a20
 8008a40:	08008a99 	.word	0x08008a99
 8008a44:	08008ab1 	.word	0x08008ab1

08008a48 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008a58:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <Cmd_SetStatus+0x48>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008a60:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <Cmd_SetStatus+0x48>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2000      	movs	r0, #0
 8008a66:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <Cmd_SetStatus+0x4c>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008a6e:	e00b      	b.n	8008a88 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008a70:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <Cmd_SetStatus+0x4c>)
 8008a72:	2201      	movs	r2, #1
 8008a74:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008a76:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <Cmd_SetStatus+0x48>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008a7e:	4b04      	ldr	r3, [pc, #16]	; (8008a90 <Cmd_SetStatus+0x48>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2001      	movs	r0, #1
 8008a84:	4798      	blx	r3
  return;
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
}
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20000a40 	.word	0x20000a40
 8008a94:	200008f8 	.word	0x200008f8

08008a98 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	f7f7 ffcb 	bl	8000a3c <shci_cmd_resp_release>

  return;
 8008aa6:	bf00      	nop
}
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	4805      	ldr	r0, [pc, #20]	; (8008ad0 <TlUserEvtReceived+0x20>)
 8008abc:	f000 fae6 	bl	800908c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008ac0:	4803      	ldr	r0, [pc, #12]	; (8008ad0 <TlUserEvtReceived+0x20>)
 8008ac2:	f7f7 ffaf 	bl	8000a24 <shci_notify_asynch_evt>

  return;
 8008ac6:	bf00      	nop
}
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	200008f0 	.word	0x200008f0

08008ad4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a05      	ldr	r2, [pc, #20]	; (8008af4 <shci_register_io_bus+0x20>)
 8008ae0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a04      	ldr	r2, [pc, #16]	; (8008af8 <shci_register_io_bus+0x24>)
 8008ae6:	611a      	str	r2, [r3, #16]

  return;
 8008ae8:	bf00      	nop
}
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	08008c91 	.word	0x08008c91
 8008af8:	08008ce5 	.word	0x08008ce5

08008afc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008b00:	f001 f94e 	bl	8009da0 <HW_IPCC_Enable>

  return;
 8008b04:	bf00      	nop
}
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <TL_Init>:


void TL_Init( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008b0c:	4b10      	ldr	r3, [pc, #64]	; (8008b50 <TL_Init+0x48>)
 8008b0e:	4a11      	ldr	r2, [pc, #68]	; (8008b54 <TL_Init+0x4c>)
 8008b10:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008b12:	4b0f      	ldr	r3, [pc, #60]	; (8008b50 <TL_Init+0x48>)
 8008b14:	4a10      	ldr	r2, [pc, #64]	; (8008b58 <TL_Init+0x50>)
 8008b16:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008b18:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <TL_Init+0x48>)
 8008b1a:	4a10      	ldr	r2, [pc, #64]	; (8008b5c <TL_Init+0x54>)
 8008b1c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008b1e:	4b0c      	ldr	r3, [pc, #48]	; (8008b50 <TL_Init+0x48>)
 8008b20:	4a0f      	ldr	r2, [pc, #60]	; (8008b60 <TL_Init+0x58>)
 8008b22:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008b24:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <TL_Init+0x48>)
 8008b26:	4a0f      	ldr	r2, [pc, #60]	; (8008b64 <TL_Init+0x5c>)
 8008b28:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008b2a:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <TL_Init+0x48>)
 8008b2c:	4a0e      	ldr	r2, [pc, #56]	; (8008b68 <TL_Init+0x60>)
 8008b2e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <TL_Init+0x48>)
 8008b32:	4a0e      	ldr	r2, [pc, #56]	; (8008b6c <TL_Init+0x64>)
 8008b34:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008b36:	4b06      	ldr	r3, [pc, #24]	; (8008b50 <TL_Init+0x48>)
 8008b38:	4a0d      	ldr	r2, [pc, #52]	; (8008b70 <TL_Init+0x68>)
 8008b3a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008b3c:	4b04      	ldr	r3, [pc, #16]	; (8008b50 <TL_Init+0x48>)
 8008b3e:	4a0d      	ldr	r2, [pc, #52]	; (8008b74 <TL_Init+0x6c>)
 8008b40:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008b42:	4b03      	ldr	r3, [pc, #12]	; (8008b50 <TL_Init+0x48>)
 8008b44:	4a0c      	ldr	r2, [pc, #48]	; (8008b78 <TL_Init+0x70>)
 8008b46:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008b48:	f001 f93e 	bl	8009dc8 <HW_IPCC_Init>

  return;
 8008b4c:	bf00      	nop
}
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20030000 	.word	0x20030000
 8008b54:	20030028 	.word	0x20030028
 8008b58:	20030048 	.word	0x20030048
 8008b5c:	20030058 	.word	0x20030058
 8008b60:	20030068 	.word	0x20030068
 8008b64:	20030070 	.word	0x20030070
 8008b68:	20030078 	.word	0x20030078
 8008b6c:	20030080 	.word	0x20030080
 8008b70:	2003009c 	.word	0x2003009c
 8008b74:	200300a0 	.word	0x200300a0
 8008b78:	200300ac 	.word	0x200300ac

08008b7c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008b88:	4811      	ldr	r0, [pc, #68]	; (8008bd0 <TL_BLE_Init+0x54>)
 8008b8a:	f000 fa27 	bl	8008fdc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008b8e:	4b11      	ldr	r3, [pc, #68]	; (8008bd4 <TL_BLE_Init+0x58>)
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a0c      	ldr	r2, [pc, #48]	; (8008bd8 <TL_BLE_Init+0x5c>)
 8008ba8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	4a08      	ldr	r2, [pc, #32]	; (8008bd0 <TL_BLE_Init+0x54>)
 8008bae:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008bb0:	f001 f920 	bl	8009df4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a08      	ldr	r2, [pc, #32]	; (8008bdc <TL_BLE_Init+0x60>)
 8008bba:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a07      	ldr	r2, [pc, #28]	; (8008be0 <TL_BLE_Init+0x64>)
 8008bc2:	6013      	str	r3, [r2, #0]

  return 0;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	200300c8 	.word	0x200300c8
 8008bd4:	20030000 	.word	0x20030000
 8008bd8:	200008a8 	.word	0x200008a8
 8008bdc:	20000a4c 	.word	0x20000a4c
 8008be0:	20000a50 	.word	0x20000a50

08008be4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008bf0:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <TL_BLE_SendCmd+0x34>)
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008bfa:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <TL_BLE_SendCmd+0x34>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4619      	mov	r1, r3
 8008c02:	2001      	movs	r0, #1
 8008c04:	f000 f96c 	bl	8008ee0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008c08:	f001 f8fe 	bl	8009e08 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20030000 	.word	0x20030000

08008c1c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c22:	e01c      	b.n	8008c5e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008c24:	1d3b      	adds	r3, r7, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4812      	ldr	r0, [pc, #72]	; (8008c74 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c2a:	f000 fa76 	bl	800911a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	7a5b      	ldrb	r3, [r3, #9]
 8008c32:	2b0f      	cmp	r3, #15
 8008c34:	d003      	beq.n	8008c3e <HW_IPCC_BLE_RxEvtNot+0x22>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7a5b      	ldrb	r3, [r3, #9]
 8008c3a:	2b0e      	cmp	r3, #14
 8008c3c:	d105      	bne.n	8008c4a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4619      	mov	r1, r3
 8008c42:	2002      	movs	r0, #2
 8008c44:	f000 f94c 	bl	8008ee0 <OutputDbgTrace>
 8008c48:	e004      	b.n	8008c54 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	2003      	movs	r0, #3
 8008c50:	f000 f946 	bl	8008ee0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008c54:	4b08      	ldr	r3, [pc, #32]	; (8008c78 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c5e:	4805      	ldr	r0, [pc, #20]	; (8008c74 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c60:	f000 f9cc 	bl	8008ffc <LST_is_empty>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0dc      	beq.n	8008c24 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008c6a:	bf00      	nop
}
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	200300c8 	.word	0x200300c8
 8008c78:	20000a4c 	.word	0x20000a4c

08008c7c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008c80:	4b02      	ldr	r3, [pc, #8]	; (8008c8c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4798      	blx	r3

  return;
 8008c86:	bf00      	nop
}
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000a50 	.word	0x20000a50

08008c90 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008c9c:	480d      	ldr	r0, [pc, #52]	; (8008cd4 <TL_SYS_Init+0x44>)
 8008c9e:	f000 f99d 	bl	8008fdc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <TL_SYS_Init+0x48>)
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4a08      	ldr	r2, [pc, #32]	; (8008cd4 <TL_SYS_Init+0x44>)
 8008cb4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008cb6:	f001 f8c9 	bl	8009e4c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a07      	ldr	r2, [pc, #28]	; (8008cdc <TL_SYS_Init+0x4c>)
 8008cc0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	4a06      	ldr	r2, [pc, #24]	; (8008ce0 <TL_SYS_Init+0x50>)
 8008cc8:	6013      	str	r3, [r2, #0]

  return 0;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200300d0 	.word	0x200300d0
 8008cd8:	20030000 	.word	0x20030000
 8008cdc:	20000a54 	.word	0x20000a54
 8008ce0:	20000a58 	.word	0x20000a58

08008ce4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008cf0:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <TL_SYS_SendCmd+0x34>)
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2210      	movs	r2, #16
 8008cf8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008cfa:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <TL_SYS_SendCmd+0x34>)
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4619      	mov	r1, r3
 8008d02:	2004      	movs	r0, #4
 8008d04:	f000 f8ec 	bl	8008ee0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008d08:	f001 f8aa 	bl	8009e60 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20030000 	.word	0x20030000

08008d1c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d20:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4619      	mov	r1, r3
 8008d28:	2005      	movs	r0, #5
 8008d2a:	f000 f8d9 	bl	8008ee0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a03      	ldr	r2, [pc, #12]	; (8008d40 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d34:	68d2      	ldr	r2, [r2, #12]
 8008d36:	6812      	ldr	r2, [r2, #0]
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3

  return;
 8008d3c:	bf00      	nop
}
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20030000 	.word	0x20030000
 8008d44:	20000a54 	.word	0x20000a54

08008d48 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008d4e:	e00e      	b.n	8008d6e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008d50:	1d3b      	adds	r3, r7, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	480b      	ldr	r0, [pc, #44]	; (8008d84 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008d56:	f000 f9e0 	bl	800911a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	2006      	movs	r0, #6
 8008d60:	f000 f8be 	bl	8008ee0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008d64:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <HW_IPCC_SYS_EvtNot+0x40>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008d6e:	4805      	ldr	r0, [pc, #20]	; (8008d84 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008d70:	f000 f944 	bl	8008ffc <LST_is_empty>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0ea      	beq.n	8008d50 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008d7a:	bf00      	nop
}
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	200300d0 	.word	0x200300d0
 8008d88:	20000a58 	.word	0x20000a58

08008d8c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008d94:	4817      	ldr	r0, [pc, #92]	; (8008df4 <TL_MM_Init+0x68>)
 8008d96:	f000 f921 	bl	8008fdc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008d9a:	4817      	ldr	r0, [pc, #92]	; (8008df8 <TL_MM_Init+0x6c>)
 8008d9c:	f000 f91e 	bl	8008fdc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008da0:	4b16      	ldr	r3, [pc, #88]	; (8008dfc <TL_MM_Init+0x70>)
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	4a16      	ldr	r2, [pc, #88]	; (8008e00 <TL_MM_Init+0x74>)
 8008da6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008da8:	4b15      	ldr	r3, [pc, #84]	; (8008e00 <TL_MM_Init+0x74>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6892      	ldr	r2, [r2, #8]
 8008db0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008db2:	4b13      	ldr	r3, [pc, #76]	; (8008e00 <TL_MM_Init+0x74>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	68d2      	ldr	r2, [r2, #12]
 8008dba:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008dbc:	4b10      	ldr	r3, [pc, #64]	; (8008e00 <TL_MM_Init+0x74>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0c      	ldr	r2, [pc, #48]	; (8008df4 <TL_MM_Init+0x68>)
 8008dc2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <TL_MM_Init+0x74>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6812      	ldr	r2, [r2, #0]
 8008dcc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008dce:	4b0c      	ldr	r3, [pc, #48]	; (8008e00 <TL_MM_Init+0x74>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6852      	ldr	r2, [r2, #4]
 8008dd6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008dd8:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <TL_MM_Init+0x74>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6912      	ldr	r2, [r2, #16]
 8008de0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <TL_MM_Init+0x74>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6952      	ldr	r2, [r2, #20]
 8008dea:	619a      	str	r2, [r3, #24]

  return;
 8008dec:	bf00      	nop
}
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	200300b8 	.word	0x200300b8
 8008df8:	20000a44 	.word	0x20000a44
 8008dfc:	20030000 	.word	0x20030000
 8008e00:	20000a5c 	.word	0x20000a5c

08008e04 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4807      	ldr	r0, [pc, #28]	; (8008e2c <TL_MM_EvtDone+0x28>)
 8008e10:	f000 f93c 	bl	800908c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	2000      	movs	r0, #0
 8008e18:	f000 f862 	bl	8008ee0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008e1c:	4804      	ldr	r0, [pc, #16]	; (8008e30 <TL_MM_EvtDone+0x2c>)
 8008e1e:	f001 f845 	bl	8009eac <HW_IPCC_MM_SendFreeBuf>

  return;
 8008e22:	bf00      	nop
}
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20000a44 	.word	0x20000a44
 8008e30:	08008e35 	.word	0x08008e35

08008e34 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e3a:	e00c      	b.n	8008e56 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008e3c:	1d3b      	adds	r3, r7, #4
 8008e3e:	4619      	mov	r1, r3
 8008e40:	480a      	ldr	r0, [pc, #40]	; (8008e6c <SendFreeBuf+0x38>)
 8008e42:	f000 f96a 	bl	800911a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008e46:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <SendFreeBuf+0x3c>)
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4611      	mov	r1, r2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 f91b 	bl	800908c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e56:	4805      	ldr	r0, [pc, #20]	; (8008e6c <SendFreeBuf+0x38>)
 8008e58:	f000 f8d0 	bl	8008ffc <LST_is_empty>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0ec      	beq.n	8008e3c <SendFreeBuf+0x8>
  }

  return;
 8008e62:	bf00      	nop
}
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000a44 	.word	0x20000a44
 8008e70:	20030000 	.word	0x20030000

08008e74 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008e78:	4805      	ldr	r0, [pc, #20]	; (8008e90 <TL_TRACES_Init+0x1c>)
 8008e7a:	f000 f8af 	bl	8008fdc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008e7e:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <TL_TRACES_Init+0x20>)
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	4a03      	ldr	r2, [pc, #12]	; (8008e90 <TL_TRACES_Init+0x1c>)
 8008e84:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008e86:	f001 f847 	bl	8009f18 <HW_IPCC_TRACES_Init>

  return;
 8008e8a:	bf00      	nop
}
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	200300c0 	.word	0x200300c0
 8008e94:	20030000 	.word	0x20030000

08008e98 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008e9e:	e008      	b.n	8008eb2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008ea0:	1d3b      	adds	r3, r7, #4
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4808      	ldr	r0, [pc, #32]	; (8008ec8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008ea6:	f000 f938 	bl	800911a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 f80d 	bl	8008ecc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008eb2:	4805      	ldr	r0, [pc, #20]	; (8008ec8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008eb4:	f000 f8a2 	bl	8008ffc <LST_is_empty>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f0      	beq.n	8008ea0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008ebe:	bf00      	nop
}
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200300c0 	.word	0x200300c0

08008ecc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	2b06      	cmp	r3, #6
 8008ef0:	d845      	bhi.n	8008f7e <OutputDbgTrace+0x9e>
 8008ef2:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <OutputDbgTrace+0x18>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f15 	.word	0x08008f15
 8008efc:	08008f39 	.word	0x08008f39
 8008f00:	08008f3f 	.word	0x08008f3f
 8008f04:	08008f53 	.word	0x08008f53
 8008f08:	08008f5f 	.word	0x08008f5f
 8008f0c:	08008f65 	.word	0x08008f65
 8008f10:	08008f73 	.word	0x08008f73
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	7a5b      	ldrb	r3, [r3, #9]
 8008f1c:	2bff      	cmp	r3, #255	; 0xff
 8008f1e:	d005      	beq.n	8008f2c <OutputDbgTrace+0x4c>
 8008f20:	2bff      	cmp	r3, #255	; 0xff
 8008f22:	dc05      	bgt.n	8008f30 <OutputDbgTrace+0x50>
 8008f24:	2b0e      	cmp	r3, #14
 8008f26:	d005      	beq.n	8008f34 <OutputDbgTrace+0x54>
 8008f28:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008f2a:	e001      	b.n	8008f30 <OutputDbgTrace+0x50>
          break;
 8008f2c:	bf00      	nop
 8008f2e:	e027      	b.n	8008f80 <OutputDbgTrace+0xa0>
          break;
 8008f30:	bf00      	nop
 8008f32:	e025      	b.n	8008f80 <OutputDbgTrace+0xa0>
          break;
 8008f34:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008f36:	e023      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008f3c:	e020      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	7a5b      	ldrb	r3, [r3, #9]
 8008f46:	2b0e      	cmp	r3, #14
 8008f48:	d001      	beq.n	8008f4e <OutputDbgTrace+0x6e>
 8008f4a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008f4c:	e000      	b.n	8008f50 <OutputDbgTrace+0x70>
          break;
 8008f4e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f50:	e016      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	7a5b      	ldrb	r3, [r3, #9]
 8008f5a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f5c:	e010      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008f62:	e00d      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	7a5b      	ldrb	r3, [r3, #9]
 8008f6c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008f6e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f70:	e006      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	7a5b      	ldrb	r3, [r3, #9]
 8008f7a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f7c:	e000      	b.n	8008f80 <OutputDbgTrace+0xa0>

    default:
      break;
 8008f7e:	bf00      	nop
  }

  return;
 8008f80:	bf00      	nop
}
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008f96:	4b0f      	ldr	r3, [pc, #60]	; (8008fd4 <OTP_Read+0x48>)
 8008f98:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008f9a:	e002      	b.n	8008fa2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3b08      	subs	r3, #8
 8008fa0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3307      	adds	r3, #7
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	79fa      	ldrb	r2, [r7, #7]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d003      	beq.n	8008fb6 <OTP_Read+0x2a>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4a09      	ldr	r2, [pc, #36]	; (8008fd8 <OTP_Read+0x4c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d1f2      	bne.n	8008f9c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3307      	adds	r3, #7
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	79fa      	ldrb	r2, [r7, #7]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d001      	beq.n	8008fc6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	1fff73f8 	.word	0x1fff73f8
 8008fd8:	1fff7000 	.word	0x1fff7000

08008fdc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	605a      	str	r2, [r3, #4]
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009004:	f3ef 8310 	mrs	r3, PRIMASK
 8009008:	60fb      	str	r3, [r7, #12]
  return(result);
 800900a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800900c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800900e:	b672      	cpsid	i
}
 8009010:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d102      	bne.n	8009022 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	75fb      	strb	r3, [r7, #23]
 8009020:	e001      	b.n	8009026 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f383 8810 	msr	PRIMASK, r3
}
 8009030:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
}
 8009034:	4618      	mov	r0, r3
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800904a:	f3ef 8310 	mrs	r3, PRIMASK
 800904e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009050:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009052:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009054:	b672      	cpsid	i
}
 8009056:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	605a      	str	r2, [r3, #4]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f383 8810 	msr	PRIMASK, r3
}
 800907e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009080:	bf00      	nop
 8009082:	371c      	adds	r7, #28
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009096:	f3ef 8310 	mrs	r3, PRIMASK
 800909a:	60fb      	str	r3, [r7, #12]
  return(result);
 800909c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800909e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090a0:	b672      	cpsid	i
}
 80090a2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f383 8810 	msr	PRIMASK, r3
}
 80090ca:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80090cc:	bf00      	nop
 80090ce:	371c      	adds	r7, #28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090e0:	f3ef 8310 	mrs	r3, PRIMASK
 80090e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80090e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090ea:	b672      	cpsid	i
}
 80090ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	6812      	ldr	r2, [r2, #0]
 80090f6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	6852      	ldr	r2, [r2, #4]
 8009100:	605a      	str	r2, [r3, #4]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f383 8810 	msr	PRIMASK, r3
}
 800910c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b086      	sub	sp, #24
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009124:	f3ef 8310 	mrs	r3, PRIMASK
 8009128:	60fb      	str	r3, [r7, #12]
  return(result);
 800912a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800912c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800912e:	b672      	cpsid	i
}
 8009130:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff ffca 	bl	80090d8 <LST_remove_node>
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f383 8810 	msr	PRIMASK, r3
}
 800914e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009150:	bf00      	nop
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800915c:	4b03      	ldr	r3, [pc, #12]	; (800916c <LL_FLASH_GetUDN+0x14>)
 800915e:	681b      	ldr	r3, [r3, #0]
}
 8009160:	4618      	mov	r0, r3
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	1fff7580 	.word	0x1fff7580

08009170 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8009174:	4b03      	ldr	r3, [pc, #12]	; (8009184 <LL_FLASH_GetDeviceID+0x14>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	b2db      	uxtb	r3, r3
}
 800917a:	4618      	mov	r0, r3
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	1fff7584 	.word	0x1fff7584

08009188 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800918c:	4b03      	ldr	r3, [pc, #12]	; (800919c <LL_FLASH_GetSTCompanyID+0x14>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	0a1b      	lsrs	r3, r3, #8
}
 8009192:	4618      	mov	r0, r3
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	1fff7584 	.word	0x1fff7584

080091a0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80091a0:	b5b0      	push	{r4, r5, r7, lr}
 80091a2:	b090      	sub	sp, #64	; 0x40
 80091a4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80091a6:	2392      	movs	r3, #146	; 0x92
 80091a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  // Yang Junyoung
  // Register the task.
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 80091ac:	4a29      	ldr	r2, [pc, #164]	; (8009254 <APP_BLE_Init+0xb4>)
 80091ae:	2100      	movs	r1, #0
 80091b0:	2004      	movs	r0, #4
 80091b2:	f001 f805 	bl	800a1c0 <UTIL_SEQ_RegTask>
  // Scheduler will run it exactly once.
  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80091b6:	2100      	movs	r1, #0
 80091b8:	2004      	movs	r0, #4
 80091ba:	f001 f823 	bl	800a204 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80091be:	4b26      	ldr	r3, [pc, #152]	; (8009258 <APP_BLE_Init+0xb8>)
 80091c0:	1d3c      	adds	r4, r7, #4
 80091c2:	461d      	mov	r5, r3
 80091c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80091d4:	c403      	stmia	r4!, {r0, r1}
 80091d6:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80091d8:	f000 f906 	bl	80093e8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80091dc:	2101      	movs	r1, #1
 80091de:	2002      	movs	r0, #2
 80091e0:	f000 fec2 	bl	8009f68 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80091e4:	4a1d      	ldr	r2, [pc, #116]	; (800925c <APP_BLE_Init+0xbc>)
 80091e6:	2100      	movs	r1, #0
 80091e8:	2002      	movs	r0, #2
 80091ea:	f000 ffe9 	bl	800a1c0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80091ee:	1d3b      	adds	r3, r7, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff f8c7 	bl	8008384 <SHCI_C2_BLE_Init>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80091fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009204:	f7f8 fd84 	bl	8001d10 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009208:	f000 f904 	bl	8009414 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800920c:	f7ff f814 	bl	8008238 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009210:	4b13      	ldr	r3, [pc, #76]	; (8009260 <APP_BLE_Init+0xc0>)
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009218:	4b11      	ldr	r3, [pc, #68]	; (8009260 <APP_BLE_Init+0xc0>)
 800921a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800921e:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009220:	4a10      	ldr	r2, [pc, #64]	; (8009264 <APP_BLE_Init+0xc4>)
 8009222:	2100      	movs	r1, #0
 8009224:	2001      	movs	r0, #1
 8009226:	f000 ffcb 	bl	800a1c0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800922a:	2006      	movs	r0, #6
 800922c:	f7fe fe78 	bl	8007f20 <aci_hal_set_radio_activity_mask>
 8009230:	4603      	mov	r3, r0
 8009232:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009236:	f000 fad1 	bl	80097dc <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800923a:	4b09      	ldr	r3, [pc, #36]	; (8009260 <APP_BLE_Init+0xc0>)
 800923c:	2200      	movs	r2, #0
 800923e:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009240:	4b07      	ldr	r3, [pc, #28]	; (8009260 <APP_BLE_Init+0xc0>)
 8009242:	2200      	movs	r2, #0
 8009244:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8009246:	2001      	movs	r0, #1
 8009248:	f000 f998 	bl	800957c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800924c:	bf00      	nop
}
 800924e:	3740      	adds	r7, #64	; 0x40
 8009250:	46bd      	mov	sp, r7
 8009252:	bdb0      	pop	{r4, r5, r7, pc}
 8009254:	0800974d 	.word	0x0800974d
 8009258:	0800a518 	.word	0x0800a518
 800925c:	080085a1 	.word	0x080085a1
 8009260:	20000a68 	.word	0x20000a68
 8009264:	08009665 	.word	0x08009665

08009268 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	; 0x28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009270:	2392      	movs	r3, #146	; 0x92
 8009272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3301      	adds	r3, #1
 800927a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2bff      	cmp	r3, #255	; 0xff
 8009282:	d053      	beq.n	800932c <SVCCTL_App_Notification+0xc4>
 8009284:	2bff      	cmp	r3, #255	; 0xff
 8009286:	f300 80a1 	bgt.w	80093cc <SVCCTL_App_Notification+0x164>
 800928a:	2b05      	cmp	r3, #5
 800928c:	d002      	beq.n	8009294 <SVCCTL_App_Notification+0x2c>
 800928e:	2b3e      	cmp	r3, #62	; 0x3e
 8009290:	d020      	beq.n	80092d4 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009292:	e09b      	b.n	80093cc <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	3302      	adds	r3, #2
 8009298:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	4b4e      	ldr	r3, [pc, #312]	; (80093dc <SVCCTL_App_Notification+0x174>)
 80092a4:	8adb      	ldrh	r3, [r3, #22]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d106      	bne.n	80092b8 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80092aa:	4b4c      	ldr	r3, [pc, #304]	; (80093dc <SVCCTL_App_Notification+0x174>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80092b0:	4b4a      	ldr	r3, [pc, #296]	; (80093dc <SVCCTL_App_Notification+0x174>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80092b8:	2001      	movs	r0, #1
 80092ba:	f000 f95f 	bl	800957c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80092be:	4b48      	ldr	r3, [pc, #288]	; (80093e0 <SVCCTL_App_Notification+0x178>)
 80092c0:	2201      	movs	r2, #1
 80092c2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80092c4:	4b45      	ldr	r3, [pc, #276]	; (80093dc <SVCCTL_App_Notification+0x174>)
 80092c6:	8ada      	ldrh	r2, [r3, #22]
 80092c8:	4b45      	ldr	r3, [pc, #276]	; (80093e0 <SVCCTL_App_Notification+0x178>)
 80092ca:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80092cc:	4844      	ldr	r0, [pc, #272]	; (80093e0 <SVCCTL_App_Notification+0x178>)
 80092ce:	f000 fa71 	bl	80097b4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80092d2:	e07e      	b.n	80093d2 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	3302      	adds	r3, #2
 80092d8:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d001      	beq.n	80092e6 <SVCCTL_App_Notification+0x7e>
 80092e2:	2b03      	cmp	r3, #3
          break;
 80092e4:	e021      	b.n	800932a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	3301      	adds	r3, #1
 80092ea:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80092ec:	4b3b      	ldr	r3, [pc, #236]	; (80093dc <SVCCTL_App_Notification+0x174>)
 80092ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d104      	bne.n	8009300 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80092f6:	4b39      	ldr	r3, [pc, #228]	; (80093dc <SVCCTL_App_Notification+0x174>)
 80092f8:	2206      	movs	r2, #6
 80092fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80092fe:	e003      	b.n	8009308 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009300:	4b36      	ldr	r3, [pc, #216]	; (80093dc <SVCCTL_App_Notification+0x174>)
 8009302:	2205      	movs	r2, #5
 8009304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800930e:	b29a      	uxth	r2, r3
 8009310:	4b32      	ldr	r3, [pc, #200]	; (80093dc <SVCCTL_App_Notification+0x174>)
 8009312:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009314:	4b32      	ldr	r3, [pc, #200]	; (80093e0 <SVCCTL_App_Notification+0x178>)
 8009316:	2200      	movs	r2, #0
 8009318:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800931a:	4b30      	ldr	r3, [pc, #192]	; (80093dc <SVCCTL_App_Notification+0x174>)
 800931c:	8ada      	ldrh	r2, [r3, #22]
 800931e:	4b30      	ldr	r3, [pc, #192]	; (80093e0 <SVCCTL_App_Notification+0x178>)
 8009320:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009322:	482f      	ldr	r0, [pc, #188]	; (80093e0 <SVCCTL_App_Notification+0x178>)
 8009324:	f000 fa46 	bl	80097b4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009328:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800932a:	e052      	b.n	80093d2 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	3302      	adds	r3, #2
 8009330:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	b29b      	uxth	r3, r3
 8009338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800933c:	d040      	beq.n	80093c0 <SVCCTL_App_Notification+0x158>
 800933e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009342:	dc45      	bgt.n	80093d0 <SVCCTL_App_Notification+0x168>
 8009344:	2b04      	cmp	r3, #4
 8009346:	d03d      	beq.n	80093c4 <SVCCTL_App_Notification+0x15c>
 8009348:	2b04      	cmp	r3, #4
 800934a:	db41      	blt.n	80093d0 <SVCCTL_App_Notification+0x168>
 800934c:	f240 420a 	movw	r2, #1034	; 0x40a
 8009350:	4293      	cmp	r3, r2
 8009352:	dc3d      	bgt.n	80093d0 <SVCCTL_App_Notification+0x168>
 8009354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009358:	dd3a      	ble.n	80093d0 <SVCCTL_App_Notification+0x168>
 800935a:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800935e:	2b09      	cmp	r3, #9
 8009360:	d836      	bhi.n	80093d0 <SVCCTL_App_Notification+0x168>
 8009362:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <SVCCTL_App_Notification+0x100>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	080093b9 	.word	0x080093b9
 800936c:	08009391 	.word	0x08009391
 8009370:	080093d1 	.word	0x080093d1
 8009374:	080093d1 	.word	0x080093d1
 8009378:	080093d1 	.word	0x080093d1
 800937c:	080093d1 	.word	0x080093d1
 8009380:	080093c9 	.word	0x080093c9
 8009384:	080093d1 	.word	0x080093d1
 8009388:	080093a5 	.word	0x080093a5
 800938c:	080093c9 	.word	0x080093c9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8009390:	4b12      	ldr	r3, [pc, #72]	; (80093dc <SVCCTL_App_Notification+0x174>)
 8009392:	8adb      	ldrh	r3, [r3, #22]
 8009394:	4913      	ldr	r1, [pc, #76]	; (80093e4 <SVCCTL_App_Notification+0x17c>)
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe f819 	bl	80073ce <aci_gap_pass_key_resp>
 800939c:	4603      	mov	r3, r0
 800939e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80093a2:	e012      	b.n	80093ca <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80093a4:	4b0d      	ldr	r3, [pc, #52]	; (80093dc <SVCCTL_App_Notification+0x174>)
 80093a6:	8adb      	ldrh	r3, [r3, #22]
 80093a8:	2101      	movs	r1, #1
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe f9b9 	bl	8007722 <aci_gap_numeric_comparison_value_confirm_yesno>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80093b6:	e008      	b.n	80093ca <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	3302      	adds	r3, #2
 80093bc:	61bb      	str	r3, [r7, #24]
          break;
 80093be:	e004      	b.n	80093ca <SVCCTL_App_Notification+0x162>
          break;
 80093c0:	bf00      	nop
 80093c2:	e005      	b.n	80093d0 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80093c4:	bf00      	nop
 80093c6:	e003      	b.n	80093d0 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80093c8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80093ca:	e001      	b.n	80093d0 <SVCCTL_App_Notification+0x168>
      break;
 80093cc:	bf00      	nop
 80093ce:	e000      	b.n	80093d2 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80093d0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80093d2:	2301      	movs	r3, #1
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3728      	adds	r7, #40	; 0x28
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20000a68 	.word	0x20000a68
 80093e0:	20000eec 	.word	0x20000eec
 80093e4:	0001b207 	.word	0x0001b207

080093e8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <Ble_Tl_Init+0x20>)
 80093f0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80093f2:	4b06      	ldr	r3, [pc, #24]	; (800940c <Ble_Tl_Init+0x24>)
 80093f4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80093f6:	463b      	mov	r3, r7
 80093f8:	4619      	mov	r1, r3
 80093fa:	4805      	ldr	r0, [pc, #20]	; (8009410 <Ble_Tl_Init+0x28>)
 80093fc:	f7ff f8b4 	bl	8008568 <hci_init>

  return;
 8009400:	bf00      	nop
}
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	200300d8 	.word	0x200300d8
 800940c:	08009715 	.word	0x08009715
 8009410:	080096dd 	.word	0x080096dd

08009414 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009416:	b08d      	sub	sp, #52	; 0x34
 8009418:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800941a:	2300      	movs	r3, #0
 800941c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800941e:	2392      	movs	r3, #146	; 0x92
 8009420:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009422:	f7fe fdd1 	bl	8007fc8 <hci_reset>
 8009426:	4603      	mov	r3, r0
 8009428:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800942a:	f000 f8d7 	bl	80095dc <BleGetBdAddress>
 800942e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	2106      	movs	r1, #6
 8009434:	2000      	movs	r0, #0
 8009436:	f7fe fc87 	bl	8007d48 <aci_hal_write_config_data>
 800943a:	4603      	mov	r3, r0
 800943c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800943e:	4a4a      	ldr	r2, [pc, #296]	; (8009568 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8009440:	2110      	movs	r1, #16
 8009442:	2018      	movs	r0, #24
 8009444:	f7fe fc80 	bl	8007d48 <aci_hal_write_config_data>
 8009448:	4603      	mov	r3, r0
 800944a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800944c:	4a47      	ldr	r2, [pc, #284]	; (800956c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800944e:	2110      	movs	r1, #16
 8009450:	2008      	movs	r0, #8
 8009452:	f7fe fc79 	bl	8007d48 <aci_hal_write_config_data>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800945a:	2118      	movs	r1, #24
 800945c:	2001      	movs	r0, #1
 800945e:	f7fe fcf8 	bl	8007e52 <aci_hal_set_tx_power_level>
 8009462:	4603      	mov	r3, r0
 8009464:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8009466:	f7fe f9c3 	bl	80077f0 <aci_gatt_init>
 800946a:	4603      	mov	r3, r0
 800946c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	f043 0301 	orr.w	r3, r3, #1
 8009478:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01f      	beq.n	80094c0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009480:	4b3b      	ldr	r3, [pc, #236]	; (8009570 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8009482:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009484:	1dba      	adds	r2, r7, #6
 8009486:	7bf8      	ldrb	r0, [r7, #15]
 8009488:	1cbb      	adds	r3, r7, #2
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	1d3b      	adds	r3, r7, #4
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4613      	mov	r3, r2
 8009492:	2208      	movs	r2, #8
 8009494:	2100      	movs	r1, #0
 8009496:	f7fe f801 	bl	800749c <aci_gap_init>
 800949a:	4603      	mov	r3, r0
 800949c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800949e:	88fc      	ldrh	r4, [r7, #6]
 80094a0:	88bd      	ldrh	r5, [r7, #4]
 80094a2:	68b8      	ldr	r0, [r7, #8]
 80094a4:	f7f6 fe6a 	bl	800017c <strlen>
 80094a8:	4603      	mov	r3, r0
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	4613      	mov	r3, r2
 80094b2:	2200      	movs	r2, #0
 80094b4:	4629      	mov	r1, r5
 80094b6:	4620      	mov	r0, r4
 80094b8:	f7fe fb9d 	bl	8007bf6 <aci_gatt_update_char_value>
 80094bc:	4603      	mov	r3, r0
 80094be:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80094c0:	88f8      	ldrh	r0, [r7, #6]
 80094c2:	8879      	ldrh	r1, [r7, #2]
 80094c4:	463b      	mov	r3, r7
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	2302      	movs	r3, #2
 80094ca:	2200      	movs	r2, #0
 80094cc:	f7fe fb93 	bl	8007bf6 <aci_gatt_update_char_value>
 80094d0:	4603      	mov	r3, r0
 80094d2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80094d4:	2202      	movs	r2, #2
 80094d6:	2102      	movs	r1, #2
 80094d8:	2000      	movs	r0, #0
 80094da:	f7fe fd99 	bl	8008010 <hci_le_set_default_phy>
 80094de:	4603      	mov	r3, r0
 80094e0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80094e2:	4b24      	ldr	r3, [pc, #144]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80094e8:	4b22      	ldr	r3, [pc, #136]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fd fe56 	bl	800719e <aci_gap_set_io_capability>
 80094f2:	4603      	mov	r3, r0
 80094f4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80094f6:	4b1f      	ldr	r3, [pc, #124]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80094fc:	4b1d      	ldr	r3, [pc, #116]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80094fe:	2208      	movs	r2, #8
 8009500:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009502:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009504:	2210      	movs	r2, #16
 8009506:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009508:	4b1a      	ldr	r3, [pc, #104]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800950a:	2201      	movs	r2, #1
 800950c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800950e:	4b19      	ldr	r3, [pc, #100]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009510:	4a19      	ldr	r2, [pc, #100]	; (8009578 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8009512:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009514:	4b17      	ldr	r3, [pc, #92]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009516:	2200      	movs	r2, #0
 8009518:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800951a:	4b16      	ldr	r3, [pc, #88]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800951c:	789c      	ldrb	r4, [r3, #2]
 800951e:	4b15      	ldr	r3, [pc, #84]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009520:	785d      	ldrb	r5, [r3, #1]
 8009522:	4b14      	ldr	r3, [pc, #80]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009524:	791b      	ldrb	r3, [r3, #4]
 8009526:	4a13      	ldr	r2, [pc, #76]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009528:	7952      	ldrb	r2, [r2, #5]
 800952a:	4912      	ldr	r1, [pc, #72]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800952c:	78c9      	ldrb	r1, [r1, #3]
 800952e:	4811      	ldr	r0, [pc, #68]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009530:	6880      	ldr	r0, [r0, #8]
 8009532:	2600      	movs	r6, #0
 8009534:	9604      	str	r6, [sp, #16]
 8009536:	9003      	str	r0, [sp, #12]
 8009538:	9102      	str	r1, [sp, #8]
 800953a:	9201      	str	r2, [sp, #4]
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	2300      	movs	r3, #0
 8009540:	2201      	movs	r2, #1
 8009542:	4629      	mov	r1, r5
 8009544:	4620      	mov	r0, r4
 8009546:	f7fd fe7e 	bl	8007246 <aci_gap_set_authentication_requirement>
 800954a:	4603      	mov	r3, r0
 800954c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800954e:	4b09      	ldr	r3, [pc, #36]	; (8009574 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009550:	789b      	ldrb	r3, [r3, #2]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8009556:	f7fe f8c0 	bl	80076da <aci_gap_configure_whitelist>
 800955a:	4603      	mov	r3, r0
 800955c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800955e:	bf00      	nop
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009566:	bf00      	nop
 8009568:	0800a758 	.word	0x0800a758
 800956c:	0800a768 	.word	0x0800a768
 8009570:	0800a554 	.word	0x0800a554
 8009574:	20000a68 	.word	0x20000a68
 8009578:	0001b207 	.word	0x0001b207

0800957c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08c      	sub	sp, #48	; 0x30
 8009580:	af08      	add	r7, sp, #32
 8009582:	4603      	mov	r3, r0
 8009584:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009586:	2392      	movs	r3, #146	; 0x92
 8009588:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800958a:	4a12      	ldr	r2, [pc, #72]	; (80095d4 <Adv_Request+0x58>)
 800958c:	79fb      	ldrb	r3, [r7, #7]
 800958e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009592:	2300      	movs	r3, #0
 8009594:	9306      	str	r3, [sp, #24]
 8009596:	2300      	movs	r3, #0
 8009598:	9305      	str	r3, [sp, #20]
 800959a:	2300      	movs	r3, #0
 800959c:	9304      	str	r3, [sp, #16]
 800959e:	2300      	movs	r3, #0
 80095a0:	9303      	str	r3, [sp, #12]
 80095a2:	2300      	movs	r3, #0
 80095a4:	9302      	str	r3, [sp, #8]
 80095a6:	2300      	movs	r3, #0
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	2300      	movs	r3, #0
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	2300      	movs	r3, #0
 80095b0:	22a0      	movs	r2, #160	; 0xa0
 80095b2:	2180      	movs	r1, #128	; 0x80
 80095b4:	2000      	movs	r0, #0
 80095b6:	f7fd fcf8 	bl	8006faa <aci_gap_set_discoverable>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80095be:	4906      	ldr	r1, [pc, #24]	; (80095d8 <Adv_Request+0x5c>)
 80095c0:	200a      	movs	r0, #10
 80095c2:	f7fe f818 	bl	80075f6 <aci_gap_update_adv_data>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80095ca:	bf00      	nop
}
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20000a68 	.word	0x20000a68
 80095d8:	20000020 	.word	0x20000020

080095dc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80095e2:	f7ff fdb9 	bl	8009158 <LL_FLASH_GetUDN>
 80095e6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ee:	d023      	beq.n	8009638 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80095f0:	f7ff fdca 	bl	8009188 <LL_FLASH_GetSTCompanyID>
 80095f4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80095f6:	f7ff fdbb 	bl	8009170 <LL_FLASH_GetDeviceID>
 80095fa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	4b16      	ldr	r3, [pc, #88]	; (800965c <BleGetBdAddress+0x80>)
 8009602:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	0a1b      	lsrs	r3, r3, #8
 8009608:	b2da      	uxtb	r2, r3
 800960a:	4b14      	ldr	r3, [pc, #80]	; (800965c <BleGetBdAddress+0x80>)
 800960c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	b2da      	uxtb	r2, r3
 8009612:	4b12      	ldr	r3, [pc, #72]	; (800965c <BleGetBdAddress+0x80>)
 8009614:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	b2da      	uxtb	r2, r3
 800961a:	4b10      	ldr	r3, [pc, #64]	; (800965c <BleGetBdAddress+0x80>)
 800961c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	0a1b      	lsrs	r3, r3, #8
 8009622:	b2da      	uxtb	r2, r3
 8009624:	4b0d      	ldr	r3, [pc, #52]	; (800965c <BleGetBdAddress+0x80>)
 8009626:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	0c1b      	lsrs	r3, r3, #16
 800962c:	b2da      	uxtb	r2, r3
 800962e:	4b0b      	ldr	r3, [pc, #44]	; (800965c <BleGetBdAddress+0x80>)
 8009630:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009632:	4b0a      	ldr	r3, [pc, #40]	; (800965c <BleGetBdAddress+0x80>)
 8009634:	617b      	str	r3, [r7, #20]
 8009636:	e00b      	b.n	8009650 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009638:	2000      	movs	r0, #0
 800963a:	f7ff fca7 	bl	8008f8c <OTP_Read>
 800963e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e001      	b.n	8009650 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800964c:	4b04      	ldr	r3, [pc, #16]	; (8009660 <BleGetBdAddress+0x84>)
 800964e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009650:	697b      	ldr	r3, [r7, #20]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000a60 	.word	0x20000a60
 8009660:	0800a750 	.word	0x0800a750

08009664 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800966a:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <Adv_Cancel+0x30>)
 800966c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009670:	2b05      	cmp	r3, #5
 8009672:	d00a      	beq.n	800968a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009674:	2392      	movs	r3, #146	; 0x92
 8009676:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009678:	f7fd fc73 	bl	8006f62 <aci_gap_set_non_discoverable>
 800967c:	4603      	mov	r3, r0
 800967e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009680:	4b04      	ldr	r3, [pc, #16]	; (8009694 <Adv_Cancel+0x30>)
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009688:	bf00      	nop
 800968a:	bf00      	nop
}
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20000a68 	.word	0x20000a68

08009698 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80096a0:	2100      	movs	r1, #0
 80096a2:	2002      	movs	r0, #2
 80096a4:	f000 fdae 	bl	800a204 <UTIL_SEQ_SetTask>

  return;
 80096a8:	bf00      	nop
}
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80096b8:	2001      	movs	r0, #1
 80096ba:	f000 fe0f 	bl	800a2dc <UTIL_SEQ_SetEvt>

  return;
 80096be:	bf00      	nop
}
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b082      	sub	sp, #8
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80096ce:	2001      	movs	r0, #1
 80096d0:	f000 fe24 	bl	800a31c <UTIL_SEQ_WaitEvt>

  return;
 80096d4:	bf00      	nop
}
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	3308      	adds	r3, #8
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fdf4 	bl	80082dc <SVCCTL_UserEvtRx>
 80096f4:	4603      	mov	r3, r0
 80096f6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009704:	e003      	b.n	800970e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
  return;
 800970c:	bf00      	nop
}
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800971e:	79fb      	ldrb	r3, [r7, #7]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <BLE_StatusNot+0x16>
 8009724:	2b01      	cmp	r3, #1
 8009726:	d006      	beq.n	8009736 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8009728:	e00b      	b.n	8009742 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800972a:	2307      	movs	r3, #7
 800972c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 fd94 	bl	800a25c <UTIL_SEQ_PauseTask>
      break;
 8009734:	e005      	b.n	8009742 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009736:	2307      	movs	r3, #7
 8009738:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 fdae 	bl	800a29c <UTIL_SEQ_ResumeTask>
      break;
 8009740:	bf00      	nop
  }

  return;
 8009742:	bf00      	nop
}
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <myTask>:
static void Custom_Vgsizeitread_Send_Notification(void);

/* USER CODE BEGIN PFP */
// Yang Junyoung
void myTask(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
	// Check the state of the button if it is pressed.
	if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8009750:	2110      	movs	r1, #16
 8009752:	4808      	ldr	r0, [pc, #32]	; (8009774 <myTask+0x28>)
 8009754:	f7f9 ffba 	bl	80036cc <HAL_GPIO_ReadPin>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d108      	bne.n	8009770 <myTask+0x24>
	{
		// Modify the data.
		UpdateCharData[0] ^= 0x1;
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <myTask+0x2c>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	f083 0301 	eor.w	r3, r3, #1
 8009766:	b2da      	uxtb	r2, r3
 8009768:	4b03      	ldr	r3, [pc, #12]	; (8009778 <myTask+0x2c>)
 800976a:	701a      	strb	r2, [r3, #0]
		// Update the characteristic.
		Custom_Vgsizeitread_Update_Char();
 800976c:	f000 f83e 	bl	80097ec <Custom_Vgsizeitread_Update_Char>
	}
	// At the end of the task, set it again.
	//UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
}
 8009770:	bf00      	nop
 8009772:	bd80      	pop	{r7, pc}
 8009774:	48000800 	.word	0x48000800
 8009778:	20000fe8 	.word	0x20000fe8

0800977c <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d006      	beq.n	800979a <Custom_STM_App_Notification+0x1e>
 800978c:	2b02      	cmp	r3, #2
 800978e:	dc06      	bgt.n	800979e <Custom_STM_App_Notification+0x22>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d006      	beq.n	80097a2 <Custom_STM_App_Notification+0x26>
 8009794:	2b01      	cmp	r3, #1
 8009796:	d006      	beq.n	80097a6 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8009798:	e001      	b.n	800979e <Custom_STM_App_Notification+0x22>
      break;
 800979a:	bf00      	nop
 800979c:	e004      	b.n	80097a8 <Custom_STM_App_Notification+0x2c>
      break;
 800979e:	bf00      	nop
 80097a0:	e002      	b.n	80097a8 <Custom_STM_App_Notification+0x2c>
      break;
 80097a2:	bf00      	nop
 80097a4:	e000      	b.n	80097a8 <Custom_STM_App_Notification+0x2c>
      break;
 80097a6:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80097a8:	bf00      	nop
}
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <Custom_APP_Notification+0x16>
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d002      	beq.n	80097ce <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80097c8:	e002      	b.n	80097d0 <Custom_APP_Notification+0x1c>
      break;
 80097ca:	bf00      	nop
 80097cc:	e000      	b.n	80097d0 <Custom_APP_Notification+0x1c>
      break;
 80097ce:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80097d0:	bf00      	nop
}
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80097e0:	bf00      	nop
}
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
	...

080097ec <Custom_Vgsizeitread_Update_Char>:
 *
 *************************************************************/

/* VGSIZEITEMS */
void Custom_Vgsizeitread_Update_Char(void) /* Property Read */
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Vgsizeitread_UC_1*/

  /* USER CODE END Vgsizeitread_UC_1*/

  if (updateflag != 0)
 80097f6:	79fb      	ldrb	r3, [r7, #7]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <Custom_Vgsizeitread_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_VGSIZEITREAD, (uint8_t *)UpdateCharData);
 80097fc:	4904      	ldr	r1, [pc, #16]	; (8009810 <Custom_Vgsizeitread_Update_Char+0x24>)
 80097fe:	2001      	movs	r0, #1
 8009800:	f000 f920 	bl	8009a44 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Vgsizeitread_UC_Last*/

  /* USER CODE END Vgsizeitread_UC_Last*/
  return;
 8009804:	bf00      	nop
 8009806:	bf00      	nop
}
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000fe8 	.word	0x20000fe8

08009814 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	; 0x28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800981c:	2300      	movs	r3, #0
 800981e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3301      	adds	r3, #1
 8009826:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2bff      	cmp	r3, #255	; 0xff
 800982e:	d14f      	bne.n	80098d0 <Custom_STM_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	3302      	adds	r3, #2
 8009834:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	b29b      	uxth	r3, r3
 800983c:	f640 4214 	movw	r2, #3092	; 0xc14
 8009840:	4293      	cmp	r3, r2
 8009842:	d03f      	beq.n	80098c4 <Custom_STM_Event_Handler+0xb0>
 8009844:	f640 4214 	movw	r2, #3092	; 0xc14
 8009848:	4293      	cmp	r3, r2
 800984a:	dc3d      	bgt.n	80098c8 <Custom_STM_Event_Handler+0xb4>
 800984c:	f640 4201 	movw	r2, #3073	; 0xc01
 8009850:	4293      	cmp	r3, r2
 8009852:	d003      	beq.n	800985c <Custom_STM_Event_Handler+0x48>
 8009854:	f640 4213 	movw	r2, #3091	; 0xc13
 8009858:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800985a:	e038      	b.n	80098ce <Custom_STM_Event_Handler+0xba>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	3302      	adds	r3, #2
 8009860:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomVgsizeitreadHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	885b      	ldrh	r3, [r3, #2]
 8009866:	b29b      	uxth	r3, r3
 8009868:	461a      	mov	r2, r3
 800986a:	4b1d      	ldr	r3, [pc, #116]	; (80098e0 <Custom_STM_Event_Handler+0xcc>)
 800986c:	889b      	ldrh	r3, [r3, #4]
 800986e:	3302      	adds	r3, #2
 8009870:	429a      	cmp	r2, r3
 8009872:	d119      	bne.n	80098a8 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009874:	2301      	movs	r3, #1
 8009876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	7a1b      	ldrb	r3, [r3, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <Custom_STM_Event_Handler+0x74>
 8009882:	2b01      	cmp	r3, #1
 8009884:	d008      	beq.n	8009898 <Custom_STM_Event_Handler+0x84>
              break;
 8009886:	e01c      	b.n	80098c2 <Custom_STM_Event_Handler+0xae>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSIZEITREAD_NOTIFY_DISABLED_EVT;
 8009888:	2302      	movs	r3, #2
 800988a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800988c:	f107 0308 	add.w	r3, r7, #8
 8009890:	4618      	mov	r0, r3
 8009892:	f7ff ff73 	bl	800977c <Custom_STM_App_Notification>
                break;
 8009896:	e014      	b.n	80098c2 <Custom_STM_Event_Handler+0xae>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSIZEITREAD_NOTIFY_ENABLED_EVT;
 8009898:	2301      	movs	r3, #1
 800989a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800989c:	f107 0308 	add.w	r3, r7, #8
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7ff ff6b 	bl	800977c <Custom_STM_App_Notification>
                break;
 80098a6:	e00c      	b.n	80098c2 <Custom_STM_Event_Handler+0xae>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomVgsicharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	885b      	ldrh	r3, [r3, #2]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	461a      	mov	r2, r3
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <Custom_STM_Event_Handler+0xcc>)
 80098b2:	885b      	ldrh	r3, [r3, #2]
 80098b4:	3301      	adds	r3, #1
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d108      	bne.n	80098cc <Custom_STM_Event_Handler+0xb8>
            return_value = SVCCTL_EvtAckFlowEnable;
 80098ba:	2301      	movs	r3, #1
 80098bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80098c0:	e004      	b.n	80098cc <Custom_STM_Event_Handler+0xb8>
 80098c2:	e003      	b.n	80098cc <Custom_STM_Event_Handler+0xb8>
          break;
 80098c4:	bf00      	nop
 80098c6:	e004      	b.n	80098d2 <Custom_STM_Event_Handler+0xbe>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80098c8:	bf00      	nop
 80098ca:	e002      	b.n	80098d2 <Custom_STM_Event_Handler+0xbe>
          break;
 80098cc:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80098ce:	e000      	b.n	80098d2 <Custom_STM_Event_Handler+0xbe>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80098d0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80098d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 80098d6:	4618      	mov	r0, r3
 80098d8:	3728      	adds	r7, #40	; 0x28
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000aec 	.word	0x20000aec

080098e4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08c      	sub	sp, #48	; 0x30
 80098e8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80098ea:	2392      	movs	r3, #146	; 0x92
 80098ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80098ee:	484f      	ldr	r0, [pc, #316]	; (8009a2c <SVCCTL_InitCustomSvc+0x148>)
 80098f0:	f7fe fcda 	bl	80082a8 <SVCCTL_RegisterSvcHandler>
   *                                2 for VGSIZEITREAD +
   *                                1 for VGSIZEITREAD configuration descriptor +
   *                              = 6
   */

  COPY_VGSIZEITEMS_UUID(uuid.Char_UUID_128);
 80098f4:	238f      	movs	r3, #143	; 0x8f
 80098f6:	713b      	strb	r3, [r7, #4]
 80098f8:	23e5      	movs	r3, #229	; 0xe5
 80098fa:	717b      	strb	r3, [r7, #5]
 80098fc:	23b3      	movs	r3, #179	; 0xb3
 80098fe:	71bb      	strb	r3, [r7, #6]
 8009900:	23d5      	movs	r3, #213	; 0xd5
 8009902:	71fb      	strb	r3, [r7, #7]
 8009904:	232e      	movs	r3, #46	; 0x2e
 8009906:	723b      	strb	r3, [r7, #8]
 8009908:	237f      	movs	r3, #127	; 0x7f
 800990a:	727b      	strb	r3, [r7, #9]
 800990c:	234a      	movs	r3, #74	; 0x4a
 800990e:	72bb      	strb	r3, [r7, #10]
 8009910:	2398      	movs	r3, #152	; 0x98
 8009912:	72fb      	strb	r3, [r7, #11]
 8009914:	232a      	movs	r3, #42	; 0x2a
 8009916:	733b      	strb	r3, [r7, #12]
 8009918:	2348      	movs	r3, #72	; 0x48
 800991a:	737b      	strb	r3, [r7, #13]
 800991c:	237a      	movs	r3, #122	; 0x7a
 800991e:	73bb      	strb	r3, [r7, #14]
 8009920:	23cc      	movs	r3, #204	; 0xcc
 8009922:	73fb      	strb	r3, [r7, #15]
 8009924:	2300      	movs	r3, #0
 8009926:	743b      	strb	r3, [r7, #16]
 8009928:	2300      	movs	r3, #0
 800992a:	747b      	strb	r3, [r7, #17]
 800992c:	2300      	movs	r3, #0
 800992e:	74bb      	strb	r3, [r7, #18]
 8009930:	2300      	movs	r3, #0
 8009932:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009934:	1d39      	adds	r1, r7, #4
 8009936:	4b3e      	ldr	r3, [pc, #248]	; (8009a30 <SVCCTL_InitCustomSvc+0x14c>)
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	2306      	movs	r3, #6
 800993c:	2201      	movs	r2, #1
 800993e:	2002      	movs	r0, #2
 8009940:	f7fd ff7b 	bl	800783a <aci_gatt_add_service>
 8009944:	4603      	mov	r3, r0
 8009946:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  VGSICHARWRITE
   */
  COPY_VGSICHARWRITE_UUID(uuid.Char_UUID_128);
 8009948:	2319      	movs	r3, #25
 800994a:	713b      	strb	r3, [r7, #4]
 800994c:	23ed      	movs	r3, #237	; 0xed
 800994e:	717b      	strb	r3, [r7, #5]
 8009950:	2382      	movs	r3, #130	; 0x82
 8009952:	71bb      	strb	r3, [r7, #6]
 8009954:	23ae      	movs	r3, #174	; 0xae
 8009956:	71fb      	strb	r3, [r7, #7]
 8009958:	23ed      	movs	r3, #237	; 0xed
 800995a:	723b      	strb	r3, [r7, #8]
 800995c:	2321      	movs	r3, #33	; 0x21
 800995e:	727b      	strb	r3, [r7, #9]
 8009960:	234c      	movs	r3, #76	; 0x4c
 8009962:	72bb      	strb	r3, [r7, #10]
 8009964:	239d      	movs	r3, #157	; 0x9d
 8009966:	72fb      	strb	r3, [r7, #11]
 8009968:	2341      	movs	r3, #65	; 0x41
 800996a:	733b      	strb	r3, [r7, #12]
 800996c:	2345      	movs	r3, #69	; 0x45
 800996e:	737b      	strb	r3, [r7, #13]
 8009970:	2322      	movs	r3, #34	; 0x22
 8009972:	73bb      	strb	r3, [r7, #14]
 8009974:	238e      	movs	r3, #142	; 0x8e
 8009976:	73fb      	strb	r3, [r7, #15]
 8009978:	2300      	movs	r3, #0
 800997a:	743b      	strb	r3, [r7, #16]
 800997c:	2300      	movs	r3, #0
 800997e:	747b      	strb	r3, [r7, #17]
 8009980:	2300      	movs	r3, #0
 8009982:	74bb      	strb	r3, [r7, #18]
 8009984:	2300      	movs	r3, #0
 8009986:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomVgsizeitemsHdle,
 8009988:	4b29      	ldr	r3, [pc, #164]	; (8009a30 <SVCCTL_InitCustomSvc+0x14c>)
 800998a:	8818      	ldrh	r0, [r3, #0]
 800998c:	4b29      	ldr	r3, [pc, #164]	; (8009a34 <SVCCTL_InitCustomSvc+0x150>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	1d3a      	adds	r2, r7, #4
 8009994:	4928      	ldr	r1, [pc, #160]	; (8009a38 <SVCCTL_InitCustomSvc+0x154>)
 8009996:	9105      	str	r1, [sp, #20]
 8009998:	2100      	movs	r1, #0
 800999a:	9104      	str	r1, [sp, #16]
 800999c:	2110      	movs	r1, #16
 800999e:	9103      	str	r1, [sp, #12]
 80099a0:	2101      	movs	r1, #1
 80099a2:	9102      	str	r1, [sp, #8]
 80099a4:	2101      	movs	r1, #1
 80099a6:	9101      	str	r1, [sp, #4]
 80099a8:	2108      	movs	r1, #8
 80099aa:	9100      	str	r1, [sp, #0]
 80099ac:	2102      	movs	r1, #2
 80099ae:	f7fe f81a 	bl	80079e6 <aci_gatt_add_char>
 80099b2:	4603      	mov	r3, r0
 80099b4:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : VGSICHARWRITE \n\r");
  }
  /**
   *  VGSIZEITREAD
   */
  COPY_VGSIZEITREAD_UUID(uuid.Char_UUID_128);
 80099b6:	2319      	movs	r3, #25
 80099b8:	713b      	strb	r3, [r7, #4]
 80099ba:	23ed      	movs	r3, #237	; 0xed
 80099bc:	717b      	strb	r3, [r7, #5]
 80099be:	2382      	movs	r3, #130	; 0x82
 80099c0:	71bb      	strb	r3, [r7, #6]
 80099c2:	23ae      	movs	r3, #174	; 0xae
 80099c4:	71fb      	strb	r3, [r7, #7]
 80099c6:	23ed      	movs	r3, #237	; 0xed
 80099c8:	723b      	strb	r3, [r7, #8]
 80099ca:	2321      	movs	r3, #33	; 0x21
 80099cc:	727b      	strb	r3, [r7, #9]
 80099ce:	234c      	movs	r3, #76	; 0x4c
 80099d0:	72bb      	strb	r3, [r7, #10]
 80099d2:	239d      	movs	r3, #157	; 0x9d
 80099d4:	72fb      	strb	r3, [r7, #11]
 80099d6:	2341      	movs	r3, #65	; 0x41
 80099d8:	733b      	strb	r3, [r7, #12]
 80099da:	2345      	movs	r3, #69	; 0x45
 80099dc:	737b      	strb	r3, [r7, #13]
 80099de:	2322      	movs	r3, #34	; 0x22
 80099e0:	73bb      	strb	r3, [r7, #14]
 80099e2:	238e      	movs	r3, #142	; 0x8e
 80099e4:	73fb      	strb	r3, [r7, #15]
 80099e6:	2301      	movs	r3, #1
 80099e8:	743b      	strb	r3, [r7, #16]
 80099ea:	2300      	movs	r3, #0
 80099ec:	747b      	strb	r3, [r7, #17]
 80099ee:	2300      	movs	r3, #0
 80099f0:	74bb      	strb	r3, [r7, #18]
 80099f2:	2300      	movs	r3, #0
 80099f4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomVgsizeitemsHdle,
 80099f6:	4b0e      	ldr	r3, [pc, #56]	; (8009a30 <SVCCTL_InitCustomSvc+0x14c>)
 80099f8:	8818      	ldrh	r0, [r3, #0]
 80099fa:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <SVCCTL_InitCustomSvc+0x158>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	1d3a      	adds	r2, r7, #4
 8009a02:	490f      	ldr	r1, [pc, #60]	; (8009a40 <SVCCTL_InitCustomSvc+0x15c>)
 8009a04:	9105      	str	r1, [sp, #20]
 8009a06:	2100      	movs	r1, #0
 8009a08:	9104      	str	r1, [sp, #16]
 8009a0a:	2110      	movs	r1, #16
 8009a0c:	9103      	str	r1, [sp, #12]
 8009a0e:	2107      	movs	r1, #7
 8009a10:	9102      	str	r1, [sp, #8]
 8009a12:	2100      	movs	r1, #0
 8009a14:	9101      	str	r1, [sp, #4]
 8009a16:	2110      	movs	r1, #16
 8009a18:	9100      	str	r1, [sp, #0]
 8009a1a:	2102      	movs	r1, #2
 8009a1c:	f7fd ffe3 	bl	80079e6 <aci_gatt_add_char>
 8009a20:	4603      	mov	r3, r0
 8009a22:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009a24:	bf00      	nop
}
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	08009815 	.word	0x08009815
 8009a30:	20000aec 	.word	0x20000aec
 8009a34:	2000002a 	.word	0x2000002a
 8009a38:	20000aee 	.word	0x20000aee
 8009a3c:	2000002b 	.word	0x2000002b
 8009a40:	20000af0 	.word	0x20000af0

08009a44 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009a50:	2392      	movs	r3, #146	; 0x92
 8009a52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <Custom_STM_App_Update_Char+0x1c>
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d00f      	beq.n	8009a7e <Custom_STM_App_Update_Char+0x3a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8009a5e:	e01d      	b.n	8009a9c <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomVgsizeitemsHdle,
 8009a60:	4b11      	ldr	r3, [pc, #68]	; (8009aa8 <Custom_STM_App_Update_Char+0x64>)
 8009a62:	8818      	ldrh	r0, [r3, #0]
 8009a64:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <Custom_STM_App_Update_Char+0x64>)
 8009a66:	8859      	ldrh	r1, [r3, #2]
 8009a68:	4b10      	ldr	r3, [pc, #64]	; (8009aac <Custom_STM_App_Update_Char+0x68>)
 8009a6a:	781a      	ldrb	r2, [r3, #0]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	4613      	mov	r3, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	f7fe f8bf 	bl	8007bf6 <aci_gatt_update_char_value>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a7c:	e00e      	b.n	8009a9c <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomVgsizeitemsHdle,
 8009a7e:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <Custom_STM_App_Update_Char+0x64>)
 8009a80:	8818      	ldrh	r0, [r3, #0]
 8009a82:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <Custom_STM_App_Update_Char+0x64>)
 8009a84:	8899      	ldrh	r1, [r3, #4]
 8009a86:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <Custom_STM_App_Update_Char+0x6c>)
 8009a88:	781a      	ldrb	r2, [r3, #0]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	2200      	movs	r2, #0
 8009a92:	f7fe f8b0 	bl	8007bf6 <aci_gatt_update_char_value>
 8009a96:	4603      	mov	r3, r0
 8009a98:	73fb      	strb	r3, [r7, #15]
      break;
 8009a9a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20000aec 	.word	0x20000aec
 8009aac:	2000002a 	.word	0x2000002a
 8009ab0:	2000002b 	.word	0x2000002b

08009ab4 <LL_PWR_EnableBootC2>:
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009ab8:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <LL_PWR_EnableBootC2+0x1c>)
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	4a04      	ldr	r2, [pc, #16]	; (8009ad0 <LL_PWR_EnableBootC2+0x1c>)
 8009abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac2:	60d3      	str	r3, [r2, #12]
}
 8009ac4:	bf00      	nop
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	58000400 	.word	0x58000400

08009ad4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009adc:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009ade:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009ae2:	4905      	ldr	r1, [pc, #20]	; (8009af8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	58000800 	.word	0x58000800

08009afc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009b04:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009b06:	6a1a      	ldr	r2, [r3, #32]
 8009b08:	4904      	ldr	r1, [pc, #16]	; (8009b1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	620b      	str	r3, [r1, #32]
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	58000800 	.word	0x58000800

08009b20 <LL_AHB3_GRP1_EnableClock>:
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4013      	ands	r3, r2
 8009b42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b44:	68fb      	ldr	r3, [r7, #12]
}
 8009b46:	bf00      	nop
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b085      	sub	sp, #20
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b5e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b72:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <LL_C1_IPCC_EnableIT_TXF>:
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	601a      	str	r2, [r3, #0]
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <LL_C1_IPCC_EnableIT_RXO>:
{
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f043 0201 	orr.w	r2, r3, #1
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	601a      	str	r2, [r3, #0]
}
 8009bbe:	bf00      	nop
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <LL_C1_IPCC_EnableTransmitChannel>:
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b083      	sub	sp, #12
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	041b      	lsls	r3, r3, #16
 8009bdc:	43db      	mvns	r3, r3
 8009bde:	401a      	ands	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	605a      	str	r2, [r3, #4]
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	041b      	lsls	r3, r3, #16
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	605a      	str	r2, [r3, #4]
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	43db      	mvns	r3, r3
 8009c26:	401a      	ands	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	605a      	str	r2, [r3, #4]
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	609a      	str	r2, [r3, #8]
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	041a      	lsls	r2, r3, #16
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	609a      	str	r2, [r3, #8]
}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009c72:	b480      	push	{r7}
 8009c74:	b083      	sub	sp, #12
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	4013      	ands	r3, r2
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d101      	bne.n	8009c8e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e000      	b.n	8009c90 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	69da      	ldr	r2, [r3, #28]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	4013      	ands	r3, r2
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d101      	bne.n	8009cb8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e000      	b.n	8009cba <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
	...

08009cc8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009ccc:	2102      	movs	r1, #2
 8009cce:	4818      	ldr	r0, [pc, #96]	; (8009d30 <HW_IPCC_Rx_Handler+0x68>)
 8009cd0:	f7ff ffe4 	bl	8009c9c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d008      	beq.n	8009cec <HW_IPCC_Rx_Handler+0x24>
 8009cda:	4b15      	ldr	r3, [pc, #84]	; (8009d30 <HW_IPCC_Rx_Handler+0x68>)
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d102      	bne.n	8009cec <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009ce6:	f000 f8d5 	bl	8009e94 <HW_IPCC_SYS_EvtHandler>
 8009cea:	e01e      	b.n	8009d2a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009cec:	2101      	movs	r1, #1
 8009cee:	4810      	ldr	r0, [pc, #64]	; (8009d30 <HW_IPCC_Rx_Handler+0x68>)
 8009cf0:	f7ff ffd4 	bl	8009c9c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d008      	beq.n	8009d0c <HW_IPCC_Rx_Handler+0x44>
 8009cfa:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <HW_IPCC_Rx_Handler+0x68>)
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009d06:	f000 f889 	bl	8009e1c <HW_IPCC_BLE_EvtHandler>
 8009d0a:	e00e      	b.n	8009d2a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009d0c:	2108      	movs	r1, #8
 8009d0e:	4808      	ldr	r0, [pc, #32]	; (8009d30 <HW_IPCC_Rx_Handler+0x68>)
 8009d10:	f7ff ffc4 	bl	8009c9c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d008      	beq.n	8009d2c <HW_IPCC_Rx_Handler+0x64>
 8009d1a:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <HW_IPCC_Rx_Handler+0x68>)
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f003 0308 	and.w	r3, r3, #8
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009d26:	f000 f901 	bl	8009f2c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
}
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	58000c00 	.word	0x58000c00

08009d34 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009d38:	2102      	movs	r1, #2
 8009d3a:	4818      	ldr	r0, [pc, #96]	; (8009d9c <HW_IPCC_Tx_Handler+0x68>)
 8009d3c:	f7ff ff99 	bl	8009c72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d108      	bne.n	8009d58 <HW_IPCC_Tx_Handler+0x24>
 8009d46:	4b15      	ldr	r3, [pc, #84]	; (8009d9c <HW_IPCC_Tx_Handler+0x68>)
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009d52:	f000 f893 	bl	8009e7c <HW_IPCC_SYS_CmdEvtHandler>
 8009d56:	e01e      	b.n	8009d96 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009d58:	2108      	movs	r1, #8
 8009d5a:	4810      	ldr	r0, [pc, #64]	; (8009d9c <HW_IPCC_Tx_Handler+0x68>)
 8009d5c:	f7ff ff89 	bl	8009c72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d108      	bne.n	8009d78 <HW_IPCC_Tx_Handler+0x44>
 8009d66:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <HW_IPCC_Tx_Handler+0x68>)
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009d72:	f000 f8bd 	bl	8009ef0 <HW_IPCC_MM_FreeBufHandler>
 8009d76:	e00e      	b.n	8009d96 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009d78:	2120      	movs	r1, #32
 8009d7a:	4808      	ldr	r0, [pc, #32]	; (8009d9c <HW_IPCC_Tx_Handler+0x68>)
 8009d7c:	f7ff ff79 	bl	8009c72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d108      	bne.n	8009d98 <HW_IPCC_Tx_Handler+0x64>
 8009d86:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <HW_IPCC_Tx_Handler+0x68>)
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009d92:	f000 f84f 	bl	8009e34 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009d96:	bf00      	nop
 8009d98:	bf00      	nop
}
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	58000c00 	.word	0x58000c00

08009da0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009da4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009da8:	f7ff fed3 	bl	8009b52 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009dac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009db0:	f7ff fea4 	bl	8009afc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009db4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009db8:	f7ff fe8c 	bl	8009ad4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009dbc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009dbe:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009dc0:	f7ff fe78 	bl	8009ab4 <LL_PWR_EnableBootC2>

  return;
 8009dc4:	bf00      	nop
}
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009dcc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009dd0:	f7ff fea6 	bl	8009b20 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009dd4:	4806      	ldr	r0, [pc, #24]	; (8009df0 <HW_IPCC_Init+0x28>)
 8009dd6:	f7ff fee8 	bl	8009baa <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009dda:	4805      	ldr	r0, [pc, #20]	; (8009df0 <HW_IPCC_Init+0x28>)
 8009ddc:	f7ff fed5 	bl	8009b8a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009de0:	202c      	movs	r0, #44	; 0x2c
 8009de2:	f7f9 f952 	bl	800308a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009de6:	202d      	movs	r0, #45	; 0x2d
 8009de8:	f7f9 f94f 	bl	800308a <HAL_NVIC_EnableIRQ>

  return;
 8009dec:	bf00      	nop
}
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	58000c00 	.word	0x58000c00

08009df4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009df8:	2101      	movs	r1, #1
 8009dfa:	4802      	ldr	r0, [pc, #8]	; (8009e04 <HW_IPCC_BLE_Init+0x10>)
 8009dfc:	f7ff ff0a 	bl	8009c14 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009e00:	bf00      	nop
}
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	58000c00 	.word	0x58000c00

08009e08 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4802      	ldr	r0, [pc, #8]	; (8009e18 <HW_IPCC_BLE_SendCmd+0x10>)
 8009e10:	f7ff ff20 	bl	8009c54 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009e14:	bf00      	nop
}
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	58000c00 	.word	0x58000c00

08009e1c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009e20:	f7fe fefc 	bl	8008c1c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009e24:	2101      	movs	r1, #1
 8009e26:	4802      	ldr	r0, [pc, #8]	; (8009e30 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009e28:	f7ff ff06 	bl	8009c38 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009e2c:	bf00      	nop
}
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	58000c00 	.word	0x58000c00

08009e34 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009e38:	2120      	movs	r1, #32
 8009e3a:	4803      	ldr	r0, [pc, #12]	; (8009e48 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009e3c:	f7ff fed8 	bl	8009bf0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009e40:	f7fe ff1c 	bl	8008c7c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009e44:	bf00      	nop
}
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	58000c00 	.word	0x58000c00

08009e4c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009e50:	2102      	movs	r1, #2
 8009e52:	4802      	ldr	r0, [pc, #8]	; (8009e5c <HW_IPCC_SYS_Init+0x10>)
 8009e54:	f7ff fede 	bl	8009c14 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009e58:	bf00      	nop
}
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	58000c00 	.word	0x58000c00

08009e60 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009e64:	2102      	movs	r1, #2
 8009e66:	4804      	ldr	r0, [pc, #16]	; (8009e78 <HW_IPCC_SYS_SendCmd+0x18>)
 8009e68:	f7ff fef4 	bl	8009c54 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	4802      	ldr	r0, [pc, #8]	; (8009e78 <HW_IPCC_SYS_SendCmd+0x18>)
 8009e70:	f7ff feab 	bl	8009bca <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009e74:	bf00      	nop
}
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	58000c00 	.word	0x58000c00

08009e7c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009e80:	2102      	movs	r1, #2
 8009e82:	4803      	ldr	r0, [pc, #12]	; (8009e90 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009e84:	f7ff feb4 	bl	8009bf0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009e88:	f7fe ff48 	bl	8008d1c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009e8c:	bf00      	nop
}
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	58000c00 	.word	0x58000c00

08009e94 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009e98:	f7fe ff56 	bl	8008d48 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009e9c:	2102      	movs	r1, #2
 8009e9e:	4802      	ldr	r0, [pc, #8]	; (8009ea8 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009ea0:	f7ff feca 	bl	8009c38 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009ea4:	bf00      	nop
}
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	58000c00 	.word	0x58000c00

08009eac <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009eb4:	2108      	movs	r1, #8
 8009eb6:	480c      	ldr	r0, [pc, #48]	; (8009ee8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009eb8:	f7ff fedb 	bl	8009c72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d007      	beq.n	8009ed2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009ec2:	4a0a      	ldr	r2, [pc, #40]	; (8009eec <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009ec8:	2108      	movs	r1, #8
 8009eca:	4807      	ldr	r0, [pc, #28]	; (8009ee8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009ecc:	f7ff fe7d 	bl	8009bca <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009ed0:	e006      	b.n	8009ee0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009ed6:	2108      	movs	r1, #8
 8009ed8:	4803      	ldr	r0, [pc, #12]	; (8009ee8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009eda:	f7ff febb 	bl	8009c54 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009ede:	bf00      	nop
}
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	58000c00 	.word	0x58000c00
 8009eec:	20000af4 	.word	0x20000af4

08009ef0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009ef4:	2108      	movs	r1, #8
 8009ef6:	4806      	ldr	r0, [pc, #24]	; (8009f10 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009ef8:	f7ff fe7a 	bl	8009bf0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009efc:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009f02:	2108      	movs	r1, #8
 8009f04:	4802      	ldr	r0, [pc, #8]	; (8009f10 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009f06:	f7ff fea5 	bl	8009c54 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009f0a:	bf00      	nop
}
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	58000c00 	.word	0x58000c00
 8009f14:	20000af4 	.word	0x20000af4

08009f18 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009f1c:	2108      	movs	r1, #8
 8009f1e:	4802      	ldr	r0, [pc, #8]	; (8009f28 <HW_IPCC_TRACES_Init+0x10>)
 8009f20:	f7ff fe78 	bl	8009c14 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009f24:	bf00      	nop
}
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	58000c00 	.word	0x58000c00

08009f2c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009f30:	f7fe ffb2 	bl	8008e98 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009f34:	2108      	movs	r1, #8
 8009f36:	4802      	ldr	r0, [pc, #8]	; (8009f40 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009f38:	f7ff fe7e 	bl	8009c38 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009f3c:	bf00      	nop
}
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	58000c00 	.word	0x58000c00

08009f44 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009f44:	b480      	push	{r7}
 8009f46:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <UTIL_LPM_Init+0x1c>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009f4e:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <UTIL_LPM_Init+0x20>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009f54:	bf00      	nop
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	20000af8 	.word	0x20000af8
 8009f64:	20000afc 	.word	0x20000afc

08009f68 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f74:	f3ef 8310 	mrs	r3, PRIMASK
 8009f78:	613b      	str	r3, [r7, #16]
  return(result);
 8009f7a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009f7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f7e:	b672      	cpsid	i
}
 8009f80:	bf00      	nop
  
  switch(state)
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d008      	beq.n	8009f9a <UTIL_LPM_SetOffMode+0x32>
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d10e      	bne.n	8009faa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009f8c:	4b0d      	ldr	r3, [pc, #52]	; (8009fc4 <UTIL_LPM_SetOffMode+0x5c>)
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	4a0b      	ldr	r2, [pc, #44]	; (8009fc4 <UTIL_LPM_SetOffMode+0x5c>)
 8009f96:	6013      	str	r3, [r2, #0]
      break;
 8009f98:	e008      	b.n	8009fac <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	43da      	mvns	r2, r3
 8009f9e:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <UTIL_LPM_SetOffMode+0x5c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	4a07      	ldr	r2, [pc, #28]	; (8009fc4 <UTIL_LPM_SetOffMode+0x5c>)
 8009fa6:	6013      	str	r3, [r2, #0]
      break;
 8009fa8:	e000      	b.n	8009fac <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009faa:	bf00      	nop
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f383 8810 	msr	PRIMASK, r3
}
 8009fb6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009fb8:	bf00      	nop
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	20000afc 	.word	0x20000afc

08009fc8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b090      	sub	sp, #64	; 0x40
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009fd0:	4b73      	ldr	r3, [pc, #460]	; (800a1a0 <UTIL_SEQ_Run+0x1d8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009fd6:	4b72      	ldr	r3, [pc, #456]	; (800a1a0 <UTIL_SEQ_Run+0x1d8>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4013      	ands	r3, r2
 8009fde:	4a70      	ldr	r2, [pc, #448]	; (800a1a0 <UTIL_SEQ_Run+0x1d8>)
 8009fe0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009fe2:	4b70      	ldr	r3, [pc, #448]	; (800a1a4 <UTIL_SEQ_Run+0x1dc>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009fe8:	4b6f      	ldr	r3, [pc, #444]	; (800a1a8 <UTIL_SEQ_Run+0x1e0>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009fee:	4b6f      	ldr	r3, [pc, #444]	; (800a1ac <UTIL_SEQ_Run+0x1e4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009ff4:	4b6e      	ldr	r3, [pc, #440]	; (800a1b0 <UTIL_SEQ_Run+0x1e8>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009ffa:	e08d      	b.n	800a118 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a000:	e002      	b.n	800a008 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a004:	3301      	adds	r3, #1
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a008:	4a6a      	ldr	r2, [pc, #424]	; (800a1b4 <UTIL_SEQ_Run+0x1ec>)
 800a00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a00c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	401a      	ands	r2, r3
 800a014:	4b62      	ldr	r3, [pc, #392]	; (800a1a0 <UTIL_SEQ_Run+0x1d8>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4013      	ands	r3, r2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0f1      	beq.n	800a002 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a01e:	4a65      	ldr	r2, [pc, #404]	; (800a1b4 <UTIL_SEQ_Run+0x1ec>)
 800a020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a022:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	401a      	ands	r2, r3
 800a02a:	4b5d      	ldr	r3, [pc, #372]	; (800a1a0 <UTIL_SEQ_Run+0x1d8>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4013      	ands	r3, r2
 800a030:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a032:	4a60      	ldr	r2, [pc, #384]	; (800a1b4 <UTIL_SEQ_Run+0x1ec>)
 800a034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	4413      	add	r3, r2
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	4013      	ands	r3, r2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d106      	bne.n	800a052 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a044:	4a5b      	ldr	r2, [pc, #364]	; (800a1b4 <UTIL_SEQ_Run+0x1ec>)
 800a046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a048:	00db      	lsls	r3, r3, #3
 800a04a:	4413      	add	r3, r2
 800a04c:	f04f 32ff 	mov.w	r2, #4294967295
 800a050:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a052:	4a58      	ldr	r2, [pc, #352]	; (800a1b4 <UTIL_SEQ_Run+0x1ec>)
 800a054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	4413      	add	r3, r2
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	4013      	ands	r3, r2
 800a060:	4618      	mov	r0, r3
 800a062:	f000 f9b3 	bl	800a3cc <SEQ_BitPosition>
 800a066:	4603      	mov	r3, r0
 800a068:	461a      	mov	r2, r3
 800a06a:	4b53      	ldr	r3, [pc, #332]	; (800a1b8 <UTIL_SEQ_Run+0x1f0>)
 800a06c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a06e:	4a51      	ldr	r2, [pc, #324]	; (800a1b4 <UTIL_SEQ_Run+0x1ec>)
 800a070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a072:	00db      	lsls	r3, r3, #3
 800a074:	4413      	add	r3, r2
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	4b4f      	ldr	r3, [pc, #316]	; (800a1b8 <UTIL_SEQ_Run+0x1f0>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2101      	movs	r1, #1
 800a07e:	fa01 f303 	lsl.w	r3, r1, r3
 800a082:	43db      	mvns	r3, r3
 800a084:	401a      	ands	r2, r3
 800a086:	494b      	ldr	r1, [pc, #300]	; (800a1b4 <UTIL_SEQ_Run+0x1ec>)
 800a088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	440b      	add	r3, r1
 800a08e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a090:	f3ef 8310 	mrs	r3, PRIMASK
 800a094:	61bb      	str	r3, [r7, #24]
  return(result);
 800a096:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a098:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a09a:	b672      	cpsid	i
}
 800a09c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a09e:	4b46      	ldr	r3, [pc, #280]	; (800a1b8 <UTIL_SEQ_Run+0x1f0>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a8:	43da      	mvns	r2, r3
 800a0aa:	4b3e      	ldr	r3, [pc, #248]	; (800a1a4 <UTIL_SEQ_Run+0x1dc>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	4a3c      	ldr	r2, [pc, #240]	; (800a1a4 <UTIL_SEQ_Run+0x1dc>)
 800a0b2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0b8:	e013      	b.n	800a0e2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	4a3d      	ldr	r2, [pc, #244]	; (800a1b4 <UTIL_SEQ_Run+0x1ec>)
 800a0c0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a0c4:	4b3c      	ldr	r3, [pc, #240]	; (800a1b8 <UTIL_SEQ_Run+0x1f0>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	43da      	mvns	r2, r3
 800a0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	400a      	ands	r2, r1
 800a0d6:	4937      	ldr	r1, [pc, #220]	; (800a1b4 <UTIL_SEQ_Run+0x1ec>)
 800a0d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e8      	bne.n	800a0ba <UTIL_SEQ_Run+0xf2>
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f383 8810 	msr	PRIMASK, r3
}
 800a0f2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a0f4:	4b30      	ldr	r3, [pc, #192]	; (800a1b8 <UTIL_SEQ_Run+0x1f0>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a30      	ldr	r2, [pc, #192]	; (800a1bc <UTIL_SEQ_Run+0x1f4>)
 800a0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0fe:	4798      	blx	r3

    local_taskset = TaskSet;
 800a100:	4b28      	ldr	r3, [pc, #160]	; (800a1a4 <UTIL_SEQ_Run+0x1dc>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a106:	4b28      	ldr	r3, [pc, #160]	; (800a1a8 <UTIL_SEQ_Run+0x1e0>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a10c:	4b27      	ldr	r3, [pc, #156]	; (800a1ac <UTIL_SEQ_Run+0x1e4>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a112:	4b27      	ldr	r3, [pc, #156]	; (800a1b0 <UTIL_SEQ_Run+0x1e8>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	401a      	ands	r2, r3
 800a11e:	4b20      	ldr	r3, [pc, #128]	; (800a1a0 <UTIL_SEQ_Run+0x1d8>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4013      	ands	r3, r2
 800a124:	2b00      	cmp	r3, #0
 800a126:	d005      	beq.n	800a134 <UTIL_SEQ_Run+0x16c>
 800a128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12c:	4013      	ands	r3, r2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f43f af64 	beq.w	8009ffc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a134:	4b20      	ldr	r3, [pc, #128]	; (800a1b8 <UTIL_SEQ_Run+0x1f0>)
 800a136:	f04f 32ff 	mov.w	r2, #4294967295
 800a13a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a13c:	f000 f938 	bl	800a3b0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a140:	f3ef 8310 	mrs	r3, PRIMASK
 800a144:	613b      	str	r3, [r7, #16]
  return(result);
 800a146:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a148:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a14a:	b672      	cpsid	i
}
 800a14c:	bf00      	nop
  local_taskset = TaskSet;
 800a14e:	4b15      	ldr	r3, [pc, #84]	; (800a1a4 <UTIL_SEQ_Run+0x1dc>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a154:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <UTIL_SEQ_Run+0x1e0>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a15a:	4b14      	ldr	r3, [pc, #80]	; (800a1ac <UTIL_SEQ_Run+0x1e4>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	401a      	ands	r2, r3
 800a166:	4b0e      	ldr	r3, [pc, #56]	; (800a1a0 <UTIL_SEQ_Run+0x1d8>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4013      	ands	r3, r2
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d107      	bne.n	800a180 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a170:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <UTIL_SEQ_Run+0x1e8>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a176:	4013      	ands	r3, r2
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a17c:	f7f6 fc3e 	bl	80009fc <UTIL_SEQ_Idle>
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f383 8810 	msr	PRIMASK, r3
}
 800a18a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a18c:	f000 f917 	bl	800a3be <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a190:	4a03      	ldr	r2, [pc, #12]	; (800a1a0 <UTIL_SEQ_Run+0x1d8>)
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	6013      	str	r3, [r2, #0]

  return;
 800a196:	bf00      	nop
}
 800a198:	3740      	adds	r7, #64	; 0x40
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	20000030 	.word	0x20000030
 800a1a4:	20000b00 	.word	0x20000b00
 800a1a8:	20000b04 	.word	0x20000b04
 800a1ac:	2000002c 	.word	0x2000002c
 800a1b0:	20000b08 	.word	0x20000b08
 800a1b4:	20000b90 	.word	0x20000b90
 800a1b8:	20000b0c 	.word	0x20000b0c
 800a1bc:	20000b10 	.word	0x20000b10

0800a1c0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d0:	617b      	str	r3, [r7, #20]
  return(result);
 800a1d2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a1d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1d6:	b672      	cpsid	i
}
 800a1d8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 f8f6 	bl	800a3cc <SEQ_BitPosition>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4a06      	ldr	r2, [pc, #24]	; (800a200 <UTIL_SEQ_RegTask+0x40>)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f383 8810 	msr	PRIMASK, r3
}
 800a1f6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a1f8:	bf00      	nop
}
 800a1fa:	3720      	adds	r7, #32
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000b10 	.word	0x20000b10

0800a204 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a20e:	f3ef 8310 	mrs	r3, PRIMASK
 800a212:	60fb      	str	r3, [r7, #12]
  return(result);
 800a214:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a218:	b672      	cpsid	i
}
 800a21a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a21c:	4b0d      	ldr	r3, [pc, #52]	; (800a254 <UTIL_SEQ_SetTask+0x50>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4313      	orrs	r3, r2
 800a224:	4a0b      	ldr	r2, [pc, #44]	; (800a254 <UTIL_SEQ_SetTask+0x50>)
 800a226:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a228:	4a0b      	ldr	r2, [pc, #44]	; (800a258 <UTIL_SEQ_SetTask+0x54>)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	431a      	orrs	r2, r3
 800a234:	4908      	ldr	r1, [pc, #32]	; (800a258 <UTIL_SEQ_SetTask+0x54>)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f383 8810 	msr	PRIMASK, r3
}
 800a246:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a248:	bf00      	nop
}
 800a24a:	371c      	adds	r7, #28
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	20000b00 	.word	0x20000b00
 800a258:	20000b90 	.word	0x20000b90

0800a25c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a264:	f3ef 8310 	mrs	r3, PRIMASK
 800a268:	60fb      	str	r3, [r7, #12]
  return(result);
 800a26a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a26c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a26e:	b672      	cpsid	i
}
 800a270:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	43da      	mvns	r2, r3
 800a276:	4b08      	ldr	r3, [pc, #32]	; (800a298 <UTIL_SEQ_PauseTask+0x3c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4013      	ands	r3, r2
 800a27c:	4a06      	ldr	r2, [pc, #24]	; (800a298 <UTIL_SEQ_PauseTask+0x3c>)
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	f383 8810 	msr	PRIMASK, r3
}
 800a28a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a28c:	bf00      	nop
}
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	2000002c 	.word	0x2000002c

0800a29c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a2ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ae:	b672      	cpsid	i
}
 800a2b0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <UTIL_SEQ_ResumeTask+0x3c>)
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	4a07      	ldr	r2, [pc, #28]	; (800a2d8 <UTIL_SEQ_ResumeTask+0x3c>)
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f383 8810 	msr	PRIMASK, r3
}
 800a2c8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a2ca:	bf00      	nop
}
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	2000002c 	.word	0x2000002c

0800a2dc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2e4:	f3ef 8310 	mrs	r3, PRIMASK
 800a2e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a2ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ee:	b672      	cpsid	i
}
 800a2f0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a2f2:	4b09      	ldr	r3, [pc, #36]	; (800a318 <UTIL_SEQ_SetEvt+0x3c>)
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	4a07      	ldr	r2, [pc, #28]	; (800a318 <UTIL_SEQ_SetEvt+0x3c>)
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f383 8810 	msr	PRIMASK, r3
}
 800a308:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a30a:	bf00      	nop
}
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	20000b04 	.word	0x20000b04

0800a31c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a324:	4b1f      	ldr	r3, [pc, #124]	; (800a3a4 <UTIL_SEQ_WaitEvt+0x88>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a32a:	4b1e      	ldr	r3, [pc, #120]	; (800a3a4 <UTIL_SEQ_WaitEvt+0x88>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a332:	d102      	bne.n	800a33a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a334:	2300      	movs	r3, #0
 800a336:	61fb      	str	r3, [r7, #28]
 800a338:	e005      	b.n	800a346 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a33a:	4b1a      	ldr	r3, [pc, #104]	; (800a3a4 <UTIL_SEQ_WaitEvt+0x88>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2201      	movs	r2, #1
 800a340:	fa02 f303 	lsl.w	r3, r2, r3
 800a344:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a346:	4b18      	ldr	r3, [pc, #96]	; (800a3a8 <UTIL_SEQ_WaitEvt+0x8c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a34c:	4a16      	ldr	r2, [pc, #88]	; (800a3a8 <UTIL_SEQ_WaitEvt+0x8c>)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a352:	e003      	b.n	800a35c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a354:	6879      	ldr	r1, [r7, #4]
 800a356:	69f8      	ldr	r0, [r7, #28]
 800a358:	f7f6 fb57 	bl	8000a0a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a35c:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <UTIL_SEQ_WaitEvt+0x90>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4013      	ands	r3, r2
 800a364:	2b00      	cmp	r3, #0
 800a366:	d0f5      	beq.n	800a354 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a368:	4a0e      	ldr	r2, [pc, #56]	; (800a3a4 <UTIL_SEQ_WaitEvt+0x88>)
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a36e:	f3ef 8310 	mrs	r3, PRIMASK
 800a372:	60bb      	str	r3, [r7, #8]
  return(result);
 800a374:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a376:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a378:	b672      	cpsid	i
}
 800a37a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	43da      	mvns	r2, r3
 800a380:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <UTIL_SEQ_WaitEvt+0x90>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4013      	ands	r3, r2
 800a386:	4a09      	ldr	r2, [pc, #36]	; (800a3ac <UTIL_SEQ_WaitEvt+0x90>)
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f383 8810 	msr	PRIMASK, r3
}
 800a394:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a396:	4a04      	ldr	r2, [pc, #16]	; (800a3a8 <UTIL_SEQ_WaitEvt+0x8c>)
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	6013      	str	r3, [r2, #0]
  return;
 800a39c:	bf00      	nop
}
 800a39e:	3720      	adds	r7, #32
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	20000b0c 	.word	0x20000b0c
 800a3a8:	20000b08 	.word	0x20000b08
 800a3ac:	20000b04 	.word	0x20000b04

0800a3b0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a3b4:	bf00      	nop
}
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a3be:	b480      	push	{r7}
 800a3c0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a3c2:	bf00      	nop
}
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	0c1b      	lsrs	r3, r3, #16
 800a3e0:	041b      	lsls	r3, r3, #16
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d104      	bne.n	800a3f0 <SEQ_BitPosition+0x24>
 800a3e6:	2310      	movs	r3, #16
 800a3e8:	73fb      	strb	r3, [r7, #15]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	041b      	lsls	r3, r3, #16
 800a3ee:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d105      	bne.n	800a406 <SEQ_BitPosition+0x3a>
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	3308      	adds	r3, #8
 800a3fe:	73fb      	strb	r3, [r7, #15]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d105      	bne.n	800a41c <SEQ_BitPosition+0x50>
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	3304      	adds	r3, #4
 800a414:	73fb      	strb	r3, [r7, #15]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	011b      	lsls	r3, r3, #4
 800a41a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	0f1b      	lsrs	r3, r3, #28
 800a420:	4a07      	ldr	r2, [pc, #28]	; (800a440 <SEQ_BitPosition+0x74>)
 800a422:	5cd2      	ldrb	r2, [r2, r3]
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	4413      	add	r3, r2
 800a428:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	f1c3 031f 	rsb	r3, r3, #31
 800a430:	b2db      	uxtb	r3, r3
}
 800a432:	4618      	mov	r0, r3
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	0800a778 	.word	0x0800a778

0800a444 <memset>:
 800a444:	4402      	add	r2, r0
 800a446:	4603      	mov	r3, r0
 800a448:	4293      	cmp	r3, r2
 800a44a:	d100      	bne.n	800a44e <memset+0xa>
 800a44c:	4770      	bx	lr
 800a44e:	f803 1b01 	strb.w	r1, [r3], #1
 800a452:	e7f9      	b.n	800a448 <memset+0x4>

0800a454 <__libc_init_array>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	4d0d      	ldr	r5, [pc, #52]	; (800a48c <__libc_init_array+0x38>)
 800a458:	4c0d      	ldr	r4, [pc, #52]	; (800a490 <__libc_init_array+0x3c>)
 800a45a:	1b64      	subs	r4, r4, r5
 800a45c:	10a4      	asrs	r4, r4, #2
 800a45e:	2600      	movs	r6, #0
 800a460:	42a6      	cmp	r6, r4
 800a462:	d109      	bne.n	800a478 <__libc_init_array+0x24>
 800a464:	4d0b      	ldr	r5, [pc, #44]	; (800a494 <__libc_init_array+0x40>)
 800a466:	4c0c      	ldr	r4, [pc, #48]	; (800a498 <__libc_init_array+0x44>)
 800a468:	f000 f826 	bl	800a4b8 <_init>
 800a46c:	1b64      	subs	r4, r4, r5
 800a46e:	10a4      	asrs	r4, r4, #2
 800a470:	2600      	movs	r6, #0
 800a472:	42a6      	cmp	r6, r4
 800a474:	d105      	bne.n	800a482 <__libc_init_array+0x2e>
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47c:	4798      	blx	r3
 800a47e:	3601      	adds	r6, #1
 800a480:	e7ee      	b.n	800a460 <__libc_init_array+0xc>
 800a482:	f855 3b04 	ldr.w	r3, [r5], #4
 800a486:	4798      	blx	r3
 800a488:	3601      	adds	r6, #1
 800a48a:	e7f2      	b.n	800a472 <__libc_init_array+0x1e>
 800a48c:	0800a788 	.word	0x0800a788
 800a490:	0800a788 	.word	0x0800a788
 800a494:	0800a788 	.word	0x0800a788
 800a498:	0800a78c 	.word	0x0800a78c

0800a49c <memcpy>:
 800a49c:	440a      	add	r2, r1
 800a49e:	4291      	cmp	r1, r2
 800a4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4a4:	d100      	bne.n	800a4a8 <memcpy+0xc>
 800a4a6:	4770      	bx	lr
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4b2:	4291      	cmp	r1, r2
 800a4b4:	d1f9      	bne.n	800a4aa <memcpy+0xe>
 800a4b6:	bd10      	pop	{r4, pc}

0800a4b8 <_init>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	bf00      	nop
 800a4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4be:	bc08      	pop	{r3}
 800a4c0:	469e      	mov	lr, r3
 800a4c2:	4770      	bx	lr

0800a4c4 <_fini>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	bf00      	nop
 800a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ca:	bc08      	pop	{r3}
 800a4cc:	469e      	mov	lr, r3
 800a4ce:	4770      	bx	lr
