
EMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a79c  0800a79c  0001a79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a7a0  0800a7a0  0001a7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000038  20000008  0800a7a4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 MB_MEM2       00000883  20000040  0800a7dc  00020040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200008c4  0800b05f  000208c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200008fc  0800b094  000208fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000910  0800b0a5  00020910  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f0  0800b0a5  000210f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002090d  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  0002093d  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002e364  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000061fc  00000000  00000000  0004ece4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a10  00000000  00000000  00054ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002030  00000000  00000000  000578f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c248  00000000  00000000  00059920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002d395  00000000  00000000  00085b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9668  00000000  00000000  000b2efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000af24  00000000  00000000  001ac568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  001b748c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000910 	.word	0x20000910
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a4cc 	.word	0x0800a4cc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000914 	.word	0x20000914
 8000178:	0800a4cc 	.word	0x0800a4cc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000196:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800019a:	4905      	ldr	r1, [pc, #20]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4313      	orrs	r3, r2
 80001a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr
 80001b0:	58000800 	.word	0x58000800

080001b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4013      	ands	r3, r2
 80001d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d8:	68fb      	ldr	r3, [r7, #12]
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b085      	sub	sp, #20
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80001f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4013      	ands	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000210:	68fb      	ldr	r3, [r7, #12]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021e:	b580      	push	{r7, lr}
 8000220:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000222:	f002 fddb 	bl	8002ddc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000226:	f002 fddf 	bl	8002de8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800022a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800022e:	f7ff ffad 	bl	800018c <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000232:	f000 f821 	bl	8000278 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000236:	f000 f8c1 	bl	80003bc <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800023a:	bf00      	nop
}
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <APPD_EnableCPU2+0x34>)
 8000248:	1d3c      	adds	r4, r7, #4
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000254:	c403      	stmia	r4!, {r0, r1}
 8000256:	8022      	strh	r2, [r4, #0]
 8000258:	3402      	adds	r4, #2
 800025a:	0c13      	lsrs	r3, r2, #16
 800025c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800025e:	f008 fe13 	bl	8008e88 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f008 f8ae 	bl	80083c6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800026a:	bf00      	nop
}
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	bf00      	nop
 8000274:	0800a4e4 	.word	0x0800a4e4

08000278 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000298:	2300      	movs	r3, #0
 800029a:	77fb      	strb	r3, [r7, #31]
 800029c:	e036      	b.n	800030c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800029e:	7ffb      	ldrb	r3, [r7, #31]
 80002a0:	4a43      	ldr	r2, [pc, #268]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	4413      	add	r3, r2
 80002a6:	799b      	ldrb	r3, [r3, #6]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d02c      	beq.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002ac:	7ffb      	ldrb	r3, [r7, #31]
 80002ae:	4a40      	ldr	r2, [pc, #256]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002b4:	4a3f      	ldr	r2, [pc, #252]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d01b      	beq.n	80002f2 <APPD_SetCPU2GpioConfig+0x7a>
 80002ba:	4a3e      	ldr	r2, [pc, #248]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d821      	bhi.n	8000304 <APPD_SetCPU2GpioConfig+0x8c>
 80002c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002c4:	d003      	beq.n	80002ce <APPD_SetCPU2GpioConfig+0x56>
 80002c6:	4a3c      	ldr	r2, [pc, #240]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d009      	beq.n	80002e0 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 80002cc:	e01a      	b.n	8000304 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002ce:	7ffb      	ldrb	r3, [r7, #31]
 80002d0:	4a37      	ldr	r2, [pc, #220]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	4413      	add	r3, r2
 80002d6:	889a      	ldrh	r2, [r3, #4]
 80002d8:	8bbb      	ldrh	r3, [r7, #28]
 80002da:	4313      	orrs	r3, r2
 80002dc:	83bb      	strh	r3, [r7, #28]
          break;
 80002de:	e012      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002e0:	7ffb      	ldrb	r3, [r7, #31]
 80002e2:	4a33      	ldr	r2, [pc, #204]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	4413      	add	r3, r2
 80002e8:	889a      	ldrh	r2, [r3, #4]
 80002ea:	8b7b      	ldrh	r3, [r7, #26]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	837b      	strh	r3, [r7, #26]
          break;
 80002f0:	e009      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80002f2:	7ffb      	ldrb	r3, [r7, #31]
 80002f4:	4a2e      	ldr	r2, [pc, #184]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4413      	add	r3, r2
 80002fa:	889a      	ldrh	r2, [r3, #4]
 80002fc:	8b3b      	ldrh	r3, [r7, #24]
 80002fe:	4313      	orrs	r3, r2
 8000300:	833b      	strh	r3, [r7, #24]
          break;
 8000302:	e000      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000304:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000306:	7ffb      	ldrb	r3, [r7, #31]
 8000308:	3301      	adds	r3, #1
 800030a:	77fb      	strb	r3, [r7, #31]
 800030c:	7ffb      	ldrb	r3, [r7, #31]
 800030e:	2b25      	cmp	r3, #37	; 0x25
 8000310:	d9c5      	bls.n	800029e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	2301      	movs	r3, #1
 8000318:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800031a:	2303      	movs	r3, #3
 800031c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800031e:	8bbb      	ldrh	r3, [r7, #28]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d014      	beq.n	800034e <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000324:	8bbb      	ldrh	r3, [r7, #28]
 8000326:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ff43 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff59 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033c:	f003 f860 	bl	8003400 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000340:	8bbb      	ldrh	r3, [r7, #28]
 8000342:	2200      	movs	r2, #0
 8000344:	4619      	mov	r1, r3
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034a:	f003 f9e1 	bl	8003710 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800034e:	8b7b      	ldrh	r3, [r7, #26]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d012      	beq.n	800037a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000354:	8b7b      	ldrh	r3, [r7, #26]
 8000356:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000358:	2002      	movs	r0, #2
 800035a:	f7ff ff2b 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800035e:	2002      	movs	r0, #2
 8000360:	f7ff ff41 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4813      	ldr	r0, [pc, #76]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 800036a:	f003 f849 	bl	8003400 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800036e:	8b7b      	ldrh	r3, [r7, #26]
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	4810      	ldr	r0, [pc, #64]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 8000376:	f003 f9cb 	bl	8003710 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800037a:	8b3b      	ldrh	r3, [r7, #24]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d013      	beq.n	80003a8 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000380:	8b3b      	ldrh	r3, [r7, #24]
 8000382:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000384:	2004      	movs	r0, #4
 8000386:	f7ff ff15 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800038a:	2004      	movs	r0, #4
 800038c:	f7ff ff2b 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4619      	mov	r1, r3
 8000394:	4807      	ldr	r0, [pc, #28]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000396:	f003 f833 	bl	8003400 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800039a:	8b3b      	ldrh	r3, [r7, #24]
 800039c:	2200      	movs	r2, #0
 800039e:	4619      	mov	r1, r3
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80003a2:	f003 f9b5 	bl	8003710 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
}
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	0800a574 	.word	0x0800a574
 80003b4:	48000800 	.word	0x48000800
 80003b8:	48000400 	.word	0x48000400

080003bc <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80003c0:	bf00      	nop
}
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80003d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003da:	f023 0207 	bic.w	r2, r3, #7
 80003de:	4905      	ldr	r1, [pc, #20]	; (80003f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	58000400 	.word	0x58000400

080003f8 <LL_EXTI_EnableIT_32_63>:
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <LL_EXTI_EnableIT_32_63+0x24>)
 8000402:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000406:	4905      	ldr	r1, [pc, #20]	; (800041c <LL_EXTI_EnableIT_32_63+0x24>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4313      	orrs	r3, r2
 800040c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	58000800 	.word	0x58000800

08000420 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800042e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800043a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	021b      	lsls	r3, r3, #8
 8000442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	cafecafe 	.word	0xcafecafe

0800045c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800046e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	608b      	str	r3, [r1, #8]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80004aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80004cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80004dc:	d101      	bne.n	80004e2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80004de:	2301      	movs	r3, #1
 80004e0:	e000      	b.n	80004e4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000502:	d101      	bne.n	8000508 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000504:	2301      	movs	r3, #1
 8000506:	e000      	b.n	800050a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <LL_AHB3_GRP1_EnableClock>:
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000538:	68fb      	ldr	r3, [r7, #12]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <LL_DBGMCU_GetDeviceID+0x18>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e0042000 	.word	0xe0042000

08000564 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_DBGMCU_GetRevisionID+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	0c1b      	lsrs	r3, r3, #16
 800056e:	b29b      	uxth	r3, r3
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e0042000 	.word	0xe0042000

08000580 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	685a      	ldr	r2, [r3, #4]
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	431a      	orrs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	431a      	orrs	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	041b      	lsls	r3, r3, #16
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	615a      	str	r2, [r3, #20]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	431a      	orrs	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	615a      	str	r2, [r3, #20]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	609a      	str	r2, [r3, #8]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	619a      	str	r2, [r3, #24]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <LL_LPM_EnableSleep+0x1c>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <LL_LPM_EnableSleep+0x1c>)
 800064e:	f023 0304 	bic.w	r3, r3, #4
 8000652:	6113      	str	r3, [r2, #16]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	22ff      	movs	r2, #255	; 0xff
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	22ca      	movs	r2, #202	; 0xca
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2253      	movs	r2, #83	; 0x53
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f023 0207 	bic.w	r2, r3, #7
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	431a      	orrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <MX_APPE_Config+0x18>)
 80006ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006ce:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80006d0:	f000 f826 	bl	8000720 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80006d4:	f000 f866 	bl	80007a4 <Config_HSE>

  return;
 80006d8:	bf00      	nop
}
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	58004000 	.word	0x58004000

080006e0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80006e4:	f000 f872 	bl	80007cc <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80006e8:	f000 f88a 	bl	8000800 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80006ec:	4904      	ldr	r1, [pc, #16]	; (8000700 <MX_APPE_Init+0x20>)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 fdce 	bl	8001290 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  // Yang Junyoung
  APPD_Init();
 80006f4:	f7ff fd93 	bl	800021e <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80006f8:	f000 f890 	bl	800081c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80006fc:	bf00      	nop
}
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000de8 	.word	0x20000de8

08000704 <Init_Smps>:

void Init_Smps(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000708:	bf00      	nop
}
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <Init_Exti>:

void Init_Exti(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000716:	2050      	movs	r0, #80	; 0x50
 8000718:	f7ff fe6e 	bl	80003f8 <LL_EXTI_EnableIT_32_63>

  return;
 800071c:	bf00      	nop
}
 800071e:	bd80      	pop	{r7, pc}

08000720 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000724:	f000 f804 	bl	8000730 <Reset_BackupDomain>

  Reset_IPCC();
 8000728:	f000 f81a 	bl	8000760 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800072c:	bf00      	nop
}
 800072e:	bd80      	pop	{r7, pc}

08000730 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000734:	f7ff fec8 	bl	80004c8 <LL_RCC_IsActiveFlag_PINRST>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00d      	beq.n	800075a <Reset_BackupDomain+0x2a>
 800073e:	f7ff fed6 	bl	80004ee <LL_RCC_IsActiveFlag_SFTRST>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d108      	bne.n	800075a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000748:	f003 f8a4 	bl	8003894 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800074c:	f003 f8a2 	bl	8003894 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000750:	f7ff fe98 	bl	8000484 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000754:	f7ff fea7 	bl	80004a6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000758:	bf00      	nop
 800075a:	bf00      	nop
}
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000764:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000768:	f7ff fed4 	bl	8000514 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800076c:	213f      	movs	r1, #63	; 0x3f
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <Reset_IPCC+0x40>)
 8000770:	f7ff ff4c 	bl	800060c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000774:	213f      	movs	r1, #63	; 0x3f
 8000776:	480a      	ldr	r0, [pc, #40]	; (80007a0 <Reset_IPCC+0x40>)
 8000778:	f7ff ff56 	bl	8000628 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800077c:	213f      	movs	r1, #63	; 0x3f
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <Reset_IPCC+0x40>)
 8000780:	f7ff fefe 	bl	8000580 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000784:	213f      	movs	r1, #63	; 0x3f
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <Reset_IPCC+0x40>)
 8000788:	f7ff ff1d 	bl	80005c6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800078c:	213f      	movs	r1, #63	; 0x3f
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <Reset_IPCC+0x40>)
 8000790:	f7ff ff08 	bl	80005a4 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000794:	213f      	movs	r1, #63	; 0x3f
 8000796:	4802      	ldr	r0, [pc, #8]	; (80007a0 <Reset_IPCC+0x40>)
 8000798:	f7ff ff27 	bl	80005ea <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800079c:	bf00      	nop
}
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58000c00 	.word	0x58000c00

080007a4 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f008 fbf8 	bl	8008fa0 <OTP_Read>
 80007b0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	799b      	ldrb	r3, [r3, #6]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe2f 	bl	8000420 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
}
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <System_Init>:

static void System_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  Init_Smps();
 80007d0:	f7ff ff98 	bl	8000704 <Init_Smps>

  Init_Exti();
 80007d4:	f7ff ff9d 	bl	8000712 <Init_Exti>

  Init_Rtc();
 80007d8:	f000 f802 	bl	80007e0 <Init_Rtc>

  return;
 80007dc:	bf00      	nop
}
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <Init_Rtc+0x1c>)
 80007e6:	f7ff ff4a 	bl	800067e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <Init_Rtc+0x1c>)
 80007ee:	f7ff ff56 	bl	800069e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80007f2:	4802      	ldr	r0, [pc, #8]	; (80007fc <Init_Rtc+0x1c>)
 80007f4:	f7ff ff36 	bl	8000664 <LL_RTC_EnableWriteProtection>

  return;
 80007f8:	bf00      	nop
}
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40002800 	.word	0x40002800

08000800 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000804:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000808:	f7ff fe28 	bl	800045c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800080c:	f009 fba4 	bl	8009f58 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000810:	2004      	movs	r0, #4
 8000812:	f7ff fddb 	bl	80003cc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000816:	bf00      	nop
}
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000822:	f008 f97b 	bl	8008b1c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <appe_Tl_Init+0x50>)
 8000828:	2100      	movs	r1, #0
 800082a:	2008      	movs	r0, #8
 800082c:	f009 fcd2 	bl	800a1d4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <appe_Tl_Init+0x54>)
 8000832:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <appe_Tl_Init+0x58>)
 8000836:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	480e      	ldr	r0, [pc, #56]	; (8000878 <appe_Tl_Init+0x5c>)
 800083e:	f008 f833 	bl	80088a8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <appe_Tl_Init+0x60>)
 8000844:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <appe_Tl_Init+0x64>)
 8000848:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <appe_Tl_Init+0x68>)
 800084c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800084e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000852:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	4618      	mov	r0, r3
 800085a:	f008 faa1 	bl	8008da0 <TL_MM_Init>

  TL_Enable();
 800085e:	f008 f957 	bl	8008b10 <TL_Enable>

  return;
 8000862:	bf00      	nop
}
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080088e1 	.word	0x080088e1
 8000870:	20000590 	.word	0x20000590
 8000874:	08000889 	.word	0x08000889
 8000878:	080008a1 	.word	0x080008a1
 800087c:	200007a8 	.word	0x200007a8
 8000880:	2000069c 	.word	0x2000069c
 8000884:	20000054 	.word	0x20000054

08000888 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000892:	bf00      	nop
}
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	330b      	adds	r3, #11
 80008ae:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80008ba:	2b07      	cmp	r3, #7
 80008bc:	d81f      	bhi.n	80008fe <APPE_SysUserEvtRx+0x5e>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <APPE_SysUserEvtRx+0x24>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008e5 	.word	0x080008e5
 80008c8:	080008f7 	.word	0x080008f7
 80008cc:	080008ff 	.word	0x080008ff
 80008d0:	080008ff 	.word	0x080008ff
 80008d4:	080008ff 	.word	0x080008ff
 80008d8:	080008ff 	.word	0x080008ff
 80008dc:	080008ff 	.word	0x080008ff
 80008e0:	080008ff 	.word	0x080008ff
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f007 fd99 	bl	8008420 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f81b 	bl	800092a <APPE_SysEvtReadyProcessing>
    break;
 80008f4:	e004      	b.n	8000900 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f806 	bl	8000908 <APPE_SysEvtError>
    break;
 80008fc:	e000      	b.n	8000900 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80008fe:	bf00      	nop
  }

  return;
 8000900:	bf00      	nop
}
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	330b      	adds	r3, #11
 8000916:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3302      	adds	r3, #2
 800091c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800091e:	bf00      	nop
}
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b08a      	sub	sp, #40	; 0x28
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	330b      	adds	r3, #11
 800094e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	3302      	adds	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d11d      	bne.n	800099a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800095e:	f7ff fc6f 	bl	8000240 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000962:	230f      	movs	r3, #15
 8000964:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000966:	237f      	movs	r3, #127	; 0x7f
 8000968:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800096a:	f7ff fdfb 	bl	8000564 <LL_DBGMCU_GetRevisionID>
 800096e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	b29b      	uxth	r3, r3
 8000974:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000976:	f7ff fde7 	bl	8000548 <LL_DBGMCU_GetDeviceID>
 800097a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	b29b      	uxth	r3, r3
 8000980:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fd34 	bl	80083f4 <SHCI_C2_Config>

    APP_BLE_Init();
 800098c:	f008 fc12 	bl	80091b4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000990:	2100      	movs	r1, #0
 8000992:	2001      	movs	r0, #1
 8000994:	f009 faf2 	bl	8009f7c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000998:	e007      	b.n	80009aa <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d103      	bne.n	80009aa <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
  return;
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
}
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ba:	f002 f9eb 	bl	8002d94 <HAL_GetTick>
 80009be:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ca:	d00a      	beq.n	80009e2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80009cc:	f002 f9fa 	bl	8002dc4 <HAL_GetTickFreq>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009da:	e002      	b.n	80009e2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80009dc:	f7ff fe32 	bl	8000644 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80009e0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80009e2:	f002 f9d7 	bl	8002d94 <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d8f4      	bhi.n	80009dc <HAL_Delay+0x2a>
  }
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <UTIL_SEQ_Idle>:

  /* USER CODE END MX_APPE_Process_2 */
}

void UTIL_SEQ_Idle(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000a00:	bf00      	nop
}
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f009 fae0 	bl	8009fdc <UTIL_SEQ_Run>

  return;
 8000a1c:	bf00      	nop
}
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f009 fbf2 	bl	800a218 <UTIL_SEQ_SetTask>
  return;
 8000a34:	bf00      	nop
}
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000a44:	2002      	movs	r0, #2
 8000a46:	f009 fc53 	bl	800a2f0 <UTIL_SEQ_SetEvt>
  return;
 8000a4a:	bf00      	nop
}
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f009 fc68 	bl	800a330 <UTIL_SEQ_WaitEvt>
  return;
 8000a60:	bf00      	nop
}
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <LL_EXTI_EnableIT_0_31>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a72:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a76:	4905      	ldr	r1, [pc, #20]	; (8000a8c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	58000800 	.word	0x58000800

08000a90 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	600b      	str	r3, [r1, #0]

}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	58000800 	.word	0x58000800

08000ab4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <ReadRtcSsrValue+0x3c>)
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <ReadRtcSsrValue+0x3c>)
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000aca:	e005      	b.n	8000ad8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <ReadRtcSsrValue+0x3c>)
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d1f5      	bne.n	8000acc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000ae0:	683b      	ldr	r3, [r7, #0]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40002800 	.word	0x40002800

08000af4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	460a      	mov	r2, r1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	491d      	ldr	r1, [pc, #116]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d009      	beq.n	8000b32 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000b1e:	7bfa      	ldrb	r2, [r7, #15]
 8000b20:	4916      	ldr	r1, [pc, #88]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4911      	ldr	r1, [pc, #68]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	440b      	add	r3, r1
 8000b40:	3315      	adds	r3, #21
 8000b42:	7bfa      	ldrb	r2, [r7, #15]
 8000b44:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	490c      	ldr	r1, [pc, #48]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	3314      	adds	r3, #20
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000b5a:	79ba      	ldrb	r2, [r7, #6]
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	440b      	add	r3, r1
 8000b68:	3315      	adds	r3, #21
 8000b6a:	79fa      	ldrb	r2, [r7, #7]
 8000b6c:	701a      	strb	r2, [r3, #0]

  return;
 8000b6e:	bf00      	nop
}
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	2000092c 	.word	0x2000092c

08000b80 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <LinkTimerBefore+0xb8>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	79ba      	ldrb	r2, [r7, #6]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d032      	beq.n	8000c02 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b9c:	79ba      	ldrb	r2, [r7, #6]
 8000b9e:	4927      	ldr	r1, [pc, #156]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	440b      	add	r3, r1
 8000baa:	3314      	adds	r3, #20
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	4922      	ldr	r1, [pc, #136]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3315      	adds	r3, #21
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	491d      	ldr	r1, [pc, #116]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	440b      	add	r3, r1
 8000bd2:	3315      	adds	r3, #21
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	4918      	ldr	r1, [pc, #96]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	440b      	add	r3, r1
 8000be6:	3314      	adds	r3, #20
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	4913      	ldr	r1, [pc, #76]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3314      	adds	r3, #20
 8000bfc:	79fa      	ldrb	r2, [r7, #7]
 8000bfe:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000c00:	e014      	b.n	8000c2c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	440b      	add	r3, r1
 8000c10:	3315      	adds	r3, #21
 8000c12:	79ba      	ldrb	r2, [r7, #6]
 8000c14:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c16:	79ba      	ldrb	r2, [r7, #6]
 8000c18:	4908      	ldr	r1, [pc, #32]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	440b      	add	r3, r1
 8000c24:	3314      	adds	r3, #20
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	701a      	strb	r2, [r3, #0]
  return;
 8000c2a:	bf00      	nop
}
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200009bc 	.word	0x200009bc
 8000c3c:	2000092c 	.word	0x2000092c

08000c40 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c4a:	4b4e      	ldr	r3, [pc, #312]	; (8000d84 <linkTimer+0x144>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b06      	cmp	r3, #6
 8000c52:	d118      	bne.n	8000c86 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c54:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <linkTimer+0x144>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <linkTimer+0x148>)
 8000c5c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000c5e:	4a49      	ldr	r2, [pc, #292]	; (8000d84 <linkTimer+0x144>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	4949      	ldr	r1, [pc, #292]	; (8000d8c <linkTimer+0x14c>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3315      	adds	r3, #21
 8000c74:	2206      	movs	r2, #6
 8000c76:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c78:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <linkTimer+0x150>)
 8000c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	81fb      	strh	r3, [r7, #14]
 8000c84:	e078      	b.n	8000d78 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c86:	f000 f909 	bl	8000e9c <ReturnTimeElapsed>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	493e      	ldr	r1, [pc, #248]	; (8000d8c <linkTimer+0x14c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	6819      	ldr	r1, [r3, #0]
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	79fa      	ldrb	r2, [r7, #7]
 8000ca4:	4419      	add	r1, r3
 8000ca6:	4839      	ldr	r0, [pc, #228]	; (8000d8c <linkTimer+0x14c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	4934      	ldr	r1, [pc, #208]	; (8000d8c <linkTimer+0x14c>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <linkTimer+0x144>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <linkTimer+0x14c>)
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	440b      	add	r3, r1
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4413      	add	r3, r2
 8000cde:	3308      	adds	r3, #8
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d337      	bcc.n	8000d58 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <linkTimer+0x144>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000cee:	7b7a      	ldrb	r2, [r7, #13]
 8000cf0:	4926      	ldr	r1, [pc, #152]	; (8000d8c <linkTimer+0x14c>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3315      	adds	r3, #21
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d02:	e013      	b.n	8000d2c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000d04:	7b7a      	ldrb	r2, [r7, #13]
 8000d06:	4921      	ldr	r1, [pc, #132]	; (8000d8c <linkTimer+0x14c>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	440b      	add	r3, r1
 8000d12:	3315      	adds	r3, #21
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000d18:	7b7a      	ldrb	r2, [r7, #13]
 8000d1a:	491c      	ldr	r1, [pc, #112]	; (8000d8c <linkTimer+0x14c>)
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	440b      	add	r3, r1
 8000d26:	3315      	adds	r3, #21
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d2c:	7b3b      	ldrb	r3, [r7, #12]
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d00b      	beq.n	8000d4a <linkTimer+0x10a>
 8000d32:	7b3a      	ldrb	r2, [r7, #12]
 8000d34:	4915      	ldr	r1, [pc, #84]	; (8000d8c <linkTimer+0x14c>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3308      	adds	r3, #8
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d2dc      	bcs.n	8000d04 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000d4a:	7b7a      	ldrb	r2, [r7, #13]
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fecf 	bl	8000af4 <LinkTimerAfter>
 8000d56:	e00f      	b.n	8000d78 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <linkTimer+0x144>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff0c 	bl	8000b80 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <linkTimer+0x144>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <linkTimer+0x148>)
 8000d70:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <linkTimer+0x144>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d78:	89fb      	ldrh	r3, [r7, #14]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200009bc 	.word	0x200009bc
 8000d88:	200009bd 	.word	0x200009bd
 8000d8c:	2000092c 	.word	0x2000092c
 8000d90:	200009c0 	.word	0x200009c0

08000d94 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <UnlinkTimer+0xf8>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d111      	bne.n	8000dd4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <UnlinkTimer+0xf8>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <UnlinkTimer+0xfc>)
 8000db8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000dba:	79fa      	ldrb	r2, [r7, #7]
 8000dbc:	4935      	ldr	r1, [pc, #212]	; (8000e94 <UnlinkTimer+0x100>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3315      	adds	r3, #21
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <UnlinkTimer+0xf8>)
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e03e      	b.n	8000e52 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000dd4:	79fa      	ldrb	r2, [r7, #7]
 8000dd6:	492f      	ldr	r1, [pc, #188]	; (8000e94 <UnlinkTimer+0x100>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	3314      	adds	r3, #20
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000de8:	79fa      	ldrb	r2, [r7, #7]
 8000dea:	492a      	ldr	r1, [pc, #168]	; (8000e94 <UnlinkTimer+0x100>)
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	440b      	add	r3, r1
 8000df6:	3315      	adds	r3, #21
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000dfc:	79f9      	ldrb	r1, [r7, #7]
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	4824      	ldr	r0, [pc, #144]	; (8000e94 <UnlinkTimer+0x100>)
 8000e02:	460b      	mov	r3, r1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	440b      	add	r3, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4403      	add	r3, r0
 8000e0c:	3315      	adds	r3, #21
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2d8      	uxtb	r0, r3
 8000e12:	4920      	ldr	r1, [pc, #128]	; (8000e94 <UnlinkTimer+0x100>)
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3315      	adds	r3, #21
 8000e20:	4602      	mov	r2, r0
 8000e22:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d013      	beq.n	8000e52 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000e2a:	79f9      	ldrb	r1, [r7, #7]
 8000e2c:	7bba      	ldrb	r2, [r7, #14]
 8000e2e:	4819      	ldr	r0, [pc, #100]	; (8000e94 <UnlinkTimer+0x100>)
 8000e30:	460b      	mov	r3, r1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	440b      	add	r3, r1
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4403      	add	r3, r0
 8000e3a:	3314      	adds	r3, #20
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2d8      	uxtb	r0, r3
 8000e40:	4914      	ldr	r1, [pc, #80]	; (8000e94 <UnlinkTimer+0x100>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3314      	adds	r3, #20
 8000e4e:	4602      	mov	r2, r0
 8000e50:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	490f      	ldr	r1, [pc, #60]	; (8000e94 <UnlinkTimer+0x100>)
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	440b      	add	r3, r1
 8000e60:	330c      	adds	r3, #12
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <UnlinkTimer+0xf8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b06      	cmp	r3, #6
 8000e6e:	d107      	bne.n	8000e80 <UnlinkTimer+0xec>
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <UnlinkTimer+0x104>)
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
}
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	200009bc 	.word	0x200009bc
 8000e90:	200009bd 	.word	0x200009bd
 8000e94:	2000092c 	.word	0x2000092c
 8000e98:	200009c0 	.word	0x200009c0

08000e9c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eaa:	d026      	beq.n	8000efa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000eac:	f7ff fe02 	bl	8000ab4 <ReadRtcSsrValue>
 8000eb0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d805      	bhi.n	8000ec8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	e00a      	b.n	8000ede <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <ReturnTimeElapsed+0x74>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <ReturnTimeElapsed+0x78>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <ReturnTimeElapsed+0x7c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	40d3      	lsrs	r3, r2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	e001      	b.n	8000efe <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	b29b      	uxth	r3, r3
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200009c0 	.word	0x200009c0
 8000f10:	200009c8 	.word	0x200009c8
 8000f14:	200009c6 	.word	0x200009c6
 8000f18:	200009c5 	.word	0x200009c5

08000f1c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d108      	bne.n	8000f3e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f2c:	f7ff fdc2 	bl	8000ab4 <ReadRtcSsrValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <RestartWakeupCounter+0x9c>)
 8000f34:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f002 f8d9 	bl	80030ee <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000f3c:	e039      	b.n	8000fb2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d803      	bhi.n	8000f4c <RestartWakeupCounter+0x30>
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <RestartWakeupCounter+0xa0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d002      	beq.n	8000f52 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000f52:	bf00      	nop
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f8      	beq.n	8000f54 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f72:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <RestartWakeupCounter+0xa8>)
 8000f76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f7a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f002 f8c4 	bl	800310a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <RestartWakeupCounter+0xac>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	0c1b      	lsrs	r3, r3, #16
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	88fa      	ldrh	r2, [r7, #6]
 8000f8c:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <RestartWakeupCounter+0xac>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f92:	f7ff fd8f 	bl	8000ab4 <ReadRtcSsrValue>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <RestartWakeupCounter+0x9c>)
 8000f9a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000faa:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000fac:	f3af 8000 	nop.w
  return ;
 8000fb0:	bf00      	nop
}
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200009c0 	.word	0x200009c0
 8000fbc:	200009c5 	.word	0x200009c5
 8000fc0:	20000de8 	.word	0x20000de8
 8000fc4:	58000800 	.word	0x58000800
 8000fc8:	40002800 	.word	0x40002800

08000fcc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <RescheduleTimerList+0x11c>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fde:	d107      	bne.n	8000ff0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000fe0:	bf00      	nop
 8000fe2:	4b42      	ldr	r3, [pc, #264]	; (80010ec <RescheduleTimerList+0x120>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f8      	bne.n	8000fe2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000ff0:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <RescheduleTimerList+0x120>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <RescheduleTimerList+0x120>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ffe:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001000:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <RescheduleTimerList+0x124>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	493a      	ldr	r1, [pc, #232]	; (80010f4 <RescheduleTimerList+0x128>)
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	3308      	adds	r3, #8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800101a:	f7ff ff3f 	bl	8000e9c <ReturnTimeElapsed>
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	429a      	cmp	r2, r3
 8001028:	d205      	bcs.n	8001036 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <RescheduleTimerList+0x12c>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e04d      	b.n	80010d2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4a30      	ldr	r2, [pc, #192]	; (80010fc <RescheduleTimerList+0x130>)
 800103a:	8812      	ldrh	r2, [r2, #0]
 800103c:	b292      	uxth	r2, r2
 800103e:	4413      	add	r3, r2
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4293      	cmp	r3, r2
 8001046:	d906      	bls.n	8001056 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <RescheduleTimerList+0x130>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <RescheduleTimerList+0x12c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e03d      	b.n	80010d2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	b29a      	uxth	r2, r3
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <RescheduleTimerList+0x12c>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001066:	e034      	b.n	80010d2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	4922      	ldr	r1, [pc, #136]	; (80010f4 <RescheduleTimerList+0x128>)
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	3308      	adds	r3, #8
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	429a      	cmp	r2, r3
 800107e:	d20a      	bcs.n	8001096 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	491c      	ldr	r1, [pc, #112]	; (80010f4 <RescheduleTimerList+0x128>)
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	3308      	adds	r3, #8
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e013      	b.n	80010be <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	4916      	ldr	r1, [pc, #88]	; (80010f4 <RescheduleTimerList+0x128>)
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	3308      	adds	r3, #8
 80010a6:	6819      	ldr	r1, [r3, #0]
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	1ac9      	subs	r1, r1, r3
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <RescheduleTimerList+0x128>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4403      	add	r3, r0
 80010ba:	3308      	adds	r3, #8
 80010bc:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <RescheduleTimerList+0x128>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	3315      	adds	r3, #21
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	d1c7      	bne.n	8001068 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80010d8:	89bb      	ldrh	r3, [r7, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff1e 	bl	8000f1c <RestartWakeupCounter>

  return ;
 80010e0:	bf00      	nop
}
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40002800 	.word	0x40002800
 80010ec:	20000de8 	.word	0x20000de8
 80010f0:	200009bc 	.word	0x200009bc
 80010f4:	2000092c 	.word	0x2000092c
 80010f8:	200009c4 	.word	0x200009c4
 80010fc:	200009ca 	.word	0x200009ca

08001100 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001106:	f3ef 8310 	mrs	r3, PRIMASK
 800110a:	617b      	str	r3, [r7, #20]
  return(result);
 800110c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001114:	4b59      	ldr	r3, [pc, #356]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	22ca      	movs	r2, #202	; 0xca
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
 800111c:	4b57      	ldr	r3, [pc, #348]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2253      	movs	r2, #83	; 0x53
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	4b54      	ldr	r3, [pc, #336]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001132:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001134:	4b52      	ldr	r3, [pc, #328]	; (8001280 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800113c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001140:	4950      	ldr	r1, [pc, #320]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	330c      	adds	r3, #12
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d16e      	bne.n	8001234 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001156:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800115a:	494a      	ldr	r1, [pc, #296]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800116a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800116e:	4945      	ldr	r1, [pc, #276]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	3310      	adds	r3, #16
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001180:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04c      	beq.n	8001224 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800118a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800118e:	493d      	ldr	r1, [pc, #244]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	330d      	adds	r3, #13
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d124      	bne.n	80011ee <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80011a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fdf2 	bl	8000d94 <UnlinkTimer>
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f383 8810 	msr	PRIMASK, r3
}
 80011ba:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80011bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011c0:	4930      	ldr	r1, [pc, #192]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	3304      	adds	r3, #4
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f9b8 	bl	800154c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	22ca      	movs	r2, #202	; 0xca
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2253      	movs	r2, #83	; 0x53
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
 80011ec:	e012      	b.n	8001214 <HW_TS_RTC_Wakeup_Handler+0x114>
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f383 8810 	msr	PRIMASK, r3
}
 80011f8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80011fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f920 	bl	8001444 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	22ca      	movs	r2, #202	; 0xca
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2253      	movs	r2, #83	; 0x53
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	4619      	mov	r1, r3
 800121c:	69b8      	ldr	r0, [r7, #24]
 800121e:	f000 fa1b 	bl	8001658 <HW_TS_RTC_Int_AppNot>
 8001222:	e022      	b.n	800126a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001224:	f7ff fed2 	bl	8000fcc <RescheduleTimerList>
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f383 8810 	msr	PRIMASK, r3
}
 8001232:	e01a      	b.n	800126a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001234:	bf00      	nop
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f8      	beq.n	8001236 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001254:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001258:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f383 8810 	msr	PRIMASK, r3
}
 8001268:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001272:	bf00      	nop
}
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000de8 	.word	0x20000de8
 8001280:	200009bc 	.word	0x200009bc
 8001284:	2000092c 	.word	0x2000092c
 8001288:	200009c4 	.word	0x200009c4
 800128c:	58000800 	.word	0x58000800

08001290 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800129c:	4b5e      	ldr	r3, [pc, #376]	; (8001418 <HW_TS_Init+0x188>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	22ca      	movs	r2, #202	; 0xca
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <HW_TS_Init+0x188>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2253      	movs	r2, #83	; 0x53
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80012ac:	4b5b      	ldr	r3, [pc, #364]	; (800141c <HW_TS_Init+0x18c>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a5a      	ldr	r2, [pc, #360]	; (800141c <HW_TS_Init+0x18c>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <HW_TS_Init+0x18c>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f1c3 0304 	rsb	r3, r3, #4
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <HW_TS_Init+0x190>)
 80012cc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <HW_TS_Init+0x18c>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012d6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80012da:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	fa92 f2a2 	rbit	r2, r2
 80012e2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d101      	bne.n	80012f2 <HW_TS_Init+0x62>
  {
    return 32U;
 80012ee:	2220      	movs	r2, #32
 80012f0:	e003      	b.n	80012fa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	fab2 f282 	clz	r2, r2
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	40d3      	lsrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b48      	ldr	r3, [pc, #288]	; (8001424 <HW_TS_Init+0x194>)
 8001304:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <HW_TS_Init+0x18c>)
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	b29b      	uxth	r3, r3
 800130c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001310:	b29b      	uxth	r3, r3
 8001312:	3301      	adds	r3, #1
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HW_TS_Init+0x198>)
 8001318:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HW_TS_Init+0x198>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a40      	ldr	r2, [pc, #256]	; (8001424 <HW_TS_Init+0x194>)
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800132c:	4a3c      	ldr	r2, [pc, #240]	; (8001420 <HW_TS_Init+0x190>)
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	40d3      	lsrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800133a:	4293      	cmp	r3, r2
 800133c:	d904      	bls.n	8001348 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HW_TS_Init+0x19c>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	801a      	strh	r2, [r3, #0]
 8001346:	e003      	b.n	8001350 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <HW_TS_Init+0x19c>)
 800134e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001350:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001354:	f7ff fb9c 	bl	8000a90 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001358:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800135c:	f7ff fb84 	bl	8000a68 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d13d      	bne.n	80013e2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <HW_TS_Init+0x1a0>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HW_TS_Init+0x1a4>)
 800136e:	f04f 32ff 	mov.w	r2, #4294967295
 8001372:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001374:	2300      	movs	r3, #0
 8001376:	77fb      	strb	r3, [r7, #31]
 8001378:	e00c      	b.n	8001394 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800137a:	7ffa      	ldrb	r2, [r7, #31]
 800137c:	492e      	ldr	r1, [pc, #184]	; (8001438 <HW_TS_Init+0x1a8>)
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	330c      	adds	r3, #12
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	3301      	adds	r3, #1
 8001392:	77fb      	strb	r3, [r7, #31]
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	2b05      	cmp	r3, #5
 8001398:	d9ef      	bls.n	800137a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <HW_TS_Init+0x1ac>)
 800139c:	2206      	movs	r2, #6
 800139e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HW_TS_Init+0x188>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HW_TS_Init+0x188>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ae:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HW_TS_Init+0x188>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HW_TS_Init+0x188>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013c0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HW_TS_Init+0x1b0>)
 80013c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013c8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80013ca:	2003      	movs	r0, #3
 80013cc:	f001 fe9d 	bl	800310a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HW_TS_Init+0x188>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HW_TS_Init+0x188>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e009      	b.n	80013f6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HW_TS_Init+0x188>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f001 fe7c 	bl	80030ee <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HW_TS_Init+0x188>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	22ff      	movs	r2, #255	; 0xff
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80013fe:	2200      	movs	r2, #0
 8001400:	2103      	movs	r1, #3
 8001402:	2003      	movs	r0, #3
 8001404:	f001 fe31 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001408:	2003      	movs	r0, #3
 800140a:	f001 fe48 	bl	800309e <HAL_NVIC_EnableIRQ>

  return;
 800140e:	bf00      	nop
}
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000de8 	.word	0x20000de8
 800141c:	40002800 	.word	0x40002800
 8001420:	200009c5 	.word	0x200009c5
 8001424:	200009c6 	.word	0x200009c6
 8001428:	200009c8 	.word	0x200009c8
 800142c:	200009ca 	.word	0x200009ca
 8001430:	200009c4 	.word	0x200009c4
 8001434:	200009c0 	.word	0x200009c0
 8001438:	2000092c 	.word	0x2000092c
 800143c:	200009bc 	.word	0x200009bc
 8001440:	58000800 	.word	0x58000800

08001444 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144e:	f3ef 8310 	mrs	r3, PRIMASK
 8001452:	60fb      	str	r3, [r7, #12]
  return(result);
 8001454:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800145c:	2003      	movs	r0, #3
 800145e:	f001 fe2c 	bl	80030ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001462:	4b34      	ldr	r3, [pc, #208]	; (8001534 <HW_TS_Stop+0xf0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	22ca      	movs	r2, #202	; 0xca
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HW_TS_Stop+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2253      	movs	r2, #83	; 0x53
 8001470:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001472:	79fa      	ldrb	r2, [r7, #7]
 8001474:	4930      	ldr	r1, [pc, #192]	; (8001538 <HW_TS_Stop+0xf4>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	330c      	adds	r3, #12
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d142      	bne.n	8001510 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc80 	bl	8000d94 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <HW_TS_Stop+0xf8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	2b06      	cmp	r3, #6
 800149e:	d12f      	bne.n	8001500 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HW_TS_Stop+0xfc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ac:	d107      	bne.n	80014be <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80014ae:	bf00      	nop
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HW_TS_Stop+0xf0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f8      	bne.n	80014b0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HW_TS_Stop+0xf0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HW_TS_Stop+0xf0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014cc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80014ce:	bf00      	nop
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HW_TS_Stop+0xf0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f8      	beq.n	80014d0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HW_TS_Stop+0xf0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HW_TS_Stop+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014ee:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HW_TS_Stop+0x100>)
 80014f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014f6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80014f8:	2003      	movs	r0, #3
 80014fa:	f001 fe06 	bl	800310a <HAL_NVIC_ClearPendingIRQ>
 80014fe:	e007      	b.n	8001510 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HW_TS_Stop+0x104>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	7cfa      	ldrb	r2, [r7, #19]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800150c:	f7ff fd5e 	bl	8000fcc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HW_TS_Stop+0xf0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001518:	2003      	movs	r0, #3
 800151a:	f001 fdc0 	bl	800309e <HAL_NVIC_EnableIRQ>
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f383 8810 	msr	PRIMASK, r3
}
 8001528:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800152a:	bf00      	nop
}
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000de8 	.word	0x20000de8
 8001538:	2000092c 	.word	0x2000092c
 800153c:	200009bc 	.word	0x200009bc
 8001540:	40002800 	.word	0x40002800
 8001544:	58000800 	.word	0x58000800
 8001548:	200009bd 	.word	0x200009bd

0800154c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001558:	79fa      	ldrb	r2, [r7, #7]
 800155a:	493b      	ldr	r1, [pc, #236]	; (8001648 <HW_TS_Start+0xfc>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	330c      	adds	r3, #12
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d103      	bne.n	8001578 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff66 	bl	8001444 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001578:	f3ef 8310 	mrs	r3, PRIMASK
 800157c:	60fb      	str	r3, [r7, #12]
  return(result);
 800157e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001582:	b672      	cpsid	i
}
 8001584:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001586:	2003      	movs	r0, #3
 8001588:	f001 fd97 	bl	80030ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HW_TS_Start+0x100>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	22ca      	movs	r2, #202	; 0xca
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HW_TS_Start+0x100>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2253      	movs	r2, #83	; 0x53
 800159a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800159c:	79fa      	ldrb	r2, [r7, #7]
 800159e:	492a      	ldr	r1, [pc, #168]	; (8001648 <HW_TS_Start+0xfc>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	330c      	adds	r3, #12
 80015ac:	2202      	movs	r2, #2
 80015ae:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	4925      	ldr	r1, [pc, #148]	; (8001648 <HW_TS_Start+0xfc>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3308      	adds	r3, #8
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	4920      	ldr	r1, [pc, #128]	; (8001648 <HW_TS_Start+0xfc>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	3304      	adds	r3, #4
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb30 	bl	8000c40 <linkTimer>
 80015e0:	4603      	mov	r3, r0
 80015e2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HW_TS_Start+0x104>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HW_TS_Start+0x108>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	7c7a      	ldrb	r2, [r7, #17]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d002      	beq.n	80015fc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80015f6:	f7ff fce9 	bl	8000fcc <RescheduleTimerList>
 80015fa:	e013      	b.n	8001624 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	4912      	ldr	r1, [pc, #72]	; (8001648 <HW_TS_Start+0xfc>)
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3308      	adds	r3, #8
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	8a7b      	ldrh	r3, [r7, #18]
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	1ac9      	subs	r1, r1, r3
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <HW_TS_Start+0xfc>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4403      	add	r3, r0
 8001620:	3308      	adds	r3, #8
 8001622:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HW_TS_Start+0x100>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	22ff      	movs	r2, #255	; 0xff
 800162a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800162c:	2003      	movs	r0, #3
 800162e:	f001 fd36 	bl	800309e <HAL_NVIC_EnableIRQ>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f383 8810 	msr	PRIMASK, r3
}
 800163c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800163e:	bf00      	nop
}
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000092c 	.word	0x2000092c
 800164c:	20000de8 	.word	0x20000de8
 8001650:	200009bc 	.word	0x200009bc
 8001654:	200009bd 	.word	0x200009bd

08001658 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	460b      	mov	r3, r1
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4798      	blx	r3

  return;
 800166a:	bf00      	nop
}
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <LL_RCC_LSE_SetDriveCapability>:
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	f023 0218 	bic.w	r2, r3, #24
 8001686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_AHB1_GRP1_EnableClock>:
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_AHB2_GRP1_EnableClock>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001708:	f001 fad6 	bl	8002cb8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800170c:	f7fe ffda 	bl	80006c4 <MX_APPE_Config>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001710:	f000 f894 	bl	800183c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001714:	f000 f8f4 	bl	8001900 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001718:	f000 f912 	bl	8001940 <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f000 f9f6 	bl	8001b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001720:	f000 f9da 	bl	8001ad8 <MX_DMA_Init>
  MX_SPI2_Init();
 8001724:	f000 f99a 	bl	8001a5c <MX_SPI2_Init>
  MX_SPI1_Init();
 8001728:	f000 f95a 	bl	80019e0 <MX_SPI1_Init>
  MX_RTC_Init();
 800172c:	f000 f924 	bl	8001978 <MX_RTC_Init>
  MX_RF_Init();
 8001730:	f000 f91a 	bl	8001968 <MX_RF_Init>
  /* USER CODE BEGIN 2 */


  count_master = 1;
 8001734:	4b37      	ldr	r3, [pc, #220]	; (8001814 <main+0x110>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
  MCP2515_SPI1_CanInit();
 800173a:	f001 f939 	bl	80029b0 <MCP2515_SPI1_CanInit>
  MCP2515_SPI2_CanInit();
 800173e:	f001 fa7d 	bl	8002c3c <MCP2515_SPI2_CanInit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2110      	movs	r1, #16
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f001 ffe1 	bl	8003710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f001 ffda 	bl	8003710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2101      	movs	r1, #1
 8001760:	482d      	ldr	r0, [pc, #180]	; (8001818 <main+0x114>)
 8001762:	f001 ffd5 	bl	8003710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2120      	movs	r1, #32
 800176a:	482b      	ldr	r0, [pc, #172]	; (8001818 <main+0x114>)
 800176c:	f001 ffd0 	bl	8003710 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001770:	f7fe ffb6 	bl	80006e0 <MX_APPE_Init>
  //EMS_data Master_EMS;

  while (1)
  {
    // Yang Junyoung
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f008 fc30 	bl	8009fdc <UTIL_SEQ_Run>
    count_master = 2;
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <main+0x110>)
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]


  /* Read value from SW2 and SW3 to get open and close door signal */
  SW2_CloseButton_Scan();
 8001782:	f000 fa3f 	bl	8001c04 <SW2_CloseButton_Scan>
  SW3_OpenButton_Scan();
 8001786:	f000 fa99 	bl	8001cbc <SW3_OpenButton_Scan>

  #if(TEST_FUNCTION == RTX_FUNCTION)
    /*  READ  */
    MCP2515_SPI1_ReadReg(MCP_CANINTF, &can_intf, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	4923      	ldr	r1, [pc, #140]	; (800181c <main+0x118>)
 800178e:	202c      	movs	r0, #44	; 0x2c
 8001790:	f001 f825 	bl	80027de <MCP2515_SPI1_ReadReg>
    MCP2515_SPI2_ReadReg(MCP_CANINTF, &can_intf2, 1);
 8001794:	2201      	movs	r2, #1
 8001796:	4922      	ldr	r1, [pc, #136]	; (8001820 <main+0x11c>)
 8001798:	202c      	movs	r0, #44	; 0x2c
 800179a:	f001 f95f 	bl	8002a5c <MCP2515_SPI2_ReadReg>

   if(!data_flag) {
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <main+0x120>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d128      	bne.n	80017f8 <main+0xf4>
    // If the interrupt for RX0B buffer is full -> extract the data
      if ((can_intf & (0x01))) {
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <main+0x118>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d01f      	beq.n	80017f2 <main+0xee>
          base_adr = 0x66;
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <main+0x124>)
 80017b4:	2266      	movs	r2, #102	; 0x66
 80017b6:	701a      	strb	r2, [r3, #0]
          rx_done++;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <main+0x128>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <main+0x128>)
 80017c4:	801a      	strh	r2, [r3, #0]
      // Read the high-level and low-level address extracted from the CAN ID
        Read_CAN_ID();
 80017c6:	f000 fd19 	bl	80021fc <Read_CAN_ID>

        Read_RXdata(&rx_id, &base_adr);
 80017ca:	4917      	ldr	r1, [pc, #92]	; (8001828 <main+0x124>)
 80017cc:	4818      	ldr	r0, [pc, #96]	; (8001830 <main+0x12c>)
 80017ce:	f000 fd93 	bl	80022f8 <Read_RXdata>
        #if(EMS_TYPE == SLAVE_EMS) 
          Send_RXdata(&rx_id);
 80017d2:	4817      	ldr	r0, [pc, #92]	; (8001830 <main+0x12c>)
 80017d4:	f000 fed4 	bl	8002580 <Send_RXdata>
          Read_TXdata(SPI_CHANNEL_2);
 80017d8:	2002      	movs	r0, #2
 80017da:	f000 fd31 	bl	8002240 <Read_TXdata>
          CAN_rx++;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <main+0x130>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <main+0x130>)
 80017e6:	6013      	str	r3, [r2, #0]
		#endif

      // Clear the interrupt flags
        MCP2515_SPI1_RegModify(MCP_CANINTF, 0xFF, 0x00);
 80017e8:	2200      	movs	r2, #0
 80017ea:	21ff      	movs	r1, #255	; 0xff
 80017ec:	202c      	movs	r0, #44	; 0x2c
 80017ee:	f001 f84e 	bl	800288e <MCP2515_SPI1_RegModify>
			  Read_CAN2_ID();
			  Read_Slave1_RXdata(&rx_id2, &base_adr);
			  MCP2515_SPI2_RegModify(MCP_CANINTF, 0xFF, 0x00);
		  }
	  #endif
      data_flag = 1;
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <main+0x120>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
   }

  now = HAL_GetTick();
 80017f8:	f001 facc 	bl	8002d94 <HAL_GetTick>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <main+0x134>)
 8001802:	601a      	str	r2, [r3, #0]
  if(now >= 10) {
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <main+0x134>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b09      	cmp	r3, #9
 800180a:	ddb3      	ble.n	8001774 <main+0x70>
    data_flag = 0;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <main+0x120>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
  {
 8001812:	e7af      	b.n	8001774 <main+0x70>
 8001814:	2000001c 	.word	0x2000001c
 8001818:	48000400 	.word	0x48000400
 800181c:	20000a00 	.word	0x20000a00
 8001820:	20000a01 	.word	0x20000a01
 8001824:	200009f8 	.word	0x200009f8
 8001828:	200009f6 	.word	0x200009f6
 800182c:	200009f0 	.word	0x200009f0
 8001830:	200009f4 	.word	0x200009f4
 8001834:	200009fc 	.word	0x200009fc
 8001838:	200009d4 	.word	0x200009d4

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b09a      	sub	sp, #104	; 0x68
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2248      	movs	r2, #72	; 0x48
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f008 fe04 	bl	800a458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001862:	f002 f817 	bl	8003894 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001866:	2010      	movs	r0, #16
 8001868:	f7ff ff03 	bl	8001672 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <SystemClock_Config+0xc0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001874:	4a21      	ldr	r2, [pc, #132]	; (80018fc <SystemClock_Config+0xc0>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <SystemClock_Config+0xc0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001888:	2327      	movs	r3, #39	; 0x27
 800188a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800188c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001892:	2301      	movs	r3, #1
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a0:	2340      	movs	r3, #64	; 0x40
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80018a8:	23a0      	movs	r3, #160	; 0xa0
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 fb69 	bl	8003f8c <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80018c0:	f000 fa58 	bl	8001d74 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80018c4:	236f      	movs	r3, #111	; 0x6f
 80018c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2101      	movs	r1, #1
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 fec5 	bl	8004674 <HAL_RCC_ClockConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80018f0:	f000 fa40 	bl	8001d74 <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	3768      	adds	r7, #104	; 0x68
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	58000400 	.word	0x58000400

08001900 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b094      	sub	sp, #80	; 0x50
 8001904:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001906:	463b      	mov	r3, r7
 8001908:	2250      	movs	r2, #80	; 0x50
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f008 fda3 	bl	800a458 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001912:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001916:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800191e:	2300      	movs	r3, #0
 8001920:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001922:	2310      	movs	r3, #16
 8001924:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001926:	463b      	mov	r3, r7
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fab4 	bl	8004e96 <HAL_RCCEx_PeriphCLKConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001934:	f000 fa1e 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */


  /* USER CODE END Smps */
}
 8001938:	bf00      	nop
 800193a:	3750      	adds	r7, #80	; 0x50
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN IPCC_Init 1 */


  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_IPCC_Init+0x20>)
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <MX_IPCC_Init+0x24>)
 8001948:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_IPCC_Init+0x20>)
 800194c:	f001 ff1c 	bl	8003788 <HAL_IPCC_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001956:	f000 fa0d 	bl	8001d74 <Error_Handler>
  /* USER CODE BEGIN IPCC_Init 2 */


  /* USER CODE END IPCC_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000c50 	.word	0x20000c50
 8001964:	58000c00 	.word	0x58000c00

08001968 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RF_Init 2 */


  /* USER CODE END RF_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <MX_RTC_Init+0x60>)
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <MX_RTC_Init+0x64>)
 8001980:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <MX_RTC_Init+0x60>)
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <MX_RTC_Init+0x60>)
 800198a:	220f      	movs	r2, #15
 800198c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <MX_RTC_Init+0x60>)
 8001990:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001994:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MX_RTC_Init+0x60>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_RTC_Init+0x60>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <MX_RTC_Init+0x60>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_RTC_Init+0x60>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ae:	480a      	ldr	r0, [pc, #40]	; (80019d8 <MX_RTC_Init+0x60>)
 80019b0:	f003 fcf8 	bl	80053a4 <HAL_RTC_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80019ba:	f000 f9db 	bl	8001d74 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_RTC_Init+0x60>)
 80019c4:	f003 fdee 	bl	80055a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80019ce:	f000 f9d1 	bl	8001d74 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000de8 	.word	0x20000de8
 80019dc:	40002800 	.word	0x40002800

080019e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 1 */


  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <MX_SPI1_Init+0x78>)
 80019e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a16:	2228      	movs	r2, #40	; 0x28
 8001a18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a2e:	2207      	movs	r2, #7
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a40:	f003 fe6c 	bl	800571c <HAL_SPI_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a4a:	f000 f993 	bl	8001d74 <Error_Handler>
  /* USER CODE BEGIN SPI1_Init 2 */


  /* USER CODE END SPI1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000e4c 	.word	0x20000e4c
 8001a58:	40013000 	.word	0x40013000

08001a5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 1 */


  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_SPI2_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a7a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a92:	2228      	movs	r2, #40	; 0x28
 8001a94:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001aaa:	2207      	movs	r2, #7
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_SPI2_Init+0x74>)
 8001abc:	f003 fe2e 	bl	800571c <HAL_SPI_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 f955 	bl	8001d74 <Error_Handler>
  /* USER CODE BEGIN SPI2_Init 2 */


  /* USER CODE END SPI2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000bb4 	.word	0x20000bb4
 8001ad4:	40003800 	.word	0x40003800

08001ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001adc:	2004      	movs	r0, #4
 8001ade:	f7ff fdde 	bl	800169e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7ff fddb 	bl	800169e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	200b      	movs	r0, #11
 8001aee:	f001 fabc 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001af2:	200b      	movs	r0, #11
 8001af4:	f001 fad3 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	200c      	movs	r0, #12
 8001afe:	f001 fab4 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b02:	200c      	movs	r0, #12
 8001b04:	f001 facb 	bl	800309e <HAL_NVIC_EnableIRQ>

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b20:	2004      	movs	r0, #4
 8001b22:	f7ff fdd5 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff fdd2 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f7ff fdcf 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b32:	2008      	movs	r0, #8
 8001b34:	f7ff fdcc 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|EMS_CS_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f001 fde5 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_12|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f241 0123 	movw	r1, #4131	; 0x1023
 8001b4c:	482a      	ldr	r0, [pc, #168]	; (8001bf8 <MX_GPIO_Init+0xec>)
 8001b4e:	f001 fddf 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001b52:	2310      	movs	r3, #16
 8001b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6a:	f001 fc49 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMS_CS_Pin */
  GPIO_InitStruct.Pin = EMS_CS_Pin;
 8001b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EMS_CS_GPIO_Port, &GPIO_InitStruct);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f001 fc3a 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4817      	ldr	r0, [pc, #92]	; (8001bfc <MX_GPIO_Init+0xf0>)
 8001b9e:	f001 fc2f 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8001ba2:	2323      	movs	r3, #35	; 0x23
 8001ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <MX_GPIO_Init+0xec>)
 8001bb8:	f001 fc22 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <MX_GPIO_Init+0xec>)
 8001bd4:	f001 fc14 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_3_Pin;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_GPIO_Init+0xf4>)
 8001bea:	f001 fc09 	bl	8003400 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	48000400 	.word	0x48000400
 8001bfc:	48000800 	.word	0x48000800
 8001c00:	48000c00 	.word	0x48000c00

08001c04 <SW2_CloseButton_Scan>:

/* USER CODE BEGIN 4 */
int SW2_CloseButton_Scan(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
    /* Button SW2 debounce*/
      int reading = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4821      	ldr	r0, [pc, #132]	; (8001c94 <SW2_CloseButton_Scan+0x90>)
 8001c0e:	f001 fd67 	bl	80036e0 <HAL_GPIO_ReadPin>
 8001c12:	4603      	mov	r3, r0
 8001c14:	607b      	str	r3, [r7, #4]
      // (i.e. the input went from LOW to HIGH), and you've waited long enough
      // since the last press to ignore any noise:


      // If the switch changed, due to noise or pressing:
      if (reading != lastButtonState2) {
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <SW2_CloseButton_Scan+0x94>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d004      	beq.n	8001c2a <SW2_CloseButton_Scan+0x26>
        // reset the debouncing timer
        lastDebounceTime2 = HAL_GetTick();
 8001c20:	f001 f8b8 	bl	8002d94 <HAL_GetTick>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <SW2_CloseButton_Scan+0x98>)
 8001c28:	6013      	str	r3, [r2, #0]
      }


      if ((HAL_GetTick() - lastDebounceTime2) > debounceDelay) {
 8001c2a:	f001 f8b3 	bl	8002d94 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <SW2_CloseButton_Scan+0x98>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	1ad2      	subs	r2, r2, r3
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <SW2_CloseButton_Scan+0x9c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d920      	bls.n	8001c80 <SW2_CloseButton_Scan+0x7c>
        // whatever the reading is at, it's been there for longer than the debounce
        // delay, so take it as the actual current state:


        // if the button state has changed:
        if (reading != buttonState2) {
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <SW2_CloseButton_Scan+0xa0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d01b      	beq.n	8001c80 <SW2_CloseButton_Scan+0x7c>
          buttonState2 = reading;
 8001c48:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <SW2_CloseButton_Scan+0xa0>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]


          // only toggle the LED if the new button state is HIGH
        if (buttonState2 == 1) {
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <SW2_CloseButton_Scan+0xa0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d114      	bne.n	8001c80 <SW2_CloseButton_Scan+0x7c>
          sw2_count++;
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <SW2_CloseButton_Scan+0xa4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <SW2_CloseButton_Scan+0xa4>)
 8001c5e:	6013      	str	r3, [r2, #0]
          tx_close_door = 1;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <SW2_CloseButton_Scan+0xa8>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
          tx_open_door = 0;
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <SW2_CloseButton_Scan+0xac>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
          send = 1;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <SW2_CloseButton_Scan+0xb0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
          if (sw2_count == 2) {
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <SW2_CloseButton_Scan+0xa4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d102      	bne.n	8001c80 <SW2_CloseButton_Scan+0x7c>
            start_tx = 1;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <SW2_CloseButton_Scan+0xb4>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
            }
          }
        }
      }
      // save the reading. Next time through the loop, it'll be the lastButtonState:
      lastButtonState2 = reading;
 8001c80:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SW2_CloseButton_Scan+0x94>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
    return tx_close_door;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <SW2_CloseButton_Scan+0xa8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	48000c00 	.word	0x48000c00
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	200009cc 	.word	0x200009cc
 8001ca0:	20000010 	.word	0x20000010
 8001ca4:	20000cec 	.word	0x20000cec
 8001ca8:	200009d8 	.word	0x200009d8
 8001cac:	200009e0 	.word	0x200009e0
 8001cb0:	200009e4 	.word	0x200009e4
 8001cb4:	200009e8 	.word	0x200009e8
 8001cb8:	200009ec 	.word	0x200009ec

08001cbc <SW3_OpenButton_Scan>:


int SW3_OpenButton_Scan(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
    /* Button SW3 debounce*/
      int reading = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4821      	ldr	r0, [pc, #132]	; (8001d4c <SW3_OpenButton_Scan+0x90>)
 8001cc6:	f001 fd0b 	bl	80036e0 <HAL_GPIO_ReadPin>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	607b      	str	r3, [r7, #4]
      // (i.e. the input went from LOW to HIGH), and you've waited long enough
      // since the last press to ignore any noise:


      // If the switch changed, due to noise or pressing:
      if (reading != lastButtonState3) {
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <SW3_OpenButton_Scan+0x94>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d004      	beq.n	8001ce2 <SW3_OpenButton_Scan+0x26>
        // reset the debouncing timer
        lastDebounceTime3 = HAL_GetTick();
 8001cd8:	f001 f85c 	bl	8002d94 <HAL_GetTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <SW3_OpenButton_Scan+0x98>)
 8001ce0:	6013      	str	r3, [r2, #0]
      }


      if ((HAL_GetTick() - lastDebounceTime3) > debounceDelay) {
 8001ce2:	f001 f857 	bl	8002d94 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <SW3_OpenButton_Scan+0x98>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1ad2      	subs	r2, r2, r3
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <SW3_OpenButton_Scan+0x9c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d920      	bls.n	8001d38 <SW3_OpenButton_Scan+0x7c>
        // whatever the reading is at, it's been there for longer than the debounce
        // delay, so take it as the actual current state:


        // if the button state has changed:
        if (reading != buttonState3) {
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <SW3_OpenButton_Scan+0xa0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d01b      	beq.n	8001d38 <SW3_OpenButton_Scan+0x7c>
          buttonState3 = reading;
 8001d00:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <SW3_OpenButton_Scan+0xa0>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]


          // only toggle the LED if the new button state is HIGH
        if (buttonState3 == 1) {
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <SW3_OpenButton_Scan+0xa0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d114      	bne.n	8001d38 <SW3_OpenButton_Scan+0x7c>
          sw3_count++;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <SW3_OpenButton_Scan+0xa4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <SW3_OpenButton_Scan+0xa4>)
 8001d16:	6013      	str	r3, [r2, #0]
          tx_close_door = 0;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <SW3_OpenButton_Scan+0xa8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
          tx_open_door = 1;
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <SW3_OpenButton_Scan+0xac>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
          send = 1;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <SW3_OpenButton_Scan+0xb0>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
          if (sw3_count == 2) {
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <SW3_OpenButton_Scan+0xa4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d102      	bne.n	8001d38 <SW3_OpenButton_Scan+0x7c>
              start_tx = 1;
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <SW3_OpenButton_Scan+0xb4>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
      // save the reading. Next time through the loop, it'll be the lastButtonState:
      lastButtonState3 = reading;
 8001d38:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <SW3_OpenButton_Scan+0x94>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
    return tx_open_door;
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <SW3_OpenButton_Scan+0xac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	48000c00 	.word	0x48000c00
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	200009d0 	.word	0x200009d0
 8001d58:	20000010 	.word	0x20000010
 8001d5c:	20000eb0 	.word	0x20000eb0
 8001d60:	200009dc 	.word	0x200009dc
 8001d64:	200009e0 	.word	0x200009e0
 8001d68:	200009e4 	.word	0x200009e4
 8001d6c:	200009e8 	.word	0x200009e8
 8001d70:	200009ec 	.word	0x200009ec

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <Error_Handler+0x8>

08001d7e <LL_RCC_EnableRTC>:
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_AHB2_GRP1_EnableClock>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_AHB3_GRP1_EnableClock>:
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_APB1_GRP1_EnableClock>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e28:	68fb      	ldr	r3, [r7, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_APB2_GRP1_EnableClock>:
{
 8001e36:	b480      	push	{r7}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001e6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e70:	f7ff ffaf 	bl	8001dd2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	202e      	movs	r0, #46	; 0x2e
 8001e7a:	f001 f8f6 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001e7e:	202e      	movs	r0, #46	; 0x2e
 8001e80:	f001 f90d 	bl	800309e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <HAL_IPCC_MspInit+0x44>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d113      	bne.n	8001ec2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001e9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e9e:	f7ff ff98 	bl	8001dd2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	202c      	movs	r0, #44	; 0x2c
 8001ea8:	f001 f8df 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001eac:	202c      	movs	r0, #44	; 0x2c
 8001eae:	f001 f8f6 	bl	800309e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	202d      	movs	r0, #45	; 0x2d
 8001eb8:	f001 f8d7 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001ebc:	202d      	movs	r0, #45	; 0x2d
 8001ebe:	f001 f8ee 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	58000c00 	.word	0x58000c00

08001ed0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b096      	sub	sp, #88	; 0x58
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	2250      	movs	r2, #80	; 0x50
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f008 fab9 	bl	800a458 <memset>
  if(hrtc->Instance==RTC)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <HAL_RTC_MspInit+0x64>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d11d      	bne.n	8001f2c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ef4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 ffc8 	bl	8004e96 <HAL_RCCEx_PeriphCLKConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001f0c:	f7ff ff32 	bl	8001d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f10:	f7ff ff35 	bl	8001d7e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f18:	f7ff ff74 	bl	8001e04 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2003      	movs	r0, #3
 8001f22:	f001 f8a2 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f001 f8b9 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3758      	adds	r7, #88	; 0x58
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40002800 	.word	0x40002800

08001f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_SPI_MspInit+0xb8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d120      	bne.n	8001f9c <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f5e:	f7ff ff6a 	bl	8001e36 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff ff1c 	bl	8001da0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f68:	23e0      	movs	r3, #224	; 0xe0
 8001f6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f78:	2305      	movs	r3, #5
 8001f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f86:	f001 fa3b 	bl	8003400 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2022      	movs	r0, #34	; 0x22
 8001f90:	f001 f86b 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f94:	2022      	movs	r0, #34	; 0x22
 8001f96:	f001 f882 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f9a:	e024      	b.n	8001fe6 <HAL_SPI_MspInit+0xae>
  else if(hspi->Instance==SPI2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <HAL_SPI_MspInit+0xbc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d11f      	bne.n	8001fe6 <HAL_SPI_MspInit+0xae>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fa6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001faa:	f7ff ff2b 	bl	8001e04 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f7ff fef6 	bl	8001da0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fb4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001fb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <HAL_SPI_MspInit+0xc0>)
 8001fd2:	f001 fa15 	bl	8003400 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2023      	movs	r0, #35	; 0x23
 8001fdc:	f001 f845 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001fe0:	2023      	movs	r0, #35	; 0x23
 8001fe2:	f001 f85c 	bl	800309e <HAL_NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3720      	adds	r7, #32
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40013000 	.word	0x40013000
 8001ff4:	40003800 	.word	0x40003800
 8001ff8:	48000400 	.word	0x48000400

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <NMI_Handler+0x4>

08002002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <MemManage_Handler+0x4>

0800200e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler+0x4>

0800201a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002048:	f000 fe90 	bl	8002d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002054:	f7ff f854 	bl	8001100 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <DMA1_Channel1_IRQHandler+0x10>)
 8002062:	f001 f91e 	bl	80032a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000cf4 	.word	0x20000cf4

08002070 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <DMA1_Channel2_IRQHandler+0x10>)
 8002076:	f001 f914 	bl	80032a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000c8c 	.word	0x20000c8c

08002084 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <SPI1_IRQHandler+0x10>)
 800208a:	f004 f89b 	bl	80061c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000e4c 	.word	0x20000e4c

08002098 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <SPI2_IRQHandler+0x10>)
 800209e:	f004 f891 	bl	80061c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000bb4 	.word	0x20000bb4

080020ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <USART1_IRQHandler+0x10>)
 80020b2:	f004 fb57 	bl	8006764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000d54 	.word	0x20000d54

080020c0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80020c4:	f007 fe0a 	bl	8009cdc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80020d0:	f007 fe3a 	bl	8009d48 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80020dc:	f001 fb30 	bl	8003740 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <SystemInit+0x98>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	4a23      	ldr	r2, [pc, #140]	; (800217c <SystemInit+0x98>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002110:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <SystemInit+0x9c>)
 800211e:	4013      	ands	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212e:	f023 0305 	bic.w	r3, r3, #5
 8002132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800213e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800214a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214e:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <SystemInit+0xa0>)
 8002150:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <SystemInit+0xa0>)
 8002158:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	faf6fefb 	.word	0xfaf6fefb
 8002184:	22041000 	.word	0x22041000

08002188 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002188:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218c:	3304      	adds	r3, #4

0800218e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002190:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002192:	d3f9      	bcc.n	8002188 <CopyDataInit>
  bx lr
 8002194:	4770      	bx	lr

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002196:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002198:	3004      	adds	r0, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800219a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>
  bx lr
 800219e:	4770      	bx	lr

080021a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021a4:	f7ff ff9e 	bl	80020e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <LoopForever+0x6>)
 80021aa:	490c      	ldr	r1, [pc, #48]	; (80021dc <LoopForever+0xa>)
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <LoopForever+0xe>)
 80021ae:	2300      	movs	r3, #0
 80021b0:	f7ff ffed 	bl	800218e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80021b4:	480b      	ldr	r0, [pc, #44]	; (80021e4 <LoopForever+0x12>)
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <LoopForever+0x16>)
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <LoopForever+0x1a>)
 80021ba:	2300      	movs	r3, #0
 80021bc:	f7ff ffe7 	bl	800218e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <LoopForever+0x1e>)
 80021c2:	490c      	ldr	r1, [pc, #48]	; (80021f4 <LoopForever+0x22>)
 80021c4:	2300      	movs	r3, #0
 80021c6:	f7ff ffe8 	bl	800219a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ca:	f008 f94d 	bl	800a468 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021ce:	f7ff fa99 	bl	8001704 <main>

080021d2 <LoopForever>:

LoopForever:
  b LoopForever
 80021d2:	e7fe      	b.n	80021d2 <LoopForever>
  ldr   r0, =_estack
 80021d4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000040 	.word	0x20000040
 80021e0:	0800a7a4 	.word	0x0800a7a4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80021e4:	200301e3 	.word	0x200301e3
 80021e8:	200301e3 	.word	0x200301e3
 80021ec:	0800b0a5 	.word	0x0800b0a5
  INIT_BSS _sbss, _ebss
 80021f0:	20000910 	.word	0x20000910
 80021f4:	200010f0 	.word	0x200010f0

080021f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021f8:	e7fe      	b.n	80021f8 <ADC1_IRQHandler>
	...

080021fc <Read_CAN_ID>:
extern uint8 TxBufferData_SPI1[8];
extern uint8 TxBufferData_SPI2[8];
extern volatile uint8 rxLength;
extern volatile uint8 rxLength2;

void Read_CAN_ID(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
    MCP2515_SPI1_ReadReg(0x61, &rx_sidh, 1);
 8002200:	2201      	movs	r2, #1
 8002202:	490c      	ldr	r1, [pc, #48]	; (8002234 <Read_CAN_ID+0x38>)
 8002204:	2061      	movs	r0, #97	; 0x61
 8002206:	f000 faea 	bl	80027de <MCP2515_SPI1_ReadReg>
    MCP2515_SPI1_ReadReg(0x62, &rx_sidl, 1);
 800220a:	2201      	movs	r2, #1
 800220c:	490a      	ldr	r1, [pc, #40]	; (8002238 <Read_CAN_ID+0x3c>)
 800220e:	2062      	movs	r0, #98	; 0x62
 8002210:	f000 fae5 	bl	80027de <MCP2515_SPI1_ReadReg>
    rx_id = (rx_sidh << 3) | (rx_sidl >> 5);
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <Read_CAN_ID+0x38>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	b21a      	sxth	r2, r3
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <Read_CAN_ID+0x3c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	b2db      	uxtb	r3, r3
 8002224:	b21b      	sxth	r3, r3
 8002226:	4313      	orrs	r3, r2
 8002228:	b21b      	sxth	r3, r3
 800222a:	b29a      	uxth	r2, r3
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <Read_CAN_ID+0x40>)
 800222e:	801a      	strh	r2, [r3, #0]
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200009f2 	.word	0x200009f2
 8002238:	200009f3 	.word	0x200009f3
 800223c:	200009f4 	.word	0x200009f4

08002240 <Read_TXdata>:
    MCP2515_SPI2_ReadReg(0x61, &rx_sidh2, 1);
    MCP2515_SPI2_ReadReg(0x62, &rx_sidl2, 1);
    rx_id2 = (rx_sidh2 << 3) | (rx_sidl2 >> 5);
}

void Read_TXdata(int channel) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    if(channel == SPI_CHANNEL_1) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d124      	bne.n	8002298 <Read_TXdata+0x58>
        for(int i = 0; i < sizeof(TxDataAdrr)/sizeof(uint8); i++) {
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e00d      	b.n	8002270 <Read_TXdata+0x30>
            MCP2515_SPI1_ReadReg(TxDataAdrr[i], &TxBufferData_SPI1[i], 1);
 8002254:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <Read_TXdata+0xa8>)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4413      	add	r3, r2
 800225a:	7818      	ldrb	r0, [r3, #0]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	4a23      	ldr	r2, [pc, #140]	; (80022ec <Read_TXdata+0xac>)
 8002260:	4413      	add	r3, r2
 8002262:	2201      	movs	r2, #1
 8002264:	4619      	mov	r1, r3
 8002266:	f000 faba 	bl	80027de <MCP2515_SPI1_ReadReg>
        for(int i = 0; i < sizeof(TxDataAdrr)/sizeof(uint8); i++) {
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3301      	adds	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b07      	cmp	r3, #7
 8002274:	d9ee      	bls.n	8002254 <Read_TXdata+0x14>
        }
        // This ensure when sending data bytes with different DLC length, the previous data in the buffers is erased
        for (int i = rxLength; i < 8; i++) {
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <Read_TXdata+0xb0>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	e007      	b.n	8002290 <Read_TXdata+0x50>
            TxBufferData_SPI1[i] = 0x00;
 8002280:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <Read_TXdata+0xac>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
        for (int i = rxLength; i < 8; i++) {
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	3301      	adds	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b07      	cmp	r3, #7
 8002294:	ddf4      	ble.n	8002280 <Read_TXdata+0x40>
        // This ensure when sending data bytes with different DLC length, the previous data in the buffers is erased
        for (int i = rxLength; i < 8; i++) {
            TxBufferData_SPI2[i] = 0x00;
        }
    }
}
 8002296:	e023      	b.n	80022e0 <Read_TXdata+0xa0>
			for(int i = 0; i < sizeof(TxDataAdrr)/sizeof(uint8); i++) {
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e00d      	b.n	80022ba <Read_TXdata+0x7a>
            MCP2515_SPI2_ReadReg(TxDataAdrr[i], &TxBufferData_SPI2[i], 1);
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <Read_TXdata+0xa8>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	7818      	ldrb	r0, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <Read_TXdata+0xb4>)
 80022aa:	4413      	add	r3, r2
 80022ac:	2201      	movs	r2, #1
 80022ae:	4619      	mov	r1, r3
 80022b0:	f000 fbd4 	bl	8002a5c <MCP2515_SPI2_ReadReg>
			for(int i = 0; i < sizeof(TxDataAdrr)/sizeof(uint8); i++) {
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3301      	adds	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b07      	cmp	r3, #7
 80022be:	d9ee      	bls.n	800229e <Read_TXdata+0x5e>
        for (int i = rxLength; i < 8; i++) {
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <Read_TXdata+0xb0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	e007      	b.n	80022da <Read_TXdata+0x9a>
            TxBufferData_SPI2[i] = 0x00;
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <Read_TXdata+0xb4>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4413      	add	r3, r2
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
        for (int i = rxLength; i < 8; i++) {
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b07      	cmp	r3, #7
 80022de:	ddf4      	ble.n	80022ca <Read_TXdata+0x8a>
}
 80022e0:	bf00      	nop
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000014 	.word	0x20000014
 80022ec:	20000e44 	.word	0x20000e44
 80022f0:	20000bb0 	.word	0x20000bb0
 80022f4:	20000c44 	.word	0x20000c44

080022f8 <Read_RXdata>:
extern EMS_data Slave_EMS_1;
extern volatile uint16 send_rx;
extern volatile int ID_481_flag;
extern volatile int rx_flag;

void Read_RXdata(uint16* rx_id, uint8* base_adr) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
	 MCP2515_SPI1_ReadReg(0x65, &rxLength, 1);
 8002302:	2201      	movs	r2, #1
 8002304:	4986      	ldr	r1, [pc, #536]	; (8002520 <Read_RXdata+0x228>)
 8002306:	2065      	movs	r0, #101	; 0x65
 8002308:	f000 fa69 	bl	80027de <MCP2515_SPI1_ReadReg>
    switch(*rx_id) 
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	f240 628b 	movw	r2, #1675	; 0x68b
 8002314:	4293      	cmp	r3, r2
 8002316:	f000 80d5 	beq.w	80024c4 <Read_RXdata+0x1cc>
 800231a:	f240 628b 	movw	r2, #1675	; 0x68b
 800231e:	4293      	cmp	r3, r2
 8002320:	f300 80f4 	bgt.w	800250c <Read_RXdata+0x214>
 8002324:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8002328:	d072      	beq.n	8002410 <Read_RXdata+0x118>
 800232a:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 800232e:	f300 80ed 	bgt.w	800250c <Read_RXdata+0x214>
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d004      	beq.n	8002342 <Read_RXdata+0x4a>
 8002338:	f240 4281 	movw	r2, #1153	; 0x481
 800233c:	4293      	cmp	r3, r2
 800233e:	d02a      	beq.n	8002396 <Read_RXdata+0x9e>
            }
            getEMStime_Master();
        break;

        default:
        break;
 8002340:	e0e4      	b.n	800250c <Read_RXdata+0x214>
            for (int i = 0; i < rxLength; i++) {
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e014      	b.n	8002372 <Read_RXdata+0x7a>
              Master.ID_400_buffer[i] = 0x00;
 8002348:	4a76      	ldr	r2, [pc, #472]	; (8002524 <Read_RXdata+0x22c>)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
              MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_400_buffer[i], 1);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	4413      	add	r3, r2
 800235c:	b2d8      	uxtb	r0, r3
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	4a70      	ldr	r2, [pc, #448]	; (8002524 <Read_RXdata+0x22c>)
 8002362:	4413      	add	r3, r2
 8002364:	2201      	movs	r2, #1
 8002366:	4619      	mov	r1, r3
 8002368:	f000 fa39 	bl	80027de <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3301      	adds	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	4b6b      	ldr	r3, [pc, #428]	; (8002520 <Read_RXdata+0x228>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4293      	cmp	r3, r2
 800237e:	dbe3      	blt.n	8002348 <Read_RXdata+0x50>
			if(Master.ID_400_buffer[0] == 0x40) {
 8002380:	4b68      	ldr	r3, [pc, #416]	; (8002524 <Read_RXdata+0x22c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b40      	cmp	r3, #64	; 0x40
 8002386:	f040 80c3 	bne.w	8002510 <Read_RXdata+0x218>
				Master_EMS.curren_floor = Master.ID_400_buffer[1];
 800238a:	4b66      	ldr	r3, [pc, #408]	; (8002524 <Read_RXdata+0x22c>)
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	461a      	mov	r2, r3
 8002390:	4b65      	ldr	r3, [pc, #404]	; (8002528 <Read_RXdata+0x230>)
 8002392:	61da      	str	r2, [r3, #28]
        break;
 8002394:	e0bc      	b.n	8002510 <Read_RXdata+0x218>
            for (int i = 0; i < rxLength; i++) {
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	e010      	b.n	80023be <Read_RXdata+0xc6>
                MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_481_buffer[i], 1);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	b2d8      	uxtb	r0, r3
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	3308      	adds	r3, #8
 80023ac:	4a5d      	ldr	r2, [pc, #372]	; (8002524 <Read_RXdata+0x22c>)
 80023ae:	4413      	add	r3, r2
 80023b0:	2201      	movs	r2, #1
 80023b2:	4619      	mov	r1, r3
 80023b4:	f000 fa13 	bl	80027de <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	3301      	adds	r3, #1
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	4b58      	ldr	r3, [pc, #352]	; (8002520 <Read_RXdata+0x228>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4293      	cmp	r3, r2
 80023ca:	dbe7      	blt.n	800239c <Read_RXdata+0xa4>
            for(int j = rxLength; j < 8; j++) {
 80023cc:	4b54      	ldr	r3, [pc, #336]	; (8002520 <Read_RXdata+0x228>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	e008      	b.n	80023e8 <Read_RXdata+0xf0>
                Master.ID_481_buffer[j] = 0x00;
 80023d6:	4a53      	ldr	r2, [pc, #332]	; (8002524 <Read_RXdata+0x22c>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4413      	add	r3, r2
 80023dc:	3308      	adds	r3, #8
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength; j < 8; j++) {
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3301      	adds	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	ddf3      	ble.n	80023d6 <Read_RXdata+0xde>
			if(Master.ID_481_buffer[1] == 0x02) {
 80023ee:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <Read_RXdata+0x22c>)
 80023f0:	7a5b      	ldrb	r3, [r3, #9]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	f040 808e 	bne.w	8002514 <Read_RXdata+0x21c>
				if(Master.ID_481_buffer[5] == 0x00) {
 80023f8:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <Read_RXdata+0x22c>)
 80023fa:	7b5b      	ldrb	r3, [r3, #13]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <Read_RXdata+0x110>
					Master_EMS.door_status = DOOR_OPENED;
 8002400:	4b49      	ldr	r3, [pc, #292]	; (8002528 <Read_RXdata+0x230>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
        break;
 8002406:	e085      	b.n	8002514 <Read_RXdata+0x21c>
					Master_EMS.door_status = DOOR_CLOSED;
 8002408:	4b47      	ldr	r3, [pc, #284]	; (8002528 <Read_RXdata+0x230>)
 800240a:	2201      	movs	r2, #1
 800240c:	621a      	str	r2, [r3, #32]
        break;
 800240e:	e081      	b.n	8002514 <Read_RXdata+0x21c>
            for (int i = 0; i < rxLength; i++) {
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e010      	b.n	8002438 <Read_RXdata+0x140>
              MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_490_buffer[i], 1);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4413      	add	r3, r2
 8002420:	b2d8      	uxtb	r0, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	3310      	adds	r3, #16
 8002426:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <Read_RXdata+0x22c>)
 8002428:	4413      	add	r3, r2
 800242a:	2201      	movs	r2, #1
 800242c:	4619      	mov	r1, r3
 800242e:	f000 f9d6 	bl	80027de <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	3301      	adds	r3, #1
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <Read_RXdata+0x228>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4293      	cmp	r3, r2
 8002444:	dbe7      	blt.n	8002416 <Read_RXdata+0x11e>
            for(int j = rxLength; j < 8; j++) {
 8002446:	4b36      	ldr	r3, [pc, #216]	; (8002520 <Read_RXdata+0x228>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e008      	b.n	8002462 <Read_RXdata+0x16a>
                Master.ID_490_buffer[j] = 0x00;
 8002450:	4a34      	ldr	r2, [pc, #208]	; (8002524 <Read_RXdata+0x22c>)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4413      	add	r3, r2
 8002456:	3310      	adds	r3, #16
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength; j < 8; j++) {
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b07      	cmp	r3, #7
 8002466:	ddf3      	ble.n	8002450 <Read_RXdata+0x158>
            switch (Master.ID_490_buffer[0])
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <Read_RXdata+0x22c>)
 800246a:	7c1b      	ldrb	r3, [r3, #16]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d002      	beq.n	8002476 <Read_RXdata+0x17e>
 8002470:	2b0e      	cmp	r3, #14
 8002472:	d006      	beq.n	8002482 <Read_RXdata+0x18a>
        break;
 8002474:	e04f      	b.n	8002516 <Read_RXdata+0x21e>
                    Master_EMS.chosen_floor = Master.ID_490_buffer[1];
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <Read_RXdata+0x22c>)
 8002478:	7c5b      	ldrb	r3, [r3, #17]
 800247a:	461a      	mov	r2, r3
 800247c:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <Read_RXdata+0x230>)
 800247e:	619a      	str	r2, [r3, #24]
                    break;
 8002480:	e01f      	b.n	80024c2 <Read_RXdata+0x1ca>
                    if(Master.ID_490_buffer[1] == 0x09) {
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <Read_RXdata+0x22c>)
 8002484:	7c5b      	ldrb	r3, [r3, #17]
 8002486:	2b09      	cmp	r3, #9
 8002488:	d10b      	bne.n	80024a2 <Read_RXdata+0x1aa>
                        if(Master.ID_490_buffer[5] == 0x00) {
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <Read_RXdata+0x22c>)
 800248c:	7d5b      	ldrb	r3, [r3, #21]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d103      	bne.n	800249a <Read_RXdata+0x1a2>
                            Master_EMS.open_door_button_stat = BUTTON_OFF;
 8002492:	4b25      	ldr	r3, [pc, #148]	; (8002528 <Read_RXdata+0x230>)
 8002494:	2200      	movs	r2, #0
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8002498:	e012      	b.n	80024c0 <Read_RXdata+0x1c8>
                            Master_EMS.open_door_button_stat = BUTTON_ON;
 800249a:	4b23      	ldr	r3, [pc, #140]	; (8002528 <Read_RXdata+0x230>)
 800249c:	2201      	movs	r2, #1
 800249e:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 80024a0:	e00e      	b.n	80024c0 <Read_RXdata+0x1c8>
                    else if (Master.ID_490_buffer[1] == 0x0A){
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <Read_RXdata+0x22c>)
 80024a4:	7c5b      	ldrb	r3, [r3, #17]
 80024a6:	2b0a      	cmp	r3, #10
 80024a8:	d10a      	bne.n	80024c0 <Read_RXdata+0x1c8>
                        if(Master.ID_490_buffer[5] == 0x00) {
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <Read_RXdata+0x22c>)
 80024ac:	7d5b      	ldrb	r3, [r3, #21]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <Read_RXdata+0x1c2>
                            Master_EMS.close_door_button_stat = BUTTON_OFF;
 80024b2:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <Read_RXdata+0x230>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
                    break;
 80024b8:	e002      	b.n	80024c0 <Read_RXdata+0x1c8>
                            Master_EMS.close_door_button_stat = BUTTON_ON;
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <Read_RXdata+0x230>)
 80024bc:	2201      	movs	r2, #1
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
                    break;
 80024c0:	bf00      	nop
        break;
 80024c2:	e028      	b.n	8002516 <Read_RXdata+0x21e>
            for (int i = 0; i < rxLength; i++) {
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	e016      	b.n	80024f8 <Read_RXdata+0x200>
              Master.ID_68B_buffer[i] = 0x00;
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <Read_RXdata+0x22c>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4413      	add	r3, r2
 80024d0:	3318      	adds	r3, #24
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
              MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_68B_buffer[i], 1);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4413      	add	r3, r2
 80024e0:	b2d8      	uxtb	r0, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3318      	adds	r3, #24
 80024e6:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <Read_RXdata+0x22c>)
 80024e8:	4413      	add	r3, r2
 80024ea:	2201      	movs	r2, #1
 80024ec:	4619      	mov	r1, r3
 80024ee:	f000 f976 	bl	80027de <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3301      	adds	r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <Read_RXdata+0x228>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4293      	cmp	r3, r2
 8002504:	dbe1      	blt.n	80024ca <Read_RXdata+0x1d2>
            getEMStime_Master();
 8002506:	f000 f811 	bl	800252c <getEMStime_Master>
        break;
 800250a:	e004      	b.n	8002516 <Read_RXdata+0x21e>
        break;
 800250c:	bf00      	nop
 800250e:	e002      	b.n	8002516 <Read_RXdata+0x21e>
        break;
 8002510:	bf00      	nop
 8002512:	e000      	b.n	8002516 <Read_RXdata+0x21e>
        break;
 8002514:	bf00      	nop
    }  
} 
 8002516:	bf00      	nop
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000bb0 	.word	0x20000bb0
 8002524:	20000eb8 	.word	0x20000eb8
 8002528:	20000e0c 	.word	0x20000e0c

0800252c <getEMStime_Master>:
        default:
            break;       
    }
}

void getEMStime_Master(void) {
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
    Master_EMS.EMS_time.second = Master.ID_68B_buffer[0];
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <getEMStime_Master+0x4c>)
 8002532:	7e1b      	ldrb	r3, [r3, #24]
 8002534:	461a      	mov	r2, r3
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <getEMStime_Master+0x50>)
 8002538:	601a      	str	r2, [r3, #0]
    Master_EMS.EMS_time.minute = Master.ID_68B_buffer[1];
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <getEMStime_Master+0x4c>)
 800253c:	7e5b      	ldrb	r3, [r3, #25]
 800253e:	461a      	mov	r2, r3
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <getEMStime_Master+0x50>)
 8002542:	605a      	str	r2, [r3, #4]
    Master_EMS.EMS_time.hour = Master.ID_68B_buffer[2];
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <getEMStime_Master+0x4c>)
 8002546:	7e9b      	ldrb	r3, [r3, #26]
 8002548:	461a      	mov	r2, r3
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <getEMStime_Master+0x50>)
 800254c:	609a      	str	r2, [r3, #8]
    Master_EMS.EMS_time.day = Master.ID_68B_buffer[3];
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <getEMStime_Master+0x4c>)
 8002550:	7edb      	ldrb	r3, [r3, #27]
 8002552:	461a      	mov	r2, r3
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <getEMStime_Master+0x50>)
 8002556:	60da      	str	r2, [r3, #12]
    Master_EMS.EMS_time.weekday = Master.ID_68B_buffer[4] & (0x07);  // Weekday is the first 3 bits of 5th byte
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <getEMStime_Master+0x4c>)
 800255a:	7f1b      	ldrb	r3, [r3, #28]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <getEMStime_Master+0x50>)
 8002562:	6113      	str	r3, [r2, #16]
    Master_EMS.EMS_time.year = Master.ID_68B_buffer[5];
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <getEMStime_Master+0x4c>)
 8002566:	7f5b      	ldrb	r3, [r3, #29]
 8002568:	461a      	mov	r2, r3
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <getEMStime_Master+0x50>)
 800256c:	615a      	str	r2, [r3, #20]
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	20000eb8 	.word	0x20000eb8
 800257c:	20000e0c 	.word	0x20000e0c

08002580 <Send_RXdata>:
    Slave_EMS_1.EMS_time.day = Slave_1.ID_68B_buffer[3];
    Slave_EMS_1.EMS_time.weekday = (Slave_1.ID_68B_buffer[4] & (0x07));  // Weekday is the first 3 bits of 5th byte
    Slave_EMS_1.EMS_time.year = Slave_1.ID_68B_buffer[5];
}

void Send_RXdata(uint16* rx_id) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    MCP2515_SPI2_RegModify(MCP_TXB0CTRL, MCP_TXB_ABTF_M | MCP_TXB_MLOA_M \
 8002588:	2200      	movs	r2, #0
 800258a:	2178      	movs	r1, #120	; 0x78
 800258c:	2030      	movs	r0, #48	; 0x30
 800258e:	f000 fac1 	bl	8002b14 <MCP2515_SPI2_RegModify>
    | MCP_TXB_TXERR_M | MCP_TXB_TXREQ_M, 0x00);
    MCP2515_SPI2_RegModify(MCP_TXB0CTRL, 0x03, 0xFF);
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	2103      	movs	r1, #3
 8002596:	2030      	movs	r0, #48	; 0x30
 8002598:	f000 fabc 	bl	8002b14 <MCP2515_SPI2_RegModify>
    switch(*rx_id) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f240 628b 	movw	r2, #1675	; 0x68b
 80025a4:	4293      	cmp	r3, r2
 80025a6:	f000 80a9 	beq.w	80026fc <Send_RXdata+0x17c>
 80025aa:	f240 628b 	movw	r2, #1675	; 0x68b
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f300 80d6 	bgt.w	8002760 <Send_RXdata+0x1e0>
 80025b4:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80025b8:	d06e      	beq.n	8002698 <Send_RXdata+0x118>
 80025ba:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80025be:	f300 80cf 	bgt.w	8002760 <Send_RXdata+0x1e0>
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c6:	d004      	beq.n	80025d2 <Send_RXdata+0x52>
 80025c8:	f240 4281 	movw	r2, #1153	; 0x481
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d031      	beq.n	8002634 <Send_RXdata+0xb4>
            }
            MCP2515_SPI2_WriteReg(MCP_TXB0CTRL, 0x08, 0x08);
         break;
    }

}
 80025d0:	e0c6      	b.n	8002760 <Send_RXdata+0x1e0>
            MCP2515_SPI2_WriteReg(MCP_TXB0SIDH, ID400_ADDR_SIDH, 1);  // 0x200 = 0010 0000 0000 -> 0100 0000    = 0x40
 80025d2:	2201      	movs	r2, #1
 80025d4:	2160      	movs	r1, #96	; 0x60
 80025d6:	2031      	movs	r0, #49	; 0x31
 80025d8:	f000 fa6e 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
    	    MCP2515_SPI2_WriteReg(MCP_TXB0SIDL, SLAVE_ID_SIDL, 1);   // 000 = 0x00
 80025dc:	2201      	movs	r2, #1
 80025de:	2120      	movs	r1, #32
 80025e0:	2032      	movs	r0, #50	; 0x32
 80025e2:	f000 fa69 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
    	    MCP2515_SPI2_WriteReg(MCP_TXB0DLC, rxLength, 1);
 80025e6:	4b60      	ldr	r3, [pc, #384]	; (8002768 <Send_RXdata+0x1e8>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2201      	movs	r2, #1
 80025ee:	4619      	mov	r1, r3
 80025f0:	2035      	movs	r0, #53	; 0x35
 80025f2:	f000 fa61 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            for(int i = 0; i < rxLength; i++) {
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	e00e      	b.n	800261a <Send_RXdata+0x9a>
              MCP2515_SPI2_WriteReg(TxDataAdrr[i], Master.ID_400_buffer[i], ONE_BYTE);
 80025fc:	4a5b      	ldr	r2, [pc, #364]	; (800276c <Send_RXdata+0x1ec>)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	4413      	add	r3, r2
 8002602:	7818      	ldrb	r0, [r3, #0]
 8002604:	4a5a      	ldr	r2, [pc, #360]	; (8002770 <Send_RXdata+0x1f0>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4413      	add	r3, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	4619      	mov	r1, r3
 8002610:	f000 fa52 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            for(int i = 0; i < rxLength; i++) {
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	4b53      	ldr	r3, [pc, #332]	; (8002768 <Send_RXdata+0x1e8>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	4293      	cmp	r3, r2
 8002626:	dbe9      	blt.n	80025fc <Send_RXdata+0x7c>
            MCP2515_SPI2_WriteReg(MCP_TXB0CTRL, 0x08, 0x08);
 8002628:	2208      	movs	r2, #8
 800262a:	2108      	movs	r1, #8
 800262c:	2030      	movs	r0, #48	; 0x30
 800262e:	f000 fa43 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
        break;
 8002632:	e095      	b.n	8002760 <Send_RXdata+0x1e0>
            MCP2515_SPI2_WriteReg(MCP_TXB0SIDH, ID481_ADDR_SIDH, 1);  // 0x200 = 0010 0000 0000 -> 0100 0000    = 0x40
 8002634:	2201      	movs	r2, #1
 8002636:	2162      	movs	r1, #98	; 0x62
 8002638:	2031      	movs	r0, #49	; 0x31
 800263a:	f000 fa3d 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            MCP2515_SPI2_WriteReg(MCP_TXB0SIDL, SLAVE_ID_SIDL, 1);   // 000 = 0x00
 800263e:	2201      	movs	r2, #1
 8002640:	2120      	movs	r1, #32
 8002642:	2032      	movs	r0, #50	; 0x32
 8002644:	f000 fa38 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            MCP2515_SPI2_WriteReg(MCP_TXB0DLC, rxLength, 1); // change to corespoind byte length
 8002648:	4b47      	ldr	r3, [pc, #284]	; (8002768 <Send_RXdata+0x1e8>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2201      	movs	r2, #1
 8002650:	4619      	mov	r1, r3
 8002652:	2035      	movs	r0, #53	; 0x35
 8002654:	f000 fa30 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            for(int i = 0; i < rxLength; i++) {
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	e00f      	b.n	800267e <Send_RXdata+0xfe>
                MCP2515_SPI2_WriteReg(TxDataAdrr[i], Master.ID_481_buffer[i], ONE_BYTE);
 800265e:	4a43      	ldr	r2, [pc, #268]	; (800276c <Send_RXdata+0x1ec>)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	7818      	ldrb	r0, [r3, #0]
 8002666:	4a42      	ldr	r2, [pc, #264]	; (8002770 <Send_RXdata+0x1f0>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	3308      	adds	r3, #8
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2201      	movs	r2, #1
 8002672:	4619      	mov	r1, r3
 8002674:	f000 fa20 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            for(int i = 0; i < rxLength; i++) {
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	3301      	adds	r3, #1
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	4b3a      	ldr	r3, [pc, #232]	; (8002768 <Send_RXdata+0x1e8>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4293      	cmp	r3, r2
 800268a:	dbe8      	blt.n	800265e <Send_RXdata+0xde>
            MCP2515_SPI2_WriteReg(MCP_TXB0CTRL, 0x08, 0x08);
 800268c:	2208      	movs	r2, #8
 800268e:	2108      	movs	r1, #8
 8002690:	2030      	movs	r0, #48	; 0x30
 8002692:	f000 fa11 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
        break;
 8002696:	e063      	b.n	8002760 <Send_RXdata+0x1e0>
            MCP2515_SPI2_WriteReg(MCP_TXB0SIDH, ID490_ADDR_SIDH, 1);  // 0x200 = 0010 0000 0000 -> 0100 0000    = 0x40
 8002698:	2201      	movs	r2, #1
 800269a:	2164      	movs	r1, #100	; 0x64
 800269c:	2031      	movs	r0, #49	; 0x31
 800269e:	f000 fa0b 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            MCP2515_SPI2_WriteReg(MCP_TXB0SIDL, SLAVE_ID_SIDL, 1);   // 000 = 0x00
 80026a2:	2201      	movs	r2, #1
 80026a4:	2120      	movs	r1, #32
 80026a6:	2032      	movs	r0, #50	; 0x32
 80026a8:	f000 fa06 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            MCP2515_SPI2_WriteReg(MCP_TXB0DLC, rxLength, 1); // change to corespoind byte length
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <Send_RXdata+0x1e8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2201      	movs	r2, #1
 80026b4:	4619      	mov	r1, r3
 80026b6:	2035      	movs	r0, #53	; 0x35
 80026b8:	f000 f9fe 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            for(int i = 0; i < rxLength; i++) {
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e00f      	b.n	80026e2 <Send_RXdata+0x162>
                MCP2515_SPI2_WriteReg(TxDataAdrr[i], Master.ID_490_buffer[i], ONE_BYTE);
 80026c2:	4a2a      	ldr	r2, [pc, #168]	; (800276c <Send_RXdata+0x1ec>)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	7818      	ldrb	r0, [r3, #0]
 80026ca:	4a29      	ldr	r2, [pc, #164]	; (8002770 <Send_RXdata+0x1f0>)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	3310      	adds	r3, #16
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2201      	movs	r2, #1
 80026d6:	4619      	mov	r1, r3
 80026d8:	f000 f9ee 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            for(int i = 0; i < rxLength; i++) {
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3301      	adds	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b21      	ldr	r3, [pc, #132]	; (8002768 <Send_RXdata+0x1e8>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4293      	cmp	r3, r2
 80026ee:	dbe8      	blt.n	80026c2 <Send_RXdata+0x142>
            MCP2515_SPI2_WriteReg(MCP_TXB0CTRL, 0x08, 0x08);
 80026f0:	2208      	movs	r2, #8
 80026f2:	2108      	movs	r1, #8
 80026f4:	2030      	movs	r0, #48	; 0x30
 80026f6:	f000 f9df 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
        break;
 80026fa:	e031      	b.n	8002760 <Send_RXdata+0x1e0>
            MCP2515_SPI2_WriteReg(MCP_TXB0SIDH, ID68B_ADDR_SIDH, 1);  // 0x200 = 0010 0000 0000 -> 0100 0000    = 0x40
 80026fc:	2201      	movs	r2, #1
 80026fe:	2166      	movs	r1, #102	; 0x66
 8002700:	2031      	movs	r0, #49	; 0x31
 8002702:	f000 f9d9 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            MCP2515_SPI2_WriteReg(MCP_TXB0SIDL, SLAVE_ID_SIDL, 1);   // 000 = 0x00
 8002706:	2201      	movs	r2, #1
 8002708:	2120      	movs	r1, #32
 800270a:	2032      	movs	r0, #50	; 0x32
 800270c:	f000 f9d4 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            MCP2515_SPI2_WriteReg(MCP_TXB0DLC, rxLength, 1); // change to corespoind byte length
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <Send_RXdata+0x1e8>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2201      	movs	r2, #1
 8002718:	4619      	mov	r1, r3
 800271a:	2035      	movs	r0, #53	; 0x35
 800271c:	f000 f9cc 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            for(int i = 0; i < rxLength; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	e00f      	b.n	8002746 <Send_RXdata+0x1c6>
                MCP2515_SPI2_WriteReg(TxDataAdrr[i], Master.ID_68B_buffer[i], ONE_BYTE);
 8002726:	4a11      	ldr	r2, [pc, #68]	; (800276c <Send_RXdata+0x1ec>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4413      	add	r3, r2
 800272c:	7818      	ldrb	r0, [r3, #0]
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <Send_RXdata+0x1f0>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4413      	add	r3, r2
 8002734:	3318      	adds	r3, #24
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	4619      	mov	r1, r3
 800273c:	f000 f9bc 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
            for(int i = 0; i < rxLength; i++) {
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3301      	adds	r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <Send_RXdata+0x1e8>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4293      	cmp	r3, r2
 8002752:	dbe8      	blt.n	8002726 <Send_RXdata+0x1a6>
            MCP2515_SPI2_WriteReg(MCP_TXB0CTRL, 0x08, 0x08);
 8002754:	2208      	movs	r2, #8
 8002756:	2108      	movs	r1, #8
 8002758:	2030      	movs	r0, #48	; 0x30
 800275a:	f000 f9ad 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
         break;
 800275e:	bf00      	nop
}
 8002760:	bf00      	nop
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000bb0 	.word	0x20000bb0
 800276c:	20000014 	.word	0x20000014
 8002770:	20000eb8 	.word	0x20000eb8

08002774 <SPI1_Tx>:
	{MCP_RXF5SIDH, 0x00},
};

/* SPI Tx wrapper function  */
static void SPI1_Tx(uint8_t data)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 800277e:	1df9      	adds	r1, r7, #7
 8002780:	2364      	movs	r3, #100	; 0x64
 8002782:	2201      	movs	r2, #1
 8002784:	4803      	ldr	r0, [pc, #12]	; (8002794 <SPI1_Tx+0x20>)
 8002786:	f003 f86c 	bl	8005862 <HAL_SPI_Transmit>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000e4c 	.word	0x20000e4c

08002798 <SPI1_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI1_Rx(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800279e:	1df9      	adds	r1, r7, #7
 80027a0:	2364      	movs	r3, #100	; 0x64
 80027a2:	2201      	movs	r2, #1
 80027a4:	4803      	ldr	r0, [pc, #12]	; (80027b4 <SPI1_Rx+0x1c>)
 80027a6:	f003 f9ca 	bl	8005b3e <HAL_SPI_Receive>
  return retVal;
 80027aa:	79fb      	ldrb	r3, [r7, #7]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000e4c 	.word	0x20000e4c

080027b8 <MCP2515_SPI1_Reset>:

void MCP2515_SPI1_Reset(void)
{    
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  SPI1_CS_OFF();
 80027bc:	2200      	movs	r2, #0
 80027be:	2110      	movs	r1, #16
 80027c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c4:	f000 ffa4 	bl	8003710 <HAL_GPIO_WritePin>
      
  SPI1_Tx(MCP_RESET);
 80027c8:	20c0      	movs	r0, #192	; 0xc0
 80027ca:	f7ff ffd3 	bl	8002774 <SPI1_Tx>
      
  SPI1_CS_ON();
 80027ce:	2201      	movs	r2, #1
 80027d0:	2110      	movs	r1, #16
 80027d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d6:	f000 ff9b 	bl	8003710 <HAL_GPIO_WritePin>
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}

080027de <MCP2515_SPI1_ReadReg>:

void MCP2515_SPI1_ReadReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 80027de:	b590      	push	{r4, r7, lr}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	6039      	str	r1, [r7, #0]
 80027e8:	71fb      	strb	r3, [r7, #7]
 80027ea:	4613      	mov	r3, r2
 80027ec:	71bb      	strb	r3, [r7, #6]
	SPI1_CS_OFF();
 80027ee:	2200      	movs	r2, #0
 80027f0:	2110      	movs	r1, #16
 80027f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f6:	f000 ff8b 	bl	8003710 <HAL_GPIO_WritePin>
	SPI1_Tx(MCP_READ);
 80027fa:	2003      	movs	r0, #3
 80027fc:	f7ff ffba 	bl	8002774 <SPI1_Tx>
	SPI1_Tx(addr);
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ffb6 	bl	8002774 <SPI1_Tx>
	while(size--) {
 8002808:	e006      	b.n	8002818 <MCP2515_SPI1_ReadReg+0x3a>
		*buff ++= SPI1_Rx();
 800280a:	683c      	ldr	r4, [r7, #0]
 800280c:	1c63      	adds	r3, r4, #1
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	f7ff ffc2 	bl	8002798 <SPI1_Rx>
 8002814:	4603      	mov	r3, r0
 8002816:	7023      	strb	r3, [r4, #0]
	while(size--) {
 8002818:	79bb      	ldrb	r3, [r7, #6]
 800281a:	1e5a      	subs	r2, r3, #1
 800281c:	71ba      	strb	r2, [r7, #6]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f3      	bne.n	800280a <MCP2515_SPI1_ReadReg+0x2c>
	}
	SPI1_CS_ON();
 8002822:	2201      	movs	r2, #1
 8002824:	2110      	movs	r1, #16
 8002826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800282a:	f000 ff71 	bl	8003710 <HAL_GPIO_WritePin>
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bd90      	pop	{r4, r7, pc}

08002836 <MCP2515_SPI1_WriteReg>:

void MCP2515_SPI1_WriteReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	6039      	str	r1, [r7, #0]
 8002840:	71fb      	strb	r3, [r7, #7]
 8002842:	4613      	mov	r3, r2
 8002844:	71bb      	strb	r3, [r7, #6]
	SPI1_CS_OFF();
 8002846:	2200      	movs	r2, #0
 8002848:	2110      	movs	r1, #16
 800284a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284e:	f000 ff5f 	bl	8003710 <HAL_GPIO_WritePin>
	SPI1_Tx(MCP_WRITE);
 8002852:	2002      	movs	r0, #2
 8002854:	f7ff ff8e 	bl	8002774 <SPI1_Tx>
	SPI1_Tx(addr);
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff8a 	bl	8002774 <SPI1_Tx>
	while(size--) {
 8002860:	e006      	b.n	8002870 <MCP2515_SPI1_WriteReg+0x3a>
		SPI1_Tx(buff++);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	603a      	str	r2, [r7, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff82 	bl	8002774 <SPI1_Tx>
	while(size--) {
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	71ba      	strb	r2, [r7, #6]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f3      	bne.n	8002862 <MCP2515_SPI1_WriteReg+0x2c>
	}
	SPI1_CS_ON();
 800287a:	2201      	movs	r2, #1
 800287c:	2110      	movs	r1, #16
 800287e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002882:	f000 ff45 	bl	8003710 <HAL_GPIO_WritePin>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <MCP2515_SPI1_RegModify>:

void MCP2515_SPI1_RegModify(uint8_t addr, uint8_t mask, uint8_t data) {
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	460b      	mov	r3, r1
 800289a:	71bb      	strb	r3, [r7, #6]
 800289c:	4613      	mov	r3, r2
 800289e:	717b      	strb	r3, [r7, #5]
	SPI1_CS_OFF();
 80028a0:	2200      	movs	r2, #0
 80028a2:	2110      	movs	r1, #16
 80028a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a8:	f000 ff32 	bl	8003710 <HAL_GPIO_WritePin>
	SPI1_Tx(MCP_BITMOD);
 80028ac:	2005      	movs	r0, #5
 80028ae:	f7ff ff61 	bl	8002774 <SPI1_Tx>
	SPI1_Tx(addr);
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff5d 	bl	8002774 <SPI1_Tx>
	SPI1_Tx(mask);
 80028ba:	79bb      	ldrb	r3, [r7, #6]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff59 	bl	8002774 <SPI1_Tx>
	SPI1_Tx(data);
 80028c2:	797b      	ldrb	r3, [r7, #5]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff55 	bl	8002774 <SPI1_Tx>
	SPI1_CS_ON();
 80028ca:	2201      	movs	r2, #1
 80028cc:	2110      	movs	r1, #16
 80028ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d2:	f000 ff1d 	bl	8003710 <HAL_GPIO_WritePin>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <MCP2515_SPI1_RateConfig>:

void MCP2515_SPI1_RateConfig(void) {
 80028de:	b580      	push	{r7, lr}
 80028e0:	af00      	add	r7, sp, #0
	MCP2515_SPI1_WriteReg(MCP_CNF1, MCP_8M_125K_CF1, 1);
 80028e2:	2201      	movs	r2, #1
 80028e4:	2101      	movs	r1, #1
 80028e6:	202a      	movs	r0, #42	; 0x2a
 80028e8:	f7ff ffa5 	bl	8002836 <MCP2515_SPI1_WriteReg>
	MCP2515_SPI1_WriteReg(MCP_CNF2, MCP_8M_125K_CF2, 1);
 80028ec:	2201      	movs	r2, #1
 80028ee:	219a      	movs	r1, #154	; 0x9a
 80028f0:	2029      	movs	r0, #41	; 0x29
 80028f2:	f7ff ffa0 	bl	8002836 <MCP2515_SPI1_WriteReg>
	MCP2515_SPI1_WriteReg(MCP_CNF3, MCP_8M_125K_CF3, 1);
 80028f6:	2201      	movs	r2, #1
 80028f8:	2107      	movs	r1, #7
 80028fa:	2028      	movs	r0, #40	; 0x28
 80028fc:	f7ff ff9b 	bl	8002836 <MCP2515_SPI1_WriteReg>
	HAL_Delay(5);
 8002900:	2005      	movs	r0, #5
 8002902:	f7fe f856 	bl	80009b2 <HAL_Delay>
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <MCP2515_SPI1_AddrReset>:

void MCP2515_SPI1_AddrReset(void) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	e040      	b.n	800299a <MCP2515_SPI1_AddrReset+0x8e>
		SPI1_CS_OFF();
 8002918:	2200      	movs	r2, #0
 800291a:	2110      	movs	r1, #16
 800291c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002920:	f000 fef6 	bl	8003710 <HAL_GPIO_WritePin>
		SPI1_Tx(MCP_WRITE);
 8002924:	2002      	movs	r0, #2
 8002926:	f7ff ff25 	bl	8002774 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][0]);
 800292a:	4a20      	ldr	r2, [pc, #128]	; (80029ac <MCP2515_SPI1_AddrReset+0xa0>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff1d 	bl	8002774 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1]);
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <MCP2515_SPI1_AddrReset+0xa0>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff14 	bl	8002774 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1] >> 8);
 800294c:	4a17      	ldr	r2, [pc, #92]	; (80029ac <MCP2515_SPI1_AddrReset+0xa0>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	b2db      	uxtb	r3, r3
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff0a 	bl	8002774 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1] >> 16);
 8002960:	4a12      	ldr	r2, [pc, #72]	; (80029ac <MCP2515_SPI1_AddrReset+0xa0>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	0c1b      	lsrs	r3, r3, #16
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff00 	bl	8002774 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1] >> 24);
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <MCP2515_SPI1_AddrReset+0xa0>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	0e1b      	lsrs	r3, r3, #24
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fef6 	bl	8002774 <SPI1_Tx>
		SPI1_CS_ON();
 8002988:	2201      	movs	r2, #1
 800298a:	2110      	movs	r1, #16
 800298c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002990:	f000 febe 	bl	8003710 <HAL_GPIO_WritePin>
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3301      	adds	r3, #1
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b07      	cmp	r3, #7
 800299e:	d9bb      	bls.n	8002918 <MCP2515_SPI1_AddrReset+0xc>
	}
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	0800a724 	.word	0x0800a724

080029b0 <MCP2515_SPI1_CanInit>:
void MCP2515_SPI1_CanInit(void) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	MCP2515_SPI1_Reset();
 80029b4:	f7ff ff00 	bl	80027b8 <MCP2515_SPI1_Reset>
	MCP2515_SPI1_RegModify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	21e0      	movs	r1, #224	; 0xe0
 80029bc:	200f      	movs	r0, #15
 80029be:	f7ff ff66 	bl	800288e <MCP2515_SPI1_RegModify>
	MCP2515_SPI1_AddrReset();
 80029c2:	f7ff ffa3 	bl	800290c <MCP2515_SPI1_AddrReset>
	MCP2515_SPI1_RateConfig();
 80029c6:	f7ff ff8a 	bl	80028de <MCP2515_SPI1_RateConfig>
	MCP2515_SPI1_RegModify(MCP_CANINTE, 0xFF, 0xFF);
 80029ca:	22ff      	movs	r2, #255	; 0xff
 80029cc:	21ff      	movs	r1, #255	; 0xff
 80029ce:	202b      	movs	r0, #43	; 0x2b
 80029d0:	f7ff ff5d 	bl	800288e <MCP2515_SPI1_RegModify>
	MCP2515_SPI1_RegModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 80029d4:	2200      	movs	r2, #0
 80029d6:	21e0      	movs	r1, #224	; 0xe0
 80029d8:	200f      	movs	r0, #15
 80029da:	f7ff ff58 	bl	800288e <MCP2515_SPI1_RegModify>
	MCP2515_SPI1_RegModify(MCP_RXB0CTRL,0xFF,0x00);
 80029de:	2200      	movs	r2, #0
 80029e0:	21ff      	movs	r1, #255	; 0xff
 80029e2:	2060      	movs	r0, #96	; 0x60
 80029e4:	f7ff ff53 	bl	800288e <MCP2515_SPI1_RegModify>

}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SPI2_Tx>:
}


/* SPI Tx wrapper function  */
static void SPI2_Tx(uint8_t data)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_EMS, &data, 1, SPI_TIMEOUT);    
 80029f6:	1df9      	adds	r1, r7, #7
 80029f8:	2364      	movs	r3, #100	; 0x64
 80029fa:	2201      	movs	r2, #1
 80029fc:	4803      	ldr	r0, [pc, #12]	; (8002a0c <SPI2_Tx+0x20>)
 80029fe:	f002 ff30 	bl	8005862 <HAL_SPI_Transmit>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000bb4 	.word	0x20000bb4

08002a10 <SPI2_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI2_Rx(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_EMS, &retVal, 1, SPI_TIMEOUT);
 8002a16:	1df9      	adds	r1, r7, #7
 8002a18:	2364      	movs	r3, #100	; 0x64
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <SPI2_Rx+0x1c>)
 8002a1e:	f003 f88e 	bl	8005b3e <HAL_SPI_Receive>
  return retVal;
 8002a22:	79fb      	ldrb	r3, [r7, #7]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000bb4 	.word	0x20000bb4

08002a30 <MCP2515_SPI2_Reset>:

void MCP2515_SPI2_Reset(void)
{    
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  SPI2_CS_OFF();
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a3a:	4807      	ldr	r0, [pc, #28]	; (8002a58 <MCP2515_SPI2_Reset+0x28>)
 8002a3c:	f000 fe68 	bl	8003710 <HAL_GPIO_WritePin>
      
  SPI2_Tx(MCP_RESET);
 8002a40:	20c0      	movs	r0, #192	; 0xc0
 8002a42:	f7ff ffd3 	bl	80029ec <SPI2_Tx>

  SPI2_CS_ON();
 8002a46:	2201      	movs	r2, #1
 8002a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <MCP2515_SPI2_Reset+0x28>)
 8002a4e:	f000 fe5f 	bl	8003710 <HAL_GPIO_WritePin>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	48000400 	.word	0x48000400

08002a5c <MCP2515_SPI2_ReadReg>:

void MCP2515_SPI2_ReadReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71bb      	strb	r3, [r7, #6]
	SPI2_CS_OFF();
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a72:	4810      	ldr	r0, [pc, #64]	; (8002ab4 <MCP2515_SPI2_ReadReg+0x58>)
 8002a74:	f000 fe4c 	bl	8003710 <HAL_GPIO_WritePin>
	SPI2_Tx(MCP_READ);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f7ff ffb7 	bl	80029ec <SPI2_Tx>
	SPI2_Tx(addr);
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ffb3 	bl	80029ec <SPI2_Tx>
	while(size--) {
 8002a86:	e006      	b.n	8002a96 <MCP2515_SPI2_ReadReg+0x3a>
		*buff ++= SPI2_Rx();
 8002a88:	683c      	ldr	r4, [r7, #0]
 8002a8a:	1c63      	adds	r3, r4, #1
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	f7ff ffbf 	bl	8002a10 <SPI2_Rx>
 8002a92:	4603      	mov	r3, r0
 8002a94:	7023      	strb	r3, [r4, #0]
	while(size--) {
 8002a96:	79bb      	ldrb	r3, [r7, #6]
 8002a98:	1e5a      	subs	r2, r3, #1
 8002a9a:	71ba      	strb	r2, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f3      	bne.n	8002a88 <MCP2515_SPI2_ReadReg+0x2c>
	}
	SPI2_CS_ON();
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002aa6:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <MCP2515_SPI2_ReadReg+0x58>)
 8002aa8:	f000 fe32 	bl	8003710 <HAL_GPIO_WritePin>
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd90      	pop	{r4, r7, pc}
 8002ab4:	48000400 	.word	0x48000400

08002ab8 <MCP2515_SPI2_WriteReg>:

void MCP2515_SPI2_WriteReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	71bb      	strb	r3, [r7, #6]
	SPI2_CS_OFF();
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ace:	4810      	ldr	r0, [pc, #64]	; (8002b10 <MCP2515_SPI2_WriteReg+0x58>)
 8002ad0:	f000 fe1e 	bl	8003710 <HAL_GPIO_WritePin>
	SPI2_Tx(MCP_WRITE);
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	f7ff ff89 	bl	80029ec <SPI2_Tx>
	SPI2_Tx(addr);
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff85 	bl	80029ec <SPI2_Tx>
	while(size--) {
 8002ae2:	e006      	b.n	8002af2 <MCP2515_SPI2_WriteReg+0x3a>
		SPI2_Tx(buff++);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	603a      	str	r2, [r7, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff7d 	bl	80029ec <SPI2_Tx>
	while(size--) {
 8002af2:	79bb      	ldrb	r3, [r7, #6]
 8002af4:	1e5a      	subs	r2, r3, #1
 8002af6:	71ba      	strb	r2, [r7, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f3      	bne.n	8002ae4 <MCP2515_SPI2_WriteReg+0x2c>
	}
	SPI2_CS_ON();
 8002afc:	2201      	movs	r2, #1
 8002afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b02:	4803      	ldr	r0, [pc, #12]	; (8002b10 <MCP2515_SPI2_WriteReg+0x58>)
 8002b04:	f000 fe04 	bl	8003710 <HAL_GPIO_WritePin>
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	48000400 	.word	0x48000400

08002b14 <MCP2515_SPI2_RegModify>:

void MCP2515_SPI2_RegModify(uint8_t addr, uint8_t mask, uint8_t data) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	71bb      	strb	r3, [r7, #6]
 8002b22:	4613      	mov	r3, r2
 8002b24:	717b      	strb	r3, [r7, #5]
	SPI2_CS_OFF();
 8002b26:	2200      	movs	r2, #0
 8002b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b2c:	480d      	ldr	r0, [pc, #52]	; (8002b64 <MCP2515_SPI2_RegModify+0x50>)
 8002b2e:	f000 fdef 	bl	8003710 <HAL_GPIO_WritePin>
	SPI2_Tx(MCP_BITMOD);
 8002b32:	2005      	movs	r0, #5
 8002b34:	f7ff ff5a 	bl	80029ec <SPI2_Tx>
	SPI2_Tx(addr);
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff56 	bl	80029ec <SPI2_Tx>
	SPI2_Tx(mask);
 8002b40:	79bb      	ldrb	r3, [r7, #6]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff52 	bl	80029ec <SPI2_Tx>
	SPI2_Tx(data);
 8002b48:	797b      	ldrb	r3, [r7, #5]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff4e 	bl	80029ec <SPI2_Tx>
	SPI2_CS_ON();
 8002b50:	2201      	movs	r2, #1
 8002b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b56:	4803      	ldr	r0, [pc, #12]	; (8002b64 <MCP2515_SPI2_RegModify+0x50>)
 8002b58:	f000 fdda 	bl	8003710 <HAL_GPIO_WritePin>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	48000400 	.word	0x48000400

08002b68 <MCP2515_SPI2_RateConfig>:

void MCP2515_SPI2_RateConfig(void) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	MCP2515_SPI2_WriteReg(MCP_CNF1, MCP_8M_125K_CF1, 1);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2101      	movs	r1, #1
 8002b70:	202a      	movs	r0, #42	; 0x2a
 8002b72:	f7ff ffa1 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
	MCP2515_SPI2_WriteReg(MCP_CNF2, MCP_8M_125K_CF2, 1);
 8002b76:	2201      	movs	r2, #1
 8002b78:	219a      	movs	r1, #154	; 0x9a
 8002b7a:	2029      	movs	r0, #41	; 0x29
 8002b7c:	f7ff ff9c 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
	MCP2515_SPI2_WriteReg(MCP_CNF3, MCP_8M_125K_CF3, 1);
 8002b80:	2201      	movs	r2, #1
 8002b82:	2107      	movs	r1, #7
 8002b84:	2028      	movs	r0, #40	; 0x28
 8002b86:	f7ff ff97 	bl	8002ab8 <MCP2515_SPI2_WriteReg>
	HAL_Delay(5);
 8002b8a:	2005      	movs	r0, #5
 8002b8c:	f7fd ff11 	bl	80009b2 <HAL_Delay>
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <MCP2515_SPI2_AddrReset>:

void MCP2515_SPI2_AddrReset(void) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	e040      	b.n	8002c22 <MCP2515_SPI2_AddrReset+0x8e>
		SPI2_CS_OFF();
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba6:	4823      	ldr	r0, [pc, #140]	; (8002c34 <MCP2515_SPI2_AddrReset+0xa0>)
 8002ba8:	f000 fdb2 	bl	8003710 <HAL_GPIO_WritePin>
		SPI2_Tx(MCP_WRITE);
 8002bac:	2002      	movs	r0, #2
 8002bae:	f7ff ff1d 	bl	80029ec <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][0]);
 8002bb2:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <MCP2515_SPI2_AddrReset+0xa4>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff15 	bl	80029ec <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1]);
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <MCP2515_SPI2_AddrReset+0xa4>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff0c 	bl	80029ec <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1] >> 8);
 8002bd4:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <MCP2515_SPI2_AddrReset+0xa4>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff02 	bl	80029ec <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1] >> 16);
 8002be8:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <MCP2515_SPI2_AddrReset+0xa4>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fef8 	bl	80029ec <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1] >> 24);
 8002bfc:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <MCP2515_SPI2_AddrReset+0xa4>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0e1b      	lsrs	r3, r3, #24
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff feee 	bl	80029ec <SPI2_Tx>
		SPI2_CS_ON();
 8002c10:	2201      	movs	r2, #1
 8002c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c16:	4807      	ldr	r0, [pc, #28]	; (8002c34 <MCP2515_SPI2_AddrReset+0xa0>)
 8002c18:	f000 fd7a 	bl	8003710 <HAL_GPIO_WritePin>
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b07      	cmp	r3, #7
 8002c26:	d9bb      	bls.n	8002ba0 <MCP2515_SPI2_AddrReset+0xc>
	}
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	48000400 	.word	0x48000400
 8002c38:	0800a724 	.word	0x0800a724

08002c3c <MCP2515_SPI2_CanInit>:

void MCP2515_SPI2_CanInit(void) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	MCP2515_SPI2_Reset();
 8002c40:	f7ff fef6 	bl	8002a30 <MCP2515_SPI2_Reset>
	MCP2515_SPI2_RegModify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	21e0      	movs	r1, #224	; 0xe0
 8002c48:	200f      	movs	r0, #15
 8002c4a:	f7ff ff63 	bl	8002b14 <MCP2515_SPI2_RegModify>
	MCP2515_SPI2_AddrReset();
 8002c4e:	f7ff ffa1 	bl	8002b94 <MCP2515_SPI2_AddrReset>
	MCP2515_SPI2_RateConfig();
 8002c52:	f7ff ff89 	bl	8002b68 <MCP2515_SPI2_RateConfig>
	MCP2515_SPI2_RegModify(MCP_CANINTE, 0xFF, 0xFF);
 8002c56:	22ff      	movs	r2, #255	; 0xff
 8002c58:	21ff      	movs	r1, #255	; 0xff
 8002c5a:	202b      	movs	r0, #43	; 0x2b
 8002c5c:	f7ff ff5a 	bl	8002b14 <MCP2515_SPI2_RegModify>
	MCP2515_SPI2_RegModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 8002c60:	2200      	movs	r2, #0
 8002c62:	21e0      	movs	r1, #224	; 0xe0
 8002c64:	200f      	movs	r0, #15
 8002c66:	f7ff ff55 	bl	8002b14 <MCP2515_SPI2_RegModify>
	MCP2515_SPI1_RegModify(MCP_RXB0CTRL,0xFF,0x00);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	21ff      	movs	r1, #255	; 0xff
 8002c6e:	2060      	movs	r0, #96	; 0x60
 8002c70:	f7ff fe0d 	bl	800288e <MCP2515_SPI1_RegModify>

}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6053      	str	r3, [r2, #4]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e0042000 	.word	0xe0042000

08002c98 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	6053      	str	r3, [r2, #4]
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e0042000 	.word	0xe0042000

08002cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <HAL_Init+0x3c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <HAL_Init+0x3c>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cce:	2003      	movs	r0, #3
 8002cd0:	f000 f9c0 	bl	8003054 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cd4:	200f      	movs	r0, #15
 8002cd6:	f000 f80f 	bl	8002cf8 <HAL_InitTick>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	71fb      	strb	r3, [r7, #7]
 8002ce4:	e001      	b.n	8002cea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ce6:	f7ff f8bf 	bl	8001e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cea:	79fb      	ldrb	r3, [r7, #7]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	58004000 	.word	0x58004000

08002cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002d04:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <HAL_InitTick+0x6c>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d024      	beq.n	8002d56 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d0c:	f001 fe5e 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_InitTick+0x6c>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 f9d6 	bl	80030d6 <HAL_SYSTICK_Config>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10f      	bne.n	8002d50 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	d809      	bhi.n	8002d4a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d36:	2200      	movs	r2, #0
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3e:	f000 f994 	bl	800306a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_InitTick+0x70>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e007      	b.n	8002d5a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	e004      	b.n	8002d5a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e001      	b.n	8002d5a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000028 	.word	0x20000028
 8002d68:	20000024 	.word	0x20000024

08002d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x20>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x24>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_IncTick+0x24>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000028 	.word	0x20000028
 8002d90:	20000ef8 	.word	0x20000ef8

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_GetTick+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000ef8 	.word	0x20000ef8

08002dac <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_GetTickPrio+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000024 	.word	0x20000024

08002dc4 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_GetTickFreq+0x14>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000028 	.word	0x20000028

08002ddc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002de0:	f7ff ff4a 	bl	8002c78 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002dec:	f7ff ff54 	bl	8002c98 <LL_DBGMCU_EnableDBGStopMode>
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60d3      	str	r3, [r2, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	; (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db12      	blt.n	8002ecc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	490a      	ldr	r1, [pc, #40]	; (8002ed8 <__NVIC_DisableIRQ+0x44>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	3320      	adds	r3, #32
 8002ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ec0:	f3bf 8f4f 	dsb	sy
}
 8002ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ec6:	f3bf 8f6f 	isb	sy
}
 8002eca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000e100 	.word	0xe000e100

08002edc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0c      	blt.n	8002f08 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4907      	ldr	r1, [pc, #28]	; (8002f14 <__NVIC_SetPendingIRQ+0x38>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	3340      	adds	r3, #64	; 0x40
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db0c      	blt.n	8002f44 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4907      	ldr	r1, [pc, #28]	; (8002f50 <__NVIC_ClearPendingIRQ+0x38>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2001      	movs	r0, #1
 8002f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3e:	3360      	adds	r3, #96	; 0x60
 8002f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db0a      	blt.n	8002f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	490c      	ldr	r1, [pc, #48]	; (8002fa0 <__NVIC_SetPriority+0x4c>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	440b      	add	r3, r1
 8002f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f7c:	e00a      	b.n	8002f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <__NVIC_SetPriority+0x50>)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	3b04      	subs	r3, #4
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	440b      	add	r3, r1
 8002f92:	761a      	strb	r2, [r3, #24]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	bf28      	it	cs
 8002fc6:	2304      	movcs	r3, #4
 8002fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d902      	bls.n	8002fd8 <NVIC_EncodePriority+0x30>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b03      	subs	r3, #3
 8002fd6:	e000      	b.n	8002fda <NVIC_EncodePriority+0x32>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	401a      	ands	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	4313      	orrs	r3, r2
         );
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003020:	d301      	bcc.n	8003026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003022:	2301      	movs	r3, #1
 8003024:	e00f      	b.n	8003046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003026:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <SysTick_Config+0x40>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302e:	210f      	movs	r1, #15
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	f7ff ff8e 	bl	8002f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <SysTick_Config+0x40>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <SysTick_Config+0x40>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010

08003054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fec9 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003078:	f7ff fee0 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 800307c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f7ff ff90 	bl	8002fa8 <NVIC_EncodePriority>
 8003088:	4602      	mov	r2, r0
 800308a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff5f 	bl	8002f54 <__NVIC_SetPriority>
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fed3 	bl	8002e58 <__NVIC_EnableIRQ>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fee3 	bl	8002e94 <__NVIC_DisableIRQ>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff ff96 	bl	8003010 <SysTick_Config>
 80030e4:	4603      	mov	r3, r0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff feed 	bl	8002edc <__NVIC_SetPendingIRQ>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fefd 	bl	8002f18 <__NVIC_ClearPendingIRQ>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e04f      	b.n	80031d8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d008      	beq.n	8003156 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2204      	movs	r2, #4
 8003148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e040      	b.n	80031d8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 020e 	bic.w	r2, r2, #14
 8003164:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003174:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f003 021c 	and.w	r2, r3, #28
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00c      	beq.n	80031c6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d005      	beq.n	8003208 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2204      	movs	r2, #4
 8003200:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	e047      	b.n	8003298 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 020e 	bic.w	r2, r2, #14
 8003216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	f003 021c 	and.w	r2, r3, #28
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003254:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800326c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003276:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
    }
  }
  return status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f003 031c 	and.w	r3, r3, #28
 80032c2:	2204      	movs	r2, #4
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d026      	beq.n	800331c <HAL_DMA_IRQHandler+0x7a>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d021      	beq.n	800331c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d107      	bne.n	80032f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0204 	bic.w	r2, r2, #4
 80032f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f003 021c 	and.w	r2, r3, #28
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2104      	movs	r1, #4
 8003304:	fa01 f202 	lsl.w	r2, r1, r2
 8003308:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	2b00      	cmp	r3, #0
 8003310:	d071      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800331a:	e06c      	b.n	80033f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	f003 031c 	and.w	r3, r3, #28
 8003324:	2202      	movs	r2, #2
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d02e      	beq.n	800338e <HAL_DMA_IRQHandler+0xec>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d029      	beq.n	800338e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 020a 	bic.w	r2, r2, #10
 8003356:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f003 021c 	and.w	r2, r3, #28
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2102      	movs	r1, #2
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d038      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800338c:	e033      	b.n	80033f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f003 031c 	and.w	r3, r3, #28
 8003396:	2208      	movs	r2, #8
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d02a      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x156>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d025      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 020e 	bic.w	r2, r2, #14
 80033ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	f003 021c 	and.w	r2, r3, #28
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
}
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800340e:	e14c      	b.n	80036aa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 813e 	beq.w	80036a4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d005      	beq.n	8003440 <HAL_GPIO_Init+0x40>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d130      	bne.n	80034a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003476:	2201      	movs	r2, #1
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f003 0201 	and.w	r2, r3, #1
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d017      	beq.n	80034de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d123      	bne.n	8003532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	6939      	ldr	r1, [r7, #16]
 800352e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0203 	and.w	r2, r3, #3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8098 	beq.w	80036a4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003574:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <HAL_GPIO_Init+0x2c8>)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	220f      	movs	r2, #15
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800359e:	d019      	beq.n	80035d4 <HAL_GPIO_Init+0x1d4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a4a      	ldr	r2, [pc, #296]	; (80036cc <HAL_GPIO_Init+0x2cc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d013      	beq.n	80035d0 <HAL_GPIO_Init+0x1d0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a49      	ldr	r2, [pc, #292]	; (80036d0 <HAL_GPIO_Init+0x2d0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00d      	beq.n	80035cc <HAL_GPIO_Init+0x1cc>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a48      	ldr	r2, [pc, #288]	; (80036d4 <HAL_GPIO_Init+0x2d4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <HAL_GPIO_Init+0x1c8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a47      	ldr	r2, [pc, #284]	; (80036d8 <HAL_GPIO_Init+0x2d8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_GPIO_Init+0x1c4>
 80035c0:	2304      	movs	r3, #4
 80035c2:	e008      	b.n	80035d6 <HAL_GPIO_Init+0x1d6>
 80035c4:	2307      	movs	r3, #7
 80035c6:	e006      	b.n	80035d6 <HAL_GPIO_Init+0x1d6>
 80035c8:	2303      	movs	r3, #3
 80035ca:	e004      	b.n	80035d6 <HAL_GPIO_Init+0x1d6>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e002      	b.n	80035d6 <HAL_GPIO_Init+0x1d6>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_GPIO_Init+0x1d6>
 80035d4:	2300      	movs	r3, #0
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	f002 0203 	and.w	r2, r2, #3
 80035dc:	0092      	lsls	r2, r2, #2
 80035de:	4093      	lsls	r3, r2
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035e6:	4938      	ldr	r1, [pc, #224]	; (80036c8 <HAL_GPIO_Init+0x2c8>)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	089b      	lsrs	r3, r3, #2
 80035ec:	3302      	adds	r3, #2
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035f4:	4b39      	ldr	r3, [pc, #228]	; (80036dc <HAL_GPIO_Init+0x2dc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003618:	4a30      	ldr	r2, [pc, #192]	; (80036dc <HAL_GPIO_Init+0x2dc>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800361e:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <HAL_GPIO_Init+0x2dc>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43db      	mvns	r3, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003642:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_GPIO_Init+0x2dc>)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003648:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_GPIO_Init+0x2dc>)
 800364a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800366e:	4a1b      	ldr	r2, [pc, #108]	; (80036dc <HAL_GPIO_Init+0x2dc>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003676:	4b19      	ldr	r3, [pc, #100]	; (80036dc <HAL_GPIO_Init+0x2dc>)
 8003678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	43db      	mvns	r3, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4013      	ands	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800369c:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <HAL_GPIO_Init+0x2dc>)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	3301      	adds	r3, #1
 80036a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f47f aeab 	bne.w	8003410 <HAL_GPIO_Init+0x10>
  }
}
 80036ba:	bf00      	nop
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	40010000 	.word	0x40010000
 80036cc:	48000400 	.word	0x48000400
 80036d0:	48000800 	.word	0x48000800
 80036d4:	48000c00 	.word	0x48000c00
 80036d8:	48001000 	.word	0x48001000
 80036dc:	58000800 	.word	0x58000800

080036e0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e001      	b.n	8003702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
 800371c:	4613      	mov	r3, r2
 800371e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800372c:	e002      	b.n	8003734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_HSEM_IRQHandler+0x30>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_HSEM_IRQHandler+0x30>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	43db      	mvns	r3, r3
 8003754:	4906      	ldr	r1, [pc, #24]	; (8003770 <HAL_HSEM_IRQHandler+0x30>)
 8003756:	4013      	ands	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800375a:	4a05      	ldr	r2, [pc, #20]	; (8003770 <HAL_HSEM_IRQHandler+0x30>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f807 	bl	8003774 <HAL_HSEM_FreeCallback>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	58001500 	.word	0x58001500

08003774 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01e      	beq.n	80037d8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <HAL_IPCC_Init+0x60>)
 800379c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe fb6c 	bl	8001e88 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80037b0:	68b8      	ldr	r0, [r7, #8]
 80037b2:	f000 f85b 	bl	800386c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f82c 	bl	8003820 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80037d6:	e001      	b.n	80037dc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	58000c00 	.word	0x58000c00

080037ec <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	4613      	mov	r3, r2
 8003812:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e00f      	b.n	800384e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	4a0b      	ldr	r2, [pc, #44]	; (8003864 <IPCC_SetDefaultCallbacks+0x44>)
 8003838:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3306      	adds	r3, #6
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	4a08      	ldr	r2, [pc, #32]	; (8003868 <IPCC_SetDefaultCallbacks+0x48>)
 8003846:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3301      	adds	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d9ec      	bls.n	800382e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	080037ed 	.word	0x080037ed
 8003868:	08003807 	.word	0x08003807

0800386c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003880:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	223f      	movs	r2, #63	; 0x3f
 8003886:	609a      	str	r2, [r3, #8]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800389e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a2:	6013      	str	r3, [r2, #0]
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	58000400 	.word	0x58000400

080038b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <HAL_PWREx_GetVoltageRange+0x18>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	58000400 	.word	0x58000400

080038d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80038d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e2:	d101      	bne.n	80038e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_RCC_HSE_Enable>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80038f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <LL_RCC_HSE_Disable>:
{
 8003912:	b480      	push	{r7}
 8003914:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003924:	6013      	str	r3, [r2, #0]
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_RCC_HSE_IsReady>:
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003942:	d101      	bne.n	8003948 <LL_RCC_HSE_IsReady+0x18>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <LL_RCC_HSE_IsReady+0x1a>
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_RCC_HSI_Enable>:
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_RCC_HSI_Disable>:
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_RCC_HSI_IsReady>:
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d101      	bne.n	80039a8 <LL_RCC_HSI_IsReady+0x18>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <LL_RCC_HSI_IsReady+0x1a>
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80039bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_RCC_HSI48_Enable>:
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80039e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80039f6:	bf00      	nop
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_RCC_HSI48_Disable>:
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_RCC_HSI48_IsReady>:
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d101      	bne.n	8003a3a <LL_RCC_HSI48_IsReady+0x18>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <LL_RCC_HSI48_IsReady+0x1a>
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_RCC_LSE_Enable>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_RCC_LSE_Disable>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_RCC_LSE_EnableBypass>:
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_LSE_DisableBypass>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <LL_RCC_LSE_IsReady>:
{
 8003ace:	b480      	push	{r7}
 8003ad0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d101      	bne.n	8003ae6 <LL_RCC_LSE_IsReady+0x18>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <LL_RCC_LSE_IsReady+0x1a>
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_RCC_LSI1_Enable>:
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_RCC_LSI1_Disable>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_RCC_LSI1_IsReady>:
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d101      	bne.n	8003b4e <LL_RCC_LSI1_IsReady+0x18>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_RCC_LSI1_IsReady+0x1a>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_LSI2_Enable>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b6a:	f043 0304 	orr.w	r3, r3, #4
 8003b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_RCC_LSI2_Disable>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8c:	f023 0304 	bic.w	r3, r3, #4
 8003b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_LSI2_IsReady>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d101      	bne.n	8003bb6 <LL_RCC_LSI2_IsReady+0x18>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <LL_RCC_LSI2_IsReady+0x1a>
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_RCC_LSI2_SetTrimming>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_RCC_MSI_Enable>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_RCC_MSI_Disable>:
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	6013      	str	r3, [r2, #0]
}
 8003c22:	bf00      	nop
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_RCC_MSI_IsReady>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d101      	bne.n	8003c42 <LL_RCC_MSI_IsReady+0x16>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <LL_RCC_MSI_IsReady+0x18>
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_RCC_MSI_SetRange>:
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_RCC_MSI_GetRange>:
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c86:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2bb0      	cmp	r3, #176	; 0xb0
 8003c8c:	d901      	bls.n	8003c92 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003c8e:	23b0      	movs	r3, #176	; 0xb0
 8003c90:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003c92:	687b      	ldr	r3, [r7, #4]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <LL_RCC_SetSysClkSource>:
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 0203 	bic.w	r2, r3, #3
 8003cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_GetSysClkSource>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_SetAHBPrescaler>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_RCC_SetAHB4Prescaler>:
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d6e:	f023 020f 	bic.w	r2, r3, #15
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_RCC_SetAPB1Prescaler>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_RCC_SetAPB2Prescaler>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_GetAHBPrescaler>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <LL_RCC_GetAHB4Prescaler>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_RCC_PLL_Enable>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e22:	6013      	str	r3, [r2, #0]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_RCC_PLL_Disable>:
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e40:	6013      	str	r3, [r2, #0]
}
 8003e42:	bf00      	nop
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_RCC_PLL_IsReady>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e5e:	d101      	bne.n	8003e64 <LL_RCC_PLL_IsReady+0x18>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <LL_RCC_PLL_IsReady+0x1a>
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_RCC_PLL_GetN>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_RCC_PLL_GetR>:
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_RCC_PLL_GetDivider>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_PLL_GetMainSource>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_RCC_IsActiveFlag_HPRE>:
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d101      	bne.n	8003eea <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f0a:	d101      	bne.n	8003f10 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f30:	d101      	bne.n	8003f36 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f54:	d101      	bne.n	8003f5a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f78:	d101      	bne.n	8003f7e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f8c:	b590      	push	{r4, r7, lr}
 8003f8e:	b08d      	sub	sp, #52	; 0x34
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e363      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 808d 	beq.w	80040c6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fac:	f7ff fea1 	bl	8003cf2 <LL_RCC_GetSysClkSource>
 8003fb0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb2:	f7ff ff82 	bl	8003eba <LL_RCC_PLL_GetMainSource>
 8003fb6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_RCC_OscConfig+0x3e>
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d147      	bne.n	8004054 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d144      	bne.n	8004054 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e347      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003fda:	f7ff fe4c 	bl	8003c76 <LL_RCC_MSI_GetRange>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	429c      	cmp	r4, r3
 8003fe2:	d914      	bls.n	800400e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fd03 	bl	80049f4 <RCC_SetFlashLatencyFromMSIRange>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e336      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fe26 	bl	8003c4e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fe4a 	bl	8003ca0 <LL_RCC_MSI_SetCalibTrimming>
 800400c:	e013      	b.n	8004036 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fe1b 	bl	8003c4e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fe3f 	bl	8003ca0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fce4 	bl	80049f4 <RCC_SetFlashLatencyFromMSIRange>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e317      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004036:	f000 fcc9 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 800403a:	4603      	mov	r3, r0
 800403c:	4aa4      	ldr	r2, [pc, #656]	; (80042d0 <HAL_RCC_OscConfig+0x344>)
 800403e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004040:	4ba4      	ldr	r3, [pc, #656]	; (80042d4 <HAL_RCC_OscConfig+0x348>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fe57 	bl	8002cf8 <HAL_InitTick>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d039      	beq.n	80040c4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e308      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01e      	beq.n	800409a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800405c:	f7ff fdc8 	bl	8003bf0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004060:	f7fe fe98 	bl	8002d94 <HAL_GetTick>
 8004064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004068:	f7fe fe94 	bl	8002d94 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e2f5      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800407a:	f7ff fdd7 	bl	8003c2c <LL_RCC_MSI_IsReady>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f1      	beq.n	8004068 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fde0 	bl	8003c4e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fe04 	bl	8003ca0 <LL_RCC_MSI_SetCalibTrimming>
 8004098:	e015      	b.n	80040c6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800409a:	f7ff fdb8 	bl	8003c0e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800409e:	f7fe fe79 	bl	8002d94 <HAL_GetTick>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040a6:	f7fe fe75 	bl	8002d94 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e2d6      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80040b8:	f7ff fdb8 	bl	8003c2c <LL_RCC_MSI_IsReady>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f1      	bne.n	80040a6 <HAL_RCC_OscConfig+0x11a>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80040c4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d047      	beq.n	8004162 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d2:	f7ff fe0e 	bl	8003cf2 <LL_RCC_GetSysClkSource>
 80040d6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d8:	f7ff feef 	bl	8003eba <LL_RCC_PLL_GetMainSource>
 80040dc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_OscConfig+0x164>
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d108      	bne.n	80040fc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d105      	bne.n	80040fc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d134      	bne.n	8004162 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e2b4      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d102      	bne.n	800410c <HAL_RCC_OscConfig+0x180>
 8004106:	f7ff fbf5 	bl	80038f4 <LL_RCC_HSE_Enable>
 800410a:	e001      	b.n	8004110 <HAL_RCC_OscConfig+0x184>
 800410c:	f7ff fc01 	bl	8003912 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d012      	beq.n	800413e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fe fe3c 	bl	8002d94 <HAL_GetTick>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004120:	f7fe fe38 	bl	8002d94 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e299      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004132:	f7ff fbfd 	bl	8003930 <LL_RCC_HSE_IsReady>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f1      	beq.n	8004120 <HAL_RCC_OscConfig+0x194>
 800413c:	e011      	b.n	8004162 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fe fe29 	bl	8002d94 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004146:	f7fe fe25 	bl	8002d94 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b64      	cmp	r3, #100	; 0x64
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e286      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004158:	f7ff fbea 	bl	8003930 <LL_RCC_HSE_IsReady>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f1      	bne.n	8004146 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d04c      	beq.n	8004208 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416e:	f7ff fdc0 	bl	8003cf2 <LL_RCC_GetSysClkSource>
 8004172:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004174:	f7ff fea1 	bl	8003eba <LL_RCC_PLL_GetMainSource>
 8004178:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d005      	beq.n	800418c <HAL_RCC_OscConfig+0x200>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d10e      	bne.n	80041a4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e266      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fc09 	bl	80039b4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041a2:	e031      	b.n	8004208 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d019      	beq.n	80041e0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ac:	f7ff fbd2 	bl	8003954 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fe fdf0 	bl	8002d94 <HAL_GetTick>
 80041b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b8:	f7fe fdec 	bl	8002d94 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e24d      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80041ca:	f7ff fbe1 	bl	8003990 <LL_RCC_HSI_IsReady>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f1      	beq.n	80041b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fbeb 	bl	80039b4 <LL_RCC_HSI_SetCalibTrimming>
 80041de:	e013      	b.n	8004208 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e0:	f7ff fbc7 	bl	8003972 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fe fdd6 	bl	8002d94 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fe fdd2 	bl	8002d94 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e233      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80041fe:	f7ff fbc7 	bl	8003990 <LL_RCC_HSI_IsReady>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f1      	bne.n	80041ec <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a3 	beq.w	8004368 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d076      	beq.n	8004318 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	d046      	beq.n	80042c4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004236:	f7ff fc7e 	bl	8003b36 <LL_RCC_LSI1_IsReady>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d113      	bne.n	8004268 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004240:	f7ff fc57 	bl	8003af2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004244:	f7fe fda6 	bl	8002d94 <HAL_GetTick>
 8004248:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800424c:	f7fe fda2 	bl	8002d94 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e203      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800425e:	f7ff fc6a 	bl	8003b36 <LL_RCC_LSI1_IsReady>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f1      	beq.n	800424c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004268:	f7ff fc77 	bl	8003b5a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fe fd92 	bl	8002d94 <HAL_GetTick>
 8004270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004274:	f7fe fd8e 	bl	8002d94 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b03      	cmp	r3, #3
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e1ef      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004286:	f7ff fc8a 	bl	8003b9e <LL_RCC_LSI2_IsReady>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f1      	beq.n	8004274 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fc94 	bl	8003bc2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800429a:	f7ff fc3b 	bl	8003b14 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fe fd79 	bl	8002d94 <HAL_GetTick>
 80042a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042a6:	f7fe fd75 	bl	8002d94 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e1d6      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80042b8:	f7ff fc3d 	bl	8003b36 <LL_RCC_LSI1_IsReady>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f1      	bne.n	80042a6 <HAL_RCC_OscConfig+0x31a>
 80042c2:	e051      	b.n	8004368 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80042c4:	f7ff fc15 	bl	8003af2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fe fd64 	bl	8002d94 <HAL_GetTick>
 80042cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80042ce:	e00c      	b.n	80042ea <HAL_RCC_OscConfig+0x35e>
 80042d0:	20000020 	.word	0x20000020
 80042d4:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042d8:	f7fe fd5c 	bl	8002d94 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e1bd      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80042ea:	f7ff fc24 	bl	8003b36 <LL_RCC_LSI1_IsReady>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f1      	beq.n	80042d8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80042f4:	f7ff fc42 	bl	8003b7c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80042fa:	f7fe fd4b 	bl	8002d94 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b03      	cmp	r3, #3
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e1ac      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800430c:	f7ff fc47 	bl	8003b9e <LL_RCC_LSI2_IsReady>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f1      	bne.n	80042fa <HAL_RCC_OscConfig+0x36e>
 8004316:	e027      	b.n	8004368 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004318:	f7ff fc30 	bl	8003b7c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fe fd3a 	bl	8002d94 <HAL_GetTick>
 8004320:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004324:	f7fe fd36 	bl	8002d94 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b03      	cmp	r3, #3
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e197      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004336:	f7ff fc32 	bl	8003b9e <LL_RCC_LSI2_IsReady>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f1      	bne.n	8004324 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004340:	f7ff fbe8 	bl	8003b14 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fe fd26 	bl	8002d94 <HAL_GetTick>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800434c:	f7fe fd22 	bl	8002d94 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e183      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800435e:	f7ff fbea 	bl	8003b36 <LL_RCC_LSI1_IsReady>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f1      	bne.n	800434c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05b      	beq.n	800442c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004374:	4ba7      	ldr	r3, [pc, #668]	; (8004614 <HAL_RCC_OscConfig+0x688>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d114      	bne.n	80043aa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004380:	f7ff fa88 	bl	8003894 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004384:	f7fe fd06 	bl	8002d94 <HAL_GetTick>
 8004388:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fe fd02 	bl	8002d94 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e163      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439e:	4b9d      	ldr	r3, [pc, #628]	; (8004614 <HAL_RCC_OscConfig+0x688>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d102      	bne.n	80043b8 <HAL_RCC_OscConfig+0x42c>
 80043b2:	f7ff fb48 	bl	8003a46 <LL_RCC_LSE_Enable>
 80043b6:	e00c      	b.n	80043d2 <HAL_RCC_OscConfig+0x446>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b05      	cmp	r3, #5
 80043be:	d104      	bne.n	80043ca <HAL_RCC_OscConfig+0x43e>
 80043c0:	f7ff fb63 	bl	8003a8a <LL_RCC_LSE_EnableBypass>
 80043c4:	f7ff fb3f 	bl	8003a46 <LL_RCC_LSE_Enable>
 80043c8:	e003      	b.n	80043d2 <HAL_RCC_OscConfig+0x446>
 80043ca:	f7ff fb4d 	bl	8003a68 <LL_RCC_LSE_Disable>
 80043ce:	f7ff fb6d 	bl	8003aac <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d014      	beq.n	8004404 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fe fcdb 	bl	8002d94 <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fe fcd7 	bl	8002d94 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e136      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80043f8:	f7ff fb69 	bl	8003ace <LL_RCC_LSE_IsReady>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0ef      	beq.n	80043e2 <HAL_RCC_OscConfig+0x456>
 8004402:	e013      	b.n	800442c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fe fcc6 	bl	8002d94 <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800440a:	e00a      	b.n	8004422 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440c:	f7fe fcc2 	bl	8002d94 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	; 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e121      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004422:	f7ff fb54 	bl	8003ace <LL_RCC_LSE_IsReady>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ef      	bne.n	800440c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02c      	beq.n	8004492 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d014      	beq.n	800446a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004440:	f7ff facd 	bl	80039de <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fe fca6 	bl	8002d94 <HAL_GetTick>
 8004448:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800444c:	f7fe fca2 	bl	8002d94 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e103      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800445e:	f7ff fae0 	bl	8003a22 <LL_RCC_HSI48_IsReady>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f1      	beq.n	800444c <HAL_RCC_OscConfig+0x4c0>
 8004468:	e013      	b.n	8004492 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800446a:	f7ff fac9 	bl	8003a00 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fe fc91 	bl	8002d94 <HAL_GetTick>
 8004472:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004476:	f7fe fc8d 	bl	8002d94 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0ee      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004488:	f7ff facb 	bl	8003a22 <LL_RCC_HSI48_IsReady>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f1      	bne.n	8004476 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80e4 	beq.w	8004664 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449c:	f7ff fc29 	bl	8003cf2 <LL_RCC_GetSysClkSource>
 80044a0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	f040 80b4 	bne.w	800461c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0203 	and.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	429a      	cmp	r2, r3
 80044c0:	d123      	bne.n	800450a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d11c      	bne.n	800450a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d114      	bne.n	800450a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10d      	bne.n	800450a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d05d      	beq.n	80045c6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b0c      	cmp	r3, #12
 800450e:	d058      	beq.n	80045c2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0a1      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004522:	f7ff fc84 	bl	8003e2e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004526:	f7fe fc35 	bl	8002d94 <HAL_GetTick>
 800452a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452e:	f7fe fc31 	bl	8002d94 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e092      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ef      	bne.n	800452e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800454e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	4b30      	ldr	r3, [pc, #192]	; (8004618 <HAL_RCC_OscConfig+0x68c>)
 8004556:	4013      	ands	r3, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004566:	0212      	lsls	r2, r2, #8
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800456e:	4311      	orrs	r1, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800457a:	430a      	orrs	r2, r1
 800457c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004580:	4313      	orrs	r3, r2
 8004582:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004584:	f7ff fc44 	bl	8003e10 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004598:	f7fe fbfc 	bl	8002d94 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fe fbf8 	bl	8002d94 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e059      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ef      	beq.n	80045a0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c0:	e050      	b.n	8004664 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e04f      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d147      	bne.n	8004664 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045d4:	f7ff fc1c 	bl	8003e10 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045e8:	f7fe fbd4 	bl	8002d94 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fe fbd0 	bl	8002d94 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e031      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ef      	beq.n	80045f0 <HAL_RCC_OscConfig+0x664>
 8004610:	e028      	b.n	8004664 <HAL_RCC_OscConfig+0x6d8>
 8004612:	bf00      	nop
 8004614:	58000400 	.word	0x58000400
 8004618:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d01e      	beq.n	8004660 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004622:	f7ff fc04 	bl	8003e2e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7fe fbb5 	bl	8002d94 <HAL_GetTick>
 800462a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462e:	f7fe fbb1 	bl	8002d94 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e012      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1ef      	bne.n	800462e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800464e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCC_OscConfig+0x6e4>)
 800465a:	4013      	ands	r3, r2
 800465c:	60cb      	str	r3, [r1, #12]
 800465e:	e001      	b.n	8004664 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3734      	adds	r7, #52	; 0x34
 800466a:	46bd      	mov	sp, r7
 800466c:	bd90      	pop	{r4, r7, pc}
 800466e:	bf00      	nop
 8004670:	eefefffc 	.word	0xeefefffc

08004674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e12d      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b98      	ldr	r3, [pc, #608]	; (80048ec <HAL_RCC_ClockConfig+0x278>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d91b      	bls.n	80046ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b95      	ldr	r3, [pc, #596]	; (80048ec <HAL_RCC_ClockConfig+0x278>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 0207 	bic.w	r2, r3, #7
 800469e:	4993      	ldr	r1, [pc, #588]	; (80048ec <HAL_RCC_ClockConfig+0x278>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a6:	f7fe fb75 	bl	8002d94 <HAL_GetTick>
 80046aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80046ae:	f7fe fb71 	bl	8002d94 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e111      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c0:	4b8a      	ldr	r3, [pc, #552]	; (80048ec <HAL_RCC_ClockConfig+0x278>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d1ef      	bne.n	80046ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fb13 	bl	8003d0a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046e4:	f7fe fb56 	bl	8002d94 <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80046ec:	f7fe fb52 	bl	8002d94 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e0f2      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80046fe:	f7ff fbe8 	bl	8003ed2 <LL_RCC_IsActiveFlag_HPRE>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f1      	beq.n	80046ec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d016      	beq.n	8004742 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fb0a 	bl	8003d32 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800471e:	f7fe fb39 	bl	8002d94 <HAL_GetTick>
 8004722:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004724:	e008      	b.n	8004738 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004726:	f7fe fb35 	bl	8002d94 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e0d5      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004738:	f7ff fbdd 	bl	8003ef6 <LL_RCC_IsActiveFlag_C2HPRE>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f1      	beq.n	8004726 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fb03 	bl	8003d5e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004758:	f7fe fb1c 	bl	8002d94 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004760:	f7fe fb18 	bl	8002d94 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e0b8      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004772:	f7ff fbd3 	bl	8003f1c <LL_RCC_IsActiveFlag_SHDHPRE>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f1      	beq.n	8004760 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d016      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fafd 	bl	8003d8c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004792:	f7fe faff 	bl	8002d94 <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800479a:	f7fe fafb 	bl	8002d94 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e09b      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80047ac:	f7ff fbc9 	bl	8003f42 <LL_RCC_IsActiveFlag_PPRE1>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f1      	beq.n	800479a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d017      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff faf3 	bl	8003db4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047ce:	f7fe fae1 	bl	8002d94 <HAL_GetTick>
 80047d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047d6:	f7fe fadd 	bl	8002d94 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e07d      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80047e8:	f7ff fbbd 	bl	8003f66 <LL_RCC_IsActiveFlag_PPRE2>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f1      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d043      	beq.n	8004886 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d106      	bne.n	8004814 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004806:	f7ff f893 	bl	8003930 <LL_RCC_HSE_IsReady>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11e      	bne.n	800484e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e067      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d106      	bne.n	800482a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800481c:	f7ff fb16 	bl	8003e4c <LL_RCC_PLL_IsReady>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d113      	bne.n	800484e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e05c      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004832:	f7ff f9fb 	bl	8003c2c <LL_RCC_MSI_IsReady>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d108      	bne.n	800484e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e051      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004840:	f7ff f8a6 	bl	8003990 <LL_RCC_HSI_IsReady>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e04a      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff fa39 	bl	8003cca <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004858:	f7fe fa9c 	bl	8002d94 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	e00a      	b.n	8004876 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7fe fa98 	bl	8002d94 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e036      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	f7ff fa3c 	bl	8003cf2 <LL_RCC_GetSysClkSource>
 800487a:	4602      	mov	r2, r0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	429a      	cmp	r2, r3
 8004884:	d1ec      	bne.n	8004860 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004886:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_RCC_ClockConfig+0x278>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d21b      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004894:	4b15      	ldr	r3, [pc, #84]	; (80048ec <HAL_RCC_ClockConfig+0x278>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f023 0207 	bic.w	r2, r3, #7
 800489c:	4913      	ldr	r1, [pc, #76]	; (80048ec <HAL_RCC_ClockConfig+0x278>)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a4:	f7fe fa76 	bl	8002d94 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	e008      	b.n	80048be <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048ac:	f7fe fa72 	bl	8002d94 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e012      	b.n	80048e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCC_ClockConfig+0x278>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1ef      	bne.n	80048ac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048cc:	f000 f87e 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 80048d0:	4603      	mov	r3, r0
 80048d2:	4a07      	ldr	r2, [pc, #28]	; (80048f0 <HAL_RCC_ClockConfig+0x27c>)
 80048d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80048d6:	f7fe fa69 	bl	8002dac <HAL_GetTickPrio>
 80048da:	4603      	mov	r3, r0
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe fa0b 	bl	8002cf8 <HAL_InitTick>
 80048e2:	4603      	mov	r3, r0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	58004000 	.word	0x58004000
 80048f0:	20000020 	.word	0x20000020

080048f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fa:	f7ff f9fa 	bl	8003cf2 <LL_RCC_GetSysClkSource>
 80048fe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004906:	f7ff f9b6 	bl	8003c76 <LL_RCC_MSI_GetRange>
 800490a:	4603      	mov	r3, r0
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	4a2b      	ldr	r2, [pc, #172]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e04b      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b04      	cmp	r3, #4
 8004920:	d102      	bne.n	8004928 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004922:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e045      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b08      	cmp	r3, #8
 800492c:	d10a      	bne.n	8004944 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800492e:	f7fe ffcf 	bl	80038d0 <LL_RCC_HSE_IsEnabledDiv2>
 8004932:	4603      	mov	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004938:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e03a      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800493e:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e037      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004944:	f7ff fab9 	bl	8003eba <LL_RCC_PLL_GetMainSource>
 8004948:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d003      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x64>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b03      	cmp	r3, #3
 8004954:	d003      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x6a>
 8004956:	e00d      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800495a:	60bb      	str	r3, [r7, #8]
        break;
 800495c:	e015      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800495e:	f7fe ffb7 	bl	80038d0 <LL_RCC_HSE_IsEnabledDiv2>
 8004962:	4603      	mov	r3, r0
 8004964:	2b01      	cmp	r3, #1
 8004966:	d102      	bne.n	800496e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800496a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800496c:	e00d      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800496e:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004970:	60bb      	str	r3, [r7, #8]
        break;
 8004972:	e00a      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004974:	f7ff f97f 	bl	8003c76 <LL_RCC_MSI_GetRange>
 8004978:	4603      	mov	r3, r0
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	60bb      	str	r3, [r7, #8]
        break;
 8004988:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800498a:	f7ff fa71 	bl	8003e70 <LL_RCC_PLL_GetN>
 800498e:	4602      	mov	r2, r0
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	fb03 f402 	mul.w	r4, r3, r2
 8004996:	f7ff fa84 	bl	8003ea2 <LL_RCC_PLL_GetDivider>
 800499a:	4603      	mov	r3, r0
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	3301      	adds	r3, #1
 80049a0:	fbb4 f4f3 	udiv	r4, r4, r3
 80049a4:	f7ff fa71 	bl	8003e8a <LL_RCC_PLL_GetR>
 80049a8:	4603      	mov	r3, r0
 80049aa:	0f5b      	lsrs	r3, r3, #29
 80049ac:	3301      	adds	r3, #1
 80049ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80049b2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80049b4:	68fb      	ldr	r3, [r7, #12]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd90      	pop	{r4, r7, pc}
 80049be:	bf00      	nop
 80049c0:	0800a6e4 	.word	0x0800a6e4
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	01e84800 	.word	0x01e84800

080049cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049cc:	b598      	push	{r3, r4, r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80049d0:	f7ff ff90 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80049d4:	4604      	mov	r4, r0
 80049d6:	f7ff fa01 	bl	8003ddc <LL_RCC_GetAHBPrescaler>
 80049da:	4603      	mov	r3, r0
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	4a03      	ldr	r2, [pc, #12]	; (80049f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80049e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd98      	pop	{r3, r4, r7, pc}
 80049f0:	0800a6a4 	.word	0x0800a6a4

080049f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2bb0      	cmp	r3, #176	; 0xb0
 8004a00:	d903      	bls.n	8004a0a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e007      	b.n	8004a1a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a11      	ldr	r2, [pc, #68]	; (8004a58 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a18:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004a1a:	f7ff f9eb 	bl	8003df4 <LL_RCC_GetAHB4Prescaler>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	4a0d      	ldr	r2, [pc, #52]	; (8004a5c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a32:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4a0a      	ldr	r2, [pc, #40]	; (8004a60 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	0c9c      	lsrs	r4, r3, #18
 8004a3e:	f7fe ff39 	bl	80038b4 <HAL_PWREx_GetVoltageRange>
 8004a42:	4603      	mov	r3, r0
 8004a44:	4619      	mov	r1, r3
 8004a46:	4620      	mov	r0, r4
 8004a48:	f000 f80c 	bl	8004a64 <RCC_SetFlashLatency>
 8004a4c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd90      	pop	{r4, r7, pc}
 8004a56:	bf00      	nop
 8004a58:	0800a6e4 	.word	0x0800a6e4
 8004a5c:	0800a6a4 	.word	0x0800a6a4
 8004a60:	431bde83 	.word	0x431bde83

08004a64 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b093      	sub	sp, #76	; 0x4c
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004a6e:	4b37      	ldr	r3, [pc, #220]	; (8004b4c <RCC_SetFlashLatency+0xe8>)
 8004a70:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004a7a:	4a35      	ldr	r2, [pc, #212]	; (8004b50 <RCC_SetFlashLatency+0xec>)
 8004a7c:	f107 031c 	add.w	r3, r7, #28
 8004a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004a86:	4b33      	ldr	r3, [pc, #204]	; (8004b54 <RCC_SetFlashLatency+0xf0>)
 8004a88:	f107 040c 	add.w	r4, r7, #12
 8004a8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004a92:	2300      	movs	r3, #0
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9c:	d11a      	bne.n	8004ad4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa2:	e013      	b.n	8004acc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	3348      	adds	r3, #72	; 0x48
 8004aaa:	443b      	add	r3, r7
 8004aac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d807      	bhi.n	8004ac6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	3348      	adds	r3, #72	; 0x48
 8004abc:	443b      	add	r3, r7
 8004abe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ac2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004ac4:	e020      	b.n	8004b08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac8:	3301      	adds	r3, #1
 8004aca:	643b      	str	r3, [r7, #64]	; 0x40
 8004acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d9e8      	bls.n	8004aa4 <RCC_SetFlashLatency+0x40>
 8004ad2:	e019      	b.n	8004b08 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad8:	e013      	b.n	8004b02 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	3348      	adds	r3, #72	; 0x48
 8004ae0:	443b      	add	r3, r7
 8004ae2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d807      	bhi.n	8004afc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	3348      	adds	r3, #72	; 0x48
 8004af2:	443b      	add	r3, r7
 8004af4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004af8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004afa:	e005      	b.n	8004b08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afe:	3301      	adds	r3, #1
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d9e8      	bls.n	8004ada <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004b08:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <RCC_SetFlashLatency+0xf4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f023 0207 	bic.w	r2, r3, #7
 8004b10:	4911      	ldr	r1, [pc, #68]	; (8004b58 <RCC_SetFlashLatency+0xf4>)
 8004b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b14:	4313      	orrs	r3, r2
 8004b16:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b18:	f7fe f93c 	bl	8002d94 <HAL_GetTick>
 8004b1c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b1e:	e008      	b.n	8004b32 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b20:	f7fe f938 	bl	8002d94 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e007      	b.n	8004b42 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <RCC_SetFlashLatency+0xf4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d1ef      	bne.n	8004b20 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	374c      	adds	r7, #76	; 0x4c
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd90      	pop	{r4, r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	0800a500 	.word	0x0800a500
 8004b50:	0800a510 	.word	0x0800a510
 8004b54:	0800a51c 	.word	0x0800a51c
 8004b58:	58004000 	.word	0x58004000

08004b5c <LL_RCC_LSE_IsEnabled>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <LL_RCC_LSE_IsEnabled+0x18>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <LL_RCC_LSE_IsEnabled+0x1a>
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <LL_RCC_LSE_IsReady>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d101      	bne.n	8004b98 <LL_RCC_LSE_IsReady+0x18>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <LL_RCC_LSE_IsReady+0x1a>
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <LL_RCC_SetRFWKPClockSource>:
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <LL_RCC_SetSMPSClockSource>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <LL_RCC_SetSMPSPrescaler>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <LL_RCC_SetUSARTClockSource>:
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f023 0203 	bic.w	r2, r3, #3
 8004c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <LL_RCC_SetLPUARTClockSource>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <LL_RCC_SetI2CClockSource>:
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c90:	43db      	mvns	r3, r3
 8004c92:	401a      	ands	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LL_RCC_SetLPTIMClockSource>:
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	401a      	ands	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <LL_RCC_SetSAIClockSource>:
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_RCC_SetRNGClockSource>:
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <LL_RCC_SetCLK48ClockSource>:
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <LL_RCC_SetUSBClockSource>:
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ffe3 	bl	8004d3e <LL_RCC_SetCLK48ClockSource>
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <LL_RCC_SetADCClockSource>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_RCC_SetRTCClockSource>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <LL_RCC_GetRTCClockSource>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_RCC_ForceBackupDomainReset>:
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e0a:	bf00      	nop
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_RCC_PLLSAI1_Enable>:
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e48:	6013      	str	r3, [r2, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <LL_RCC_PLLSAI1_Disable>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e66:	6013      	str	r3, [r2, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_RCC_PLLSAI1_IsReady>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e84:	d101      	bne.n	8004e8a <LL_RCC_PLLSAI1_IsReady+0x18>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b088      	sub	sp, #32
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d034      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eba:	d021      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004ebc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ec0:	d81b      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ec6:	d01d      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004ec8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ecc:	d815      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed6:	d110      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ee8:	e00d      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f947 	bl	8005182 <RCCEx_PLLSAI1_ConfigNP>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ef8:	e005      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	77fb      	strb	r3, [r7, #31]
        break;
 8004efe:	e002      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004f00:	bf00      	nop
 8004f02:	e000      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fee8 	bl	8004ce6 <LL_RCC_SetSAIClockSource>
 8004f16:	e001      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	7ffb      	ldrb	r3, [r7, #31]
 8004f1a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d046      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004f28:	f7ff ff56 	bl	8004dd8 <LL_RCC_GetRTCClockSource>
 8004f2c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d03c      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f38:	f7fe fcac 	bl	8003894 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ff30 	bl	8004dac <LL_RCC_SetRTCClockSource>
 8004f4c:	e02e      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004f58:	f7ff ff4b 	bl	8004df2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004f5c:	f7ff ff5a 	bl	8004e14 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004f78:	f7ff fdf0 	bl	8004b5c <LL_RCC_LSE_IsEnabled>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d114      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f82:	f7fd ff07 	bl	8002d94 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004f88:	e00b      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8a:	f7fd ff03 	bl	8002d94 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d902      	bls.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	77fb      	strb	r3, [r7, #31]
              break;
 8004fa0:	e004      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004fa2:	f7ff fded 	bl	8004b80 <LL_RCC_LSE_IsReady>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d1ee      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004fac:	7ffb      	ldrb	r3, [r7, #31]
 8004fae:	77bb      	strb	r3, [r7, #30]
 8004fb0:	e001      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb2:	7ffb      	ldrb	r3, [r7, #31]
 8004fb4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d004      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fe2a 	bl	8004c20 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fe35 	bl	8004c4c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d004      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fe5d 	bl	8004cb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fe52 	bl	8004cb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fe2a 	bl	8004c78 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fe1f 	bl	8004c78 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d022      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fe8d 	bl	8004d6a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005058:	d107      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005068:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005072:	d10b      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f8dd 	bl	8005238 <RCCEx_PLLSAI1_ConfigNQ>
 800507e:	4603      	mov	r3, r0
 8005080:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005082:	7ffb      	ldrb	r3, [r7, #31]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005088:	7ffb      	ldrb	r3, [r7, #31]
 800508a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02b      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d008      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050aa:	d003      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fe2a 	bl	8004d12 <LL_RCC_SetRNGClockSource>
 80050be:	e00a      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	2000      	movs	r0, #0
 80050cc:	f7ff fe21 	bl	8004d12 <LL_RCC_SetRNGClockSource>
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f7ff fe34 	bl	8004d3e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80050de:	d107      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d022      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fe3d 	bl	8004d80 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510e:	d107      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005128:	d10b      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3304      	adds	r3, #4
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f8dd 	bl	80052ee <RCCEx_PLLSAI1_ConfigNR>
 8005134:	4603      	mov	r3, r0
 8005136:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005138:	7ffb      	ldrb	r3, [r7, #31]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800513e:	7ffb      	ldrb	r3, [r7, #31]
 8005140:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fd26 	bl	8004ba4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff fd45 	bl	8004bf8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fd2c 	bl	8004bd0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005178:	7fbb      	ldrb	r3, [r7, #30]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800518e:	f7ff fe61 	bl	8004e54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005192:	f7fd fdff 	bl	8002d94 <HAL_GetTick>
 8005196:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005198:	e009      	b.n	80051ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800519a:	f7fd fdfb 	bl	8002d94 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d902      	bls.n	80051ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	73fb      	strb	r3, [r7, #15]
      break;
 80051ac:	e004      	b.n	80051b8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80051ae:	f7ff fe60 	bl	8004e72 <LL_RCC_PLLSAI1_IsReady>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d137      	bne.n	800522e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80051be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d2:	4313      	orrs	r3, r2
 80051d4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80051d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051e8:	4313      	orrs	r3, r2
 80051ea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80051ec:	f7ff fe23 	bl	8004e36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f0:	f7fd fdd0 	bl	8002d94 <HAL_GetTick>
 80051f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051f6:	e009      	b.n	800520c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051f8:	f7fd fdcc 	bl	8002d94 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d902      	bls.n	800520c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	73fb      	strb	r3, [r7, #15]
        break;
 800520a:	e004      	b.n	8005216 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800520c:	f7ff fe31 	bl	8004e72 <LL_RCC_PLLSAI1_IsReady>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d1f0      	bne.n	80051f8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d108      	bne.n	800522e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800521c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800522a:	4313      	orrs	r3, r2
 800522c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005244:	f7ff fe06 	bl	8004e54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005248:	f7fd fda4 	bl	8002d94 <HAL_GetTick>
 800524c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800524e:	e009      	b.n	8005264 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005250:	f7fd fda0 	bl	8002d94 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d902      	bls.n	8005264 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	73fb      	strb	r3, [r7, #15]
      break;
 8005262:	e004      	b.n	800526e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005264:	f7ff fe05 	bl	8004e72 <LL_RCC_PLLSAI1_IsReady>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d137      	bne.n	80052e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005288:	4313      	orrs	r3, r2
 800528a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800529e:	4313      	orrs	r3, r2
 80052a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80052a2:	f7ff fdc8 	bl	8004e36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a6:	f7fd fd75 	bl	8002d94 <HAL_GetTick>
 80052aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052ac:	e009      	b.n	80052c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052ae:	f7fd fd71 	bl	8002d94 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d902      	bls.n	80052c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	73fb      	strb	r3, [r7, #15]
        break;
 80052c0:	e004      	b.n	80052cc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052c2:	f7ff fdd6 	bl	8004e72 <LL_RCC_PLLSAI1_IsReady>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d1f0      	bne.n	80052ae <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80052d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80052fa:	f7ff fdab 	bl	8004e54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052fe:	f7fd fd49 	bl	8002d94 <HAL_GetTick>
 8005302:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005304:	e009      	b.n	800531a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005306:	f7fd fd45 	bl	8002d94 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d902      	bls.n	800531a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	73fb      	strb	r3, [r7, #15]
      break;
 8005318:	e004      	b.n	8005324 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800531a:	f7ff fdaa 	bl	8004e72 <LL_RCC_PLLSAI1_IsReady>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1f0      	bne.n	8005306 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d137      	bne.n	800539a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800532a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800533e:	4313      	orrs	r3, r2
 8005340:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005354:	4313      	orrs	r3, r2
 8005356:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005358:	f7ff fd6d 	bl	8004e36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535c:	f7fd fd1a 	bl	8002d94 <HAL_GetTick>
 8005360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005362:	e009      	b.n	8005378 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005364:	f7fd fd16 	bl	8002d94 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d902      	bls.n	8005378 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	73fb      	strb	r3, [r7, #15]
        break;
 8005376:	e004      	b.n	8005382 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005378:	f7ff fd7b 	bl	8004e72 <LL_RCC_PLLSAI1_IsReady>
 800537c:	4603      	mov	r3, r0
 800537e:	2b01      	cmp	r3, #1
 8005380:	d1f0      	bne.n	8005364 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005396:	4313      	orrs	r3, r2
 8005398:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800539a:	7bfb      	ldrb	r3, [r7, #15]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e09f      	b.n	80054f6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fc fd80 	bl	8001ed0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80053d8:	4b49      	ldr	r3, [pc, #292]	; (8005500 <HAL_RTC_Init+0x15c>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d07e      	beq.n	80054e2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	22ca      	movs	r2, #202	; 0xca
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2253      	movs	r2, #83	; 0x53
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f8ab 	bl	8005550 <RTC_EnterInitMode>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	22ff      	movs	r2, #255	; 0xff
 8005406:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2204      	movs	r2, #4
 800540c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
 8005414:	e067      	b.n	80054e6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005428:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6899      	ldr	r1, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68d2      	ldr	r2, [r2, #12]
 8005450:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6919      	ldr	r1, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	041a      	lsls	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005474:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0203 	bic.w	r2, r2, #3
 8005484:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d113      	bne.n	80054d4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f829 	bl	8005504 <HAL_RTC_WaitForSynchro>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00d      	beq.n	80054d4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2204      	movs	r2, #4
 80054c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e010      	b.n	80054f6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	22ff      	movs	r2, #255	; 0xff
 80054da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	73fb      	strb	r3, [r7, #15]
 80054e0:	e001      	b.n	80054e6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d103      	bne.n	80054f4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40002800 	.word	0x40002800

08005504 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800551a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800551c:	f7fd fc3a 	bl	8002d94 <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005522:	e009      	b.n	8005538 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005524:	f7fd fc36 	bl	8002d94 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005532:	d901      	bls.n	8005538 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e007      	b.n	8005548 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ee      	beq.n	8005524 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d119      	bne.n	800559a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f04f 32ff 	mov.w	r2, #4294967295
 800556e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005570:	f7fd fc10 	bl	8002d94 <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005576:	e009      	b.n	800558c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005578:	f7fd fc0c 	bl	8002d94 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005586:	d901      	bls.n	800558c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e007      	b.n	800559c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0ee      	beq.n	8005578 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e0a8      	b.n	8005710 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	22ca      	movs	r2, #202	; 0xca
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2253      	movs	r2, #83	; 0x53
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80055ec:	f7fd fbd2 	bl	8002d94 <HAL_GetTick>
 80055f0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80055f2:	e015      	b.n	8005620 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055f4:	f7fd fbce 	bl	8002d94 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005602:	d90d      	bls.n	8005620 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	22ff      	movs	r2, #255	; 0xff
 800560a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2203      	movs	r2, #3
 8005610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e077      	b.n	8005710 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e2      	bne.n	80055f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800564e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005650:	f7fd fba0 	bl	8002d94 <HAL_GetTick>
 8005654:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005656:	e015      	b.n	8005684 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005658:	f7fd fb9c 	bl	8002d94 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005666:	d90d      	bls.n	8005684 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	22ff      	movs	r2, #255	; 0xff
 800566e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2203      	movs	r2, #3
 8005674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e045      	b.n	8005710 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0e2      	beq.n	8005658 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0207 	bic.w	r2, r2, #7
 80056a8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6899      	ldr	r1, [r3, #8]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80056ba:	4b17      	ldr	r3, [pc, #92]	; (8005718 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80056bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c0:	4a15      	ldr	r2, [pc, #84]	; (8005718 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80056c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80056ca:	4b13      	ldr	r3, [pc, #76]	; (8005718 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a12      	ldr	r2, [pc, #72]	; (8005718 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80056d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056f4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	22ff      	movs	r2, #255	; 0xff
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	58000800 	.word	0x58000800

0800571c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e095      	b.n	800585a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b00      	cmp	r3, #0
 8005734:	d108      	bne.n	8005748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800573e:	d009      	beq.n	8005754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	61da      	str	r2, [r3, #28]
 8005746:	e005      	b.n	8005754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fc fbe2 	bl	8001f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800578a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005794:	d902      	bls.n	800579c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e002      	b.n	80057a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800579c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80057aa:	d007      	beq.n	80057bc <HAL_SPI_Init+0xa0>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	ea42 0103 	orr.w	r1, r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	0c1b      	lsrs	r3, r3, #16
 8005818:	f003 0204 	and.w	r2, r3, #4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005838:	ea42 0103 	orr.w	r1, r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b088      	sub	sp, #32
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	603b      	str	r3, [r7, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_SPI_Transmit+0x22>
 8005880:	2302      	movs	r3, #2
 8005882:	e158      	b.n	8005b36 <HAL_SPI_Transmit+0x2d4>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800588c:	f7fd fa82 	bl	8002d94 <HAL_GetTick>
 8005890:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d002      	beq.n	80058a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
 80058a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058a6:	e13d      	b.n	8005b24 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_Transmit+0x52>
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058b8:	e134      	b.n	8005b24 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2203      	movs	r2, #3
 80058be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005904:	d10f      	bne.n	8005926 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005914:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005924:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d007      	beq.n	8005944 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005942:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800594c:	d94b      	bls.n	80059e6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_SPI_Transmit+0xfa>
 8005956:	8afb      	ldrh	r3, [r7, #22]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d13e      	bne.n	80059da <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	881a      	ldrh	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	1c9a      	adds	r2, r3, #2
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005980:	e02b      	b.n	80059da <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d112      	bne.n	80059b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	881a      	ldrh	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	1c9a      	adds	r2, r3, #2
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059b4:	e011      	b.n	80059da <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b6:	f7fd f9ed 	bl	8002d94 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d803      	bhi.n	80059ce <HAL_SPI_Transmit+0x16c>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d102      	bne.n	80059d4 <HAL_SPI_Transmit+0x172>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059d8:	e0a4      	b.n	8005b24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ce      	bne.n	8005982 <HAL_SPI_Transmit+0x120>
 80059e4:	e07c      	b.n	8005ae0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_SPI_Transmit+0x192>
 80059ee:	8afb      	ldrh	r3, [r7, #22]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d170      	bne.n	8005ad6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d912      	bls.n	8005a24 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	881a      	ldrh	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	1c9a      	adds	r2, r3, #2
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b02      	subs	r3, #2
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a22:	e058      	b.n	8005ad6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	330c      	adds	r3, #12
 8005a2e:	7812      	ldrb	r2, [r2, #0]
 8005a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a4a:	e044      	b.n	8005ad6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d12b      	bne.n	8005ab2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d912      	bls.n	8005a8a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	881a      	ldrh	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	1c9a      	adds	r2, r3, #2
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b02      	subs	r3, #2
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a88:	e025      	b.n	8005ad6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ab0:	e011      	b.n	8005ad6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab2:	f7fd f96f 	bl	8002d94 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d803      	bhi.n	8005aca <HAL_SPI_Transmit+0x268>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d102      	bne.n	8005ad0 <HAL_SPI_Transmit+0x26e>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ad4:	e026      	b.n	8005b24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1b5      	bne.n	8005a4c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fdf7 	bl	80066d8 <SPI_EndRxTxTransaction>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e000      	b.n	8005b24 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b088      	sub	sp, #32
 8005b42:	af02      	add	r7, sp, #8
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	603b      	str	r3, [r7, #0]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5a:	d112      	bne.n	8005b82 <HAL_SPI_Receive+0x44>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10e      	bne.n	8005b82 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2204      	movs	r2, #4
 8005b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	4613      	mov	r3, r2
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f910 	bl	8005d9e <HAL_SPI_TransmitReceive>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	e109      	b.n	8005d96 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_SPI_Receive+0x52>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e102      	b.n	8005d96 <HAL_SPI_Receive+0x258>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b98:	f7fd f8fc 	bl	8002d94 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d002      	beq.n	8005bb0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005baa:	2302      	movs	r3, #2
 8005bac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bae:	e0e9      	b.n	8005d84 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_SPI_Receive+0x7e>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bc0:	e0e0      	b.n	8005d84 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	88fa      	ldrh	r2, [r7, #6]
 8005bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c0c:	d908      	bls.n	8005c20 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	e007      	b.n	8005c30 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c38:	d10f      	bne.n	8005c5a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d007      	beq.n	8005c78 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c80:	d867      	bhi.n	8005d52 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c82:	e030      	b.n	8005ce6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d117      	bne.n	8005cc2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f103 020c 	add.w	r2, r3, #12
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005cc0:	e011      	b.n	8005ce6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cc2:	f7fd f867 	bl	8002d94 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d803      	bhi.n	8005cda <HAL_SPI_Receive+0x19c>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d102      	bne.n	8005ce0 <HAL_SPI_Receive+0x1a2>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ce4:	e04e      	b.n	8005d84 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1c8      	bne.n	8005c84 <HAL_SPI_Receive+0x146>
 8005cf2:	e034      	b.n	8005d5e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d115      	bne.n	8005d2e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	b292      	uxth	r2, r2
 8005d0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	1c9a      	adds	r2, r3, #2
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d2c:	e011      	b.n	8005d52 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d2e:	f7fd f831 	bl	8002d94 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d803      	bhi.n	8005d46 <HAL_SPI_Receive+0x208>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d102      	bne.n	8005d4c <HAL_SPI_Receive+0x20e>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d50:	e018      	b.n	8005d84 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1ca      	bne.n	8005cf4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fc60 	bl	8006628 <SPI_EndRxTransaction>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	75fb      	strb	r3, [r7, #23]
 8005d80:	e000      	b.n	8005d84 <HAL_SPI_Receive+0x246>
  }

error :
 8005d82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b08a      	sub	sp, #40	; 0x28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
 8005daa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dac:	2301      	movs	r3, #1
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_SPI_TransmitReceive+0x26>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e1fb      	b.n	80061bc <HAL_SPI_TransmitReceive+0x41e>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dcc:	f7fc ffe2 	bl	8002d94 <HAL_GetTick>
 8005dd0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dd8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005de0:	887b      	ldrh	r3, [r7, #2]
 8005de2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005de4:	887b      	ldrh	r3, [r7, #2]
 8005de6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005de8:	7efb      	ldrb	r3, [r7, #27]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d00e      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x6e>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005df4:	d106      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x66>
 8005dfe:	7efb      	ldrb	r3, [r7, #27]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d003      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e0a:	e1cd      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <HAL_SPI_TransmitReceive+0x80>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_SPI_TransmitReceive+0x80>
 8005e18:	887b      	ldrh	r3, [r7, #2]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d103      	bne.n	8005e26 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e24:	e1c0      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d003      	beq.n	8005e3a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2205      	movs	r2, #5
 8005e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	887a      	ldrh	r2, [r7, #2]
 8005e4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	887a      	ldrh	r2, [r7, #2]
 8005e60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	887a      	ldrh	r2, [r7, #2]
 8005e66:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e7c:	d802      	bhi.n	8005e84 <HAL_SPI_TransmitReceive+0xe6>
 8005e7e:	8a3b      	ldrh	r3, [r7, #16]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d908      	bls.n	8005e96 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e92:	605a      	str	r2, [r3, #4]
 8005e94:	e007      	b.n	8005ea6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	d007      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ecc:	d97c      	bls.n	8005fc8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x13e>
 8005ed6:	8a7b      	ldrh	r3, [r7, #18]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d169      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	881a      	ldrh	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	1c9a      	adds	r2, r3, #2
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f00:	e056      	b.n	8005fb0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d11b      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x1aa>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d016      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x1aa>
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d113      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	881a      	ldrh	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	1c9a      	adds	r2, r3, #2
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d11c      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x1f2>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d016      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	1c9a      	adds	r2, r3, #2
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f90:	f7fc ff00 	bl	8002d94 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d807      	bhi.n	8005fb0 <HAL_SPI_TransmitReceive+0x212>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d003      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005fae:	e0fb      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1a3      	bne.n	8005f02 <HAL_SPI_TransmitReceive+0x164>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d19d      	bne.n	8005f02 <HAL_SPI_TransmitReceive+0x164>
 8005fc6:	e0df      	b.n	8006188 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x23a>
 8005fd0:	8a7b      	ldrh	r3, [r7, #18]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	f040 80cb 	bne.w	800616e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d912      	bls.n	8006008 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	881a      	ldrh	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	1c9a      	adds	r2, r3, #2
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b02      	subs	r3, #2
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006006:	e0b2      	b.n	800616e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	7812      	ldrb	r2, [r2, #0]
 8006014:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800602e:	e09e      	b.n	800616e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b02      	cmp	r3, #2
 800603c:	d134      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x30a>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d02f      	beq.n	80060a8 <HAL_SPI_TransmitReceive+0x30a>
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	2b01      	cmp	r3, #1
 800604c:	d12c      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d912      	bls.n	800607e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	881a      	ldrh	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	1c9a      	adds	r2, r3, #2
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b02      	subs	r3, #2
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800607c:	e012      	b.n	80060a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	330c      	adds	r3, #12
 8006088:	7812      	ldrb	r2, [r2, #0]
 800608a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d148      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x3aa>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d042      	beq.n	8006148 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d923      	bls.n	8006116 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	b292      	uxth	r2, r2
 80060da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b02      	subs	r3, #2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d81f      	bhi.n	8006144 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	e016      	b.n	8006144 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f103 020c 	add.w	r2, r3, #12
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	7812      	ldrb	r2, [r2, #0]
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006144:	2301      	movs	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006148:	f7fc fe24 	bl	8002d94 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006154:	429a      	cmp	r2, r3
 8006156:	d803      	bhi.n	8006160 <HAL_SPI_TransmitReceive+0x3c2>
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615e:	d102      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x3c8>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800616c:	e01c      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	f47f af5b 	bne.w	8006030 <HAL_SPI_TransmitReceive+0x292>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	f47f af54 	bne.w	8006030 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 faa3 	bl	80066d8 <SPI_EndRxTxTransaction>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d006      	beq.n	80061a6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2220      	movs	r2, #32
 80061a2:	661a      	str	r2, [r3, #96]	; 0x60
 80061a4:	e000      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80061a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3728      	adds	r7, #40	; 0x28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10e      	bne.n	8006204 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d004      	beq.n	8006204 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
    return;
 8006202:	e0ce      	b.n	80063a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d009      	beq.n	8006222 <HAL_SPI_IRQHandler+0x5e>
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	4798      	blx	r3
    return;
 8006220:	e0bf      	b.n	80063a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <HAL_SPI_IRQHandler+0x7e>
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d105      	bne.n	8006242 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80b0 	beq.w	80063a2 <HAL_SPI_IRQHandler+0x1de>
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80aa 	beq.w	80063a2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d023      	beq.n	80062a0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b03      	cmp	r3, #3
 8006262:	d011      	beq.n	8006288 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006268:	f043 0204 	orr.w	r2, r3, #4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	e00b      	b.n	80062a0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006288:	2300      	movs	r3, #0
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	693b      	ldr	r3, [r7, #16]
        return;
 800629e:	e080      	b.n	80063a2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d014      	beq.n	80062d4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ae:	f043 0201 	orr.w	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00c      	beq.n	80062f8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e2:	f043 0208 	orr.w	r2, r3, #8
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d04f      	beq.n	80063a0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800630e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d104      	bne.n	800632c <HAL_SPI_IRQHandler+0x168>
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d034      	beq.n	8006396 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0203 	bic.w	r2, r2, #3
 800633a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006340:	2b00      	cmp	r3, #0
 8006342:	d011      	beq.n	8006368 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006348:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <HAL_SPI_IRQHandler+0x1e4>)
 800634a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	4618      	mov	r0, r3
 8006352:	f7fc ff47 	bl	80031e4 <HAL_DMA_Abort_IT>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006360:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	2b00      	cmp	r3, #0
 800636e:	d016      	beq.n	800639e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	4a0c      	ldr	r2, [pc, #48]	; (80063a8 <HAL_SPI_IRQHandler+0x1e4>)
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	4618      	mov	r0, r3
 800637e:	f7fc ff31 	bl	80031e4 <HAL_DMA_Abort_IT>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006394:	e003      	b.n	800639e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f808 	bl	80063ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800639c:	e000      	b.n	80063a0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800639e:	bf00      	nop
    return;
 80063a0:	bf00      	nop
  }
}
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	080063c1 	.word	0x080063c1

080063ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff ffe5 	bl	80063ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063fc:	f7fc fcca 	bl	8002d94 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	4413      	add	r3, r2
 800640a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800640c:	f7fc fcc2 	bl	8002d94 <HAL_GetTick>
 8006410:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006412:	4b39      	ldr	r3, [pc, #228]	; (80064f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	015b      	lsls	r3, r3, #5
 8006418:	0d1b      	lsrs	r3, r3, #20
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	fb02 f303 	mul.w	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006422:	e054      	b.n	80064ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d050      	beq.n	80064ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800642c:	f7fc fcb2 	bl	8002d94 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	429a      	cmp	r2, r3
 800643a:	d902      	bls.n	8006442 <SPI_WaitFlagStateUntilTimeout+0x56>
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d13d      	bne.n	80064be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006450:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800645a:	d111      	bne.n	8006480 <SPI_WaitFlagStateUntilTimeout+0x94>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006464:	d004      	beq.n	8006470 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646e:	d107      	bne.n	8006480 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006488:	d10f      	bne.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e017      	b.n	80064ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	429a      	cmp	r2, r3
 80064dc:	bf0c      	ite	eq
 80064de:	2301      	moveq	r3, #1
 80064e0:	2300      	movne	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d19b      	bne.n	8006424 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000020 	.word	0x20000020

080064fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800650e:	f7fc fc41 	bl	8002d94 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	1a9b      	subs	r3, r3, r2
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	4413      	add	r3, r2
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800651e:	f7fc fc39 	bl	8002d94 <HAL_GetTick>
 8006522:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800652c:	4b3d      	ldr	r3, [pc, #244]	; (8006624 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	00da      	lsls	r2, r3, #3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	0d1b      	lsrs	r3, r3, #20
 800653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653e:	fb02 f303 	mul.w	r3, r2, r3
 8006542:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006544:	e060      	b.n	8006608 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800654c:	d107      	bne.n	800655e <SPI_WaitFifoStateUntilTimeout+0x62>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800655c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d050      	beq.n	8006608 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006566:	f7fc fc15 	bl	8002d94 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	429a      	cmp	r2, r3
 8006574:	d902      	bls.n	800657c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	2b00      	cmp	r3, #0
 800657a:	d13d      	bne.n	80065f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800658a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006594:	d111      	bne.n	80065ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659e:	d004      	beq.n	80065aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a8:	d107      	bne.n	80065ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c2:	d10f      	bne.n	80065e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e010      	b.n	800661a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	3b01      	subs	r3, #1
 8006606:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d196      	bne.n	8006546 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3728      	adds	r7, #40	; 0x28
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000020 	.word	0x20000020

08006628 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663c:	d111      	bne.n	8006662 <SPI_EndRxTransaction+0x3a>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006646:	d004      	beq.n	8006652 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006650:	d107      	bne.n	8006662 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006660:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2200      	movs	r2, #0
 800666a:	2180      	movs	r1, #128	; 0x80
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7ff febd 	bl	80063ec <SPI_WaitFlagStateUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667c:	f043 0220 	orr.w	r2, r3, #32
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e023      	b.n	80066d0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006690:	d11d      	bne.n	80066ce <SPI_EndRxTransaction+0xa6>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669a:	d004      	beq.n	80066a6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a4:	d113      	bne.n	80066ce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff ff22 	bl	80064fc <SPI_WaitFifoStateUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c2:	f043 0220 	orr.w	r2, r3, #32
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e000      	b.n	80066d0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff03 	bl	80064fc <SPI_WaitFifoStateUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006700:	f043 0220 	orr.w	r2, r3, #32
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e027      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	2180      	movs	r1, #128	; 0x80
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff fe68 	bl	80063ec <SPI_WaitFlagStateUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	f043 0220 	orr.w	r2, r3, #32
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e014      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2200      	movs	r2, #0
 800673a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff fedc 	bl	80064fc <SPI_WaitFifoStateUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674e:	f043 0220 	orr.w	r2, r3, #32
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e000      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b0ba      	sub	sp, #232	; 0xe8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800678a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800678e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006792:	4013      	ands	r3, r2
 8006794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11b      	bne.n	80067d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d015      	beq.n	80067d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d105      	bne.n	80067c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 82e3 	beq.w	8006d94 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
      }
      return;
 80067d6:	e2dd      	b.n	8006d94 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8123 	beq.w	8006a28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80067e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80067e6:	4b8d      	ldr	r3, [pc, #564]	; (8006a1c <HAL_UART_IRQHandler+0x2b8>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80067ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80067f2:	4b8b      	ldr	r3, [pc, #556]	; (8006a20 <HAL_UART_IRQHandler+0x2bc>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8116 	beq.w	8006a28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d011      	beq.n	800682c <HAL_UART_IRQHandler+0xc8>
 8006808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2201      	movs	r2, #1
 800681a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f043 0201 	orr.w	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800682c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d011      	beq.n	800685c <HAL_UART_IRQHandler+0xf8>
 8006838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2202      	movs	r2, #2
 800684a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006852:	f043 0204 	orr.w	r2, r3, #4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800685c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d011      	beq.n	800688c <HAL_UART_IRQHandler+0x128>
 8006868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2204      	movs	r2, #4
 800687a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006882:	f043 0202 	orr.w	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80068a8:	4b5c      	ldr	r3, [pc, #368]	; (8006a1c <HAL_UART_IRQHandler+0x2b8>)
 80068aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2208      	movs	r2, #8
 80068b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	f043 0208 	orr.w	r2, r3, #8
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d012      	beq.n	80068fa <HAL_UART_IRQHandler+0x196>
 80068d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00c      	beq.n	80068fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8249 	beq.w	8006d98 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d013      	beq.n	800693a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d105      	bne.n	800692a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800691e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d005      	beq.n	800695e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006956:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800695a:	2b00      	cmp	r3, #0
 800695c:	d054      	beq.n	8006a08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa44 	bl	8006dec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d146      	bne.n	8006a00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800698c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3308      	adds	r3, #8
 800699a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800699e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1d9      	bne.n	8006972 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d017      	beq.n	80069f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ce:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <HAL_UART_IRQHandler+0x2c0>)
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fc fc03 	bl	80031e4 <HAL_DMA_Abort_IT>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d019      	beq.n	8006a18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80069f2:	4610      	mov	r0, r2
 80069f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f6:	e00f      	b.n	8006a18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f9e1 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fe:	e00b      	b.n	8006a18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f9dd 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a06:	e007      	b.n	8006a18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f9d9 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006a16:	e1bf      	b.n	8006d98 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a18:	bf00      	nop
    return;
 8006a1a:	e1bd      	b.n	8006d98 <HAL_UART_IRQHandler+0x634>
 8006a1c:	10000001 	.word	0x10000001
 8006a20:	04000120 	.word	0x04000120
 8006a24:	08006eb9 	.word	0x08006eb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	f040 8153 	bne.w	8006cd8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 814c 	beq.w	8006cd8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8145 	beq.w	8006cd8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2210      	movs	r2, #16
 8006a54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b40      	cmp	r3, #64	; 0x40
 8006a62:	f040 80bb 	bne.w	8006bdc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 818f 	beq.w	8006d9c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	f080 8187 	bcs.w	8006d9c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f040 8087 	bne.w	8006bba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ada:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1da      	bne.n	8006aac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3308      	adds	r3, #8
 8006afc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b08:	f023 0301 	bic.w	r3, r3, #1
 8006b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3308      	adds	r3, #8
 8006b16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e1      	bne.n	8006af6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3308      	adds	r3, #8
 8006b52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e3      	bne.n	8006b32 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b88:	f023 0310 	bic.w	r3, r3, #16
 8006b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e4      	bne.n	8006b78 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fc fab6 	bl	8003126 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f8fd 	bl	8006dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bda:	e0df      	b.n	8006d9c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 80d1 	beq.w	8006da0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006bfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80cc 	beq.w	8006da0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e4      	bne.n	8006c08 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3308      	adds	r3, #8
 8006c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c66:	633a      	str	r2, [r7, #48]	; 0x30
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e1      	bne.n	8006c3e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0310 	bic.w	r3, r3, #16
 8006ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	69b9      	ldr	r1, [r7, #24]
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e4      	bne.n	8006c8e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f87f 	bl	8006dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cd6:	e063      	b.n	8006da0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00e      	beq.n	8006d02 <HAL_UART_IRQHandler+0x59e>
 8006ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f91d 	bl	8006f3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d00:	e051      	b.n	8006da6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d014      	beq.n	8006d38 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d105      	bne.n	8006d26 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d03a      	beq.n	8006da4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	4798      	blx	r3
    }
    return;
 8006d36:	e035      	b.n	8006da4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <HAL_UART_IRQHandler+0x5f4>
 8006d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f8c7 	bl	8006ee4 <UART_EndTransmit_IT>
    return;
 8006d56:	e026      	b.n	8006da6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <HAL_UART_IRQHandler+0x614>
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f8f6 	bl	8006f62 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d76:	e016      	b.n	8006da6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d010      	beq.n	8006da6 <HAL_UART_IRQHandler+0x642>
 8006d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da0c      	bge.n	8006da6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f8de 	bl	8006f4e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d92:	e008      	b.n	8006da6 <HAL_UART_IRQHandler+0x642>
      return;
 8006d94:	bf00      	nop
 8006d96:	e006      	b.n	8006da6 <HAL_UART_IRQHandler+0x642>
    return;
 8006d98:	bf00      	nop
 8006d9a:	e004      	b.n	8006da6 <HAL_UART_IRQHandler+0x642>
      return;
 8006d9c:	bf00      	nop
 8006d9e:	e002      	b.n	8006da6 <HAL_UART_IRQHandler+0x642>
      return;
 8006da0:	bf00      	nop
 8006da2:	e000      	b.n	8006da6 <HAL_UART_IRQHandler+0x642>
    return;
 8006da4:	bf00      	nop
  }
}
 8006da6:	37e8      	adds	r7, #232	; 0xe8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b095      	sub	sp, #84	; 0x54
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e12:	643b      	str	r3, [r7, #64]	; 0x40
 8006e14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e6      	bne.n	8006df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e3      	bne.n	8006e26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d118      	bne.n	8006e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f023 0310 	bic.w	r3, r3, #16
 8006e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6979      	ldr	r1, [r7, #20]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	613b      	str	r3, [r7, #16]
   return(result);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e6      	bne.n	8006e66 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006eac:	bf00      	nop
 8006eae:	3754      	adds	r7, #84	; 0x54
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff ff72 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b088      	sub	sp, #32
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f00:	61fb      	str	r3, [r7, #28]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6979      	ldr	r1, [r7, #20]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	613b      	str	r3, [r7, #16]
   return(result);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e6      	bne.n	8006eec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff ff3d 	bl	8006dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f32:	bf00      	nop
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b088      	sub	sp, #32
 8006f7a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f80:	f107 0308 	add.w	r3, r7, #8
 8006f84:	2218      	movs	r2, #24
 8006f86:	2100      	movs	r1, #0
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 f8d8 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f8e:	233f      	movs	r3, #63	; 0x3f
 8006f90:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006f92:	2381      	movs	r3, #129	; 0x81
 8006f94:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006f96:	1dfb      	adds	r3, r7, #7
 8006f98:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 fb53 	bl	8008650 <hci_send_req>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	da01      	bge.n	8006fb4 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006fb0:	23ff      	movs	r3, #255	; 0xff
 8006fb2:	e000      	b.n	8006fb6 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006fbe:	b5b0      	push	{r4, r5, r7, lr}
 8006fc0:	b0ce      	sub	sp, #312	; 0x138
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4619      	mov	r1, r3
 8006fcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fd0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fdc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	801a      	strh	r2, [r3, #0]
 8006fe4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fe8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006fec:	4602      	mov	r2, r0
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ff4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006ff8:	460a      	mov	r2, r1
 8006ffa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006ffc:	f107 0310 	add.w	r3, r7, #16
 8007000:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007004:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007008:	3308      	adds	r3, #8
 800700a:	f107 0210 	add.w	r2, r7, #16
 800700e:	4413      	add	r3, r2
 8007010:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007014:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007018:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800701c:	4413      	add	r3, r2
 800701e:	3309      	adds	r3, #9
 8007020:	f107 0210 	add.w	r2, r7, #16
 8007024:	4413      	add	r3, r2
 8007026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800702a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800702e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007032:	2200      	movs	r2, #0
 8007034:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800703c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007040:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007044:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800704c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007050:	3301      	adds	r3, #1
 8007052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007056:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800705a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800705e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007062:	8812      	ldrh	r2, [r2, #0]
 8007064:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007068:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800706c:	3302      	adds	r3, #2
 800706e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007072:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007076:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800707a:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800707e:	8812      	ldrh	r2, [r2, #0]
 8007080:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007084:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007088:	3302      	adds	r3, #2
 800708a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800708e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007092:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007096:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800709a:	7812      	ldrb	r2, [r2, #0]
 800709c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800709e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070a2:	3301      	adds	r3, #1
 80070a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80070a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070ac:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80070b0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80070b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070b6:	3301      	adds	r3, #1
 80070b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80070bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070c0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80070c4:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80070c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070ca:	3301      	adds	r3, #1
 80070cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80070d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070d4:	3308      	adds	r3, #8
 80070d6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80070da:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80070de:	4618      	mov	r0, r3
 80070e0:	f001 f81d 	bl	800811e <Osal_MemCpy>
    index_input += Local_Name_Length;
 80070e4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80070e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80070ec:	4413      	add	r3, r2
 80070ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80070f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070f6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80070fa:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80070fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007100:	3301      	adds	r3, #1
 8007102:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007106:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800710a:	3301      	adds	r3, #1
 800710c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007110:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007114:	4618      	mov	r0, r3
 8007116:	f001 f802 	bl	800811e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800711a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800711e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007122:	4413      	add	r3, r2
 8007124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007130:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007132:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007136:	3302      	adds	r3, #2
 8007138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800713c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007140:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007144:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007146:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800714a:	3302      	adds	r3, #2
 800714c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007154:	2218      	movs	r2, #24
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fff0 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 800715e:	233f      	movs	r3, #63	; 0x3f
 8007160:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007164:	2383      	movs	r3, #131	; 0x83
 8007166:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800716a:	f107 0310 	add.w	r3, r7, #16
 800716e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007176:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800717a:	f107 030f 	add.w	r3, r7, #15
 800717e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007182:	2301      	movs	r3, #1
 8007184:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007188:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f001 fa5e 	bl	8008650 <hci_send_req>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	da01      	bge.n	800719e <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800719a:	23ff      	movs	r3, #255	; 0xff
 800719c:	e004      	b.n	80071a8 <aci_gap_set_discoverable+0x1ea>
  return status;
 800719e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80071a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80071a6:	781b      	ldrb	r3, [r3, #0]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bdb0      	pop	{r4, r5, r7, pc}

080071b2 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b0cc      	sub	sp, #304	; 0x130
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	4602      	mov	r2, r0
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80071c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80071c4:	f107 0310 	add.w	r3, r7, #16
 80071c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80071cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80071de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071e6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80071ea:	7812      	ldrb	r2, [r2, #0]
 80071ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071f2:	3301      	adds	r3, #1
 80071f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071fc:	2218      	movs	r2, #24
 80071fe:	2100      	movs	r1, #0
 8007200:	4618      	mov	r0, r3
 8007202:	f000 ff9c 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007206:	233f      	movs	r3, #63	; 0x3f
 8007208:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800720c:	2385      	movs	r3, #133	; 0x85
 800720e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007212:	f107 0310 	add.w	r3, r7, #16
 8007216:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800721a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800721e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007222:	f107 030f 	add.w	r3, r7, #15
 8007226:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800722a:	2301      	movs	r3, #1
 800722c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007230:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007234:	2100      	movs	r1, #0
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fa0a 	bl	8008650 <hci_send_req>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	da01      	bge.n	8007246 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007242:	23ff      	movs	r3, #255	; 0xff
 8007244:	e004      	b.n	8007250 <aci_gap_set_io_capability+0x9e>
  return status;
 8007246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800724e:	781b      	ldrb	r3, [r3, #0]
}
 8007250:	4618      	mov	r0, r3
 8007252:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800725a:	b5b0      	push	{r4, r5, r7, lr}
 800725c:	b0cc      	sub	sp, #304	; 0x130
 800725e:	af00      	add	r7, sp, #0
 8007260:	4605      	mov	r5, r0
 8007262:	460c      	mov	r4, r1
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007270:	462a      	mov	r2, r5
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007278:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800727c:	4622      	mov	r2, r4
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007288:	4602      	mov	r2, r0
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007294:	460a      	mov	r2, r1
 8007296:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007298:	f107 0310 	add.w	r3, r7, #16
 800729c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80072a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80072b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072ba:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80072be:	7812      	ldrb	r2, [r2, #0]
 80072c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072c6:	3301      	adds	r3, #1
 80072c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80072cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072d4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80072d8:	7812      	ldrb	r2, [r2, #0]
 80072da:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80072dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e0:	3301      	adds	r3, #1
 80072e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80072e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072ee:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80072f2:	7812      	ldrb	r2, [r2, #0]
 80072f4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80072f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072fa:	3301      	adds	r3, #1
 80072fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007304:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007308:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007310:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007314:	3301      	adds	r3, #1
 8007316:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800731a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731e:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007322:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007328:	3301      	adds	r3, #1
 800732a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800732e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007332:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007336:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007338:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800733c:	3301      	adds	r3, #1
 800733e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007346:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800734a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800734c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007350:	3301      	adds	r3, #1
 8007352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800735e:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007362:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007366:	3304      	adds	r3, #4
 8007368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800736c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007370:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007374:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800737a:	3301      	adds	r3, #1
 800737c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007380:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007384:	2218      	movs	r2, #24
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fed8 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 800738e:	233f      	movs	r3, #63	; 0x3f
 8007390:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007394:	2386      	movs	r3, #134	; 0x86
 8007396:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800739a:	f107 0310 	add.w	r3, r7, #16
 800739e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073aa:	f107 030f 	add.w	r3, r7, #15
 80073ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073bc:	2100      	movs	r1, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 f946 	bl	8008650 <hci_send_req>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	da01      	bge.n	80073ce <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80073ca:	23ff      	movs	r3, #255	; 0xff
 80073cc:	e004      	b.n	80073d8 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80073ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073d6:	781b      	ldrb	r3, [r3, #0]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073de:	46bd      	mov	sp, r7
 80073e0:	bdb0      	pop	{r4, r5, r7, pc}

080073e2 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b0cc      	sub	sp, #304	; 0x130
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	4602      	mov	r2, r0
 80073ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f2:	6019      	str	r1, [r3, #0]
 80073f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80073fc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80073fe:	f107 0310 	add.w	r3, r7, #16
 8007402:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007420:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007424:	8812      	ldrh	r2, [r2, #0]
 8007426:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007428:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800742c:	3302      	adds	r3, #2
 800742e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007436:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800743a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007444:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007448:	3304      	adds	r3, #4
 800744a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800744e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007452:	2218      	movs	r2, #24
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fe71 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 800745c:	233f      	movs	r3, #63	; 0x3f
 800745e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007462:	2388      	movs	r3, #136	; 0x88
 8007464:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007468:	f107 0310 	add.w	r3, r7, #16
 800746c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007470:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007474:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007478:	f107 030f 	add.w	r3, r7, #15
 800747c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007480:	2301      	movs	r3, #1
 8007482:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f001 f8df 	bl	8008650 <hci_send_req>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	da01      	bge.n	800749c <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007498:	23ff      	movs	r3, #255	; 0xff
 800749a:	e004      	b.n	80074a6 <aci_gap_pass_key_resp+0xc4>
  return status;
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074a4:	781b      	ldrb	r3, [r3, #0]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b0cd      	sub	sp, #308	; 0x134
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074c0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80074ce:	4622      	mov	r2, r4
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80074da:	4602      	mov	r2, r0
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80074e6:	460a      	mov	r2, r1
 80074e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80074ea:	f107 0310 	add.w	r3, r7, #16
 80074ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80074f2:	f107 0308 	add.w	r3, r7, #8
 80074f6:	2207      	movs	r2, #7
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fe1f 	bl	800813e <Osal_MemSet>
  int index_input = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800750e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007512:	7812      	ldrb	r2, [r2, #0]
 8007514:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007516:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800751a:	3301      	adds	r3, #1
 800751c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007524:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007528:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800752c:	7812      	ldrb	r2, [r2, #0]
 800752e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007534:	3301      	adds	r3, #1
 8007536:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800753a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007542:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007546:	7812      	ldrb	r2, [r2, #0]
 8007548:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800754a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800754e:	3301      	adds	r3, #1
 8007550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007554:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007558:	2218      	movs	r2, #24
 800755a:	2100      	movs	r1, #0
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fdee 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007562:	233f      	movs	r3, #63	; 0x3f
 8007564:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007568:	238a      	movs	r3, #138	; 0x8a
 800756a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800756e:	f107 0310 	add.w	r3, r7, #16
 8007572:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007576:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800757a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800757e:	f107 0308 	add.w	r3, r7, #8
 8007582:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007586:	2307      	movs	r3, #7
 8007588:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800758c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f001 f85c 	bl	8008650 <hci_send_req>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	da01      	bge.n	80075a2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800759e:	23ff      	movs	r3, #255	; 0xff
 80075a0:	e02e      	b.n	8007600 <aci_gap_init+0x150>
  if ( resp.Status )
 80075a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <aci_gap_init+0x10c>
    return resp.Status;
 80075b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	e021      	b.n	8007600 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80075bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80075c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80075d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80075de:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80075e8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80075ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80075f2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80075fc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007606:	46bd      	mov	sp, r7
 8007608:	bd90      	pop	{r4, r7, pc}

0800760a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b0cc      	sub	sp, #304	; 0x130
 800760e:	af00      	add	r7, sp, #0
 8007610:	4602      	mov	r2, r0
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761a:	6019      	str	r1, [r3, #0]
 800761c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007620:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007624:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007626:	f107 0310 	add.w	r3, r7, #16
 800762a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800762e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007632:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007644:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007648:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800764c:	7812      	ldrb	r2, [r2, #0]
 800764e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007650:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007654:	3301      	adds	r3, #1
 8007656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800765a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765e:	1c58      	adds	r0, r3, #1
 8007660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007664:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	f000 fd53 	bl	800811e <Osal_MemCpy>
  index_input += AdvDataLen;
 8007678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007686:	4413      	add	r3, r2
 8007688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800768c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007690:	2218      	movs	r2, #24
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fd52 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 800769a:	233f      	movs	r3, #63	; 0x3f
 800769c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80076a0:	238e      	movs	r3, #142	; 0x8e
 80076a2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076a6:	f107 0310 	add.w	r3, r7, #16
 80076aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80076b6:	f107 030f 	add.w	r3, r7, #15
 80076ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076be:	2301      	movs	r3, #1
 80076c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076c8:	2100      	movs	r1, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 ffc0 	bl	8008650 <hci_send_req>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	da01      	bge.n	80076da <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80076d6:	23ff      	movs	r3, #255	; 0xff
 80076d8:	e004      	b.n	80076e4 <aci_gap_update_adv_data+0xda>
  return status;
 80076da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076e2:	781b      	ldrb	r3, [r3, #0]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b088      	sub	sp, #32
 80076f2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076f8:	f107 0308 	add.w	r3, r7, #8
 80076fc:	2218      	movs	r2, #24
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fd1c 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007706:	233f      	movs	r3, #63	; 0x3f
 8007708:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800770a:	2392      	movs	r3, #146	; 0x92
 800770c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800770e:	1dfb      	adds	r3, r7, #7
 8007710:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007712:	2301      	movs	r3, #1
 8007714:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007716:	f107 0308 	add.w	r3, r7, #8
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f000 ff97 	bl	8008650 <hci_send_req>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	da01      	bge.n	800772c <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007728:	23ff      	movs	r3, #255	; 0xff
 800772a:	e000      	b.n	800772e <aci_gap_configure_whitelist+0x40>
  return status;
 800772c:	79fb      	ldrb	r3, [r7, #7]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b0cc      	sub	sp, #304	; 0x130
 800773a:	af00      	add	r7, sp, #0
 800773c:	4602      	mov	r2, r0
 800773e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007742:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007750:	460a      	mov	r2, r1
 8007752:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007754:	f107 0310 	add.w	r3, r7, #16
 8007758:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800775c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007760:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800776e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007772:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007776:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800777a:	8812      	ldrh	r2, [r2, #0]
 800777c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800777e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007782:	3302      	adds	r3, #2
 8007784:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007790:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007794:	7812      	ldrb	r2, [r2, #0]
 8007796:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007798:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800779c:	3301      	adds	r3, #1
 800779e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077a6:	2218      	movs	r2, #24
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fcc7 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 80077b0:	233f      	movs	r3, #63	; 0x3f
 80077b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80077b6:	23a5      	movs	r3, #165	; 0xa5
 80077b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80077bc:	f107 0310 	add.w	r3, r7, #16
 80077c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077cc:	f107 030f 	add.w	r3, r7, #15
 80077d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077d4:	2301      	movs	r3, #1
 80077d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 ff35 	bl	8008650 <hci_send_req>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	da01      	bge.n	80077f0 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80077ec:	23ff      	movs	r3, #255	; 0xff
 80077ee:	e004      	b.n	80077fa <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80077f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80077f8:	781b      	ldrb	r3, [r3, #0]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800780e:	f107 0308 	add.w	r3, r7, #8
 8007812:	2218      	movs	r2, #24
 8007814:	2100      	movs	r1, #0
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fc91 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 800781c:	233f      	movs	r3, #63	; 0x3f
 800781e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007820:	f240 1301 	movw	r3, #257	; 0x101
 8007824:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007826:	1dfb      	adds	r3, r7, #7
 8007828:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800782a:	2301      	movs	r3, #1
 800782c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800782e:	f107 0308 	add.w	r3, r7, #8
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f000 ff0b 	bl	8008650 <hci_send_req>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	da01      	bge.n	8007844 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007840:	23ff      	movs	r3, #255	; 0xff
 8007842:	e000      	b.n	8007846 <aci_gatt_init+0x42>
  return status;
 8007844:	79fb      	ldrb	r3, [r7, #7]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800784e:	b590      	push	{r4, r7, lr}
 8007850:	b0cf      	sub	sp, #316	; 0x13c
 8007852:	af00      	add	r7, sp, #0
 8007854:	4604      	mov	r4, r0
 8007856:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800785a:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800785e:	6001      	str	r1, [r0, #0]
 8007860:	4610      	mov	r0, r2
 8007862:	4619      	mov	r1, r3
 8007864:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007868:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800786c:	4622      	mov	r2, r4
 800786e:	701a      	strb	r2, [r3, #0]
 8007870:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007874:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007878:	4602      	mov	r2, r0
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007880:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007884:	460a      	mov	r2, r1
 8007886:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007888:	f107 0310 	add.w	r3, r7, #16
 800788c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007890:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007894:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d00a      	beq.n	80078b4 <aci_gatt_add_service+0x66>
 800789e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80078a2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d101      	bne.n	80078b0 <aci_gatt_add_service+0x62>
 80078ac:	2311      	movs	r3, #17
 80078ae:	e002      	b.n	80078b6 <aci_gatt_add_service+0x68>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <aci_gatt_add_service+0x68>
 80078b4:	2303      	movs	r3, #3
 80078b6:	f107 0210 	add.w	r2, r7, #16
 80078ba:	4413      	add	r3, r2
 80078bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	2203      	movs	r2, #3
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fc38 	bl	800813e <Osal_MemSet>
  int index_input = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80078d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80078d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80078dc:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80078e0:	7812      	ldrb	r2, [r2, #0]
 80078e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80078e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078e8:	3301      	adds	r3, #1
 80078ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80078ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80078f2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d002      	beq.n	8007902 <aci_gatt_add_service+0xb4>
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d004      	beq.n	800790a <aci_gatt_add_service+0xbc>
 8007900:	e007      	b.n	8007912 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007902:	2302      	movs	r3, #2
 8007904:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007908:	e005      	b.n	8007916 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800790a:	2310      	movs	r3, #16
 800790c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007910:	e001      	b.n	8007916 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007912:	2397      	movs	r3, #151	; 0x97
 8007914:	e06c      	b.n	80079f0 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007916:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800791a:	1c58      	adds	r0, r3, #1
 800791c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007920:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007924:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	f000 fbf8 	bl	800811e <Osal_MemCpy>
    index_input += size;
 800792e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007932:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007936:	4413      	add	r3, r2
 8007938:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800793c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007940:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007944:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007948:	7812      	ldrb	r2, [r2, #0]
 800794a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800794c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007950:	3301      	adds	r3, #1
 8007952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800795e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007966:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800796a:	3301      	adds	r3, #1
 800796c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007974:	2218      	movs	r2, #24
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f000 fbe0 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 800797e:	233f      	movs	r3, #63	; 0x3f
 8007980:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007984:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007988:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800798c:	f107 0310 	add.w	r3, r7, #16
 8007990:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007994:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800799c:	f107 030c 	add.w	r3, r7, #12
 80079a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80079a4:	2303      	movs	r3, #3
 80079a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079ae:	2100      	movs	r1, #0
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fe4d 	bl	8008650 <hci_send_req>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	da01      	bge.n	80079c0 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80079bc:	23ff      	movs	r3, #255	; 0xff
 80079be:	e017      	b.n	80079f0 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80079c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <aci_gatt_add_service+0x18c>
    return resp.Status;
 80079ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	e00a      	b.n	80079f0 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80079da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80079ec:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd90      	pop	{r4, r7, pc}

080079fa <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80079fa:	b590      	push	{r4, r7, lr}
 80079fc:	b0d1      	sub	sp, #324	; 0x144
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	4604      	mov	r4, r0
 8007a02:	4608      	mov	r0, r1
 8007a04:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007a08:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8007a0c:	600a      	str	r2, [r1, #0]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a14:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007a18:	4622      	mov	r2, r4
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a20:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007a24:	4602      	mov	r2, r0
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a2c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007a30:	460a      	mov	r2, r1
 8007a32:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007a34:	f107 0318 	add.w	r3, r7, #24
 8007a38:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007a3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a40:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d00a      	beq.n	8007a60 <aci_gatt_add_char+0x66>
 8007a4a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a4e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d101      	bne.n	8007a5c <aci_gatt_add_char+0x62>
 8007a58:	2313      	movs	r3, #19
 8007a5a:	e002      	b.n	8007a62 <aci_gatt_add_char+0x68>
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e000      	b.n	8007a62 <aci_gatt_add_char+0x68>
 8007a60:	2305      	movs	r3, #5
 8007a62:	f107 0218 	add.w	r2, r7, #24
 8007a66:	4413      	add	r3, r2
 8007a68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007a6c:	f107 0314 	add.w	r3, r7, #20
 8007a70:	2203      	movs	r2, #3
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fb62 	bl	800813e <Osal_MemSet>
  int index_input = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007a80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a84:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007a88:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007a8c:	8812      	ldrh	r2, [r2, #0]
 8007a8e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a94:	3302      	adds	r3, #2
 8007a96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007a9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a9e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007aa2:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007aa6:	7812      	ldrb	r2, [r2, #0]
 8007aa8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007aaa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007aae:	3301      	adds	r3, #1
 8007ab0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007ab4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ab8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d002      	beq.n	8007ac8 <aci_gatt_add_char+0xce>
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d004      	beq.n	8007ad0 <aci_gatt_add_char+0xd6>
 8007ac6:	e007      	b.n	8007ad8 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007ac8:	2302      	movs	r3, #2
 8007aca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007ace:	e005      	b.n	8007adc <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007ad6:	e001      	b.n	8007adc <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007ad8:	2397      	movs	r3, #151	; 0x97
 8007ada:	e091      	b.n	8007c00 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007adc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ae0:	1cd8      	adds	r0, r3, #3
 8007ae2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007ae6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007aea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	f000 fb15 	bl	800811e <Osal_MemCpy>
    index_input += size;
 8007af4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007af8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007afc:	4413      	add	r3, r2
 8007afe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007b02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b06:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007b0a:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007b0e:	8812      	ldrh	r2, [r2, #0]
 8007b10:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007b12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b16:	3302      	adds	r3, #2
 8007b18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007b1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b20:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007b24:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007b30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b34:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007b38:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007b3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b3e:	3301      	adds	r3, #1
 8007b40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007b44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b48:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007b4c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007b4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b52:	3301      	adds	r3, #1
 8007b54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007b58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b5c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007b60:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007b62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b66:	3301      	adds	r3, #1
 8007b68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b70:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007b74:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007b76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b84:	2218      	movs	r2, #24
 8007b86:	2100      	movs	r1, #0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 fad8 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b8e:	233f      	movs	r3, #63	; 0x3f
 8007b90:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007b94:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007b98:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007b9c:	f107 0318 	add.w	r3, r7, #24
 8007ba0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007ba4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ba8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007bac:	f107 0314 	add.w	r3, r7, #20
 8007bb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fd45 	bl	8008650 <hci_send_req>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	da01      	bge.n	8007bd0 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007bcc:	23ff      	movs	r3, #255	; 0xff
 8007bce:	e017      	b.n	8007c00 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007bd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007bde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007be2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	e00a      	b.n	8007c00 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007bea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bf2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007bfc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd90      	pop	{r4, r7, pc}

08007c0a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007c0a:	b5b0      	push	{r4, r5, r7, lr}
 8007c0c:	b0cc      	sub	sp, #304	; 0x130
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	4605      	mov	r5, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	4610      	mov	r0, r2
 8007c16:	4619      	mov	r1, r3
 8007c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007c20:	462a      	mov	r2, r5
 8007c22:	801a      	strh	r2, [r3, #0]
 8007c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c2c:	4622      	mov	r2, r4
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c34:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007c38:	4602      	mov	r2, r0
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c40:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007c44:	460a      	mov	r2, r1
 8007c46:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007c48:	f107 0310 	add.w	r3, r7, #16
 8007c4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c54:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c6a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007c6e:	8812      	ldrh	r2, [r2, #0]
 8007c70:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c76:	3302      	adds	r3, #2
 8007c78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c84:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007c88:	8812      	ldrh	r2, [r2, #0]
 8007c8a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c90:	3302      	adds	r3, #2
 8007c92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c9e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007ca2:	7812      	ldrb	r2, [r2, #0]
 8007ca4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007ca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007caa:	3301      	adds	r3, #1
 8007cac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cb8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007cbc:	7812      	ldrb	r2, [r2, #0]
 8007cbe:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cce:	1d98      	adds	r0, r3, #6
 8007cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007ce0:	f000 fa1d 	bl	800811e <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cfc:	2218      	movs	r2, #24
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fa1c 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d06:	233f      	movs	r3, #63	; 0x3f
 8007d08:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007d0c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007d10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d14:	f107 0310 	add.w	r3, r7, #16
 8007d18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d24:	f107 030f 	add.w	r3, r7, #15
 8007d28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fc89 	bl	8008650 <hci_send_req>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	da01      	bge.n	8007d48 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007d44:	23ff      	movs	r3, #255	; 0xff
 8007d46:	e004      	b.n	8007d52 <aci_gatt_update_char_value+0x148>
  return status;
 8007d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d50:	781b      	ldrb	r3, [r3, #0]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bdb0      	pop	{r4, r5, r7, pc}

08007d5c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b0cc      	sub	sp, #304	; 0x130
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d70:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007d74:	4602      	mov	r2, r0
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d80:	460a      	mov	r2, r1
 8007d82:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007d84:	f107 0310 	add.w	r3, r7, #16
 8007d88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d90:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007da6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007daa:	7812      	ldrb	r2, [r2, #0]
 8007dac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007db2:	3301      	adds	r3, #1
 8007db4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dbc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dc0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007dc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dcc:	3301      	adds	r3, #1
 8007dce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd6:	1c98      	adds	r0, r3, #2
 8007dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ddc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dea:	6819      	ldr	r1, [r3, #0]
 8007dec:	f000 f997 	bl	800811e <Osal_MemCpy>
  index_input += Length;
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007dfe:	4413      	add	r3, r2
 8007e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e08:	2218      	movs	r2, #24
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 f996 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e12:	233f      	movs	r3, #63	; 0x3f
 8007e14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007e18:	230c      	movs	r3, #12
 8007e1a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e1e:	f107 0310 	add.w	r3, r7, #16
 8007e22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e2e:	f107 030f 	add.w	r3, r7, #15
 8007e32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e40:	2100      	movs	r1, #0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fc04 	bl	8008650 <hci_send_req>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da01      	bge.n	8007e52 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007e4e:	23ff      	movs	r3, #255	; 0xff
 8007e50:	e004      	b.n	8007e5c <aci_hal_write_config_data+0x100>
  return status;
 8007e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e56:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e5a:	781b      	ldrb	r3, [r3, #0]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b0cc      	sub	sp, #304	; 0x130
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007e76:	701a      	strb	r2, [r3, #0]
 8007e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007e80:	460a      	mov	r2, r1
 8007e82:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007e84:	f107 0310 	add.w	r3, r7, #16
 8007e88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e90:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ea6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007eaa:	7812      	ldrb	r2, [r2, #0]
 8007eac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ebc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ec0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007ec4:	7812      	ldrb	r2, [r2, #0]
 8007ec6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007ec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ecc:	3301      	adds	r3, #1
 8007ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ed2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ed6:	2218      	movs	r2, #24
 8007ed8:	2100      	movs	r1, #0
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 f92f 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ee0:	233f      	movs	r3, #63	; 0x3f
 8007ee2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007ee6:	230f      	movs	r3, #15
 8007ee8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007eec:	f107 0310 	add.w	r3, r7, #16
 8007ef0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ef4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ef8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007efc:	f107 030f 	add.w	r3, r7, #15
 8007f00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 fb9d 	bl	8008650 <hci_send_req>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	da01      	bge.n	8007f20 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007f1c:	23ff      	movs	r3, #255	; 0xff
 8007f1e:	e004      	b.n	8007f2a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f28:	781b      	ldrb	r3, [r3, #0]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b0cc      	sub	sp, #304	; 0x130
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f40:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007f44:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007f46:	f107 0310 	add.w	r3, r7, #16
 8007f4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f52:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f68:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007f6c:	8812      	ldrh	r2, [r2, #0]
 8007f6e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f74:	3302      	adds	r3, #2
 8007f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f7e:	2218      	movs	r2, #24
 8007f80:	2100      	movs	r1, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f8db 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f88:	233f      	movs	r3, #63	; 0x3f
 8007f8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007f8e:	2318      	movs	r3, #24
 8007f90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f94:	f107 0310 	add.w	r3, r7, #16
 8007f98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007fa4:	f107 030f 	add.w	r3, r7, #15
 8007fa8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007fac:	2301      	movs	r3, #1
 8007fae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fb49 	bl	8008650 <hci_send_req>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	da01      	bge.n	8007fc8 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007fc4:	23ff      	movs	r3, #255	; 0xff
 8007fc6:	e004      	b.n	8007fd2 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fcc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007fd0:	781b      	ldrb	r3, [r3, #0]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fe6:	f107 0308 	add.w	r3, r7, #8
 8007fea:	2218      	movs	r2, #24
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 f8a5 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x03;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ffc:	1dfb      	adds	r3, r7, #7
 8007ffe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008000:	2301      	movs	r3, #1
 8008002:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008004:	f107 0308 	add.w	r3, r7, #8
 8008008:	2100      	movs	r1, #0
 800800a:	4618      	mov	r0, r3
 800800c:	f000 fb20 	bl	8008650 <hci_send_req>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	da01      	bge.n	800801a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008016:	23ff      	movs	r3, #255	; 0xff
 8008018:	e000      	b.n	800801c <hci_reset+0x40>
  return status;
 800801a:	79fb      	ldrb	r3, [r7, #7]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3720      	adds	r7, #32
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008024:	b590      	push	{r4, r7, lr}
 8008026:	b0cd      	sub	sp, #308	; 0x134
 8008028:	af00      	add	r7, sp, #0
 800802a:	4604      	mov	r4, r0
 800802c:	4608      	mov	r0, r1
 800802e:	4611      	mov	r1, r2
 8008030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008034:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008038:	4622      	mov	r2, r4
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008040:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008044:	4602      	mov	r2, r0
 8008046:	701a      	strb	r2, [r3, #0]
 8008048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008050:	460a      	mov	r2, r1
 8008052:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008054:	f107 0310 	add.w	r3, r7, #16
 8008058:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800805c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008060:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008064:	2200      	movs	r2, #0
 8008066:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800806e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008072:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008076:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800807a:	7812      	ldrb	r2, [r2, #0]
 800807c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800807e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008082:	3301      	adds	r3, #1
 8008084:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800808c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008090:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008094:	7812      	ldrb	r2, [r2, #0]
 8008096:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008098:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800809c:	3301      	adds	r3, #1
 800809e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80080a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080aa:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80080ae:	7812      	ldrb	r2, [r2, #0]
 80080b0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80080b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080b6:	3301      	adds	r3, #1
 80080b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080c0:	2218      	movs	r2, #24
 80080c2:	2100      	movs	r1, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f83a 	bl	800813e <Osal_MemSet>
  rq.ogf = 0x08;
 80080ca:	2308      	movs	r3, #8
 80080cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80080d0:	2331      	movs	r3, #49	; 0x31
 80080d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80080d6:	f107 0310 	add.w	r3, r7, #16
 80080da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80080e6:	f107 030f 	add.w	r3, r7, #15
 80080ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 faa8 	bl	8008650 <hci_send_req>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	da01      	bge.n	800810a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8008106:	23ff      	movs	r3, #255	; 0xff
 8008108:	e004      	b.n	8008114 <hci_le_set_default_phy+0xf0>
  return status;
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008112:	781b      	ldrb	r3, [r3, #0]
}
 8008114:	4618      	mov	r0, r3
 8008116:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800811a:	46bd      	mov	sp, r7
 800811c:	bd90      	pop	{r4, r7, pc}

0800811e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f002 f9be 	bl	800a4b0 <memcpy>
 8008134:	4603      	mov	r3, r0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	68b9      	ldr	r1, [r7, #8]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f002 f982 	bl	800a458 <memset>
 8008154:	4603      	mov	r3, r0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800815e:	b480      	push	{r7}
 8008160:	af00      	add	r7, sp, #0
  return;
 8008162:	bf00      	nop
}
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  return;
 8008170:	bf00      	nop
}
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800817a:	b480      	push	{r7}
 800817c:	af00      	add	r7, sp, #0
  return;
 800817e:	bf00      	nop
}
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
  return;
 800818c:	bf00      	nop
}
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008196:	b480      	push	{r7}
 8008198:	af00      	add	r7, sp, #0
  return;
 800819a:	bf00      	nop
}
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
  return;
 80081a8:	bf00      	nop
}
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80081b2:	b480      	push	{r7}
 80081b4:	af00      	add	r7, sp, #0
  return;
 80081b6:	bf00      	nop
}
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0
  return;
 80081c4:	bf00      	nop
}
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80081ce:	b480      	push	{r7}
 80081d0:	af00      	add	r7, sp, #0
  return;
 80081d2:	bf00      	nop
}
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  return;
 80081e0:	bf00      	nop
}
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80081ea:	b480      	push	{r7}
 80081ec:	af00      	add	r7, sp, #0
  return;
 80081ee:	bf00      	nop
}
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  return;
 80081fc:	bf00      	nop
}
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008206:	b480      	push	{r7}
 8008208:	af00      	add	r7, sp, #0
  return;
 800820a:	bf00      	nop
}
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
  return;
 8008218:	bf00      	nop
}
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008222:	b480      	push	{r7}
 8008224:	af00      	add	r7, sp, #0
  return;
 8008226:	bf00      	nop
}
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  return;
 8008234:	bf00      	nop
}
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800823e:	b480      	push	{r7}
 8008240:	af00      	add	r7, sp, #0
  return;
 8008242:	bf00      	nop
}
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008250:	4b04      	ldr	r3, [pc, #16]	; (8008264 <SVCCTL_Init+0x18>)
 8008252:	2200      	movs	r2, #0
 8008254:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008256:	4b04      	ldr	r3, [pc, #16]	; (8008268 <SVCCTL_Init+0x1c>)
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800825c:	f000 f806 	bl	800826c <SVCCTL_SvcInit>

  return;
 8008260:	bf00      	nop
}
 8008262:	bd80      	pop	{r7, pc}
 8008264:	200008c4 	.word	0x200008c4
 8008268:	200008e4 	.word	0x200008e4

0800826c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
  BAS_Init();
 8008270:	f7ff ff75 	bl	800815e <BAS_Init>

  BLS_Init();
 8008274:	f7ff ff7a 	bl	800816c <BLS_Init>

  CRS_STM_Init();
 8008278:	f7ff ff7f 	bl	800817a <CRS_STM_Init>

  DIS_Init();
 800827c:	f7ff ff84 	bl	8008188 <DIS_Init>

  EDS_STM_Init();
 8008280:	f7ff ff89 	bl	8008196 <EDS_STM_Init>

  HIDS_Init();
 8008284:	f7ff ff8e 	bl	80081a4 <HIDS_Init>

  HRS_Init();
 8008288:	f7ff ff93 	bl	80081b2 <HRS_Init>

  HTS_Init();
 800828c:	f7ff ff98 	bl	80081c0 <HTS_Init>

  IAS_Init();
 8008290:	f7ff ff9d 	bl	80081ce <IAS_Init>

  LLS_Init();
 8008294:	f7ff ffa2 	bl	80081dc <LLS_Init>

  TPS_Init();
 8008298:	f7ff ffa7 	bl	80081ea <TPS_Init>

  MOTENV_STM_Init();
 800829c:	f7ff ffac 	bl	80081f8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80082a0:	f7ff ffb1 	bl	8008206 <P2PS_STM_Init>

  ZDD_STM_Init();
 80082a4:	f7ff ffb6 	bl	8008214 <ZDD_STM_Init>

  OTAS_STM_Init();
 80082a8:	f7ff ffbb 	bl	8008222 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80082ac:	f7ff ffc7 	bl	800823e <BVOPUS_STM_Init>

  MESH_Init();
 80082b0:	f7ff ffbe 	bl	8008230 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80082b4:	f001 fb20 	bl	80098f8 <SVCCTL_InitCustomSvc>
  
  return;
 80082b8:	bf00      	nop
}
 80082ba:	bd80      	pop	{r7, pc}

080082bc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80082c4:	4b09      	ldr	r3, [pc, #36]	; (80082ec <SVCCTL_RegisterSvcHandler+0x30>)
 80082c6:	7f1b      	ldrb	r3, [r3, #28]
 80082c8:	4619      	mov	r1, r3
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <SVCCTL_RegisterSvcHandler+0x30>)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80082d2:	4b06      	ldr	r3, [pc, #24]	; (80082ec <SVCCTL_RegisterSvcHandler+0x30>)
 80082d4:	7f1b      	ldrb	r3, [r3, #28]
 80082d6:	3301      	adds	r3, #1
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	4b04      	ldr	r3, [pc, #16]	; (80082ec <SVCCTL_RegisterSvcHandler+0x30>)
 80082dc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80082de:	bf00      	nop
}
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	200008c4 	.word	0x200008c4

080082f0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3301      	adds	r3, #1
 80082fc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2bff      	cmp	r3, #255	; 0xff
 8008308:	d125      	bne.n	8008356 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	3302      	adds	r3, #2
 800830e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800831a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800831e:	d118      	bne.n	8008352 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008320:	2300      	movs	r3, #0
 8008322:	757b      	strb	r3, [r7, #21]
 8008324:	e00d      	b.n	8008342 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008326:	7d7b      	ldrb	r3, [r7, #21]
 8008328:	4a1a      	ldr	r2, [pc, #104]	; (8008394 <SVCCTL_UserEvtRx+0xa4>)
 800832a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
 8008332:	4603      	mov	r3, r0
 8008334:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d108      	bne.n	800834e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800833c:	7d7b      	ldrb	r3, [r7, #21]
 800833e:	3301      	adds	r3, #1
 8008340:	757b      	strb	r3, [r7, #21]
 8008342:	4b14      	ldr	r3, [pc, #80]	; (8008394 <SVCCTL_UserEvtRx+0xa4>)
 8008344:	7f1b      	ldrb	r3, [r3, #28]
 8008346:	7d7a      	ldrb	r2, [r7, #21]
 8008348:	429a      	cmp	r2, r3
 800834a:	d3ec      	bcc.n	8008326 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800834c:	e002      	b.n	8008354 <SVCCTL_UserEvtRx+0x64>
              break;
 800834e:	bf00      	nop
          break;
 8008350:	e000      	b.n	8008354 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008352:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008354:	e000      	b.n	8008358 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008356:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d00f      	beq.n	800837e <SVCCTL_UserEvtRx+0x8e>
 800835e:	2b02      	cmp	r3, #2
 8008360:	dc10      	bgt.n	8008384 <SVCCTL_UserEvtRx+0x94>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <SVCCTL_UserEvtRx+0x7c>
 8008366:	2b01      	cmp	r3, #1
 8008368:	d006      	beq.n	8008378 <SVCCTL_UserEvtRx+0x88>
 800836a:	e00b      	b.n	8008384 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 ff85 	bl	800927c <SVCCTL_App_Notification>
 8008372:	4603      	mov	r3, r0
 8008374:	75bb      	strb	r3, [r7, #22]
      break;
 8008376:	e008      	b.n	800838a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008378:	2301      	movs	r3, #1
 800837a:	75bb      	strb	r3, [r7, #22]
      break;
 800837c:	e005      	b.n	800838a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800837e:	2300      	movs	r3, #0
 8008380:	75bb      	strb	r3, [r7, #22]
      break;
 8008382:	e002      	b.n	800838a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008384:	2301      	movs	r3, #1
 8008386:	75bb      	strb	r3, [r7, #22]
      break;
 8008388:	bf00      	nop
  }

  return (return_status);
 800838a:	7dbb      	ldrb	r3, [r7, #22]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	200008c4 	.word	0x200008c4

08008398 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083a0:	f107 030c 	add.w	r3, r7, #12
 80083a4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	212e      	movs	r1, #46	; 0x2e
 80083b0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80083b4:	f000 fae2 	bl	800897c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	330b      	adds	r3, #11
 80083bc:	78db      	ldrb	r3, [r3, #3]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3720      	adds	r7, #32
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b088      	sub	sp, #32
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083ce:	f107 030c 	add.w	r3, r7, #12
 80083d2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	210f      	movs	r1, #15
 80083de:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80083e2:	f000 facb 	bl	800897c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	330b      	adds	r3, #11
 80083ea:	78db      	ldrb	r3, [r3, #3]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3720      	adds	r7, #32
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083fc:	f107 030c 	add.w	r3, r7, #12
 8008400:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	2110      	movs	r1, #16
 8008408:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800840c:	f000 fab6 	bl	800897c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	330b      	adds	r3, #11
 8008414:	78db      	ldrb	r3, [r3, #3]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3720      	adds	r7, #32
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008420:	b480      	push	{r7}
 8008422:	b08b      	sub	sp, #44	; 0x2c
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800842c:	2300      	movs	r3, #0
 800842e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800843c:	2300      	movs	r3, #0
 800843e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008440:	2300      	movs	r3, #0
 8008442:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008448:	4b4a      	ldr	r3, [pc, #296]	; (8008574 <SHCI_GetWirelessFwInfo+0x154>)
 800844a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008450:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800845a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a44      	ldr	r2, [pc, #272]	; (8008578 <SHCI_GetWirelessFwInfo+0x158>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d10f      	bne.n	800848c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	e01a      	b.n	80084c2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008494:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008498:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	0e1b      	lsrs	r3, r3, #24
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	091b      	lsrs	r3, r3, #4
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	f003 030f 	and.w	r3, r3, #15
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	0e1b      	lsrs	r3, r3, #24
 8008502:	b2da      	uxtb	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	b2da      	uxtb	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	0a1b      	lsrs	r3, r3, #8
 8008516:	b2da      	uxtb	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	b2da      	uxtb	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	b2da      	uxtb	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	0e1b      	lsrs	r3, r3, #24
 8008530:	b2da      	uxtb	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	0c1b      	lsrs	r3, r3, #16
 800853a:	b2da      	uxtb	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	0a1b      	lsrs	r3, r3, #8
 8008544:	b2da      	uxtb	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	0e1b      	lsrs	r3, r3, #24
 800854e:	b2da      	uxtb	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	0c1b      	lsrs	r3, r3, #16
 8008558:	b2da      	uxtb	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	b2da      	uxtb	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	372c      	adds	r7, #44	; 0x2c
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	58004000 	.word	0x58004000
 8008578:	a94656b9 	.word	0xa94656b9

0800857c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	4a08      	ldr	r2, [pc, #32]	; (80085ac <hci_init+0x30>)
 800858c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800858e:	4a08      	ldr	r2, [pc, #32]	; (80085b0 <hci_init+0x34>)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008594:	4806      	ldr	r0, [pc, #24]	; (80085b0 <hci_init+0x34>)
 8008596:	f000 f973 	bl	8008880 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 f8d4 	bl	800874c <TlInit>

  return;
 80085a4:	bf00      	nop
}
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20000a2c 	.word	0x20000a2c
 80085b0:	20000a04 	.word	0x20000a04

080085b4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80085ba:	4822      	ldr	r0, [pc, #136]	; (8008644 <hci_user_evt_proc+0x90>)
 80085bc:	f000 fd28 	bl	8009010 <LST_is_empty>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d12b      	bne.n	800861e <hci_user_evt_proc+0x6a>
 80085c6:	4b20      	ldr	r3, [pc, #128]	; (8008648 <hci_user_evt_proc+0x94>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d027      	beq.n	800861e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80085ce:	f107 030c 	add.w	r3, r7, #12
 80085d2:	4619      	mov	r1, r3
 80085d4:	481b      	ldr	r0, [pc, #108]	; (8008644 <hci_user_evt_proc+0x90>)
 80085d6:	f000 fdaa 	bl	800912e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80085da:	4b1c      	ldr	r3, [pc, #112]	; (800864c <hci_user_evt_proc+0x98>)
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00c      	beq.n	80085fc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80085e6:	2301      	movs	r3, #1
 80085e8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80085ea:	4b18      	ldr	r3, [pc, #96]	; (800864c <hci_user_evt_proc+0x98>)
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	1d3a      	adds	r2, r7, #4
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80085f4:	793a      	ldrb	r2, [r7, #4]
 80085f6:	4b14      	ldr	r3, [pc, #80]	; (8008648 <hci_user_evt_proc+0x94>)
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	e002      	b.n	8008602 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80085fc:	4b12      	ldr	r3, [pc, #72]	; (8008648 <hci_user_evt_proc+0x94>)
 80085fe:	2201      	movs	r2, #1
 8008600:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008602:	4b11      	ldr	r3, [pc, #68]	; (8008648 <hci_user_evt_proc+0x94>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fc03 	bl	8008e18 <TL_MM_EvtDone>
 8008612:	e004      	b.n	800861e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4619      	mov	r1, r3
 8008618:	480a      	ldr	r0, [pc, #40]	; (8008644 <hci_user_evt_proc+0x90>)
 800861a:	f000 fd1b 	bl	8009054 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800861e:	4809      	ldr	r0, [pc, #36]	; (8008644 <hci_user_evt_proc+0x90>)
 8008620:	f000 fcf6 	bl	8009010 <LST_is_empty>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d107      	bne.n	800863a <hci_user_evt_proc+0x86>
 800862a:	4b07      	ldr	r3, [pc, #28]	; (8008648 <hci_user_evt_proc+0x94>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008632:	4804      	ldr	r0, [pc, #16]	; (8008644 <hci_user_evt_proc+0x90>)
 8008634:	f001 f83a 	bl	80096ac <hci_notify_asynch_evt>
  }


  return;
 8008638:	bf00      	nop
 800863a:	bf00      	nop
}
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	200008ec 	.word	0x200008ec
 8008648:	200008f8 	.word	0x200008f8
 800864c:	20000a04 	.word	0x20000a04

08008650 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800865c:	2000      	movs	r0, #0
 800865e:	f000 f8cb 	bl	80087f8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008662:	2300      	movs	r3, #0
 8008664:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	b21b      	sxth	r3, r3
 800866c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008670:	b21a      	sxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	029b      	lsls	r3, r3, #10
 8008678:	b21b      	sxth	r3, r3
 800867a:	4313      	orrs	r3, r2
 800867c:	b21b      	sxth	r3, r3
 800867e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	b2d9      	uxtb	r1, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	8bbb      	ldrh	r3, [r7, #28]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 f88d 	bl	80087ac <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008692:	e04e      	b.n	8008732 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008694:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008698:	f001 f81f 	bl	80096da <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800869c:	e043      	b.n	8008726 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800869e:	f107 030c 	add.w	r3, r7, #12
 80086a2:	4619      	mov	r1, r3
 80086a4:	4828      	ldr	r0, [pc, #160]	; (8008748 <hci_send_req+0xf8>)
 80086a6:	f000 fd42 	bl	800912e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	7a5b      	ldrb	r3, [r3, #9]
 80086ae:	2b0f      	cmp	r3, #15
 80086b0:	d114      	bne.n	80086dc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	330b      	adds	r3, #11
 80086b6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	885b      	ldrh	r3, [r3, #2]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	8bba      	ldrh	r2, [r7, #28]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d104      	bne.n	80086ce <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d027      	beq.n	8008726 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80086d6:	2301      	movs	r3, #1
 80086d8:	77fb      	strb	r3, [r7, #31]
 80086da:	e024      	b.n	8008726 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	330b      	adds	r3, #11
 80086e0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	8bba      	ldrh	r2, [r7, #28]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d114      	bne.n	800871a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	7a9b      	ldrb	r3, [r3, #10]
 80086f4:	3b03      	subs	r3, #3
 80086f6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	695a      	ldr	r2, [r3, #20]
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	429a      	cmp	r2, r3
 8008700:	bfa8      	it	ge
 8008702:	461a      	movge	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6918      	ldr	r0, [r3, #16]
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	1cd9      	adds	r1, r3, #3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	461a      	mov	r2, r3
 8008716:	f001 fecb 	bl	800a4b0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008722:	2301      	movs	r3, #1
 8008724:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008726:	4808      	ldr	r0, [pc, #32]	; (8008748 <hci_send_req+0xf8>)
 8008728:	f000 fc72 	bl	8009010 <LST_is_empty>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0b5      	beq.n	800869e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008732:	7ffb      	ldrb	r3, [r7, #31]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0ad      	beq.n	8008694 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008738:	2001      	movs	r0, #1
 800873a:	f000 f85d 	bl	80087f8 <NotifyCmdStatus>

  return 0;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20000a24 	.word	0x20000a24

0800874c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008754:	480f      	ldr	r0, [pc, #60]	; (8008794 <TlInit+0x48>)
 8008756:	f000 fc4b 	bl	8008ff0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800875a:	4a0f      	ldr	r2, [pc, #60]	; (8008798 <TlInit+0x4c>)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008760:	480e      	ldr	r0, [pc, #56]	; (800879c <TlInit+0x50>)
 8008762:	f000 fc45 	bl	8008ff0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008766:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <TlInit+0x54>)
 8008768:	2201      	movs	r2, #1
 800876a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800876c:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <TlInit+0x58>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008778:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <TlInit+0x5c>)
 800877a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800877c:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <TlInit+0x58>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f107 0208 	add.w	r2, r7, #8
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
  }

  return;
 8008788:	bf00      	nop
 800878a:	bf00      	nop
}
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000a24 	.word	0x20000a24
 8008798:	200008f4 	.word	0x200008f4
 800879c:	200008ec 	.word	0x200008ec
 80087a0:	200008f8 	.word	0x200008f8
 80087a4:	20000a04 	.word	0x20000a04
 80087a8:	08008839 	.word	0x08008839

080087ac <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	603a      	str	r2, [r7, #0]
 80087b6:	80fb      	strh	r3, [r7, #6]
 80087b8:	460b      	mov	r3, r1
 80087ba:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80087bc:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <SendCmd+0x44>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	88fa      	ldrh	r2, [r7, #6]
 80087c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80087c6:	4b0a      	ldr	r3, [pc, #40]	; (80087f0 <SendCmd+0x44>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	797a      	ldrb	r2, [r7, #5]
 80087cc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80087ce:	4b08      	ldr	r3, [pc, #32]	; (80087f0 <SendCmd+0x44>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	330c      	adds	r3, #12
 80087d4:	797a      	ldrb	r2, [r7, #5]
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f001 fe69 	bl	800a4b0 <memcpy>

  hciContext.io.Send(0,0);
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <SendCmd+0x48>)
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2100      	movs	r1, #0
 80087e4:	2000      	movs	r0, #0
 80087e6:	4798      	blx	r3

  return;
 80087e8:	bf00      	nop
}
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	200008f4 	.word	0x200008f4
 80087f4:	20000a04 	.word	0x20000a04

080087f8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d108      	bne.n	800881a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <NotifyCmdStatus+0x3c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00d      	beq.n	800882c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008810:	4b08      	ldr	r3, [pc, #32]	; (8008834 <NotifyCmdStatus+0x3c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2000      	movs	r0, #0
 8008816:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008818:	e008      	b.n	800882c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <NotifyCmdStatus+0x3c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d004      	beq.n	800882c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008822:	4b04      	ldr	r3, [pc, #16]	; (8008834 <NotifyCmdStatus+0x3c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2001      	movs	r0, #1
 8008828:	4798      	blx	r3
  return;
 800882a:	bf00      	nop
 800882c:	bf00      	nop
}
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	20000a2c 	.word	0x20000a2c

08008838 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	7a5b      	ldrb	r3, [r3, #9]
 8008844:	2b0f      	cmp	r3, #15
 8008846:	d003      	beq.n	8008850 <TlEvtReceived+0x18>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	7a5b      	ldrb	r3, [r3, #9]
 800884c:	2b0e      	cmp	r3, #14
 800884e:	d107      	bne.n	8008860 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008850:	6879      	ldr	r1, [r7, #4]
 8008852:	4809      	ldr	r0, [pc, #36]	; (8008878 <TlEvtReceived+0x40>)
 8008854:	f000 fc24 	bl	80090a0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008858:	2000      	movs	r0, #0
 800885a:	f000 ff33 	bl	80096c4 <hci_cmd_resp_release>
 800885e:	e006      	b.n	800886e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008860:	6879      	ldr	r1, [r7, #4]
 8008862:	4806      	ldr	r0, [pc, #24]	; (800887c <TlEvtReceived+0x44>)
 8008864:	f000 fc1c 	bl	80090a0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008868:	4804      	ldr	r0, [pc, #16]	; (800887c <TlEvtReceived+0x44>)
 800886a:	f000 ff1f 	bl	80096ac <hci_notify_asynch_evt>
  }

  return;
 800886e:	bf00      	nop
}
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20000a24 	.word	0x20000a24
 800887c:	200008ec 	.word	0x200008ec

08008880 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a05      	ldr	r2, [pc, #20]	; (80088a0 <hci_register_io_bus+0x20>)
 800888c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a04      	ldr	r2, [pc, #16]	; (80088a4 <hci_register_io_bus+0x24>)
 8008892:	611a      	str	r2, [r3, #16]

  return;
 8008894:	bf00      	nop
}
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	08008b91 	.word	0x08008b91
 80088a4:	08008bf9 	.word	0x08008bf9

080088a8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	4a08      	ldr	r2, [pc, #32]	; (80088d8 <shci_init+0x30>)
 80088b8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80088ba:	4a08      	ldr	r2, [pc, #32]	; (80088dc <shci_init+0x34>)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80088c0:	4806      	ldr	r0, [pc, #24]	; (80088dc <shci_init+0x34>)
 80088c2:	f000 f911 	bl	8008ae8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 f894 	bl	80089f8 <TlInit>

  return;
 80088d0:	bf00      	nop
}
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	20000a50 	.word	0x20000a50
 80088dc:	20000a30 	.word	0x20000a30

080088e0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80088e6:	4822      	ldr	r0, [pc, #136]	; (8008970 <shci_user_evt_proc+0x90>)
 80088e8:	f000 fb92 	bl	8009010 <LST_is_empty>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d12b      	bne.n	800894a <shci_user_evt_proc+0x6a>
 80088f2:	4b20      	ldr	r3, [pc, #128]	; (8008974 <shci_user_evt_proc+0x94>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d027      	beq.n	800894a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80088fa:	f107 030c 	add.w	r3, r7, #12
 80088fe:	4619      	mov	r1, r3
 8008900:	481b      	ldr	r0, [pc, #108]	; (8008970 <shci_user_evt_proc+0x90>)
 8008902:	f000 fc14 	bl	800912e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008906:	4b1c      	ldr	r3, [pc, #112]	; (8008978 <shci_user_evt_proc+0x98>)
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00c      	beq.n	8008928 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008912:	2301      	movs	r3, #1
 8008914:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008916:	4b18      	ldr	r3, [pc, #96]	; (8008978 <shci_user_evt_proc+0x98>)
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	1d3a      	adds	r2, r7, #4
 800891c:	4610      	mov	r0, r2
 800891e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008920:	793a      	ldrb	r2, [r7, #4]
 8008922:	4b14      	ldr	r3, [pc, #80]	; (8008974 <shci_user_evt_proc+0x94>)
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e002      	b.n	800892e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008928:	4b12      	ldr	r3, [pc, #72]	; (8008974 <shci_user_evt_proc+0x94>)
 800892a:	2201      	movs	r2, #1
 800892c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800892e:	4b11      	ldr	r3, [pc, #68]	; (8008974 <shci_user_evt_proc+0x94>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4618      	mov	r0, r3
 800893a:	f000 fa6d 	bl	8008e18 <TL_MM_EvtDone>
 800893e:	e004      	b.n	800894a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4619      	mov	r1, r3
 8008944:	480a      	ldr	r0, [pc, #40]	; (8008970 <shci_user_evt_proc+0x90>)
 8008946:	f000 fb85 	bl	8009054 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800894a:	4809      	ldr	r0, [pc, #36]	; (8008970 <shci_user_evt_proc+0x90>)
 800894c:	f000 fb60 	bl	8009010 <LST_is_empty>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d107      	bne.n	8008966 <shci_user_evt_proc+0x86>
 8008956:	4b07      	ldr	r3, [pc, #28]	; (8008974 <shci_user_evt_proc+0x94>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800895e:	4804      	ldr	r0, [pc, #16]	; (8008970 <shci_user_evt_proc+0x90>)
 8008960:	f7f8 f860 	bl	8000a24 <shci_notify_asynch_evt>
  }


  return;
 8008964:	bf00      	nop
 8008966:	bf00      	nop
}
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	200008fc 	.word	0x200008fc
 8008974:	2000090c 	.word	0x2000090c
 8008978:	20000a30 	.word	0x20000a30

0800897c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	60ba      	str	r2, [r7, #8]
 8008984:	607b      	str	r3, [r7, #4]
 8008986:	4603      	mov	r3, r0
 8008988:	81fb      	strh	r3, [r7, #14]
 800898a:	460b      	mov	r3, r1
 800898c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800898e:	2000      	movs	r0, #0
 8008990:	f000 f864 	bl	8008a5c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008994:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <shci_send+0x74>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	89fa      	ldrh	r2, [r7, #14]
 800899a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800899e:	4b14      	ldr	r3, [pc, #80]	; (80089f0 <shci_send+0x74>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	7b7a      	ldrb	r2, [r7, #13]
 80089a4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80089a6:	4b12      	ldr	r3, [pc, #72]	; (80089f0 <shci_send+0x74>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	330c      	adds	r3, #12
 80089ac:	7b7a      	ldrb	r2, [r7, #13]
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 fd7d 	bl	800a4b0 <memcpy>

  shciContext.io.Send(0,0);
 80089b6:	4b0f      	ldr	r3, [pc, #60]	; (80089f4 <shci_send+0x78>)
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2100      	movs	r1, #0
 80089bc:	2000      	movs	r0, #0
 80089be:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80089c0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80089c4:	f7f8 f845 	bl	8000a52 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f103 0008 	add.w	r0, r3, #8
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <shci_send+0x74>)
 80089d0:	6819      	ldr	r1, [r3, #0]
 80089d2:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <shci_send+0x74>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	789b      	ldrb	r3, [r3, #2]
 80089d8:	3303      	adds	r3, #3
 80089da:	461a      	mov	r2, r3
 80089dc:	f001 fd68 	bl	800a4b0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80089e0:	2001      	movs	r0, #1
 80089e2:	f000 f83b 	bl	8008a5c <Cmd_SetStatus>

  return;
 80089e6:	bf00      	nop
}
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20000908 	.word	0x20000908
 80089f4:	20000a30 	.word	0x20000a30

080089f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008a00:	4a10      	ldr	r2, [pc, #64]	; (8008a44 <TlInit+0x4c>)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008a06:	4810      	ldr	r0, [pc, #64]	; (8008a48 <TlInit+0x50>)
 8008a08:	f000 faf2 	bl	8008ff0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	f000 f825 	bl	8008a5c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008a12:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <TlInit+0x54>)
 8008a14:	2201      	movs	r2, #1
 8008a16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008a18:	4b0d      	ldr	r3, [pc, #52]	; (8008a50 <TlInit+0x58>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00c      	beq.n	8008a3a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008a24:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <TlInit+0x5c>)
 8008a26:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008a28:	4b0b      	ldr	r3, [pc, #44]	; (8008a58 <TlInit+0x60>)
 8008a2a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008a2c:	4b08      	ldr	r3, [pc, #32]	; (8008a50 <TlInit+0x58>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f107 020c 	add.w	r2, r7, #12
 8008a34:	4610      	mov	r0, r2
 8008a36:	4798      	blx	r3
  }

  return;
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
}
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000908 	.word	0x20000908
 8008a48:	200008fc 	.word	0x200008fc
 8008a4c:	2000090c 	.word	0x2000090c
 8008a50:	20000a30 	.word	0x20000a30
 8008a54:	08008aad 	.word	0x08008aad
 8008a58:	08008ac5 	.word	0x08008ac5

08008a5c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10b      	bne.n	8008a84 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008a6c:	4b0d      	ldr	r3, [pc, #52]	; (8008aa4 <Cmd_SetStatus+0x48>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008a74:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <Cmd_SetStatus+0x48>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2000      	movs	r0, #0
 8008a7a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008a7c:	4b0a      	ldr	r3, [pc, #40]	; (8008aa8 <Cmd_SetStatus+0x4c>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008a82:	e00b      	b.n	8008a9c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008a84:	4b08      	ldr	r3, [pc, #32]	; (8008aa8 <Cmd_SetStatus+0x4c>)
 8008a86:	2201      	movs	r2, #1
 8008a88:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008a8a:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <Cmd_SetStatus+0x48>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d004      	beq.n	8008a9c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008a92:	4b04      	ldr	r3, [pc, #16]	; (8008aa4 <Cmd_SetStatus+0x48>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2001      	movs	r0, #1
 8008a98:	4798      	blx	r3
  return;
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
}
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20000a50 	.word	0x20000a50
 8008aa8:	20000904 	.word	0x20000904

08008aac <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	f7f7 ffc1 	bl	8000a3c <shci_cmd_resp_release>

  return;
 8008aba:	bf00      	nop
}
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4805      	ldr	r0, [pc, #20]	; (8008ae4 <TlUserEvtReceived+0x20>)
 8008ad0:	f000 fae6 	bl	80090a0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008ad4:	4803      	ldr	r0, [pc, #12]	; (8008ae4 <TlUserEvtReceived+0x20>)
 8008ad6:	f7f7 ffa5 	bl	8000a24 <shci_notify_asynch_evt>

  return;
 8008ada:	bf00      	nop
}
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	200008fc 	.word	0x200008fc

08008ae8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a05      	ldr	r2, [pc, #20]	; (8008b08 <shci_register_io_bus+0x20>)
 8008af4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a04      	ldr	r2, [pc, #16]	; (8008b0c <shci_register_io_bus+0x24>)
 8008afa:	611a      	str	r2, [r3, #16]

  return;
 8008afc:	bf00      	nop
}
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	08008ca5 	.word	0x08008ca5
 8008b0c:	08008cf9 	.word	0x08008cf9

08008b10 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008b14:	f001 f94e 	bl	8009db4 <HW_IPCC_Enable>

  return;
 8008b18:	bf00      	nop
}
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <TL_Init>:


void TL_Init( void )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008b20:	4b10      	ldr	r3, [pc, #64]	; (8008b64 <TL_Init+0x48>)
 8008b22:	4a11      	ldr	r2, [pc, #68]	; (8008b68 <TL_Init+0x4c>)
 8008b24:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008b26:	4b0f      	ldr	r3, [pc, #60]	; (8008b64 <TL_Init+0x48>)
 8008b28:	4a10      	ldr	r2, [pc, #64]	; (8008b6c <TL_Init+0x50>)
 8008b2a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008b2c:	4b0d      	ldr	r3, [pc, #52]	; (8008b64 <TL_Init+0x48>)
 8008b2e:	4a10      	ldr	r2, [pc, #64]	; (8008b70 <TL_Init+0x54>)
 8008b30:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008b32:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <TL_Init+0x48>)
 8008b34:	4a0f      	ldr	r2, [pc, #60]	; (8008b74 <TL_Init+0x58>)
 8008b36:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <TL_Init+0x48>)
 8008b3a:	4a0f      	ldr	r2, [pc, #60]	; (8008b78 <TL_Init+0x5c>)
 8008b3c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008b3e:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <TL_Init+0x48>)
 8008b40:	4a0e      	ldr	r2, [pc, #56]	; (8008b7c <TL_Init+0x60>)
 8008b42:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008b44:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <TL_Init+0x48>)
 8008b46:	4a0e      	ldr	r2, [pc, #56]	; (8008b80 <TL_Init+0x64>)
 8008b48:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008b4a:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <TL_Init+0x48>)
 8008b4c:	4a0d      	ldr	r2, [pc, #52]	; (8008b84 <TL_Init+0x68>)
 8008b4e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008b50:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <TL_Init+0x48>)
 8008b52:	4a0d      	ldr	r2, [pc, #52]	; (8008b88 <TL_Init+0x6c>)
 8008b54:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008b56:	4b03      	ldr	r3, [pc, #12]	; (8008b64 <TL_Init+0x48>)
 8008b58:	4a0c      	ldr	r2, [pc, #48]	; (8008b8c <TL_Init+0x70>)
 8008b5a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008b5c:	f001 f93e 	bl	8009ddc <HW_IPCC_Init>

  return;
 8008b60:	bf00      	nop
}
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20030000 	.word	0x20030000
 8008b68:	20030028 	.word	0x20030028
 8008b6c:	20030048 	.word	0x20030048
 8008b70:	20030058 	.word	0x20030058
 8008b74:	20030068 	.word	0x20030068
 8008b78:	20030070 	.word	0x20030070
 8008b7c:	20030078 	.word	0x20030078
 8008b80:	20030080 	.word	0x20030080
 8008b84:	2003009c 	.word	0x2003009c
 8008b88:	200300a0 	.word	0x200300a0
 8008b8c:	200300ac 	.word	0x200300ac

08008b90 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008b9c:	4811      	ldr	r0, [pc, #68]	; (8008be4 <TL_BLE_Init+0x54>)
 8008b9e:	f000 fa27 	bl	8008ff0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008ba2:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <TL_BLE_Init+0x58>)
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4a0c      	ldr	r2, [pc, #48]	; (8008bec <TL_BLE_Init+0x5c>)
 8008bbc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	4a08      	ldr	r2, [pc, #32]	; (8008be4 <TL_BLE_Init+0x54>)
 8008bc2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008bc4:	f001 f920 	bl	8009e08 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a08      	ldr	r2, [pc, #32]	; (8008bf0 <TL_BLE_Init+0x60>)
 8008bce:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	4a07      	ldr	r2, [pc, #28]	; (8008bf4 <TL_BLE_Init+0x64>)
 8008bd6:	6013      	str	r3, [r2, #0]

  return 0;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200300c8 	.word	0x200300c8
 8008be8:	20030000 	.word	0x20030000
 8008bec:	200008b4 	.word	0x200008b4
 8008bf0:	20000a5c 	.word	0x20000a5c
 8008bf4:	20000a60 	.word	0x20000a60

08008bf8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008c04:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <TL_BLE_SendCmd+0x34>)
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008c0e:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <TL_BLE_SendCmd+0x34>)
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4619      	mov	r1, r3
 8008c16:	2001      	movs	r0, #1
 8008c18:	f000 f96c 	bl	8008ef4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008c1c:	f001 f8fe 	bl	8009e1c <HW_IPCC_BLE_SendCmd>

  return 0;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20030000 	.word	0x20030000

08008c30 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c36:	e01c      	b.n	8008c72 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008c38:	1d3b      	adds	r3, r7, #4
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4812      	ldr	r0, [pc, #72]	; (8008c88 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c3e:	f000 fa76 	bl	800912e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7a5b      	ldrb	r3, [r3, #9]
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d003      	beq.n	8008c52 <HW_IPCC_BLE_RxEvtNot+0x22>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	7a5b      	ldrb	r3, [r3, #9]
 8008c4e:	2b0e      	cmp	r3, #14
 8008c50:	d105      	bne.n	8008c5e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4619      	mov	r1, r3
 8008c56:	2002      	movs	r0, #2
 8008c58:	f000 f94c 	bl	8008ef4 <OutputDbgTrace>
 8008c5c:	e004      	b.n	8008c68 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4619      	mov	r1, r3
 8008c62:	2003      	movs	r0, #3
 8008c64:	f000 f946 	bl	8008ef4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008c68:	4b08      	ldr	r3, [pc, #32]	; (8008c8c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	4610      	mov	r0, r2
 8008c70:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c72:	4805      	ldr	r0, [pc, #20]	; (8008c88 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c74:	f000 f9cc 	bl	8009010 <LST_is_empty>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0dc      	beq.n	8008c38 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008c7e:	bf00      	nop
}
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	200300c8 	.word	0x200300c8
 8008c8c:	20000a5c 	.word	0x20000a5c

08008c90 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4798      	blx	r3

  return;
 8008c9a:	bf00      	nop
}
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20000a60 	.word	0x20000a60

08008ca4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008cb0:	480d      	ldr	r0, [pc, #52]	; (8008ce8 <TL_SYS_Init+0x44>)
 8008cb2:	f000 f99d 	bl	8008ff0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008cb6:	4b0d      	ldr	r3, [pc, #52]	; (8008cec <TL_SYS_Init+0x48>)
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4a08      	ldr	r2, [pc, #32]	; (8008ce8 <TL_SYS_Init+0x44>)
 8008cc8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008cca:	f001 f8c9 	bl	8009e60 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a07      	ldr	r2, [pc, #28]	; (8008cf0 <TL_SYS_Init+0x4c>)
 8008cd4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	4a06      	ldr	r2, [pc, #24]	; (8008cf4 <TL_SYS_Init+0x50>)
 8008cdc:	6013      	str	r3, [r2, #0]

  return 0;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	200300d0 	.word	0x200300d0
 8008cec:	20030000 	.word	0x20030000
 8008cf0:	20000a64 	.word	0x20000a64
 8008cf4:	20000a68 	.word	0x20000a68

08008cf8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008d04:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <TL_SYS_SendCmd+0x34>)
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008d0e:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <TL_SYS_SendCmd+0x34>)
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4619      	mov	r1, r3
 8008d16:	2004      	movs	r0, #4
 8008d18:	f000 f8ec 	bl	8008ef4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008d1c:	f001 f8aa 	bl	8009e74 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20030000 	.word	0x20030000

08008d30 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	2005      	movs	r0, #5
 8008d3e:	f000 f8d9 	bl	8008ef4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a03      	ldr	r2, [pc, #12]	; (8008d54 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d48:	68d2      	ldr	r2, [r2, #12]
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4798      	blx	r3

  return;
 8008d50:	bf00      	nop
}
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20030000 	.word	0x20030000
 8008d58:	20000a64 	.word	0x20000a64

08008d5c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008d62:	e00e      	b.n	8008d82 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008d64:	1d3b      	adds	r3, r7, #4
 8008d66:	4619      	mov	r1, r3
 8008d68:	480b      	ldr	r0, [pc, #44]	; (8008d98 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008d6a:	f000 f9e0 	bl	800912e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4619      	mov	r1, r3
 8008d72:	2006      	movs	r0, #6
 8008d74:	f000 f8be 	bl	8008ef4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008d78:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <HW_IPCC_SYS_EvtNot+0x40>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	4610      	mov	r0, r2
 8008d80:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008d82:	4805      	ldr	r0, [pc, #20]	; (8008d98 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008d84:	f000 f944 	bl	8009010 <LST_is_empty>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0ea      	beq.n	8008d64 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008d8e:	bf00      	nop
}
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200300d0 	.word	0x200300d0
 8008d9c:	20000a68 	.word	0x20000a68

08008da0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008da8:	4817      	ldr	r0, [pc, #92]	; (8008e08 <TL_MM_Init+0x68>)
 8008daa:	f000 f921 	bl	8008ff0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008dae:	4817      	ldr	r0, [pc, #92]	; (8008e0c <TL_MM_Init+0x6c>)
 8008db0:	f000 f91e 	bl	8008ff0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008db4:	4b16      	ldr	r3, [pc, #88]	; (8008e10 <TL_MM_Init+0x70>)
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	4a16      	ldr	r2, [pc, #88]	; (8008e14 <TL_MM_Init+0x74>)
 8008dba:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008dbc:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <TL_MM_Init+0x74>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6892      	ldr	r2, [r2, #8]
 8008dc4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008dc6:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <TL_MM_Init+0x74>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	68d2      	ldr	r2, [r2, #12]
 8008dce:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008dd0:	4b10      	ldr	r3, [pc, #64]	; (8008e14 <TL_MM_Init+0x74>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a0c      	ldr	r2, [pc, #48]	; (8008e08 <TL_MM_Init+0x68>)
 8008dd6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008dd8:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <TL_MM_Init+0x74>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6812      	ldr	r2, [r2, #0]
 8008de0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008de2:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <TL_MM_Init+0x74>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6852      	ldr	r2, [r2, #4]
 8008dea:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <TL_MM_Init+0x74>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	6912      	ldr	r2, [r2, #16]
 8008df4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008df6:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <TL_MM_Init+0x74>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6952      	ldr	r2, [r2, #20]
 8008dfe:	619a      	str	r2, [r3, #24]

  return;
 8008e00:	bf00      	nop
}
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	200300b8 	.word	0x200300b8
 8008e0c:	20000a54 	.word	0x20000a54
 8008e10:	20030000 	.word	0x20030000
 8008e14:	20000a6c 	.word	0x20000a6c

08008e18 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4807      	ldr	r0, [pc, #28]	; (8008e40 <TL_MM_EvtDone+0x28>)
 8008e24:	f000 f93c 	bl	80090a0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	f000 f862 	bl	8008ef4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008e30:	4804      	ldr	r0, [pc, #16]	; (8008e44 <TL_MM_EvtDone+0x2c>)
 8008e32:	f001 f845 	bl	8009ec0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008e36:	bf00      	nop
}
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000a54 	.word	0x20000a54
 8008e44:	08008e49 	.word	0x08008e49

08008e48 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e4e:	e00c      	b.n	8008e6a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008e50:	1d3b      	adds	r3, r7, #4
 8008e52:	4619      	mov	r1, r3
 8008e54:	480a      	ldr	r0, [pc, #40]	; (8008e80 <SendFreeBuf+0x38>)
 8008e56:	f000 f96a 	bl	800912e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <SendFreeBuf+0x3c>)
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f91b 	bl	80090a0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e6a:	4805      	ldr	r0, [pc, #20]	; (8008e80 <SendFreeBuf+0x38>)
 8008e6c:	f000 f8d0 	bl	8009010 <LST_is_empty>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0ec      	beq.n	8008e50 <SendFreeBuf+0x8>
  }

  return;
 8008e76:	bf00      	nop
}
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	20000a54 	.word	0x20000a54
 8008e84:	20030000 	.word	0x20030000

08008e88 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008e8c:	4805      	ldr	r0, [pc, #20]	; (8008ea4 <TL_TRACES_Init+0x1c>)
 8008e8e:	f000 f8af 	bl	8008ff0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008e92:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <TL_TRACES_Init+0x20>)
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	4a03      	ldr	r2, [pc, #12]	; (8008ea4 <TL_TRACES_Init+0x1c>)
 8008e98:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008e9a:	f001 f847 	bl	8009f2c <HW_IPCC_TRACES_Init>

  return;
 8008e9e:	bf00      	nop
}
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	200300c0 	.word	0x200300c0
 8008ea8:	20030000 	.word	0x20030000

08008eac <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008eb2:	e008      	b.n	8008ec6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008eb4:	1d3b      	adds	r3, r7, #4
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4808      	ldr	r0, [pc, #32]	; (8008edc <HW_IPCC_TRACES_EvtNot+0x30>)
 8008eba:	f000 f938 	bl	800912e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 f80d 	bl	8008ee0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008ec6:	4805      	ldr	r0, [pc, #20]	; (8008edc <HW_IPCC_TRACES_EvtNot+0x30>)
 8008ec8:	f000 f8a2 	bl	8009010 <LST_is_empty>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0f0      	beq.n	8008eb4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008ed2:	bf00      	nop
}
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	200300c0 	.word	0x200300c0

08008ee0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	6039      	str	r1, [r7, #0]
 8008efe:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	2b06      	cmp	r3, #6
 8008f04:	d845      	bhi.n	8008f92 <OutputDbgTrace+0x9e>
 8008f06:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <OutputDbgTrace+0x18>)
 8008f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0c:	08008f29 	.word	0x08008f29
 8008f10:	08008f4d 	.word	0x08008f4d
 8008f14:	08008f53 	.word	0x08008f53
 8008f18:	08008f67 	.word	0x08008f67
 8008f1c:	08008f73 	.word	0x08008f73
 8008f20:	08008f79 	.word	0x08008f79
 8008f24:	08008f87 	.word	0x08008f87
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	7a5b      	ldrb	r3, [r3, #9]
 8008f30:	2bff      	cmp	r3, #255	; 0xff
 8008f32:	d005      	beq.n	8008f40 <OutputDbgTrace+0x4c>
 8008f34:	2bff      	cmp	r3, #255	; 0xff
 8008f36:	dc05      	bgt.n	8008f44 <OutputDbgTrace+0x50>
 8008f38:	2b0e      	cmp	r3, #14
 8008f3a:	d005      	beq.n	8008f48 <OutputDbgTrace+0x54>
 8008f3c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008f3e:	e001      	b.n	8008f44 <OutputDbgTrace+0x50>
          break;
 8008f40:	bf00      	nop
 8008f42:	e027      	b.n	8008f94 <OutputDbgTrace+0xa0>
          break;
 8008f44:	bf00      	nop
 8008f46:	e025      	b.n	8008f94 <OutputDbgTrace+0xa0>
          break;
 8008f48:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008f4a:	e023      	b.n	8008f94 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008f50:	e020      	b.n	8008f94 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	7a5b      	ldrb	r3, [r3, #9]
 8008f5a:	2b0e      	cmp	r3, #14
 8008f5c:	d001      	beq.n	8008f62 <OutputDbgTrace+0x6e>
 8008f5e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008f60:	e000      	b.n	8008f64 <OutputDbgTrace+0x70>
          break;
 8008f62:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f64:	e016      	b.n	8008f94 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	7a5b      	ldrb	r3, [r3, #9]
 8008f6e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f70:	e010      	b.n	8008f94 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008f76:	e00d      	b.n	8008f94 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	7a5b      	ldrb	r3, [r3, #9]
 8008f80:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008f82:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f84:	e006      	b.n	8008f94 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	7a5b      	ldrb	r3, [r3, #9]
 8008f8e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f90:	e000      	b.n	8008f94 <OutputDbgTrace+0xa0>

    default:
      break;
 8008f92:	bf00      	nop
  }

  return;
 8008f94:	bf00      	nop
}
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008faa:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <OTP_Read+0x48>)
 8008fac:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008fae:	e002      	b.n	8008fb6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3b08      	subs	r3, #8
 8008fb4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3307      	adds	r3, #7
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	79fa      	ldrb	r2, [r7, #7]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d003      	beq.n	8008fca <OTP_Read+0x2a>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4a09      	ldr	r2, [pc, #36]	; (8008fec <OTP_Read+0x4c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d1f2      	bne.n	8008fb0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3307      	adds	r3, #7
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	79fa      	ldrb	r2, [r7, #7]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d001      	beq.n	8008fda <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008fda:	68fb      	ldr	r3, [r7, #12]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	1fff73f8 	.word	0x1fff73f8
 8008fec:	1fff7000 	.word	0x1fff7000

08008ff0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	605a      	str	r2, [r3, #4]
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009018:	f3ef 8310 	mrs	r3, PRIMASK
 800901c:	60fb      	str	r3, [r7, #12]
  return(result);
 800901e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009022:	b672      	cpsid	i
}
 8009024:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	429a      	cmp	r2, r3
 800902e:	d102      	bne.n	8009036 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009030:	2301      	movs	r3, #1
 8009032:	75fb      	strb	r3, [r7, #23]
 8009034:	e001      	b.n	800903a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	75fb      	strb	r3, [r7, #23]
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f383 8810 	msr	PRIMASK, r3
}
 8009044:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009046:	7dfb      	ldrb	r3, [r7, #23]
}
 8009048:	4618      	mov	r0, r3
 800904a:	371c      	adds	r7, #28
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800905e:	f3ef 8310 	mrs	r3, PRIMASK
 8009062:	60fb      	str	r3, [r7, #12]
  return(result);
 8009064:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009066:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009068:	b672      	cpsid	i
}
 800906a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	605a      	str	r2, [r3, #4]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f383 8810 	msr	PRIMASK, r3
}
 8009092:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009094:	bf00      	nop
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090aa:	f3ef 8310 	mrs	r3, PRIMASK
 80090ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80090b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090b4:	b672      	cpsid	i
}
 80090b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f383 8810 	msr	PRIMASK, r3
}
 80090de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80090e0:	bf00      	nop
 80090e2:	371c      	adds	r7, #28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090f4:	f3ef 8310 	mrs	r3, PRIMASK
 80090f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80090fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090fe:	b672      	cpsid	i
}
 8009100:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	6812      	ldr	r2, [r2, #0]
 800910a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	6852      	ldr	r2, [r2, #4]
 8009114:	605a      	str	r2, [r3, #4]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f383 8810 	msr	PRIMASK, r3
}
 8009120:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009122:	bf00      	nop
 8009124:	371c      	adds	r7, #28
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b086      	sub	sp, #24
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009138:	f3ef 8310 	mrs	r3, PRIMASK
 800913c:	60fb      	str	r3, [r7, #12]
  return(result);
 800913e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009140:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009142:	b672      	cpsid	i
}
 8009144:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff ffca 	bl	80090ec <LST_remove_node>
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f383 8810 	msr	PRIMASK, r3
}
 8009162:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009164:	bf00      	nop
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8009170:	4b03      	ldr	r3, [pc, #12]	; (8009180 <LL_FLASH_GetUDN+0x14>)
 8009172:	681b      	ldr	r3, [r3, #0]
}
 8009174:	4618      	mov	r0, r3
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	1fff7580 	.word	0x1fff7580

08009184 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009184:	b480      	push	{r7}
 8009186:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8009188:	4b03      	ldr	r3, [pc, #12]	; (8009198 <LL_FLASH_GetDeviceID+0x14>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	b2db      	uxtb	r3, r3
}
 800918e:	4618      	mov	r0, r3
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	1fff7584 	.word	0x1fff7584

0800919c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80091a0:	4b03      	ldr	r3, [pc, #12]	; (80091b0 <LL_FLASH_GetSTCompanyID+0x14>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	0a1b      	lsrs	r3, r3, #8
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	1fff7584 	.word	0x1fff7584

080091b4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80091b4:	b5b0      	push	{r4, r5, r7, lr}
 80091b6:	b090      	sub	sp, #64	; 0x40
 80091b8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80091ba:	2392      	movs	r3, #146	; 0x92
 80091bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  // Yang Junyoung
  // Register the task.
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 80091c0:	4a29      	ldr	r2, [pc, #164]	; (8009268 <APP_BLE_Init+0xb4>)
 80091c2:	2100      	movs	r1, #0
 80091c4:	2004      	movs	r0, #4
 80091c6:	f001 f805 	bl	800a1d4 <UTIL_SEQ_RegTask>
  // Scheduler will run it exactly once.
  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80091ca:	2100      	movs	r1, #0
 80091cc:	2004      	movs	r0, #4
 80091ce:	f001 f823 	bl	800a218 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80091d2:	4b26      	ldr	r3, [pc, #152]	; (800926c <APP_BLE_Init+0xb8>)
 80091d4:	1d3c      	adds	r4, r7, #4
 80091d6:	461d      	mov	r5, r3
 80091d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80091e8:	c403      	stmia	r4!, {r0, r1}
 80091ea:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80091ec:	f000 f906 	bl	80093fc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80091f0:	2101      	movs	r1, #1
 80091f2:	2002      	movs	r0, #2
 80091f4:	f000 fec2 	bl	8009f7c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80091f8:	4a1d      	ldr	r2, [pc, #116]	; (8009270 <APP_BLE_Init+0xbc>)
 80091fa:	2100      	movs	r1, #0
 80091fc:	2002      	movs	r0, #2
 80091fe:	f000 ffe9 	bl	800a1d4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009202:	1d3b      	adds	r3, r7, #4
 8009204:	4618      	mov	r0, r3
 8009206:	f7ff f8c7 	bl	8008398 <SHCI_C2_BLE_Init>
 800920a:	4603      	mov	r3, r0
 800920c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8009210:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009218:	f7f8 fdac 	bl	8001d74 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800921c:	f000 f904 	bl	8009428 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009220:	f7ff f814 	bl	800824c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009224:	4b13      	ldr	r3, [pc, #76]	; (8009274 <APP_BLE_Init+0xc0>)
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800922c:	4b11      	ldr	r3, [pc, #68]	; (8009274 <APP_BLE_Init+0xc0>)
 800922e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009232:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009234:	4a10      	ldr	r2, [pc, #64]	; (8009278 <APP_BLE_Init+0xc4>)
 8009236:	2100      	movs	r1, #0
 8009238:	2001      	movs	r0, #1
 800923a:	f000 ffcb 	bl	800a1d4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800923e:	2006      	movs	r0, #6
 8009240:	f7fe fe78 	bl	8007f34 <aci_hal_set_radio_activity_mask>
 8009244:	4603      	mov	r3, r0
 8009246:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800924a:	f000 fad1 	bl	80097f0 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <APP_BLE_Init+0xc0>)
 8009250:	2200      	movs	r2, #0
 8009252:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009254:	4b07      	ldr	r3, [pc, #28]	; (8009274 <APP_BLE_Init+0xc0>)
 8009256:	2200      	movs	r2, #0
 8009258:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800925a:	2001      	movs	r0, #1
 800925c:	f000 f998 	bl	8009590 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8009260:	bf00      	nop
}
 8009262:	3740      	adds	r7, #64	; 0x40
 8009264:	46bd      	mov	sp, r7
 8009266:	bdb0      	pop	{r4, r5, r7, pc}
 8009268:	08009761 	.word	0x08009761
 800926c:	0800a52c 	.word	0x0800a52c
 8009270:	080085b5 	.word	0x080085b5
 8009274:	20000a78 	.word	0x20000a78
 8009278:	08009679 	.word	0x08009679

0800927c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009284:	2392      	movs	r3, #146	; 0x92
 8009286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	3301      	adds	r3, #1
 800928e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2bff      	cmp	r3, #255	; 0xff
 8009296:	d053      	beq.n	8009340 <SVCCTL_App_Notification+0xc4>
 8009298:	2bff      	cmp	r3, #255	; 0xff
 800929a:	f300 80a1 	bgt.w	80093e0 <SVCCTL_App_Notification+0x164>
 800929e:	2b05      	cmp	r3, #5
 80092a0:	d002      	beq.n	80092a8 <SVCCTL_App_Notification+0x2c>
 80092a2:	2b3e      	cmp	r3, #62	; 0x3e
 80092a4:	d020      	beq.n	80092e8 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80092a6:	e09b      	b.n	80093e0 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	3302      	adds	r3, #2
 80092ac:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	4b4e      	ldr	r3, [pc, #312]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 80092b8:	8adb      	ldrh	r3, [r3, #22]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d106      	bne.n	80092cc <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80092be:	4b4c      	ldr	r3, [pc, #304]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80092c4:	4b4a      	ldr	r3, [pc, #296]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80092cc:	2001      	movs	r0, #1
 80092ce:	f000 f95f 	bl	8009590 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80092d2:	4b48      	ldr	r3, [pc, #288]	; (80093f4 <SVCCTL_App_Notification+0x178>)
 80092d4:	2201      	movs	r2, #1
 80092d6:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80092d8:	4b45      	ldr	r3, [pc, #276]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 80092da:	8ada      	ldrh	r2, [r3, #22]
 80092dc:	4b45      	ldr	r3, [pc, #276]	; (80093f4 <SVCCTL_App_Notification+0x178>)
 80092de:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80092e0:	4844      	ldr	r0, [pc, #272]	; (80093f4 <SVCCTL_App_Notification+0x178>)
 80092e2:	f000 fa71 	bl	80097c8 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80092e6:	e07e      	b.n	80093e6 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	3302      	adds	r3, #2
 80092ec:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d001      	beq.n	80092fa <SVCCTL_App_Notification+0x7e>
 80092f6:	2b03      	cmp	r3, #3
          break;
 80092f8:	e021      	b.n	800933e <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	3301      	adds	r3, #1
 80092fe:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009300:	4b3b      	ldr	r3, [pc, #236]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 8009302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009306:	2b04      	cmp	r3, #4
 8009308:	d104      	bne.n	8009314 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800930a:	4b39      	ldr	r3, [pc, #228]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 800930c:	2206      	movs	r2, #6
 800930e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009312:	e003      	b.n	800931c <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009314:	4b36      	ldr	r3, [pc, #216]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 8009316:	2205      	movs	r2, #5
 8009318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009322:	b29a      	uxth	r2, r3
 8009324:	4b32      	ldr	r3, [pc, #200]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 8009326:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009328:	4b32      	ldr	r3, [pc, #200]	; (80093f4 <SVCCTL_App_Notification+0x178>)
 800932a:	2200      	movs	r2, #0
 800932c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800932e:	4b30      	ldr	r3, [pc, #192]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 8009330:	8ada      	ldrh	r2, [r3, #22]
 8009332:	4b30      	ldr	r3, [pc, #192]	; (80093f4 <SVCCTL_App_Notification+0x178>)
 8009334:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009336:	482f      	ldr	r0, [pc, #188]	; (80093f4 <SVCCTL_App_Notification+0x178>)
 8009338:	f000 fa46 	bl	80097c8 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800933c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800933e:	e052      	b.n	80093e6 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	3302      	adds	r3, #2
 8009344:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	b29b      	uxth	r3, r3
 800934c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009350:	d040      	beq.n	80093d4 <SVCCTL_App_Notification+0x158>
 8009352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009356:	dc45      	bgt.n	80093e4 <SVCCTL_App_Notification+0x168>
 8009358:	2b04      	cmp	r3, #4
 800935a:	d03d      	beq.n	80093d8 <SVCCTL_App_Notification+0x15c>
 800935c:	2b04      	cmp	r3, #4
 800935e:	db41      	blt.n	80093e4 <SVCCTL_App_Notification+0x168>
 8009360:	f240 420a 	movw	r2, #1034	; 0x40a
 8009364:	4293      	cmp	r3, r2
 8009366:	dc3d      	bgt.n	80093e4 <SVCCTL_App_Notification+0x168>
 8009368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800936c:	dd3a      	ble.n	80093e4 <SVCCTL_App_Notification+0x168>
 800936e:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8009372:	2b09      	cmp	r3, #9
 8009374:	d836      	bhi.n	80093e4 <SVCCTL_App_Notification+0x168>
 8009376:	a201      	add	r2, pc, #4	; (adr r2, 800937c <SVCCTL_App_Notification+0x100>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	080093cd 	.word	0x080093cd
 8009380:	080093a5 	.word	0x080093a5
 8009384:	080093e5 	.word	0x080093e5
 8009388:	080093e5 	.word	0x080093e5
 800938c:	080093e5 	.word	0x080093e5
 8009390:	080093e5 	.word	0x080093e5
 8009394:	080093dd 	.word	0x080093dd
 8009398:	080093e5 	.word	0x080093e5
 800939c:	080093b9 	.word	0x080093b9
 80093a0:	080093dd 	.word	0x080093dd
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80093a4:	4b12      	ldr	r3, [pc, #72]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 80093a6:	8adb      	ldrh	r3, [r3, #22]
 80093a8:	4913      	ldr	r1, [pc, #76]	; (80093f8 <SVCCTL_App_Notification+0x17c>)
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe f819 	bl	80073e2 <aci_gap_pass_key_resp>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80093b6:	e012      	b.n	80093de <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80093b8:	4b0d      	ldr	r3, [pc, #52]	; (80093f0 <SVCCTL_App_Notification+0x174>)
 80093ba:	8adb      	ldrh	r3, [r3, #22]
 80093bc:	2101      	movs	r1, #1
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe f9b9 	bl	8007736 <aci_gap_numeric_comparison_value_confirm_yesno>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80093ca:	e008      	b.n	80093de <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	3302      	adds	r3, #2
 80093d0:	61bb      	str	r3, [r7, #24]
          break;
 80093d2:	e004      	b.n	80093de <SVCCTL_App_Notification+0x162>
          break;
 80093d4:	bf00      	nop
 80093d6:	e005      	b.n	80093e4 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80093d8:	bf00      	nop
 80093da:	e003      	b.n	80093e4 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80093dc:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80093de:	e001      	b.n	80093e4 <SVCCTL_App_Notification+0x168>
      break;
 80093e0:	bf00      	nop
 80093e2:	e000      	b.n	80093e6 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80093e4:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80093e6:	2301      	movs	r3, #1
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3728      	adds	r7, #40	; 0x28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	20000a78 	.word	0x20000a78
 80093f4:	20000efc 	.word	0x20000efc
 80093f8:	0001b207 	.word	0x0001b207

080093fc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009402:	4b06      	ldr	r3, [pc, #24]	; (800941c <Ble_Tl_Init+0x20>)
 8009404:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009406:	4b06      	ldr	r3, [pc, #24]	; (8009420 <Ble_Tl_Init+0x24>)
 8009408:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800940a:	463b      	mov	r3, r7
 800940c:	4619      	mov	r1, r3
 800940e:	4805      	ldr	r0, [pc, #20]	; (8009424 <Ble_Tl_Init+0x28>)
 8009410:	f7ff f8b4 	bl	800857c <hci_init>

  return;
 8009414:	bf00      	nop
}
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	200300d8 	.word	0x200300d8
 8009420:	08009729 	.word	0x08009729
 8009424:	080096f1 	.word	0x080096f1

08009428 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942a:	b08d      	sub	sp, #52	; 0x34
 800942c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800942e:	2300      	movs	r3, #0
 8009430:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009432:	2392      	movs	r3, #146	; 0x92
 8009434:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009436:	f7fe fdd1 	bl	8007fdc <hci_reset>
 800943a:	4603      	mov	r3, r0
 800943c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800943e:	f000 f8d7 	bl	80095f0 <BleGetBdAddress>
 8009442:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	2106      	movs	r1, #6
 8009448:	2000      	movs	r0, #0
 800944a:	f7fe fc87 	bl	8007d5c <aci_hal_write_config_data>
 800944e:	4603      	mov	r3, r0
 8009450:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8009452:	4a4a      	ldr	r2, [pc, #296]	; (800957c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8009454:	2110      	movs	r1, #16
 8009456:	2018      	movs	r0, #24
 8009458:	f7fe fc80 	bl	8007d5c <aci_hal_write_config_data>
 800945c:	4603      	mov	r3, r0
 800945e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8009460:	4a47      	ldr	r2, [pc, #284]	; (8009580 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8009462:	2110      	movs	r1, #16
 8009464:	2008      	movs	r0, #8
 8009466:	f7fe fc79 	bl	8007d5c <aci_hal_write_config_data>
 800946a:	4603      	mov	r3, r0
 800946c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800946e:	2118      	movs	r1, #24
 8009470:	2001      	movs	r0, #1
 8009472:	f7fe fcf8 	bl	8007e66 <aci_hal_set_tx_power_level>
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800947a:	f7fe f9c3 	bl	8007804 <aci_gatt_init>
 800947e:	4603      	mov	r3, r0
 8009480:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	f043 0301 	orr.w	r3, r3, #1
 800948c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01f      	beq.n	80094d4 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009494:	4b3b      	ldr	r3, [pc, #236]	; (8009584 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8009496:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009498:	1dba      	adds	r2, r7, #6
 800949a:	7bf8      	ldrb	r0, [r7, #15]
 800949c:	1cbb      	adds	r3, r7, #2
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	1d3b      	adds	r3, r7, #4
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	2208      	movs	r2, #8
 80094a8:	2100      	movs	r1, #0
 80094aa:	f7fe f801 	bl	80074b0 <aci_gap_init>
 80094ae:	4603      	mov	r3, r0
 80094b0:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80094b2:	88fc      	ldrh	r4, [r7, #6]
 80094b4:	88bd      	ldrh	r5, [r7, #4]
 80094b6:	68b8      	ldr	r0, [r7, #8]
 80094b8:	f7f6 fe60 	bl	800017c <strlen>
 80094bc:	4603      	mov	r3, r0
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	4613      	mov	r3, r2
 80094c6:	2200      	movs	r2, #0
 80094c8:	4629      	mov	r1, r5
 80094ca:	4620      	mov	r0, r4
 80094cc:	f7fe fb9d 	bl	8007c0a <aci_gatt_update_char_value>
 80094d0:	4603      	mov	r3, r0
 80094d2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80094d4:	88f8      	ldrh	r0, [r7, #6]
 80094d6:	8879      	ldrh	r1, [r7, #2]
 80094d8:	463b      	mov	r3, r7
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	2302      	movs	r3, #2
 80094de:	2200      	movs	r2, #0
 80094e0:	f7fe fb93 	bl	8007c0a <aci_gatt_update_char_value>
 80094e4:	4603      	mov	r3, r0
 80094e6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80094e8:	2202      	movs	r2, #2
 80094ea:	2102      	movs	r1, #2
 80094ec:	2000      	movs	r0, #0
 80094ee:	f7fe fd99 	bl	8008024 <hci_le_set_default_phy>
 80094f2:	4603      	mov	r3, r0
 80094f4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80094f6:	4b24      	ldr	r3, [pc, #144]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80094fc:	4b22      	ldr	r3, [pc, #136]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	4618      	mov	r0, r3
 8009502:	f7fd fe56 	bl	80071b2 <aci_gap_set_io_capability>
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800950a:	4b1f      	ldr	r3, [pc, #124]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800950c:	2200      	movs	r2, #0
 800950e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009510:	4b1d      	ldr	r3, [pc, #116]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009512:	2208      	movs	r2, #8
 8009514:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009516:	4b1c      	ldr	r3, [pc, #112]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009518:	2210      	movs	r2, #16
 800951a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800951c:	4b1a      	ldr	r3, [pc, #104]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800951e:	2201      	movs	r2, #1
 8009520:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8009522:	4b19      	ldr	r3, [pc, #100]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009524:	4a19      	ldr	r2, [pc, #100]	; (800958c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8009526:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009528:	4b17      	ldr	r3, [pc, #92]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800952a:	2200      	movs	r2, #0
 800952c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800952e:	4b16      	ldr	r3, [pc, #88]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009530:	789c      	ldrb	r4, [r3, #2]
 8009532:	4b15      	ldr	r3, [pc, #84]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009534:	785d      	ldrb	r5, [r3, #1]
 8009536:	4b14      	ldr	r3, [pc, #80]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009538:	791b      	ldrb	r3, [r3, #4]
 800953a:	4a13      	ldr	r2, [pc, #76]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800953c:	7952      	ldrb	r2, [r2, #5]
 800953e:	4912      	ldr	r1, [pc, #72]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009540:	78c9      	ldrb	r1, [r1, #3]
 8009542:	4811      	ldr	r0, [pc, #68]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009544:	6880      	ldr	r0, [r0, #8]
 8009546:	2600      	movs	r6, #0
 8009548:	9604      	str	r6, [sp, #16]
 800954a:	9003      	str	r0, [sp, #12]
 800954c:	9102      	str	r1, [sp, #8]
 800954e:	9201      	str	r2, [sp, #4]
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	2300      	movs	r3, #0
 8009554:	2201      	movs	r2, #1
 8009556:	4629      	mov	r1, r5
 8009558:	4620      	mov	r0, r4
 800955a:	f7fd fe7e 	bl	800725a <aci_gap_set_authentication_requirement>
 800955e:	4603      	mov	r3, r0
 8009560:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009564:	789b      	ldrb	r3, [r3, #2]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800956a:	f7fe f8c0 	bl	80076ee <aci_gap_configure_whitelist>
 800956e:	4603      	mov	r3, r0
 8009570:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8009572:	bf00      	nop
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800957a:	bf00      	nop
 800957c:	0800a76c 	.word	0x0800a76c
 8009580:	0800a77c 	.word	0x0800a77c
 8009584:	0800a568 	.word	0x0800a568
 8009588:	20000a78 	.word	0x20000a78
 800958c:	0001b207 	.word	0x0001b207

08009590 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08c      	sub	sp, #48	; 0x30
 8009594:	af08      	add	r7, sp, #32
 8009596:	4603      	mov	r3, r0
 8009598:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800959a:	2392      	movs	r3, #146	; 0x92
 800959c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800959e:	4a12      	ldr	r2, [pc, #72]	; (80095e8 <Adv_Request+0x58>)
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80095a6:	2300      	movs	r3, #0
 80095a8:	9306      	str	r3, [sp, #24]
 80095aa:	2300      	movs	r3, #0
 80095ac:	9305      	str	r3, [sp, #20]
 80095ae:	2300      	movs	r3, #0
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	2300      	movs	r3, #0
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	2300      	movs	r3, #0
 80095b8:	9302      	str	r3, [sp, #8]
 80095ba:	2300      	movs	r3, #0
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	2300      	movs	r3, #0
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	2300      	movs	r3, #0
 80095c4:	22a0      	movs	r2, #160	; 0xa0
 80095c6:	2180      	movs	r1, #128	; 0x80
 80095c8:	2000      	movs	r0, #0
 80095ca:	f7fd fcf8 	bl	8006fbe <aci_gap_set_discoverable>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80095d2:	4906      	ldr	r1, [pc, #24]	; (80095ec <Adv_Request+0x5c>)
 80095d4:	200a      	movs	r0, #10
 80095d6:	f7fe f818 	bl	800760a <aci_gap_update_adv_data>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80095de:	bf00      	nop
}
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000a78 	.word	0x20000a78
 80095ec:	2000002c 	.word	0x2000002c

080095f0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80095f6:	f7ff fdb9 	bl	800916c <LL_FLASH_GetUDN>
 80095fa:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009602:	d023      	beq.n	800964c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009604:	f7ff fdca 	bl	800919c <LL_FLASH_GetSTCompanyID>
 8009608:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800960a:	f7ff fdbb 	bl	8009184 <LL_FLASH_GetDeviceID>
 800960e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	b2da      	uxtb	r2, r3
 8009614:	4b16      	ldr	r3, [pc, #88]	; (8009670 <BleGetBdAddress+0x80>)
 8009616:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	b2da      	uxtb	r2, r3
 800961e:	4b14      	ldr	r3, [pc, #80]	; (8009670 <BleGetBdAddress+0x80>)
 8009620:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	b2da      	uxtb	r2, r3
 8009626:	4b12      	ldr	r3, [pc, #72]	; (8009670 <BleGetBdAddress+0x80>)
 8009628:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	b2da      	uxtb	r2, r3
 800962e:	4b10      	ldr	r3, [pc, #64]	; (8009670 <BleGetBdAddress+0x80>)
 8009630:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	0a1b      	lsrs	r3, r3, #8
 8009636:	b2da      	uxtb	r2, r3
 8009638:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <BleGetBdAddress+0x80>)
 800963a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	0c1b      	lsrs	r3, r3, #16
 8009640:	b2da      	uxtb	r2, r3
 8009642:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <BleGetBdAddress+0x80>)
 8009644:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009646:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <BleGetBdAddress+0x80>)
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e00b      	b.n	8009664 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800964c:	2000      	movs	r0, #0
 800964e:	f7ff fca7 	bl	8008fa0 <OTP_Read>
 8009652:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	e001      	b.n	8009664 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009660:	4b04      	ldr	r3, [pc, #16]	; (8009674 <BleGetBdAddress+0x84>)
 8009662:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009664:	697b      	ldr	r3, [r7, #20]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000a70 	.word	0x20000a70
 8009674:	0800a764 	.word	0x0800a764

08009678 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800967e:	4b0a      	ldr	r3, [pc, #40]	; (80096a8 <Adv_Cancel+0x30>)
 8009680:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009684:	2b05      	cmp	r3, #5
 8009686:	d00a      	beq.n	800969e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009688:	2392      	movs	r3, #146	; 0x92
 800968a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800968c:	f7fd fc73 	bl	8006f76 <aci_gap_set_non_discoverable>
 8009690:	4603      	mov	r3, r0
 8009692:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009694:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <Adv_Cancel+0x30>)
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800969c:	bf00      	nop
 800969e:	bf00      	nop
}
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000a78 	.word	0x20000a78

080096ac <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80096b4:	2100      	movs	r1, #0
 80096b6:	2002      	movs	r0, #2
 80096b8:	f000 fdae 	bl	800a218 <UTIL_SEQ_SetTask>

  return;
 80096bc:	bf00      	nop
}
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80096cc:	2001      	movs	r0, #1
 80096ce:	f000 fe0f 	bl	800a2f0 <UTIL_SEQ_SetEvt>

  return;
 80096d2:	bf00      	nop
}
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80096e2:	2001      	movs	r0, #1
 80096e4:	f000 fe24 	bl	800a330 <UTIL_SEQ_WaitEvt>

  return;
 80096e8:	bf00      	nop
}
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	3308      	adds	r3, #8
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe fdf4 	bl	80082f0 <SVCCTL_UserEvtRx>
 8009708:	4603      	mov	r3, r0
 800970a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800970c:	7afb      	ldrb	r3, [r7, #11]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009718:	e003      	b.n	8009722 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	701a      	strb	r2, [r3, #0]
  return;
 8009720:	bf00      	nop
}
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <BLE_StatusNot+0x16>
 8009738:	2b01      	cmp	r3, #1
 800973a:	d006      	beq.n	800974a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800973c:	e00b      	b.n	8009756 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800973e:	2307      	movs	r3, #7
 8009740:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 fd94 	bl	800a270 <UTIL_SEQ_PauseTask>
      break;
 8009748:	e005      	b.n	8009756 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800974a:	2307      	movs	r3, #7
 800974c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fdae 	bl	800a2b0 <UTIL_SEQ_ResumeTask>
      break;
 8009754:	bf00      	nop
  }

  return;
 8009756:	bf00      	nop
}
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <myTask>:
static void Custom_Vgsizeitread_Send_Notification(void);

/* USER CODE BEGIN PFP */
// Yang Junyoung
void myTask(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
	// Check the state of the button if it is pressed.
	if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8009764:	2110      	movs	r1, #16
 8009766:	4808      	ldr	r0, [pc, #32]	; (8009788 <myTask+0x28>)
 8009768:	f7f9 ffba 	bl	80036e0 <HAL_GPIO_ReadPin>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d108      	bne.n	8009784 <myTask+0x24>
	{
		// Modify the data.
		UpdateCharData[0] ^= 0x1;
 8009772:	4b06      	ldr	r3, [pc, #24]	; (800978c <myTask+0x2c>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f083 0301 	eor.w	r3, r3, #1
 800977a:	b2da      	uxtb	r2, r3
 800977c:	4b03      	ldr	r3, [pc, #12]	; (800978c <myTask+0x2c>)
 800977e:	701a      	strb	r2, [r3, #0]
		// Update the characteristic.
		Custom_Vgsizeitread_Update_Char();
 8009780:	f000 f83e 	bl	8009800 <Custom_Vgsizeitread_Update_Char>
	}
	// At the end of the task, set it again.
	//UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
}
 8009784:	bf00      	nop
 8009786:	bd80      	pop	{r7, pc}
 8009788:	48000800 	.word	0x48000800
 800978c:	20000ff8 	.word	0x20000ff8

08009790 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b02      	cmp	r3, #2
 800979e:	d006      	beq.n	80097ae <Custom_STM_App_Notification+0x1e>
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	dc06      	bgt.n	80097b2 <Custom_STM_App_Notification+0x22>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d006      	beq.n	80097b6 <Custom_STM_App_Notification+0x26>
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d006      	beq.n	80097ba <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80097ac:	e001      	b.n	80097b2 <Custom_STM_App_Notification+0x22>
      break;
 80097ae:	bf00      	nop
 80097b0:	e004      	b.n	80097bc <Custom_STM_App_Notification+0x2c>
      break;
 80097b2:	bf00      	nop
 80097b4:	e002      	b.n	80097bc <Custom_STM_App_Notification+0x2c>
      break;
 80097b6:	bf00      	nop
 80097b8:	e000      	b.n	80097bc <Custom_STM_App_Notification+0x2c>
      break;
 80097ba:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80097bc:	bf00      	nop
}
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d002      	beq.n	80097de <Custom_APP_Notification+0x16>
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d002      	beq.n	80097e2 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80097dc:	e002      	b.n	80097e4 <Custom_APP_Notification+0x1c>
      break;
 80097de:	bf00      	nop
 80097e0:	e000      	b.n	80097e4 <Custom_APP_Notification+0x1c>
      break;
 80097e2:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80097e4:	bf00      	nop
}
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80097f0:	b480      	push	{r7}
 80097f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80097f4:	bf00      	nop
}
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
	...

08009800 <Custom_Vgsizeitread_Update_Char>:
 *
 *************************************************************/

/* VGSIZEITEMS */
void Custom_Vgsizeitread_Update_Char(void) /* Property Read */
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Vgsizeitread_UC_1*/

  /* USER CODE END Vgsizeitread_UC_1*/

  if (updateflag != 0)
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d004      	beq.n	800981a <Custom_Vgsizeitread_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_VGSIZEITREAD, (uint8_t *)UpdateCharData);
 8009810:	4904      	ldr	r1, [pc, #16]	; (8009824 <Custom_Vgsizeitread_Update_Char+0x24>)
 8009812:	2001      	movs	r0, #1
 8009814:	f000 f920 	bl	8009a58 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Vgsizeitread_UC_Last*/

  /* USER CODE END Vgsizeitread_UC_Last*/
  return;
 8009818:	bf00      	nop
 800981a:	bf00      	nop
}
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000ff8 	.word	0x20000ff8

08009828 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08a      	sub	sp, #40	; 0x28
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009830:	2300      	movs	r3, #0
 8009832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3301      	adds	r3, #1
 800983a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2bff      	cmp	r3, #255	; 0xff
 8009842:	d14f      	bne.n	80098e4 <Custom_STM_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	3302      	adds	r3, #2
 8009848:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	b29b      	uxth	r3, r3
 8009850:	f640 4214 	movw	r2, #3092	; 0xc14
 8009854:	4293      	cmp	r3, r2
 8009856:	d03f      	beq.n	80098d8 <Custom_STM_Event_Handler+0xb0>
 8009858:	f640 4214 	movw	r2, #3092	; 0xc14
 800985c:	4293      	cmp	r3, r2
 800985e:	dc3d      	bgt.n	80098dc <Custom_STM_Event_Handler+0xb4>
 8009860:	f640 4201 	movw	r2, #3073	; 0xc01
 8009864:	4293      	cmp	r3, r2
 8009866:	d003      	beq.n	8009870 <Custom_STM_Event_Handler+0x48>
 8009868:	f640 4213 	movw	r2, #3091	; 0xc13
 800986c:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800986e:	e038      	b.n	80098e2 <Custom_STM_Event_Handler+0xba>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	3302      	adds	r3, #2
 8009874:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomVgsizeitreadHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	885b      	ldrh	r3, [r3, #2]
 800987a:	b29b      	uxth	r3, r3
 800987c:	461a      	mov	r2, r3
 800987e:	4b1d      	ldr	r3, [pc, #116]	; (80098f4 <Custom_STM_Event_Handler+0xcc>)
 8009880:	889b      	ldrh	r3, [r3, #4]
 8009882:	3302      	adds	r3, #2
 8009884:	429a      	cmp	r2, r3
 8009886:	d119      	bne.n	80098bc <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009888:	2301      	movs	r3, #1
 800988a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	7a1b      	ldrb	r3, [r3, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <Custom_STM_Event_Handler+0x74>
 8009896:	2b01      	cmp	r3, #1
 8009898:	d008      	beq.n	80098ac <Custom_STM_Event_Handler+0x84>
              break;
 800989a:	e01c      	b.n	80098d6 <Custom_STM_Event_Handler+0xae>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSIZEITREAD_NOTIFY_DISABLED_EVT;
 800989c:	2302      	movs	r3, #2
 800989e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80098a0:	f107 0308 	add.w	r3, r7, #8
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff ff73 	bl	8009790 <Custom_STM_App_Notification>
                break;
 80098aa:	e014      	b.n	80098d6 <Custom_STM_Event_Handler+0xae>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSIZEITREAD_NOTIFY_ENABLED_EVT;
 80098ac:	2301      	movs	r3, #1
 80098ae:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80098b0:	f107 0308 	add.w	r3, r7, #8
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff ff6b 	bl	8009790 <Custom_STM_App_Notification>
                break;
 80098ba:	e00c      	b.n	80098d6 <Custom_STM_Event_Handler+0xae>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomVgsicharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	885b      	ldrh	r3, [r3, #2]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	461a      	mov	r2, r3
 80098c4:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <Custom_STM_Event_Handler+0xcc>)
 80098c6:	885b      	ldrh	r3, [r3, #2]
 80098c8:	3301      	adds	r3, #1
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d108      	bne.n	80098e0 <Custom_STM_Event_Handler+0xb8>
            return_value = SVCCTL_EvtAckFlowEnable;
 80098ce:	2301      	movs	r3, #1
 80098d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80098d4:	e004      	b.n	80098e0 <Custom_STM_Event_Handler+0xb8>
 80098d6:	e003      	b.n	80098e0 <Custom_STM_Event_Handler+0xb8>
          break;
 80098d8:	bf00      	nop
 80098da:	e004      	b.n	80098e6 <Custom_STM_Event_Handler+0xbe>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80098dc:	bf00      	nop
 80098de:	e002      	b.n	80098e6 <Custom_STM_Event_Handler+0xbe>
          break;
 80098e0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80098e2:	e000      	b.n	80098e6 <Custom_STM_Event_Handler+0xbe>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80098e4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80098e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 80098ea:	4618      	mov	r0, r3
 80098ec:	3728      	adds	r7, #40	; 0x28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	20000afc 	.word	0x20000afc

080098f8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08c      	sub	sp, #48	; 0x30
 80098fc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80098fe:	2392      	movs	r3, #146	; 0x92
 8009900:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8009902:	484f      	ldr	r0, [pc, #316]	; (8009a40 <SVCCTL_InitCustomSvc+0x148>)
 8009904:	f7fe fcda 	bl	80082bc <SVCCTL_RegisterSvcHandler>
   *                                2 for VGSIZEITREAD +
   *                                1 for VGSIZEITREAD configuration descriptor +
   *                              = 6
   */

  COPY_VGSIZEITEMS_UUID(uuid.Char_UUID_128);
 8009908:	238f      	movs	r3, #143	; 0x8f
 800990a:	713b      	strb	r3, [r7, #4]
 800990c:	23e5      	movs	r3, #229	; 0xe5
 800990e:	717b      	strb	r3, [r7, #5]
 8009910:	23b3      	movs	r3, #179	; 0xb3
 8009912:	71bb      	strb	r3, [r7, #6]
 8009914:	23d5      	movs	r3, #213	; 0xd5
 8009916:	71fb      	strb	r3, [r7, #7]
 8009918:	232e      	movs	r3, #46	; 0x2e
 800991a:	723b      	strb	r3, [r7, #8]
 800991c:	237f      	movs	r3, #127	; 0x7f
 800991e:	727b      	strb	r3, [r7, #9]
 8009920:	234a      	movs	r3, #74	; 0x4a
 8009922:	72bb      	strb	r3, [r7, #10]
 8009924:	2398      	movs	r3, #152	; 0x98
 8009926:	72fb      	strb	r3, [r7, #11]
 8009928:	232a      	movs	r3, #42	; 0x2a
 800992a:	733b      	strb	r3, [r7, #12]
 800992c:	2348      	movs	r3, #72	; 0x48
 800992e:	737b      	strb	r3, [r7, #13]
 8009930:	237a      	movs	r3, #122	; 0x7a
 8009932:	73bb      	strb	r3, [r7, #14]
 8009934:	23cc      	movs	r3, #204	; 0xcc
 8009936:	73fb      	strb	r3, [r7, #15]
 8009938:	2300      	movs	r3, #0
 800993a:	743b      	strb	r3, [r7, #16]
 800993c:	2300      	movs	r3, #0
 800993e:	747b      	strb	r3, [r7, #17]
 8009940:	2300      	movs	r3, #0
 8009942:	74bb      	strb	r3, [r7, #18]
 8009944:	2300      	movs	r3, #0
 8009946:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009948:	1d39      	adds	r1, r7, #4
 800994a:	4b3e      	ldr	r3, [pc, #248]	; (8009a44 <SVCCTL_InitCustomSvc+0x14c>)
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	2306      	movs	r3, #6
 8009950:	2201      	movs	r2, #1
 8009952:	2002      	movs	r0, #2
 8009954:	f7fd ff7b 	bl	800784e <aci_gatt_add_service>
 8009958:	4603      	mov	r3, r0
 800995a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  VGSICHARWRITE
   */
  COPY_VGSICHARWRITE_UUID(uuid.Char_UUID_128);
 800995c:	2319      	movs	r3, #25
 800995e:	713b      	strb	r3, [r7, #4]
 8009960:	23ed      	movs	r3, #237	; 0xed
 8009962:	717b      	strb	r3, [r7, #5]
 8009964:	2382      	movs	r3, #130	; 0x82
 8009966:	71bb      	strb	r3, [r7, #6]
 8009968:	23ae      	movs	r3, #174	; 0xae
 800996a:	71fb      	strb	r3, [r7, #7]
 800996c:	23ed      	movs	r3, #237	; 0xed
 800996e:	723b      	strb	r3, [r7, #8]
 8009970:	2321      	movs	r3, #33	; 0x21
 8009972:	727b      	strb	r3, [r7, #9]
 8009974:	234c      	movs	r3, #76	; 0x4c
 8009976:	72bb      	strb	r3, [r7, #10]
 8009978:	239d      	movs	r3, #157	; 0x9d
 800997a:	72fb      	strb	r3, [r7, #11]
 800997c:	2341      	movs	r3, #65	; 0x41
 800997e:	733b      	strb	r3, [r7, #12]
 8009980:	2345      	movs	r3, #69	; 0x45
 8009982:	737b      	strb	r3, [r7, #13]
 8009984:	2322      	movs	r3, #34	; 0x22
 8009986:	73bb      	strb	r3, [r7, #14]
 8009988:	238e      	movs	r3, #142	; 0x8e
 800998a:	73fb      	strb	r3, [r7, #15]
 800998c:	2300      	movs	r3, #0
 800998e:	743b      	strb	r3, [r7, #16]
 8009990:	2300      	movs	r3, #0
 8009992:	747b      	strb	r3, [r7, #17]
 8009994:	2300      	movs	r3, #0
 8009996:	74bb      	strb	r3, [r7, #18]
 8009998:	2300      	movs	r3, #0
 800999a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomVgsizeitemsHdle,
 800999c:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <SVCCTL_InitCustomSvc+0x14c>)
 800999e:	8818      	ldrh	r0, [r3, #0]
 80099a0:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <SVCCTL_InitCustomSvc+0x150>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	1d3a      	adds	r2, r7, #4
 80099a8:	4928      	ldr	r1, [pc, #160]	; (8009a4c <SVCCTL_InitCustomSvc+0x154>)
 80099aa:	9105      	str	r1, [sp, #20]
 80099ac:	2100      	movs	r1, #0
 80099ae:	9104      	str	r1, [sp, #16]
 80099b0:	2110      	movs	r1, #16
 80099b2:	9103      	str	r1, [sp, #12]
 80099b4:	2101      	movs	r1, #1
 80099b6:	9102      	str	r1, [sp, #8]
 80099b8:	2101      	movs	r1, #1
 80099ba:	9101      	str	r1, [sp, #4]
 80099bc:	2108      	movs	r1, #8
 80099be:	9100      	str	r1, [sp, #0]
 80099c0:	2102      	movs	r1, #2
 80099c2:	f7fe f81a 	bl	80079fa <aci_gatt_add_char>
 80099c6:	4603      	mov	r3, r0
 80099c8:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : VGSICHARWRITE \n\r");
  }
  /**
   *  VGSIZEITREAD
   */
  COPY_VGSIZEITREAD_UUID(uuid.Char_UUID_128);
 80099ca:	2319      	movs	r3, #25
 80099cc:	713b      	strb	r3, [r7, #4]
 80099ce:	23ed      	movs	r3, #237	; 0xed
 80099d0:	717b      	strb	r3, [r7, #5]
 80099d2:	2382      	movs	r3, #130	; 0x82
 80099d4:	71bb      	strb	r3, [r7, #6]
 80099d6:	23ae      	movs	r3, #174	; 0xae
 80099d8:	71fb      	strb	r3, [r7, #7]
 80099da:	23ed      	movs	r3, #237	; 0xed
 80099dc:	723b      	strb	r3, [r7, #8]
 80099de:	2321      	movs	r3, #33	; 0x21
 80099e0:	727b      	strb	r3, [r7, #9]
 80099e2:	234c      	movs	r3, #76	; 0x4c
 80099e4:	72bb      	strb	r3, [r7, #10]
 80099e6:	239d      	movs	r3, #157	; 0x9d
 80099e8:	72fb      	strb	r3, [r7, #11]
 80099ea:	2341      	movs	r3, #65	; 0x41
 80099ec:	733b      	strb	r3, [r7, #12]
 80099ee:	2345      	movs	r3, #69	; 0x45
 80099f0:	737b      	strb	r3, [r7, #13]
 80099f2:	2322      	movs	r3, #34	; 0x22
 80099f4:	73bb      	strb	r3, [r7, #14]
 80099f6:	238e      	movs	r3, #142	; 0x8e
 80099f8:	73fb      	strb	r3, [r7, #15]
 80099fa:	2301      	movs	r3, #1
 80099fc:	743b      	strb	r3, [r7, #16]
 80099fe:	2300      	movs	r3, #0
 8009a00:	747b      	strb	r3, [r7, #17]
 8009a02:	2300      	movs	r3, #0
 8009a04:	74bb      	strb	r3, [r7, #18]
 8009a06:	2300      	movs	r3, #0
 8009a08:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomVgsizeitemsHdle,
 8009a0a:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <SVCCTL_InitCustomSvc+0x14c>)
 8009a0c:	8818      	ldrh	r0, [r3, #0]
 8009a0e:	4b10      	ldr	r3, [pc, #64]	; (8009a50 <SVCCTL_InitCustomSvc+0x158>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	1d3a      	adds	r2, r7, #4
 8009a16:	490f      	ldr	r1, [pc, #60]	; (8009a54 <SVCCTL_InitCustomSvc+0x15c>)
 8009a18:	9105      	str	r1, [sp, #20]
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	9104      	str	r1, [sp, #16]
 8009a1e:	2110      	movs	r1, #16
 8009a20:	9103      	str	r1, [sp, #12]
 8009a22:	2107      	movs	r1, #7
 8009a24:	9102      	str	r1, [sp, #8]
 8009a26:	2100      	movs	r1, #0
 8009a28:	9101      	str	r1, [sp, #4]
 8009a2a:	2110      	movs	r1, #16
 8009a2c:	9100      	str	r1, [sp, #0]
 8009a2e:	2102      	movs	r1, #2
 8009a30:	f7fd ffe3 	bl	80079fa <aci_gatt_add_char>
 8009a34:	4603      	mov	r3, r0
 8009a36:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009a38:	bf00      	nop
}
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	08009829 	.word	0x08009829
 8009a44:	20000afc 	.word	0x20000afc
 8009a48:	20000036 	.word	0x20000036
 8009a4c:	20000afe 	.word	0x20000afe
 8009a50:	20000037 	.word	0x20000037
 8009a54:	20000b00 	.word	0x20000b00

08009a58 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af02      	add	r7, sp, #8
 8009a5e:	4603      	mov	r3, r0
 8009a60:	6039      	str	r1, [r7, #0]
 8009a62:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009a64:	2392      	movs	r3, #146	; 0x92
 8009a66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <Custom_STM_App_Update_Char+0x1c>
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d00f      	beq.n	8009a92 <Custom_STM_App_Update_Char+0x3a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8009a72:	e01d      	b.n	8009ab0 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomVgsizeitemsHdle,
 8009a74:	4b11      	ldr	r3, [pc, #68]	; (8009abc <Custom_STM_App_Update_Char+0x64>)
 8009a76:	8818      	ldrh	r0, [r3, #0]
 8009a78:	4b10      	ldr	r3, [pc, #64]	; (8009abc <Custom_STM_App_Update_Char+0x64>)
 8009a7a:	8859      	ldrh	r1, [r3, #2]
 8009a7c:	4b10      	ldr	r3, [pc, #64]	; (8009ac0 <Custom_STM_App_Update_Char+0x68>)
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	f7fe f8bf 	bl	8007c0a <aci_gatt_update_char_value>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a90:	e00e      	b.n	8009ab0 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomVgsizeitemsHdle,
 8009a92:	4b0a      	ldr	r3, [pc, #40]	; (8009abc <Custom_STM_App_Update_Char+0x64>)
 8009a94:	8818      	ldrh	r0, [r3, #0]
 8009a96:	4b09      	ldr	r3, [pc, #36]	; (8009abc <Custom_STM_App_Update_Char+0x64>)
 8009a98:	8899      	ldrh	r1, [r3, #4]
 8009a9a:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <Custom_STM_App_Update_Char+0x6c>)
 8009a9c:	781a      	ldrb	r2, [r3, #0]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f7fe f8b0 	bl	8007c0a <aci_gatt_update_char_value>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	73fb      	strb	r3, [r7, #15]
      break;
 8009aae:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20000afc 	.word	0x20000afc
 8009ac0:	20000036 	.word	0x20000036
 8009ac4:	20000037 	.word	0x20000037

08009ac8 <LL_PWR_EnableBootC2>:
{
 8009ac8:	b480      	push	{r7}
 8009aca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009acc:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <LL_PWR_EnableBootC2+0x1c>)
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	4a04      	ldr	r2, [pc, #16]	; (8009ae4 <LL_PWR_EnableBootC2+0x1c>)
 8009ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad6:	60d3      	str	r3, [r2, #12]
}
 8009ad8:	bf00      	nop
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	58000400 	.word	0x58000400

08009ae8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009af0:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009af2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009af6:	4905      	ldr	r1, [pc, #20]	; (8009b0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	58000800 	.word	0x58000800

08009b10 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009b18:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009b1a:	6a1a      	ldr	r2, [r3, #32]
 8009b1c:	4904      	ldr	r1, [pc, #16]	; (8009b30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	620b      	str	r3, [r1, #32]
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	58000800 	.word	0x58000800

08009b34 <LL_AHB3_GRP1_EnableClock>:
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4013      	ands	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b58:	68fb      	ldr	r3, [r7, #12]
}
 8009b5a:	bf00      	nop
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b085      	sub	sp, #20
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b72:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b86:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b90:	68fb      	ldr	r3, [r7, #12]
}
 8009b92:	bf00      	nop
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <LL_C1_IPCC_EnableIT_TXF>:
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b083      	sub	sp, #12
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	601a      	str	r2, [r3, #0]
}
 8009bb2:	bf00      	nop
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <LL_C1_IPCC_EnableIT_RXO>:
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b083      	sub	sp, #12
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f043 0201 	orr.w	r2, r3, #1
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
}
 8009bd2:	bf00      	nop
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <LL_C1_IPCC_EnableTransmitChannel>:
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	041b      	lsls	r3, r3, #16
 8009bf0:	43db      	mvns	r3, r3
 8009bf2:	401a      	ands	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	605a      	str	r2, [r3, #4]
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	041b      	lsls	r3, r3, #16
 8009c16:	431a      	orrs	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	605a      	str	r2, [r3, #4]
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	43db      	mvns	r3, r3
 8009c3a:	401a      	ands	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	605a      	str	r2, [r3, #4]
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	609a      	str	r2, [r3, #8]
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	041a      	lsls	r2, r3, #16
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	609a      	str	r2, [r3, #8]
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68da      	ldr	r2, [r3, #12]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	4013      	ands	r3, r2
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d101      	bne.n	8009ca2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	69da      	ldr	r2, [r3, #28]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d101      	bne.n	8009ccc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e000      	b.n	8009cce <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
	...

08009cdc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009ce0:	2102      	movs	r1, #2
 8009ce2:	4818      	ldr	r0, [pc, #96]	; (8009d44 <HW_IPCC_Rx_Handler+0x68>)
 8009ce4:	f7ff ffe4 	bl	8009cb0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d008      	beq.n	8009d00 <HW_IPCC_Rx_Handler+0x24>
 8009cee:	4b15      	ldr	r3, [pc, #84]	; (8009d44 <HW_IPCC_Rx_Handler+0x68>)
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009cfa:	f000 f8d5 	bl	8009ea8 <HW_IPCC_SYS_EvtHandler>
 8009cfe:	e01e      	b.n	8009d3e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009d00:	2101      	movs	r1, #1
 8009d02:	4810      	ldr	r0, [pc, #64]	; (8009d44 <HW_IPCC_Rx_Handler+0x68>)
 8009d04:	f7ff ffd4 	bl	8009cb0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d008      	beq.n	8009d20 <HW_IPCC_Rx_Handler+0x44>
 8009d0e:	4b0d      	ldr	r3, [pc, #52]	; (8009d44 <HW_IPCC_Rx_Handler+0x68>)
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009d1a:	f000 f889 	bl	8009e30 <HW_IPCC_BLE_EvtHandler>
 8009d1e:	e00e      	b.n	8009d3e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009d20:	2108      	movs	r1, #8
 8009d22:	4808      	ldr	r0, [pc, #32]	; (8009d44 <HW_IPCC_Rx_Handler+0x68>)
 8009d24:	f7ff ffc4 	bl	8009cb0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d008      	beq.n	8009d40 <HW_IPCC_Rx_Handler+0x64>
 8009d2e:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <HW_IPCC_Rx_Handler+0x68>)
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f003 0308 	and.w	r3, r3, #8
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d102      	bne.n	8009d40 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009d3a:	f000 f901 	bl	8009f40 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009d3e:	bf00      	nop
 8009d40:	bf00      	nop
}
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	58000c00 	.word	0x58000c00

08009d48 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009d4c:	2102      	movs	r1, #2
 8009d4e:	4818      	ldr	r0, [pc, #96]	; (8009db0 <HW_IPCC_Tx_Handler+0x68>)
 8009d50:	f7ff ff99 	bl	8009c86 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d108      	bne.n	8009d6c <HW_IPCC_Tx_Handler+0x24>
 8009d5a:	4b15      	ldr	r3, [pc, #84]	; (8009db0 <HW_IPCC_Tx_Handler+0x68>)
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009d66:	f000 f893 	bl	8009e90 <HW_IPCC_SYS_CmdEvtHandler>
 8009d6a:	e01e      	b.n	8009daa <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009d6c:	2108      	movs	r1, #8
 8009d6e:	4810      	ldr	r0, [pc, #64]	; (8009db0 <HW_IPCC_Tx_Handler+0x68>)
 8009d70:	f7ff ff89 	bl	8009c86 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d108      	bne.n	8009d8c <HW_IPCC_Tx_Handler+0x44>
 8009d7a:	4b0d      	ldr	r3, [pc, #52]	; (8009db0 <HW_IPCC_Tx_Handler+0x68>)
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d102      	bne.n	8009d8c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009d86:	f000 f8bd 	bl	8009f04 <HW_IPCC_MM_FreeBufHandler>
 8009d8a:	e00e      	b.n	8009daa <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009d8c:	2120      	movs	r1, #32
 8009d8e:	4808      	ldr	r0, [pc, #32]	; (8009db0 <HW_IPCC_Tx_Handler+0x68>)
 8009d90:	f7ff ff79 	bl	8009c86 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d108      	bne.n	8009dac <HW_IPCC_Tx_Handler+0x64>
 8009d9a:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <HW_IPCC_Tx_Handler+0x68>)
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d102      	bne.n	8009dac <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009da6:	f000 f84f 	bl	8009e48 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009daa:	bf00      	nop
 8009dac:	bf00      	nop
}
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	58000c00 	.word	0x58000c00

08009db4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009db8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009dbc:	f7ff fed3 	bl	8009b66 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009dc0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009dc4:	f7ff fea4 	bl	8009b10 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009dc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009dcc:	f7ff fe8c 	bl	8009ae8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009dd0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009dd2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009dd4:	f7ff fe78 	bl	8009ac8 <LL_PWR_EnableBootC2>

  return;
 8009dd8:	bf00      	nop
}
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009de0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009de4:	f7ff fea6 	bl	8009b34 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009de8:	4806      	ldr	r0, [pc, #24]	; (8009e04 <HW_IPCC_Init+0x28>)
 8009dea:	f7ff fee8 	bl	8009bbe <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009dee:	4805      	ldr	r0, [pc, #20]	; (8009e04 <HW_IPCC_Init+0x28>)
 8009df0:	f7ff fed5 	bl	8009b9e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009df4:	202c      	movs	r0, #44	; 0x2c
 8009df6:	f7f9 f952 	bl	800309e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009dfa:	202d      	movs	r0, #45	; 0x2d
 8009dfc:	f7f9 f94f 	bl	800309e <HAL_NVIC_EnableIRQ>

  return;
 8009e00:	bf00      	nop
}
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	58000c00 	.word	0x58000c00

08009e08 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4802      	ldr	r0, [pc, #8]	; (8009e18 <HW_IPCC_BLE_Init+0x10>)
 8009e10:	f7ff ff0a 	bl	8009c28 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009e14:	bf00      	nop
}
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	58000c00 	.word	0x58000c00

08009e1c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009e20:	2101      	movs	r1, #1
 8009e22:	4802      	ldr	r0, [pc, #8]	; (8009e2c <HW_IPCC_BLE_SendCmd+0x10>)
 8009e24:	f7ff ff20 	bl	8009c68 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009e28:	bf00      	nop
}
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	58000c00 	.word	0x58000c00

08009e30 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009e34:	f7fe fefc 	bl	8008c30 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009e38:	2101      	movs	r1, #1
 8009e3a:	4802      	ldr	r0, [pc, #8]	; (8009e44 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009e3c:	f7ff ff06 	bl	8009c4c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009e40:	bf00      	nop
}
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	58000c00 	.word	0x58000c00

08009e48 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009e4c:	2120      	movs	r1, #32
 8009e4e:	4803      	ldr	r0, [pc, #12]	; (8009e5c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009e50:	f7ff fed8 	bl	8009c04 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009e54:	f7fe ff1c 	bl	8008c90 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009e58:	bf00      	nop
}
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	58000c00 	.word	0x58000c00

08009e60 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009e64:	2102      	movs	r1, #2
 8009e66:	4802      	ldr	r0, [pc, #8]	; (8009e70 <HW_IPCC_SYS_Init+0x10>)
 8009e68:	f7ff fede 	bl	8009c28 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009e6c:	bf00      	nop
}
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	58000c00 	.word	0x58000c00

08009e74 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009e78:	2102      	movs	r1, #2
 8009e7a:	4804      	ldr	r0, [pc, #16]	; (8009e8c <HW_IPCC_SYS_SendCmd+0x18>)
 8009e7c:	f7ff fef4 	bl	8009c68 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009e80:	2102      	movs	r1, #2
 8009e82:	4802      	ldr	r0, [pc, #8]	; (8009e8c <HW_IPCC_SYS_SendCmd+0x18>)
 8009e84:	f7ff feab 	bl	8009bde <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009e88:	bf00      	nop
}
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	58000c00 	.word	0x58000c00

08009e90 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009e94:	2102      	movs	r1, #2
 8009e96:	4803      	ldr	r0, [pc, #12]	; (8009ea4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009e98:	f7ff feb4 	bl	8009c04 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009e9c:	f7fe ff48 	bl	8008d30 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009ea0:	bf00      	nop
}
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	58000c00 	.word	0x58000c00

08009ea8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009eac:	f7fe ff56 	bl	8008d5c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009eb0:	2102      	movs	r1, #2
 8009eb2:	4802      	ldr	r0, [pc, #8]	; (8009ebc <HW_IPCC_SYS_EvtHandler+0x14>)
 8009eb4:	f7ff feca 	bl	8009c4c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009eb8:	bf00      	nop
}
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	58000c00 	.word	0x58000c00

08009ec0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009ec8:	2108      	movs	r1, #8
 8009eca:	480c      	ldr	r0, [pc, #48]	; (8009efc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009ecc:	f7ff fedb 	bl	8009c86 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d007      	beq.n	8009ee6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009ed6:	4a0a      	ldr	r2, [pc, #40]	; (8009f00 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009edc:	2108      	movs	r1, #8
 8009ede:	4807      	ldr	r0, [pc, #28]	; (8009efc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009ee0:	f7ff fe7d 	bl	8009bde <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009ee4:	e006      	b.n	8009ef4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009eea:	2108      	movs	r1, #8
 8009eec:	4803      	ldr	r0, [pc, #12]	; (8009efc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009eee:	f7ff febb 	bl	8009c68 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009ef2:	bf00      	nop
}
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	58000c00 	.word	0x58000c00
 8009f00:	20000b04 	.word	0x20000b04

08009f04 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009f08:	2108      	movs	r1, #8
 8009f0a:	4806      	ldr	r0, [pc, #24]	; (8009f24 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009f0c:	f7ff fe7a 	bl	8009c04 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009f10:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009f16:	2108      	movs	r1, #8
 8009f18:	4802      	ldr	r0, [pc, #8]	; (8009f24 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009f1a:	f7ff fea5 	bl	8009c68 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009f1e:	bf00      	nop
}
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	58000c00 	.word	0x58000c00
 8009f28:	20000b04 	.word	0x20000b04

08009f2c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009f30:	2108      	movs	r1, #8
 8009f32:	4802      	ldr	r0, [pc, #8]	; (8009f3c <HW_IPCC_TRACES_Init+0x10>)
 8009f34:	f7ff fe78 	bl	8009c28 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009f38:	bf00      	nop
}
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	58000c00 	.word	0x58000c00

08009f40 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009f44:	f7fe ffb2 	bl	8008eac <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009f48:	2108      	movs	r1, #8
 8009f4a:	4802      	ldr	r0, [pc, #8]	; (8009f54 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009f4c:	f7ff fe7e 	bl	8009c4c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009f50:	bf00      	nop
}
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	58000c00 	.word	0x58000c00

08009f58 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009f5c:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <UTIL_LPM_Init+0x1c>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009f62:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <UTIL_LPM_Init+0x20>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009f68:	bf00      	nop
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	20000b08 	.word	0x20000b08
 8009f78:	20000b0c 	.word	0x20000b0c

08009f7c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f88:	f3ef 8310 	mrs	r3, PRIMASK
 8009f8c:	613b      	str	r3, [r7, #16]
  return(result);
 8009f8e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009f90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f92:	b672      	cpsid	i
}
 8009f94:	bf00      	nop
  
  switch(state)
 8009f96:	78fb      	ldrb	r3, [r7, #3]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d008      	beq.n	8009fae <UTIL_LPM_SetOffMode+0x32>
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d10e      	bne.n	8009fbe <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009fa0:	4b0d      	ldr	r3, [pc, #52]	; (8009fd8 <UTIL_LPM_SetOffMode+0x5c>)
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	4a0b      	ldr	r2, [pc, #44]	; (8009fd8 <UTIL_LPM_SetOffMode+0x5c>)
 8009faa:	6013      	str	r3, [r2, #0]
      break;
 8009fac:	e008      	b.n	8009fc0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	43da      	mvns	r2, r3
 8009fb2:	4b09      	ldr	r3, [pc, #36]	; (8009fd8 <UTIL_LPM_SetOffMode+0x5c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	4a07      	ldr	r2, [pc, #28]	; (8009fd8 <UTIL_LPM_SetOffMode+0x5c>)
 8009fba:	6013      	str	r3, [r2, #0]
      break;
 8009fbc:	e000      	b.n	8009fc0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009fbe:	bf00      	nop
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f383 8810 	msr	PRIMASK, r3
}
 8009fca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009fcc:	bf00      	nop
 8009fce:	371c      	adds	r7, #28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	20000b0c 	.word	0x20000b0c

08009fdc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b090      	sub	sp, #64	; 0x40
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009fe4:	4b73      	ldr	r3, [pc, #460]	; (800a1b4 <UTIL_SEQ_Run+0x1d8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009fea:	4b72      	ldr	r3, [pc, #456]	; (800a1b4 <UTIL_SEQ_Run+0x1d8>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	4a70      	ldr	r2, [pc, #448]	; (800a1b4 <UTIL_SEQ_Run+0x1d8>)
 8009ff4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009ff6:	4b70      	ldr	r3, [pc, #448]	; (800a1b8 <UTIL_SEQ_Run+0x1dc>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009ffc:	4b6f      	ldr	r3, [pc, #444]	; (800a1bc <UTIL_SEQ_Run+0x1e0>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a002:	4b6f      	ldr	r3, [pc, #444]	; (800a1c0 <UTIL_SEQ_Run+0x1e4>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a008:	4b6e      	ldr	r3, [pc, #440]	; (800a1c4 <UTIL_SEQ_Run+0x1e8>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a00e:	e08d      	b.n	800a12c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a010:	2300      	movs	r3, #0
 800a012:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a014:	e002      	b.n	800a01c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a018:	3301      	adds	r3, #1
 800a01a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a01c:	4a6a      	ldr	r2, [pc, #424]	; (800a1c8 <UTIL_SEQ_Run+0x1ec>)
 800a01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a020:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	401a      	ands	r2, r3
 800a028:	4b62      	ldr	r3, [pc, #392]	; (800a1b4 <UTIL_SEQ_Run+0x1d8>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4013      	ands	r3, r2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0f1      	beq.n	800a016 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a032:	4a65      	ldr	r2, [pc, #404]	; (800a1c8 <UTIL_SEQ_Run+0x1ec>)
 800a034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a036:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	401a      	ands	r2, r3
 800a03e:	4b5d      	ldr	r3, [pc, #372]	; (800a1b4 <UTIL_SEQ_Run+0x1d8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4013      	ands	r3, r2
 800a044:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a046:	4a60      	ldr	r2, [pc, #384]	; (800a1c8 <UTIL_SEQ_Run+0x1ec>)
 800a048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	4413      	add	r3, r2
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	4013      	ands	r3, r2
 800a054:	2b00      	cmp	r3, #0
 800a056:	d106      	bne.n	800a066 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a058:	4a5b      	ldr	r2, [pc, #364]	; (800a1c8 <UTIL_SEQ_Run+0x1ec>)
 800a05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	4413      	add	r3, r2
 800a060:	f04f 32ff 	mov.w	r2, #4294967295
 800a064:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a066:	4a58      	ldr	r2, [pc, #352]	; (800a1c8 <UTIL_SEQ_Run+0x1ec>)
 800a068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a06a:	00db      	lsls	r3, r3, #3
 800a06c:	4413      	add	r3, r2
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	4013      	ands	r3, r2
 800a074:	4618      	mov	r0, r3
 800a076:	f000 f9b3 	bl	800a3e0 <SEQ_BitPosition>
 800a07a:	4603      	mov	r3, r0
 800a07c:	461a      	mov	r2, r3
 800a07e:	4b53      	ldr	r3, [pc, #332]	; (800a1cc <UTIL_SEQ_Run+0x1f0>)
 800a080:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a082:	4a51      	ldr	r2, [pc, #324]	; (800a1c8 <UTIL_SEQ_Run+0x1ec>)
 800a084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	4413      	add	r3, r2
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	4b4f      	ldr	r3, [pc, #316]	; (800a1cc <UTIL_SEQ_Run+0x1f0>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2101      	movs	r1, #1
 800a092:	fa01 f303 	lsl.w	r3, r1, r3
 800a096:	43db      	mvns	r3, r3
 800a098:	401a      	ands	r2, r3
 800a09a:	494b      	ldr	r1, [pc, #300]	; (800a1c8 <UTIL_SEQ_Run+0x1ec>)
 800a09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	440b      	add	r3, r1
 800a0a2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a0a8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a0aa:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a0ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0ae:	b672      	cpsid	i
}
 800a0b0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a0b2:	4b46      	ldr	r3, [pc, #280]	; (800a1cc <UTIL_SEQ_Run+0x1f0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0bc:	43da      	mvns	r2, r3
 800a0be:	4b3e      	ldr	r3, [pc, #248]	; (800a1b8 <UTIL_SEQ_Run+0x1dc>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	4a3c      	ldr	r2, [pc, #240]	; (800a1b8 <UTIL_SEQ_Run+0x1dc>)
 800a0c6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0cc:	e013      	b.n	800a0f6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	4a3d      	ldr	r2, [pc, #244]	; (800a1c8 <UTIL_SEQ_Run+0x1ec>)
 800a0d4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a0d8:	4b3c      	ldr	r3, [pc, #240]	; (800a1cc <UTIL_SEQ_Run+0x1f0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e2:	43da      	mvns	r2, r3
 800a0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	400a      	ands	r2, r1
 800a0ea:	4937      	ldr	r1, [pc, #220]	; (800a1c8 <UTIL_SEQ_Run+0x1ec>)
 800a0ec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e8      	bne.n	800a0ce <UTIL_SEQ_Run+0xf2>
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f383 8810 	msr	PRIMASK, r3
}
 800a106:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a108:	4b30      	ldr	r3, [pc, #192]	; (800a1cc <UTIL_SEQ_Run+0x1f0>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a30      	ldr	r2, [pc, #192]	; (800a1d0 <UTIL_SEQ_Run+0x1f4>)
 800a10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a112:	4798      	blx	r3

    local_taskset = TaskSet;
 800a114:	4b28      	ldr	r3, [pc, #160]	; (800a1b8 <UTIL_SEQ_Run+0x1dc>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a11a:	4b28      	ldr	r3, [pc, #160]	; (800a1bc <UTIL_SEQ_Run+0x1e0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a120:	4b27      	ldr	r3, [pc, #156]	; (800a1c0 <UTIL_SEQ_Run+0x1e4>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a126:	4b27      	ldr	r3, [pc, #156]	; (800a1c4 <UTIL_SEQ_Run+0x1e8>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	401a      	ands	r2, r3
 800a132:	4b20      	ldr	r3, [pc, #128]	; (800a1b4 <UTIL_SEQ_Run+0x1d8>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4013      	ands	r3, r2
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d005      	beq.n	800a148 <UTIL_SEQ_Run+0x16c>
 800a13c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	4013      	ands	r3, r2
 800a142:	2b00      	cmp	r3, #0
 800a144:	f43f af64 	beq.w	800a010 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a148:	4b20      	ldr	r3, [pc, #128]	; (800a1cc <UTIL_SEQ_Run+0x1f0>)
 800a14a:	f04f 32ff 	mov.w	r2, #4294967295
 800a14e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a150:	f000 f938 	bl	800a3c4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a154:	f3ef 8310 	mrs	r3, PRIMASK
 800a158:	613b      	str	r3, [r7, #16]
  return(result);
 800a15a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a15c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a15e:	b672      	cpsid	i
}
 800a160:	bf00      	nop
  local_taskset = TaskSet;
 800a162:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <UTIL_SEQ_Run+0x1dc>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a168:	4b14      	ldr	r3, [pc, #80]	; (800a1bc <UTIL_SEQ_Run+0x1e0>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a16e:	4b14      	ldr	r3, [pc, #80]	; (800a1c0 <UTIL_SEQ_Run+0x1e4>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a178:	401a      	ands	r2, r3
 800a17a:	4b0e      	ldr	r3, [pc, #56]	; (800a1b4 <UTIL_SEQ_Run+0x1d8>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4013      	ands	r3, r2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d107      	bne.n	800a194 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a184:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <UTIL_SEQ_Run+0x1e8>)
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	4013      	ands	r3, r2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a190:	f7f6 fc34 	bl	80009fc <UTIL_SEQ_Idle>
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f383 8810 	msr	PRIMASK, r3
}
 800a19e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a1a0:	f000 f917 	bl	800a3d2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a1a4:	4a03      	ldr	r2, [pc, #12]	; (800a1b4 <UTIL_SEQ_Run+0x1d8>)
 800a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a8:	6013      	str	r3, [r2, #0]

  return;
 800a1aa:	bf00      	nop
}
 800a1ac:	3740      	adds	r7, #64	; 0x40
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	2000003c 	.word	0x2000003c
 800a1b8:	20000b10 	.word	0x20000b10
 800a1bc:	20000b14 	.word	0x20000b14
 800a1c0:	20000038 	.word	0x20000038
 800a1c4:	20000b18 	.word	0x20000b18
 800a1c8:	20000ba0 	.word	0x20000ba0
 800a1cc:	20000b1c 	.word	0x20000b1c
 800a1d0:	20000b20 	.word	0x20000b20

0800a1d4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e4:	617b      	str	r3, [r7, #20]
  return(result);
 800a1e6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a1e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1ea:	b672      	cpsid	i
}
 800a1ec:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 f8f6 	bl	800a3e0 <SEQ_BitPosition>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4a06      	ldr	r2, [pc, #24]	; (800a214 <UTIL_SEQ_RegTask+0x40>)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	f383 8810 	msr	PRIMASK, r3
}
 800a20a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a20c:	bf00      	nop
}
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	20000b20 	.word	0x20000b20

0800a218 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a222:	f3ef 8310 	mrs	r3, PRIMASK
 800a226:	60fb      	str	r3, [r7, #12]
  return(result);
 800a228:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a22a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a22c:	b672      	cpsid	i
}
 800a22e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a230:	4b0d      	ldr	r3, [pc, #52]	; (800a268 <UTIL_SEQ_SetTask+0x50>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4313      	orrs	r3, r2
 800a238:	4a0b      	ldr	r2, [pc, #44]	; (800a268 <UTIL_SEQ_SetTask+0x50>)
 800a23a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a23c:	4a0b      	ldr	r2, [pc, #44]	; (800a26c <UTIL_SEQ_SetTask+0x54>)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	431a      	orrs	r2, r3
 800a248:	4908      	ldr	r1, [pc, #32]	; (800a26c <UTIL_SEQ_SetTask+0x54>)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	f383 8810 	msr	PRIMASK, r3
}
 800a25a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a25c:	bf00      	nop
}
 800a25e:	371c      	adds	r7, #28
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	20000b10 	.word	0x20000b10
 800a26c:	20000ba0 	.word	0x20000ba0

0800a270 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a278:	f3ef 8310 	mrs	r3, PRIMASK
 800a27c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a27e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a282:	b672      	cpsid	i
}
 800a284:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	43da      	mvns	r2, r3
 800a28a:	4b08      	ldr	r3, [pc, #32]	; (800a2ac <UTIL_SEQ_PauseTask+0x3c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4013      	ands	r3, r2
 800a290:	4a06      	ldr	r2, [pc, #24]	; (800a2ac <UTIL_SEQ_PauseTask+0x3c>)
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f383 8810 	msr	PRIMASK, r3
}
 800a29e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a2a0:	bf00      	nop
}
 800a2a2:	371c      	adds	r7, #28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	20000038 	.word	0x20000038

0800a2b0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a2c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2c2:	b672      	cpsid	i
}
 800a2c4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <UTIL_SEQ_ResumeTask+0x3c>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	4a07      	ldr	r2, [pc, #28]	; (800a2ec <UTIL_SEQ_ResumeTask+0x3c>)
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f383 8810 	msr	PRIMASK, r3
}
 800a2dc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a2de:	bf00      	nop
}
 800a2e0:	371c      	adds	r7, #28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	20000038 	.word	0x20000038

0800a2f0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a300:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a302:	b672      	cpsid	i
}
 800a304:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a306:	4b09      	ldr	r3, [pc, #36]	; (800a32c <UTIL_SEQ_SetEvt+0x3c>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	4a07      	ldr	r2, [pc, #28]	; (800a32c <UTIL_SEQ_SetEvt+0x3c>)
 800a310:	6013      	str	r3, [r2, #0]
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f383 8810 	msr	PRIMASK, r3
}
 800a31c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a31e:	bf00      	nop
}
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	20000b14 	.word	0x20000b14

0800a330 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a338:	4b1f      	ldr	r3, [pc, #124]	; (800a3b8 <UTIL_SEQ_WaitEvt+0x88>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a33e:	4b1e      	ldr	r3, [pc, #120]	; (800a3b8 <UTIL_SEQ_WaitEvt+0x88>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a346:	d102      	bne.n	800a34e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
 800a34c:	e005      	b.n	800a35a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a34e:	4b1a      	ldr	r3, [pc, #104]	; (800a3b8 <UTIL_SEQ_WaitEvt+0x88>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2201      	movs	r2, #1
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a35a:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <UTIL_SEQ_WaitEvt+0x8c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a360:	4a16      	ldr	r2, [pc, #88]	; (800a3bc <UTIL_SEQ_WaitEvt+0x8c>)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a366:	e003      	b.n	800a370 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a368:	6879      	ldr	r1, [r7, #4]
 800a36a:	69f8      	ldr	r0, [r7, #28]
 800a36c:	f7f6 fb4d 	bl	8000a0a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a370:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <UTIL_SEQ_WaitEvt+0x90>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4013      	ands	r3, r2
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0f5      	beq.n	800a368 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a37c:	4a0e      	ldr	r2, [pc, #56]	; (800a3b8 <UTIL_SEQ_WaitEvt+0x88>)
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a382:	f3ef 8310 	mrs	r3, PRIMASK
 800a386:	60bb      	str	r3, [r7, #8]
  return(result);
 800a388:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a38a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a38c:	b672      	cpsid	i
}
 800a38e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	43da      	mvns	r2, r3
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <UTIL_SEQ_WaitEvt+0x90>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4013      	ands	r3, r2
 800a39a:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <UTIL_SEQ_WaitEvt+0x90>)
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f383 8810 	msr	PRIMASK, r3
}
 800a3a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a3aa:	4a04      	ldr	r2, [pc, #16]	; (800a3bc <UTIL_SEQ_WaitEvt+0x8c>)
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	6013      	str	r3, [r2, #0]
  return;
 800a3b0:	bf00      	nop
}
 800a3b2:	3720      	adds	r7, #32
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20000b1c 	.word	0x20000b1c
 800a3bc:	20000b18 	.word	0x20000b18
 800a3c0:	20000b14 	.word	0x20000b14

0800a3c4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a3c8:	bf00      	nop
}
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a3d6:	bf00      	nop
}
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	0c1b      	lsrs	r3, r3, #16
 800a3f4:	041b      	lsls	r3, r3, #16
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d104      	bne.n	800a404 <SEQ_BitPosition+0x24>
 800a3fa:	2310      	movs	r3, #16
 800a3fc:	73fb      	strb	r3, [r7, #15]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	041b      	lsls	r3, r3, #16
 800a402:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d105      	bne.n	800a41a <SEQ_BitPosition+0x3a>
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
 800a410:	3308      	adds	r3, #8
 800a412:	73fb      	strb	r3, [r7, #15]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	021b      	lsls	r3, r3, #8
 800a418:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d105      	bne.n	800a430 <SEQ_BitPosition+0x50>
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	3304      	adds	r3, #4
 800a428:	73fb      	strb	r3, [r7, #15]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	011b      	lsls	r3, r3, #4
 800a42e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	0f1b      	lsrs	r3, r3, #28
 800a434:	4a07      	ldr	r2, [pc, #28]	; (800a454 <SEQ_BitPosition+0x74>)
 800a436:	5cd2      	ldrb	r2, [r2, r3]
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	4413      	add	r3, r2
 800a43c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
 800a440:	f1c3 031f 	rsb	r3, r3, #31
 800a444:	b2db      	uxtb	r3, r3
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	0800a78c 	.word	0x0800a78c

0800a458 <memset>:
 800a458:	4402      	add	r2, r0
 800a45a:	4603      	mov	r3, r0
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d100      	bne.n	800a462 <memset+0xa>
 800a460:	4770      	bx	lr
 800a462:	f803 1b01 	strb.w	r1, [r3], #1
 800a466:	e7f9      	b.n	800a45c <memset+0x4>

0800a468 <__libc_init_array>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	4d0d      	ldr	r5, [pc, #52]	; (800a4a0 <__libc_init_array+0x38>)
 800a46c:	4c0d      	ldr	r4, [pc, #52]	; (800a4a4 <__libc_init_array+0x3c>)
 800a46e:	1b64      	subs	r4, r4, r5
 800a470:	10a4      	asrs	r4, r4, #2
 800a472:	2600      	movs	r6, #0
 800a474:	42a6      	cmp	r6, r4
 800a476:	d109      	bne.n	800a48c <__libc_init_array+0x24>
 800a478:	4d0b      	ldr	r5, [pc, #44]	; (800a4a8 <__libc_init_array+0x40>)
 800a47a:	4c0c      	ldr	r4, [pc, #48]	; (800a4ac <__libc_init_array+0x44>)
 800a47c:	f000 f826 	bl	800a4cc <_init>
 800a480:	1b64      	subs	r4, r4, r5
 800a482:	10a4      	asrs	r4, r4, #2
 800a484:	2600      	movs	r6, #0
 800a486:	42a6      	cmp	r6, r4
 800a488:	d105      	bne.n	800a496 <__libc_init_array+0x2e>
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a490:	4798      	blx	r3
 800a492:	3601      	adds	r6, #1
 800a494:	e7ee      	b.n	800a474 <__libc_init_array+0xc>
 800a496:	f855 3b04 	ldr.w	r3, [r5], #4
 800a49a:	4798      	blx	r3
 800a49c:	3601      	adds	r6, #1
 800a49e:	e7f2      	b.n	800a486 <__libc_init_array+0x1e>
 800a4a0:	0800a79c 	.word	0x0800a79c
 800a4a4:	0800a79c 	.word	0x0800a79c
 800a4a8:	0800a79c 	.word	0x0800a79c
 800a4ac:	0800a7a0 	.word	0x0800a7a0

0800a4b0 <memcpy>:
 800a4b0:	440a      	add	r2, r1
 800a4b2:	4291      	cmp	r1, r2
 800a4b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4b8:	d100      	bne.n	800a4bc <memcpy+0xc>
 800a4ba:	4770      	bx	lr
 800a4bc:	b510      	push	{r4, lr}
 800a4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4c6:	4291      	cmp	r1, r2
 800a4c8:	d1f9      	bne.n	800a4be <memcpy+0xe>
 800a4ca:	bd10      	pop	{r4, pc}

0800a4cc <_init>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr

0800a4d8 <_fini>:
 800a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4da:	bf00      	nop
 800a4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4de:	bc08      	pop	{r3}
 800a4e0:	469e      	mov	lr, r3
 800a4e2:	4770      	bx	lr
