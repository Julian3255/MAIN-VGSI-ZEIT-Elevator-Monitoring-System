
EMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a020  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800a15c  0800a15c  0001a15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a418  0800a418  0001a418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000038  20000008  0800a41c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 MB_MEM2       00000883  20000040  0800a454  00020040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200008c4  0800acd7  000208c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200008fc  0800ad0c  000208fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000910  0800ad1d  00020910  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e6c  0800ad1d  00020e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002090d  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  0002093d  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002df8e  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000061c2  00000000  00000000  0004e90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029b8  00000000  00000000  00054ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001fea  00000000  00000000  00057488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c16a  00000000  00000000  00059472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002e7c9  00000000  00000000  000855dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f933a  00000000  00000000  000b3da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000adac  00000000  00000000  001ad0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007e  00000000  00000000  001b7e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000910 	.word	0x20000910
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a144 	.word	0x0800a144

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000914 	.word	0x20000914
 8000178:	0800a144 	.word	0x0800a144

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000196:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800019a:	4905      	ldr	r1, [pc, #20]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4313      	orrs	r3, r2
 80001a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr
 80001b0:	58000800 	.word	0x58000800

080001b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4013      	ands	r3, r2
 80001d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d8:	68fb      	ldr	r3, [r7, #12]
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b085      	sub	sp, #20
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80001f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4013      	ands	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000210:	68fb      	ldr	r3, [r7, #12]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021e:	b580      	push	{r7, lr}
 8000220:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000222:	f002 fc07 	bl	8002a34 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000226:	f002 fc0b 	bl	8002a40 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800022a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800022e:	f7ff ffad 	bl	800018c <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000232:	f000 f821 	bl	8000278 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000236:	f000 f8c1 	bl	80003bc <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800023a:	bf00      	nop
}
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <APPD_EnableCPU2+0x34>)
 8000248:	1d3c      	adds	r4, r7, #4
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000254:	c403      	stmia	r4!, {r0, r1}
 8000256:	8022      	strh	r2, [r4, #0]
 8000258:	3402      	adds	r4, #2
 800025a:	0c13      	lsrs	r3, r2, #16
 800025c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800025e:	f008 fc59 	bl	8008b14 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f007 fef4 	bl	8008052 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800026a:	bf00      	nop
}
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	bf00      	nop
 8000274:	0800a15c 	.word	0x0800a15c

08000278 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000298:	2300      	movs	r3, #0
 800029a:	77fb      	strb	r3, [r7, #31]
 800029c:	e036      	b.n	800030c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800029e:	7ffb      	ldrb	r3, [r7, #31]
 80002a0:	4a43      	ldr	r2, [pc, #268]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	4413      	add	r3, r2
 80002a6:	799b      	ldrb	r3, [r3, #6]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d02c      	beq.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002ac:	7ffb      	ldrb	r3, [r7, #31]
 80002ae:	4a40      	ldr	r2, [pc, #256]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002b4:	4a3f      	ldr	r2, [pc, #252]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d01b      	beq.n	80002f2 <APPD_SetCPU2GpioConfig+0x7a>
 80002ba:	4a3e      	ldr	r2, [pc, #248]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d821      	bhi.n	8000304 <APPD_SetCPU2GpioConfig+0x8c>
 80002c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002c4:	d003      	beq.n	80002ce <APPD_SetCPU2GpioConfig+0x56>
 80002c6:	4a3c      	ldr	r2, [pc, #240]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d009      	beq.n	80002e0 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 80002cc:	e01a      	b.n	8000304 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002ce:	7ffb      	ldrb	r3, [r7, #31]
 80002d0:	4a37      	ldr	r2, [pc, #220]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	4413      	add	r3, r2
 80002d6:	889a      	ldrh	r2, [r3, #4]
 80002d8:	8bbb      	ldrh	r3, [r7, #28]
 80002da:	4313      	orrs	r3, r2
 80002dc:	83bb      	strh	r3, [r7, #28]
          break;
 80002de:	e012      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002e0:	7ffb      	ldrb	r3, [r7, #31]
 80002e2:	4a33      	ldr	r2, [pc, #204]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	4413      	add	r3, r2
 80002e8:	889a      	ldrh	r2, [r3, #4]
 80002ea:	8b7b      	ldrh	r3, [r7, #26]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	837b      	strh	r3, [r7, #26]
          break;
 80002f0:	e009      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80002f2:	7ffb      	ldrb	r3, [r7, #31]
 80002f4:	4a2e      	ldr	r2, [pc, #184]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4413      	add	r3, r2
 80002fa:	889a      	ldrh	r2, [r3, #4]
 80002fc:	8b3b      	ldrh	r3, [r7, #24]
 80002fe:	4313      	orrs	r3, r2
 8000300:	833b      	strh	r3, [r7, #24]
          break;
 8000302:	e000      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000304:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000306:	7ffb      	ldrb	r3, [r7, #31]
 8000308:	3301      	adds	r3, #1
 800030a:	77fb      	strb	r3, [r7, #31]
 800030c:	7ffb      	ldrb	r3, [r7, #31]
 800030e:	2b25      	cmp	r3, #37	; 0x25
 8000310:	d9c5      	bls.n	800029e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	2301      	movs	r3, #1
 8000318:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800031a:	2303      	movs	r3, #3
 800031c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800031e:	8bbb      	ldrh	r3, [r7, #28]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d014      	beq.n	800034e <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000324:	8bbb      	ldrh	r3, [r7, #28]
 8000326:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ff43 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff59 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033c:	f002 fe8c 	bl	8003058 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000340:	8bbb      	ldrh	r3, [r7, #28]
 8000342:	2200      	movs	r2, #0
 8000344:	4619      	mov	r1, r3
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034a:	f003 f80d 	bl	8003368 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800034e:	8b7b      	ldrh	r3, [r7, #26]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d012      	beq.n	800037a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000354:	8b7b      	ldrh	r3, [r7, #26]
 8000356:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000358:	2002      	movs	r0, #2
 800035a:	f7ff ff2b 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800035e:	2002      	movs	r0, #2
 8000360:	f7ff ff41 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4813      	ldr	r0, [pc, #76]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 800036a:	f002 fe75 	bl	8003058 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800036e:	8b7b      	ldrh	r3, [r7, #26]
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	4810      	ldr	r0, [pc, #64]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 8000376:	f002 fff7 	bl	8003368 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800037a:	8b3b      	ldrh	r3, [r7, #24]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d013      	beq.n	80003a8 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000380:	8b3b      	ldrh	r3, [r7, #24]
 8000382:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000384:	2004      	movs	r0, #4
 8000386:	f7ff ff15 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800038a:	2004      	movs	r0, #4
 800038c:	f7ff ff2b 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4619      	mov	r1, r3
 8000394:	4807      	ldr	r0, [pc, #28]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000396:	f002 fe5f 	bl	8003058 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800039a:	8b3b      	ldrh	r3, [r7, #24]
 800039c:	2200      	movs	r2, #0
 800039e:	4619      	mov	r1, r3
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80003a2:	f002 ffe1 	bl	8003368 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
}
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	0800a1ec 	.word	0x0800a1ec
 80003b4:	48000800 	.word	0x48000800
 80003b8:	48000400 	.word	0x48000400

080003bc <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80003c0:	bf00      	nop
}
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80003d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003da:	f023 0207 	bic.w	r2, r3, #7
 80003de:	4905      	ldr	r1, [pc, #20]	; (80003f4 <LL_C2_PWR_SetPowerMode+0x28>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	58000400 	.word	0x58000400

080003f8 <LL_EXTI_EnableIT_32_63>:
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <LL_EXTI_EnableIT_32_63+0x24>)
 8000402:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000406:	4905      	ldr	r1, [pc, #20]	; (800041c <LL_EXTI_EnableIT_32_63+0x24>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4313      	orrs	r3, r2
 800040c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	58000800 	.word	0x58000800

08000420 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800042e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800043a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	021b      	lsls	r3, r3, #8
 8000442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	cafecafe 	.word	0xcafecafe

0800045c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800046e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	608b      	str	r3, [r1, #8]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80004aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80004cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80004dc:	d101      	bne.n	80004e2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80004de:	2301      	movs	r3, #1
 80004e0:	e000      	b.n	80004e4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000502:	d101      	bne.n	8000508 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000504:	2301      	movs	r3, #1
 8000506:	e000      	b.n	800050a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <LL_AHB3_GRP1_EnableClock>:
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000538:	68fb      	ldr	r3, [r7, #12]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <LL_DBGMCU_GetDeviceID+0x18>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e0042000 	.word	0xe0042000

08000564 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_DBGMCU_GetRevisionID+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	0c1b      	lsrs	r3, r3, #16
 800056e:	b29b      	uxth	r3, r3
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e0042000 	.word	0xe0042000

08000580 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	685a      	ldr	r2, [r3, #4]
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	431a      	orrs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	431a      	orrs	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	041b      	lsls	r3, r3, #16
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	615a      	str	r2, [r3, #20]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	431a      	orrs	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	615a      	str	r2, [r3, #20]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	609a      	str	r2, [r3, #8]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	619a      	str	r2, [r3, #24]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <LL_LPM_EnableSleep+0x1c>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <LL_LPM_EnableSleep+0x1c>)
 800064e:	f023 0304 	bic.w	r3, r3, #4
 8000652:	6113      	str	r3, [r2, #16]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	22ff      	movs	r2, #255	; 0xff
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	22ca      	movs	r2, #202	; 0xca
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2253      	movs	r2, #83	; 0x53
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f023 0207 	bic.w	r2, r3, #7
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	431a      	orrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <MX_APPE_Config+0x18>)
 80006ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006ce:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80006d0:	f000 f826 	bl	8000720 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80006d4:	f000 f866 	bl	80007a4 <Config_HSE>

  return;
 80006d8:	bf00      	nop
}
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	58004000 	.word	0x58004000

080006e0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80006e4:	f000 f872 	bl	80007cc <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80006e8:	f000 f88a 	bl	8000800 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80006ec:	4904      	ldr	r1, [pc, #16]	; (8000700 <MX_APPE_Init+0x20>)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 fdce 	bl	8001290 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  // Yang Junyoung
  APPD_Init();
 80006f4:	f7ff fd93 	bl	800021e <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80006f8:	f000 f890 	bl	800081c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80006fc:	bf00      	nop
}
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000a08 	.word	0x20000a08

08000704 <Init_Smps>:

void Init_Smps(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000708:	bf00      	nop
}
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <Init_Exti>:

void Init_Exti(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000716:	2050      	movs	r0, #80	; 0x50
 8000718:	f7ff fe6e 	bl	80003f8 <LL_EXTI_EnableIT_32_63>

  return;
 800071c:	bf00      	nop
}
 800071e:	bd80      	pop	{r7, pc}

08000720 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000724:	f000 f804 	bl	8000730 <Reset_BackupDomain>

  Reset_IPCC();
 8000728:	f000 f81a 	bl	8000760 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800072c:	bf00      	nop
}
 800072e:	bd80      	pop	{r7, pc}

08000730 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000734:	f7ff fec8 	bl	80004c8 <LL_RCC_IsActiveFlag_PINRST>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00d      	beq.n	800075a <Reset_BackupDomain+0x2a>
 800073e:	f7ff fed6 	bl	80004ee <LL_RCC_IsActiveFlag_SFTRST>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d108      	bne.n	800075a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000748:	f002 feea 	bl	8003520 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800074c:	f002 fee8 	bl	8003520 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000750:	f7ff fe98 	bl	8000484 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000754:	f7ff fea7 	bl	80004a6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000758:	bf00      	nop
 800075a:	bf00      	nop
}
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000764:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000768:	f7ff fed4 	bl	8000514 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800076c:	213f      	movs	r1, #63	; 0x3f
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <Reset_IPCC+0x40>)
 8000770:	f7ff ff4c 	bl	800060c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000774:	213f      	movs	r1, #63	; 0x3f
 8000776:	480a      	ldr	r0, [pc, #40]	; (80007a0 <Reset_IPCC+0x40>)
 8000778:	f7ff ff56 	bl	8000628 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800077c:	213f      	movs	r1, #63	; 0x3f
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <Reset_IPCC+0x40>)
 8000780:	f7ff fefe 	bl	8000580 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000784:	213f      	movs	r1, #63	; 0x3f
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <Reset_IPCC+0x40>)
 8000788:	f7ff ff1d 	bl	80005c6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800078c:	213f      	movs	r1, #63	; 0x3f
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <Reset_IPCC+0x40>)
 8000790:	f7ff ff08 	bl	80005a4 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000794:	213f      	movs	r1, #63	; 0x3f
 8000796:	4802      	ldr	r0, [pc, #8]	; (80007a0 <Reset_IPCC+0x40>)
 8000798:	f7ff ff27 	bl	80005ea <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800079c:	bf00      	nop
}
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58000c00 	.word	0x58000c00

080007a4 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f008 fa3e 	bl	8008c2c <OTP_Read>
 80007b0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	799b      	ldrb	r3, [r3, #6]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe2f 	bl	8000420 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
}
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <System_Init>:

static void System_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  Init_Smps();
 80007d0:	f7ff ff98 	bl	8000704 <Init_Smps>

  Init_Exti();
 80007d4:	f7ff ff9d 	bl	8000712 <Init_Exti>

  Init_Rtc();
 80007d8:	f000 f802 	bl	80007e0 <Init_Rtc>

  return;
 80007dc:	bf00      	nop
}
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <Init_Rtc+0x1c>)
 80007e6:	f7ff ff4a 	bl	800067e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <Init_Rtc+0x1c>)
 80007ee:	f7ff ff56 	bl	800069e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80007f2:	4802      	ldr	r0, [pc, #8]	; (80007fc <Init_Rtc+0x1c>)
 80007f4:	f7ff ff36 	bl	8000664 <LL_RTC_EnableWriteProtection>

  return;
 80007f8:	bf00      	nop
}
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40002800 	.word	0x40002800

08000800 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000804:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000808:	f7ff fe28 	bl	800045c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800080c:	f009 f9e0 	bl	8009bd0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000810:	2004      	movs	r0, #4
 8000812:	f7ff fddb 	bl	80003cc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000816:	bf00      	nop
}
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000822:	f007 ffc1 	bl	80087a8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <appe_Tl_Init+0x50>)
 8000828:	2100      	movs	r1, #0
 800082a:	2008      	movs	r0, #8
 800082c:	f009 fb0e 	bl	8009e4c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <appe_Tl_Init+0x54>)
 8000832:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <appe_Tl_Init+0x58>)
 8000836:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	480e      	ldr	r0, [pc, #56]	; (8000878 <appe_Tl_Init+0x5c>)
 800083e:	f007 fe79 	bl	8008534 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <appe_Tl_Init+0x60>)
 8000844:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <appe_Tl_Init+0x64>)
 8000848:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <appe_Tl_Init+0x68>)
 800084c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800084e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000852:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	4618      	mov	r0, r3
 800085a:	f008 f8e7 	bl	8008a2c <TL_MM_Init>

  TL_Enable();
 800085e:	f007 ff9d 	bl	800879c <TL_Enable>

  return;
 8000862:	bf00      	nop
}
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	0800856d 	.word	0x0800856d
 8000870:	20000590 	.word	0x20000590
 8000874:	08000889 	.word	0x08000889
 8000878:	080008a1 	.word	0x080008a1
 800087c:	200007a8 	.word	0x200007a8
 8000880:	2000069c 	.word	0x2000069c
 8000884:	20000054 	.word	0x20000054

08000888 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000892:	bf00      	nop
}
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	330b      	adds	r3, #11
 80008ae:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80008ba:	2b07      	cmp	r3, #7
 80008bc:	d81f      	bhi.n	80008fe <APPE_SysUserEvtRx+0x5e>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <APPE_SysUserEvtRx+0x24>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008e5 	.word	0x080008e5
 80008c8:	080008f7 	.word	0x080008f7
 80008cc:	080008ff 	.word	0x080008ff
 80008d0:	080008ff 	.word	0x080008ff
 80008d4:	080008ff 	.word	0x080008ff
 80008d8:	080008ff 	.word	0x080008ff
 80008dc:	080008ff 	.word	0x080008ff
 80008e0:	080008ff 	.word	0x080008ff
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f007 fbdf 	bl	80080ac <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f81b 	bl	800092a <APPE_SysEvtReadyProcessing>
    break;
 80008f4:	e004      	b.n	8000900 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f806 	bl	8000908 <APPE_SysEvtError>
    break;
 80008fc:	e000      	b.n	8000900 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80008fe:	bf00      	nop
  }

  return;
 8000900:	bf00      	nop
}
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	330b      	adds	r3, #11
 8000916:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3302      	adds	r3, #2
 800091c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800091e:	bf00      	nop
}
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b08a      	sub	sp, #40	; 0x28
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	330b      	adds	r3, #11
 800094e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	3302      	adds	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d11d      	bne.n	800099a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800095e:	f7ff fc6f 	bl	8000240 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000962:	230f      	movs	r3, #15
 8000964:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000966:	237f      	movs	r3, #127	; 0x7f
 8000968:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800096a:	f7ff fdfb 	bl	8000564 <LL_DBGMCU_GetRevisionID>
 800096e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	b29b      	uxth	r3, r3
 8000974:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000976:	f7ff fde7 	bl	8000548 <LL_DBGMCU_GetDeviceID>
 800097a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	b29b      	uxth	r3, r3
 8000980:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fb7a 	bl	8008080 <SHCI_C2_Config>

    APP_BLE_Init();
 800098c:	f008 fa58 	bl	8008e40 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000990:	2100      	movs	r1, #0
 8000992:	2001      	movs	r0, #1
 8000994:	f009 f92e 	bl	8009bf4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000998:	e007      	b.n	80009aa <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d103      	bne.n	80009aa <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
  return;
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
}
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ba:	f002 f817 	bl	80029ec <HAL_GetTick>
 80009be:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ca:	d00a      	beq.n	80009e2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80009cc:	f002 f826 	bl	8002a1c <HAL_GetTickFreq>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009da:	e002      	b.n	80009e2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80009dc:	f7ff fe32 	bl	8000644 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80009e0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80009e2:	f002 f803 	bl	80029ec <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d8f4      	bhi.n	80009dc <HAL_Delay+0x2a>
  }
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <UTIL_SEQ_Idle>:

  /* USER CODE END MX_APPE_Process_2 */
}

void UTIL_SEQ_Idle(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000a00:	bf00      	nop
}
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f009 f91c 	bl	8009c54 <UTIL_SEQ_Run>

  return;
 8000a1c:	bf00      	nop
}
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f009 fa2e 	bl	8009e90 <UTIL_SEQ_SetTask>
  return;
 8000a34:	bf00      	nop
}
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000a44:	2002      	movs	r0, #2
 8000a46:	f009 fa8f 	bl	8009f68 <UTIL_SEQ_SetEvt>
  return;
 8000a4a:	bf00      	nop
}
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f009 faa4 	bl	8009fa8 <UTIL_SEQ_WaitEvt>
  return;
 8000a60:	bf00      	nop
}
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <LL_EXTI_EnableIT_0_31>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a72:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a76:	4905      	ldr	r1, [pc, #20]	; (8000a8c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	58000800 	.word	0x58000800

08000a90 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	600b      	str	r3, [r1, #0]

}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	58000800 	.word	0x58000800

08000ab4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <ReadRtcSsrValue+0x3c>)
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <ReadRtcSsrValue+0x3c>)
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000aca:	e005      	b.n	8000ad8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <ReadRtcSsrValue+0x3c>)
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d1f5      	bne.n	8000acc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000ae0:	683b      	ldr	r3, [r7, #0]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40002800 	.word	0x40002800

08000af4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	460a      	mov	r2, r1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	491d      	ldr	r1, [pc, #116]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d009      	beq.n	8000b32 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000b1e:	7bfa      	ldrb	r2, [r7, #15]
 8000b20:	4916      	ldr	r1, [pc, #88]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4911      	ldr	r1, [pc, #68]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	440b      	add	r3, r1
 8000b40:	3315      	adds	r3, #21
 8000b42:	7bfa      	ldrb	r2, [r7, #15]
 8000b44:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	490c      	ldr	r1, [pc, #48]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	3314      	adds	r3, #20
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000b5a:	79ba      	ldrb	r2, [r7, #6]
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <LinkTimerAfter+0x88>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	440b      	add	r3, r1
 8000b68:	3315      	adds	r3, #21
 8000b6a:	79fa      	ldrb	r2, [r7, #7]
 8000b6c:	701a      	strb	r2, [r3, #0]

  return;
 8000b6e:	bf00      	nop
}
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	2000092c 	.word	0x2000092c

08000b80 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <LinkTimerBefore+0xb8>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	79ba      	ldrb	r2, [r7, #6]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d032      	beq.n	8000c02 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b9c:	79ba      	ldrb	r2, [r7, #6]
 8000b9e:	4927      	ldr	r1, [pc, #156]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	440b      	add	r3, r1
 8000baa:	3314      	adds	r3, #20
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	4922      	ldr	r1, [pc, #136]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3315      	adds	r3, #21
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	491d      	ldr	r1, [pc, #116]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	440b      	add	r3, r1
 8000bd2:	3315      	adds	r3, #21
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	4918      	ldr	r1, [pc, #96]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	440b      	add	r3, r1
 8000be6:	3314      	adds	r3, #20
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	4913      	ldr	r1, [pc, #76]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3314      	adds	r3, #20
 8000bfc:	79fa      	ldrb	r2, [r7, #7]
 8000bfe:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000c00:	e014      	b.n	8000c2c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	440b      	add	r3, r1
 8000c10:	3315      	adds	r3, #21
 8000c12:	79ba      	ldrb	r2, [r7, #6]
 8000c14:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c16:	79ba      	ldrb	r2, [r7, #6]
 8000c18:	4908      	ldr	r1, [pc, #32]	; (8000c3c <LinkTimerBefore+0xbc>)
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	440b      	add	r3, r1
 8000c24:	3314      	adds	r3, #20
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	701a      	strb	r2, [r3, #0]
  return;
 8000c2a:	bf00      	nop
}
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200009bc 	.word	0x200009bc
 8000c3c:	2000092c 	.word	0x2000092c

08000c40 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c4a:	4b4e      	ldr	r3, [pc, #312]	; (8000d84 <linkTimer+0x144>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b06      	cmp	r3, #6
 8000c52:	d118      	bne.n	8000c86 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c54:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <linkTimer+0x144>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <linkTimer+0x148>)
 8000c5c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000c5e:	4a49      	ldr	r2, [pc, #292]	; (8000d84 <linkTimer+0x144>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	4949      	ldr	r1, [pc, #292]	; (8000d8c <linkTimer+0x14c>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3315      	adds	r3, #21
 8000c74:	2206      	movs	r2, #6
 8000c76:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c78:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <linkTimer+0x150>)
 8000c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	81fb      	strh	r3, [r7, #14]
 8000c84:	e078      	b.n	8000d78 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c86:	f000 f909 	bl	8000e9c <ReturnTimeElapsed>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	493e      	ldr	r1, [pc, #248]	; (8000d8c <linkTimer+0x14c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	6819      	ldr	r1, [r3, #0]
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	79fa      	ldrb	r2, [r7, #7]
 8000ca4:	4419      	add	r1, r3
 8000ca6:	4839      	ldr	r0, [pc, #228]	; (8000d8c <linkTimer+0x14c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	4934      	ldr	r1, [pc, #208]	; (8000d8c <linkTimer+0x14c>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <linkTimer+0x144>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <linkTimer+0x14c>)
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	440b      	add	r3, r1
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4413      	add	r3, r2
 8000cde:	3308      	adds	r3, #8
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d337      	bcc.n	8000d58 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <linkTimer+0x144>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000cee:	7b7a      	ldrb	r2, [r7, #13]
 8000cf0:	4926      	ldr	r1, [pc, #152]	; (8000d8c <linkTimer+0x14c>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3315      	adds	r3, #21
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d02:	e013      	b.n	8000d2c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000d04:	7b7a      	ldrb	r2, [r7, #13]
 8000d06:	4921      	ldr	r1, [pc, #132]	; (8000d8c <linkTimer+0x14c>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	440b      	add	r3, r1
 8000d12:	3315      	adds	r3, #21
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000d18:	7b7a      	ldrb	r2, [r7, #13]
 8000d1a:	491c      	ldr	r1, [pc, #112]	; (8000d8c <linkTimer+0x14c>)
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	440b      	add	r3, r1
 8000d26:	3315      	adds	r3, #21
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d2c:	7b3b      	ldrb	r3, [r7, #12]
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d00b      	beq.n	8000d4a <linkTimer+0x10a>
 8000d32:	7b3a      	ldrb	r2, [r7, #12]
 8000d34:	4915      	ldr	r1, [pc, #84]	; (8000d8c <linkTimer+0x14c>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3308      	adds	r3, #8
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d2dc      	bcs.n	8000d04 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000d4a:	7b7a      	ldrb	r2, [r7, #13]
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fecf 	bl	8000af4 <LinkTimerAfter>
 8000d56:	e00f      	b.n	8000d78 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <linkTimer+0x144>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff0c 	bl	8000b80 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <linkTimer+0x144>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <linkTimer+0x148>)
 8000d70:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <linkTimer+0x144>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d78:	89fb      	ldrh	r3, [r7, #14]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200009bc 	.word	0x200009bc
 8000d88:	200009bd 	.word	0x200009bd
 8000d8c:	2000092c 	.word	0x2000092c
 8000d90:	200009c0 	.word	0x200009c0

08000d94 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <UnlinkTimer+0xf8>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d111      	bne.n	8000dd4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <UnlinkTimer+0xf8>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <UnlinkTimer+0xfc>)
 8000db8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000dba:	79fa      	ldrb	r2, [r7, #7]
 8000dbc:	4935      	ldr	r1, [pc, #212]	; (8000e94 <UnlinkTimer+0x100>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3315      	adds	r3, #21
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <UnlinkTimer+0xf8>)
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e03e      	b.n	8000e52 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000dd4:	79fa      	ldrb	r2, [r7, #7]
 8000dd6:	492f      	ldr	r1, [pc, #188]	; (8000e94 <UnlinkTimer+0x100>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	3314      	adds	r3, #20
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000de8:	79fa      	ldrb	r2, [r7, #7]
 8000dea:	492a      	ldr	r1, [pc, #168]	; (8000e94 <UnlinkTimer+0x100>)
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	440b      	add	r3, r1
 8000df6:	3315      	adds	r3, #21
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000dfc:	79f9      	ldrb	r1, [r7, #7]
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	4824      	ldr	r0, [pc, #144]	; (8000e94 <UnlinkTimer+0x100>)
 8000e02:	460b      	mov	r3, r1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	440b      	add	r3, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4403      	add	r3, r0
 8000e0c:	3315      	adds	r3, #21
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2d8      	uxtb	r0, r3
 8000e12:	4920      	ldr	r1, [pc, #128]	; (8000e94 <UnlinkTimer+0x100>)
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3315      	adds	r3, #21
 8000e20:	4602      	mov	r2, r0
 8000e22:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d013      	beq.n	8000e52 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000e2a:	79f9      	ldrb	r1, [r7, #7]
 8000e2c:	7bba      	ldrb	r2, [r7, #14]
 8000e2e:	4819      	ldr	r0, [pc, #100]	; (8000e94 <UnlinkTimer+0x100>)
 8000e30:	460b      	mov	r3, r1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	440b      	add	r3, r1
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4403      	add	r3, r0
 8000e3a:	3314      	adds	r3, #20
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2d8      	uxtb	r0, r3
 8000e40:	4914      	ldr	r1, [pc, #80]	; (8000e94 <UnlinkTimer+0x100>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3314      	adds	r3, #20
 8000e4e:	4602      	mov	r2, r0
 8000e50:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	490f      	ldr	r1, [pc, #60]	; (8000e94 <UnlinkTimer+0x100>)
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	440b      	add	r3, r1
 8000e60:	330c      	adds	r3, #12
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <UnlinkTimer+0xf8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b06      	cmp	r3, #6
 8000e6e:	d107      	bne.n	8000e80 <UnlinkTimer+0xec>
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <UnlinkTimer+0x104>)
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
}
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	200009bc 	.word	0x200009bc
 8000e90:	200009bd 	.word	0x200009bd
 8000e94:	2000092c 	.word	0x2000092c
 8000e98:	200009c0 	.word	0x200009c0

08000e9c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eaa:	d026      	beq.n	8000efa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000eac:	f7ff fe02 	bl	8000ab4 <ReadRtcSsrValue>
 8000eb0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d805      	bhi.n	8000ec8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	e00a      	b.n	8000ede <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <ReturnTimeElapsed+0x74>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <ReturnTimeElapsed+0x70>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <ReturnTimeElapsed+0x78>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <ReturnTimeElapsed+0x7c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	40d3      	lsrs	r3, r2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	e001      	b.n	8000efe <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	b29b      	uxth	r3, r3
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200009c0 	.word	0x200009c0
 8000f10:	200009c8 	.word	0x200009c8
 8000f14:	200009c6 	.word	0x200009c6
 8000f18:	200009c5 	.word	0x200009c5

08000f1c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d108      	bne.n	8000f3e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f2c:	f7ff fdc2 	bl	8000ab4 <ReadRtcSsrValue>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <RestartWakeupCounter+0x9c>)
 8000f34:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f001 ff05 	bl	8002d46 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000f3c:	e039      	b.n	8000fb2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d803      	bhi.n	8000f4c <RestartWakeupCounter+0x30>
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <RestartWakeupCounter+0xa0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d002      	beq.n	8000f52 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000f52:	bf00      	nop
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f8      	beq.n	8000f54 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f72:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <RestartWakeupCounter+0xa8>)
 8000f76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f7a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f001 fef0 	bl	8002d62 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <RestartWakeupCounter+0xac>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	0c1b      	lsrs	r3, r3, #16
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	88fa      	ldrh	r2, [r7, #6]
 8000f8c:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <RestartWakeupCounter+0xac>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f92:	f7ff fd8f 	bl	8000ab4 <ReadRtcSsrValue>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <RestartWakeupCounter+0x9c>)
 8000f9a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <RestartWakeupCounter+0xa4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000faa:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000fac:	f3af 8000 	nop.w
  return ;
 8000fb0:	bf00      	nop
}
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200009c0 	.word	0x200009c0
 8000fbc:	200009c5 	.word	0x200009c5
 8000fc0:	20000a08 	.word	0x20000a08
 8000fc4:	58000800 	.word	0x58000800
 8000fc8:	40002800 	.word	0x40002800

08000fcc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <RescheduleTimerList+0x11c>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fde:	d107      	bne.n	8000ff0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000fe0:	bf00      	nop
 8000fe2:	4b42      	ldr	r3, [pc, #264]	; (80010ec <RescheduleTimerList+0x120>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f8      	bne.n	8000fe2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000ff0:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <RescheduleTimerList+0x120>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <RescheduleTimerList+0x120>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ffe:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001000:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <RescheduleTimerList+0x124>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	493a      	ldr	r1, [pc, #232]	; (80010f4 <RescheduleTimerList+0x128>)
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	3308      	adds	r3, #8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800101a:	f7ff ff3f 	bl	8000e9c <ReturnTimeElapsed>
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	429a      	cmp	r2, r3
 8001028:	d205      	bcs.n	8001036 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <RescheduleTimerList+0x12c>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e04d      	b.n	80010d2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4a30      	ldr	r2, [pc, #192]	; (80010fc <RescheduleTimerList+0x130>)
 800103a:	8812      	ldrh	r2, [r2, #0]
 800103c:	b292      	uxth	r2, r2
 800103e:	4413      	add	r3, r2
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4293      	cmp	r3, r2
 8001046:	d906      	bls.n	8001056 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <RescheduleTimerList+0x130>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <RescheduleTimerList+0x12c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e03d      	b.n	80010d2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	b29a      	uxth	r2, r3
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <RescheduleTimerList+0x12c>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001066:	e034      	b.n	80010d2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	4922      	ldr	r1, [pc, #136]	; (80010f4 <RescheduleTimerList+0x128>)
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	3308      	adds	r3, #8
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	429a      	cmp	r2, r3
 800107e:	d20a      	bcs.n	8001096 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	491c      	ldr	r1, [pc, #112]	; (80010f4 <RescheduleTimerList+0x128>)
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	3308      	adds	r3, #8
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e013      	b.n	80010be <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	4916      	ldr	r1, [pc, #88]	; (80010f4 <RescheduleTimerList+0x128>)
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	3308      	adds	r3, #8
 80010a6:	6819      	ldr	r1, [r3, #0]
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	1ac9      	subs	r1, r1, r3
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <RescheduleTimerList+0x128>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4403      	add	r3, r0
 80010ba:	3308      	adds	r3, #8
 80010bc:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <RescheduleTimerList+0x128>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	3315      	adds	r3, #21
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	d1c7      	bne.n	8001068 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80010d8:	89bb      	ldrh	r3, [r7, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff1e 	bl	8000f1c <RestartWakeupCounter>

  return ;
 80010e0:	bf00      	nop
}
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40002800 	.word	0x40002800
 80010ec:	20000a08 	.word	0x20000a08
 80010f0:	200009bc 	.word	0x200009bc
 80010f4:	2000092c 	.word	0x2000092c
 80010f8:	200009c4 	.word	0x200009c4
 80010fc:	200009ca 	.word	0x200009ca

08001100 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001106:	f3ef 8310 	mrs	r3, PRIMASK
 800110a:	617b      	str	r3, [r7, #20]
  return(result);
 800110c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001114:	4b59      	ldr	r3, [pc, #356]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	22ca      	movs	r2, #202	; 0xca
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
 800111c:	4b57      	ldr	r3, [pc, #348]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2253      	movs	r2, #83	; 0x53
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	4b54      	ldr	r3, [pc, #336]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001132:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001134:	4b52      	ldr	r3, [pc, #328]	; (8001280 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800113c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001140:	4950      	ldr	r1, [pc, #320]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	330c      	adds	r3, #12
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d16e      	bne.n	8001234 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001156:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800115a:	494a      	ldr	r1, [pc, #296]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800116a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800116e:	4945      	ldr	r1, [pc, #276]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	3310      	adds	r3, #16
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001180:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04c      	beq.n	8001224 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800118a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800118e:	493d      	ldr	r1, [pc, #244]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	330d      	adds	r3, #13
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d124      	bne.n	80011ee <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80011a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fdf2 	bl	8000d94 <UnlinkTimer>
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f383 8810 	msr	PRIMASK, r3
}
 80011ba:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80011bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011c0:	4930      	ldr	r1, [pc, #192]	; (8001284 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	3304      	adds	r3, #4
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f9b8 	bl	800154c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	22ca      	movs	r2, #202	; 0xca
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2253      	movs	r2, #83	; 0x53
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
 80011ec:	e012      	b.n	8001214 <HW_TS_RTC_Wakeup_Handler+0x114>
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f383 8810 	msr	PRIMASK, r3
}
 80011f8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80011fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f920 	bl	8001444 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	22ca      	movs	r2, #202	; 0xca
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2253      	movs	r2, #83	; 0x53
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	4619      	mov	r1, r3
 800121c:	69b8      	ldr	r0, [r7, #24]
 800121e:	f000 fa1b 	bl	8001658 <HW_TS_RTC_Int_AppNot>
 8001222:	e022      	b.n	800126a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001224:	f7ff fed2 	bl	8000fcc <RescheduleTimerList>
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f383 8810 	msr	PRIMASK, r3
}
 8001232:	e01a      	b.n	800126a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001234:	bf00      	nop
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f8      	beq.n	8001236 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001254:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001258:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f383 8810 	msr	PRIMASK, r3
}
 8001268:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001272:	bf00      	nop
}
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000a08 	.word	0x20000a08
 8001280:	200009bc 	.word	0x200009bc
 8001284:	2000092c 	.word	0x2000092c
 8001288:	200009c4 	.word	0x200009c4
 800128c:	58000800 	.word	0x58000800

08001290 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800129c:	4b5e      	ldr	r3, [pc, #376]	; (8001418 <HW_TS_Init+0x188>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	22ca      	movs	r2, #202	; 0xca
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <HW_TS_Init+0x188>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2253      	movs	r2, #83	; 0x53
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80012ac:	4b5b      	ldr	r3, [pc, #364]	; (800141c <HW_TS_Init+0x18c>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a5a      	ldr	r2, [pc, #360]	; (800141c <HW_TS_Init+0x18c>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <HW_TS_Init+0x18c>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f1c3 0304 	rsb	r3, r3, #4
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <HW_TS_Init+0x190>)
 80012cc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <HW_TS_Init+0x18c>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012d6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80012da:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	fa92 f2a2 	rbit	r2, r2
 80012e2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d101      	bne.n	80012f2 <HW_TS_Init+0x62>
  {
    return 32U;
 80012ee:	2220      	movs	r2, #32
 80012f0:	e003      	b.n	80012fa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	fab2 f282 	clz	r2, r2
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	40d3      	lsrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b48      	ldr	r3, [pc, #288]	; (8001424 <HW_TS_Init+0x194>)
 8001304:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <HW_TS_Init+0x18c>)
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	b29b      	uxth	r3, r3
 800130c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001310:	b29b      	uxth	r3, r3
 8001312:	3301      	adds	r3, #1
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HW_TS_Init+0x198>)
 8001318:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HW_TS_Init+0x198>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a40      	ldr	r2, [pc, #256]	; (8001424 <HW_TS_Init+0x194>)
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800132c:	4a3c      	ldr	r2, [pc, #240]	; (8001420 <HW_TS_Init+0x190>)
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	40d3      	lsrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800133a:	4293      	cmp	r3, r2
 800133c:	d904      	bls.n	8001348 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HW_TS_Init+0x19c>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	801a      	strh	r2, [r3, #0]
 8001346:	e003      	b.n	8001350 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <HW_TS_Init+0x19c>)
 800134e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001350:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001354:	f7ff fb9c 	bl	8000a90 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001358:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800135c:	f7ff fb84 	bl	8000a68 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d13d      	bne.n	80013e2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <HW_TS_Init+0x1a0>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HW_TS_Init+0x1a4>)
 800136e:	f04f 32ff 	mov.w	r2, #4294967295
 8001372:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001374:	2300      	movs	r3, #0
 8001376:	77fb      	strb	r3, [r7, #31]
 8001378:	e00c      	b.n	8001394 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800137a:	7ffa      	ldrb	r2, [r7, #31]
 800137c:	492e      	ldr	r1, [pc, #184]	; (8001438 <HW_TS_Init+0x1a8>)
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	330c      	adds	r3, #12
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	3301      	adds	r3, #1
 8001392:	77fb      	strb	r3, [r7, #31]
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	2b05      	cmp	r3, #5
 8001398:	d9ef      	bls.n	800137a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <HW_TS_Init+0x1ac>)
 800139c:	2206      	movs	r2, #6
 800139e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HW_TS_Init+0x188>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HW_TS_Init+0x188>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ae:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HW_TS_Init+0x188>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HW_TS_Init+0x188>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013c0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HW_TS_Init+0x1b0>)
 80013c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013c8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80013ca:	2003      	movs	r0, #3
 80013cc:	f001 fcc9 	bl	8002d62 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HW_TS_Init+0x188>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HW_TS_Init+0x188>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e009      	b.n	80013f6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HW_TS_Init+0x188>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f001 fca8 	bl	8002d46 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HW_TS_Init+0x188>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	22ff      	movs	r2, #255	; 0xff
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80013fe:	2200      	movs	r2, #0
 8001400:	2103      	movs	r1, #3
 8001402:	2003      	movs	r0, #3
 8001404:	f001 fc5d 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001408:	2003      	movs	r0, #3
 800140a:	f001 fc74 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

  return;
 800140e:	bf00      	nop
}
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000a08 	.word	0x20000a08
 800141c:	40002800 	.word	0x40002800
 8001420:	200009c5 	.word	0x200009c5
 8001424:	200009c6 	.word	0x200009c6
 8001428:	200009c8 	.word	0x200009c8
 800142c:	200009ca 	.word	0x200009ca
 8001430:	200009c4 	.word	0x200009c4
 8001434:	200009c0 	.word	0x200009c0
 8001438:	2000092c 	.word	0x2000092c
 800143c:	200009bc 	.word	0x200009bc
 8001440:	58000800 	.word	0x58000800

08001444 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144e:	f3ef 8310 	mrs	r3, PRIMASK
 8001452:	60fb      	str	r3, [r7, #12]
  return(result);
 8001454:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800145c:	2003      	movs	r0, #3
 800145e:	f001 fc58 	bl	8002d12 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001462:	4b34      	ldr	r3, [pc, #208]	; (8001534 <HW_TS_Stop+0xf0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	22ca      	movs	r2, #202	; 0xca
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HW_TS_Stop+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2253      	movs	r2, #83	; 0x53
 8001470:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001472:	79fa      	ldrb	r2, [r7, #7]
 8001474:	4930      	ldr	r1, [pc, #192]	; (8001538 <HW_TS_Stop+0xf4>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	330c      	adds	r3, #12
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d142      	bne.n	8001510 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc80 	bl	8000d94 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <HW_TS_Stop+0xf8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	2b06      	cmp	r3, #6
 800149e:	d12f      	bne.n	8001500 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HW_TS_Stop+0xfc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ac:	d107      	bne.n	80014be <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80014ae:	bf00      	nop
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HW_TS_Stop+0xf0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f8      	bne.n	80014b0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HW_TS_Stop+0xf0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HW_TS_Stop+0xf0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014cc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80014ce:	bf00      	nop
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HW_TS_Stop+0xf0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f8      	beq.n	80014d0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HW_TS_Stop+0xf0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HW_TS_Stop+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014ee:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HW_TS_Stop+0x100>)
 80014f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014f6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80014f8:	2003      	movs	r0, #3
 80014fa:	f001 fc32 	bl	8002d62 <HAL_NVIC_ClearPendingIRQ>
 80014fe:	e007      	b.n	8001510 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HW_TS_Stop+0x104>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	7cfa      	ldrb	r2, [r7, #19]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800150c:	f7ff fd5e 	bl	8000fcc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HW_TS_Stop+0xf0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001518:	2003      	movs	r0, #3
 800151a:	f001 fbec 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f383 8810 	msr	PRIMASK, r3
}
 8001528:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800152a:	bf00      	nop
}
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000a08 	.word	0x20000a08
 8001538:	2000092c 	.word	0x2000092c
 800153c:	200009bc 	.word	0x200009bc
 8001540:	40002800 	.word	0x40002800
 8001544:	58000800 	.word	0x58000800
 8001548:	200009bd 	.word	0x200009bd

0800154c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001558:	79fa      	ldrb	r2, [r7, #7]
 800155a:	493b      	ldr	r1, [pc, #236]	; (8001648 <HW_TS_Start+0xfc>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	330c      	adds	r3, #12
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d103      	bne.n	8001578 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff66 	bl	8001444 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001578:	f3ef 8310 	mrs	r3, PRIMASK
 800157c:	60fb      	str	r3, [r7, #12]
  return(result);
 800157e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001582:	b672      	cpsid	i
}
 8001584:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001586:	2003      	movs	r0, #3
 8001588:	f001 fbc3 	bl	8002d12 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HW_TS_Start+0x100>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	22ca      	movs	r2, #202	; 0xca
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HW_TS_Start+0x100>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2253      	movs	r2, #83	; 0x53
 800159a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800159c:	79fa      	ldrb	r2, [r7, #7]
 800159e:	492a      	ldr	r1, [pc, #168]	; (8001648 <HW_TS_Start+0xfc>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	330c      	adds	r3, #12
 80015ac:	2202      	movs	r2, #2
 80015ae:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	4925      	ldr	r1, [pc, #148]	; (8001648 <HW_TS_Start+0xfc>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3308      	adds	r3, #8
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	4920      	ldr	r1, [pc, #128]	; (8001648 <HW_TS_Start+0xfc>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	3304      	adds	r3, #4
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb30 	bl	8000c40 <linkTimer>
 80015e0:	4603      	mov	r3, r0
 80015e2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HW_TS_Start+0x104>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HW_TS_Start+0x108>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	7c7a      	ldrb	r2, [r7, #17]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d002      	beq.n	80015fc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80015f6:	f7ff fce9 	bl	8000fcc <RescheduleTimerList>
 80015fa:	e013      	b.n	8001624 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	4912      	ldr	r1, [pc, #72]	; (8001648 <HW_TS_Start+0xfc>)
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3308      	adds	r3, #8
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	8a7b      	ldrh	r3, [r7, #18]
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	1ac9      	subs	r1, r1, r3
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <HW_TS_Start+0xfc>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4403      	add	r3, r0
 8001620:	3308      	adds	r3, #8
 8001622:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HW_TS_Start+0x100>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	22ff      	movs	r2, #255	; 0xff
 800162a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800162c:	2003      	movs	r0, #3
 800162e:	f001 fb62 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f383 8810 	msr	PRIMASK, r3
}
 800163c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800163e:	bf00      	nop
}
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000092c 	.word	0x2000092c
 800164c:	20000a08 	.word	0x20000a08
 8001650:	200009bc 	.word	0x200009bc
 8001654:	200009bd 	.word	0x200009bd

08001658 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	460b      	mov	r3, r1
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4798      	blx	r3

  return;
 800166a:	bf00      	nop
}
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <LL_RCC_LSE_SetDriveCapability>:
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	f023 0218 	bic.w	r2, r3, #24
 8001686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_AHB1_GRP1_EnableClock>:
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_AHB2_GRP1_EnableClock>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001708:	f001 f902 	bl	8002910 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800170c:	f7fe ffda 	bl	80006c4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001710:	f000 f928 	bl	8001964 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001714:	f000 f988 	bl	8001a28 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001718:	f000 f9a6 	bl	8001a68 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f000 fa8a 	bl	8001c34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001720:	f000 fa6e 	bl	8001c00 <MX_DMA_Init>
  MX_SPI2_Init();
 8001724:	f000 fa2e 	bl	8001b84 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001728:	f000 f9ee 	bl	8001b08 <MX_SPI1_Init>
  MX_RTC_Init();
 800172c:	f000 f9b8 	bl	8001aa0 <MX_RTC_Init>
  MX_RF_Init();
 8001730:	f000 f9ae 	bl	8001a90 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

    count_master = 1;
 8001734:	4b77      	ldr	r3, [pc, #476]	; (8001914 <main+0x210>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
    MCP2515_CanInit();
 800173a:	f001 f869 	bl	8002810 <MCP2515_CanInit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	2110      	movs	r1, #16
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f001 fe0f 	bl	8003368 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f001 fe08 	bl	8003368 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2101      	movs	r1, #1
 800175c:	486e      	ldr	r0, [pc, #440]	; (8001918 <main+0x214>)
 800175e:	f001 fe03 	bl	8003368 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	2120      	movs	r1, #32
 8001766:	486c      	ldr	r0, [pc, #432]	; (8001918 <main+0x214>)
 8001768:	f001 fdfe 	bl	8003368 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800176c:	f7fe ffb8 	bl	80006e0 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  // Yang Junyoung
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f008 fa6e 	bl	8009c54 <UTIL_SEQ_Run>

	  //
	  count_master = 2;
 8001778:	4b66      	ldr	r3, [pc, #408]	; (8001914 <main+0x210>)
 800177a:	2202      	movs	r2, #2
 800177c:	701a      	strb	r2, [r3, #0]
//    HAL_SPI_Transmit(&hspi1, 0x55, 1, 1000);
//    HAL_SPI_Receive_IT(&hspi1, &spi2_data, 1);
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);

  /* Read value from SW2 and SW3 to get open and close door signal */
    SW2_CloseButton_Scan();
 800177e:	f000 fae1 	bl	8001d44 <SW2_CloseButton_Scan>
    SW3_OpenButton_Scan();
 8001782:	f000 fb3b 	bl	8001dfc <SW3_OpenButton_Scan>

  #if(TEST_FUNCTION == RTX_FUNCTION)

    	/*	READ	*/

    	MCP2515_ReadReg(MCP_CANINTF, &can_intf, 1);
 8001786:	2201      	movs	r2, #1
 8001788:	4964      	ldr	r1, [pc, #400]	; (800191c <main+0x218>)
 800178a:	202c      	movs	r0, #44	; 0x2c
 800178c:	f000 ff57 	bl	800263e <MCP2515_ReadReg>
        // Read the status of the RX buffer in the MCP2515
		MCP2515_GetRxStatus(&rx_status);
 8001790:	4863      	ldr	r0, [pc, #396]	; (8001920 <main+0x21c>)
 8001792:	f001 f85b 	bl	800284c <MCP2515_GetRxStatus>
		MCP2515_ReadStatus(&status);
 8001796:	4863      	ldr	r0, [pc, #396]	; (8001924 <main+0x220>)
 8001798:	f001 f87c 	bl	8002894 <MCP2515_ReadStatus>

        // If the interrupt for RX0B buffer is full -> extract the data
		if ((can_intf & (0x01)) || (can_intf & (0x02))) {
 800179c:	4b5f      	ldr	r3, [pc, #380]	; (800191c <main+0x218>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <main+0xb0>
 80017a8:	4b5c      	ldr	r3, [pc, #368]	; (800191c <main+0x218>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03b      	beq.n	800182c <main+0x128>
			switch(can_intf)
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <main+0x218>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d002      	beq.n	80017c2 <main+0xbe>
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d004      	beq.n	80017ca <main+0xc6>
 80017c0:	e007      	b.n	80017d2 <main+0xce>
			{
			case 0x01:
				base_adr = MCP_RXB0_BASE;
 80017c2:	4b59      	ldr	r3, [pc, #356]	; (8001928 <main+0x224>)
 80017c4:	2266      	movs	r2, #102	; 0x66
 80017c6:	701a      	strb	r2, [r3, #0]
			break;
 80017c8:	e003      	b.n	80017d2 <main+0xce>
			case 0x02:
				base_adr = MCP_RXB1_BASE;
 80017ca:	4b57      	ldr	r3, [pc, #348]	; (8001928 <main+0x224>)
 80017cc:	2276      	movs	r2, #118	; 0x76
 80017ce:	701a      	strb	r2, [r3, #0]
			break;
 80017d0:	bf00      	nop
			}
			rx_done++;
 80017d2:	4b56      	ldr	r3, [pc, #344]	; (800192c <main+0x228>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <main+0x228>)
 80017de:	801a      	strh	r2, [r3, #0]
          // Read the high-level and low-level address extracted from the CAN bus ID.
			MCP2515_ReadReg(0x61, &rx_sidh, 1);
 80017e0:	2201      	movs	r2, #1
 80017e2:	4953      	ldr	r1, [pc, #332]	; (8001930 <main+0x22c>)
 80017e4:	2061      	movs	r0, #97	; 0x61
 80017e6:	f000 ff2a 	bl	800263e <MCP2515_ReadReg>
			MCP2515_ReadReg(0x62, &rx_sidl, 1);
 80017ea:	2201      	movs	r2, #1
 80017ec:	4951      	ldr	r1, [pc, #324]	; (8001934 <main+0x230>)
 80017ee:	2062      	movs	r0, #98	; 0x62
 80017f0:	f000 ff25 	bl	800263e <MCP2515_ReadReg>

			rx_id = (rx_sidh << 3) | (rx_sidl >> 5);
 80017f4:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <main+0x22c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <main+0x230>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	b2db      	uxtb	r3, r3
 8001804:	b21b      	sxth	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b21b      	sxth	r3, r3
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <main+0x234>)
 800180e:	801a      	strh	r2, [r3, #0]

			Read_RXdata(&rx_id, &base_adr);
 8001810:	4945      	ldr	r1, [pc, #276]	; (8001928 <main+0x224>)
 8001812:	4849      	ldr	r0, [pc, #292]	; (8001938 <main+0x234>)
 8001814:	f000 fdf2 	bl	80023fc <Read_RXdata>
		// Clear the interrupt flags
			MCP2515_RegModify(MCP_CANINTF, 0xFF, 0x00);
 8001818:	2200      	movs	r2, #0
 800181a:	21ff      	movs	r1, #255	; 0xff
 800181c:	202c      	movs	r0, #44	; 0x2c
 800181e:	f000 ff66 	bl	80026ee <MCP2515_RegModify>
			MCP2515_ReadReg(MCP_CANINTF, &can_intf_clr, 1);
 8001822:	2201      	movs	r2, #1
 8001824:	4945      	ldr	r1, [pc, #276]	; (800193c <main+0x238>)
 8001826:	202c      	movs	r0, #44	; 0x2c
 8001828:	f000 ff09 	bl	800263e <MCP2515_ReadReg>
    	 }

		/*	SEND	*/

		if((send) & (start_tx)) {
 800182c:	4b44      	ldr	r3, [pc, #272]	; (8001940 <main+0x23c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b44      	ldr	r3, [pc, #272]	; (8001944 <main+0x240>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d09a      	beq.n	8001770 <main+0x6c>
		/* Set TXREQ to initiate message transmission and clear error bits in TXB0CTRL */
		MCP2515_RegModify(MCP_TXB0CTRL, MCP_TXB_ABTF_M | MCP_TXB_MLOA_M \
 800183a:	2200      	movs	r2, #0
 800183c:	2178      	movs	r1, #120	; 0x78
 800183e:	2030      	movs	r0, #48	; 0x30
 8001840:	f000 ff55 	bl	80026ee <MCP2515_RegModify>
			  | MCP_TXB_TXERR_M | MCP_TXB_TXREQ_M, 0x00);
		MCP2515_ReadReg(MCP_TXB0CTRL, &tx0_ctrl_b4, 1);
 8001844:	2201      	movs	r2, #1
 8001846:	4940      	ldr	r1, [pc, #256]	; (8001948 <main+0x244>)
 8001848:	2030      	movs	r0, #48	; 0x30
 800184a:	f000 fef8 	bl	800263e <MCP2515_ReadReg>
		MCP2515_RegModify(MCP_TXB0CTRL, 0x03, 0xFF);
 800184e:	22ff      	movs	r2, #255	; 0xff
 8001850:	2103      	movs	r1, #3
 8001852:	2030      	movs	r0, #48	; 0x30
 8001854:	f000 ff4b 	bl	80026ee <MCP2515_RegModify>

		/* Load the High and Low address and DLC byte length */
		MCP2515_WriteReg(MCP_TXB0SIDH, 0x40, 1);  // 0x200 = 0010 0000 0000 -> 0100 0000    = 0x40
 8001858:	2201      	movs	r2, #1
 800185a:	2140      	movs	r1, #64	; 0x40
 800185c:	2031      	movs	r0, #49	; 0x31
 800185e:	f000 ff1a 	bl	8002696 <MCP2515_WriteReg>
		MCP2515_WriteReg(MCP_TXB0SIDL, 0x00, 1);   // 000 = 0x00
 8001862:	2201      	movs	r2, #1
 8001864:	2100      	movs	r1, #0
 8001866:	2032      	movs	r0, #50	; 0x32
 8001868:	f000 ff15 	bl	8002696 <MCP2515_WriteReg>
		MCP2515_WriteReg(MCP_TXB0DLC, 0x04, 1); // change to correspond byte length.
 800186c:	2201      	movs	r2, #1
 800186e:	2104      	movs	r1, #4
 8001870:	2035      	movs	r0, #53	; 0x35
 8001872:	f000 ff10 	bl	8002696 <MCP2515_WriteReg>

		  /* Load the buffer data bytes */
		  if(tx_open_door) {
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <main+0x248>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d010      	beq.n	80018a0 <main+0x19c>
			  VGSIZeitOpenDoor();
 800187e:	f000 fb19 	bl	8001eb4 <VGSIZeitOpenDoor>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001882:	2201      	movs	r2, #1
 8001884:	2101      	movs	r1, #1
 8001886:	4824      	ldr	r0, [pc, #144]	; (8001918 <main+0x214>)
 8001888:	f001 fd6e 	bl	8003368 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	2120      	movs	r1, #32
 8001890:	4821      	ldr	r0, [pc, #132]	; (8001918 <main+0x214>)
 8001892:	f001 fd69 	bl	8003368 <HAL_GPIO_WritePin>
			  send_open++;
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <main+0x24c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	4a2c      	ldr	r2, [pc, #176]	; (8001950 <main+0x24c>)
 800189e:	6013      	str	r3, [r2, #0]
		  }

		if(tx_close_door) {
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <main+0x250>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d010      	beq.n	80018ca <main+0x1c6>
			  VGSIZeitCloseDoor();
 80018a8:	f000 fb1c 	bl	8001ee4 <VGSIZeitCloseDoor>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2120      	movs	r1, #32
 80018b0:	4819      	ldr	r0, [pc, #100]	; (8001918 <main+0x214>)
 80018b2:	f001 fd59 	bl	8003368 <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	4817      	ldr	r0, [pc, #92]	; (8001918 <main+0x214>)
 80018bc:	f001 fd54 	bl	8003368 <HAL_GPIO_WritePin>
		     send_close++;
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <main+0x254>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <main+0x254>)
 80018c8:	6013      	str	r3, [r2, #0]
		}

	    /* If the TXREQ bit in TX0CTRL is set -> Transmission requested
	      Increment the tx_done counter to evaluate number of transmission
	    */
	    MCP2515_RegModify(MCP_TXB0CTRL, 0x08, 0x08);
 80018ca:	2208      	movs	r2, #8
 80018cc:	2108      	movs	r1, #8
 80018ce:	2030      	movs	r0, #48	; 0x30
 80018d0:	f000 ff0d 	bl	80026ee <MCP2515_RegModify>
	    MCP2515_ReadStatus(&status);
 80018d4:	4813      	ldr	r0, [pc, #76]	; (8001924 <main+0x220>)
 80018d6:	f000 ffdd 	bl	8002894 <MCP2515_ReadStatus>
	    MCP2515_ReadReg(MCP_TXB0CTRL, &tx0_ctrl, 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	491f      	ldr	r1, [pc, #124]	; (800195c <main+0x258>)
 80018de:	2030      	movs	r0, #48	; 0x30
 80018e0:	f000 fead 	bl	800263e <MCP2515_ReadReg>
	    // Read the data bytes in the frame
	    Read_TXdata(4);
 80018e4:	2004      	movs	r0, #4
 80018e6:	f000 fd59 	bl	800239c <Read_TXdata>
	    if(status & (0x04)) {
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <main+0x220>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <main+0x206>
	      tx_done++;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <main+0x25c>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <main+0x25c>)
 8001902:	801a      	strh	r2, [r3, #0]
	      status = 0;
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <main+0x220>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
	    }

	    // Reset send request to prevent unwanted transmission
	    send = 0;
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <main+0x23c>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
  {
 8001910:	e72e      	b.n	8001770 <main+0x6c>
 8001912:	bf00      	nop
 8001914:	2000001c 	.word	0x2000001c
 8001918:	48000400 	.word	0x48000400
 800191c:	20000cb0 	.word	0x20000cb0
 8001920:	20000cb4 	.word	0x20000cb4
 8001924:	20000cb2 	.word	0x20000cb2
 8001928:	20000c82 	.word	0x20000c82
 800192c:	20000c78 	.word	0x20000c78
 8001930:	20000c7d 	.word	0x20000c7d
 8001934:	20000c7e 	.word	0x20000c7e
 8001938:	20000c80 	.word	0x20000c80
 800193c:	20000cb1 	.word	0x20000cb1
 8001940:	20000c68 	.word	0x20000c68
 8001944:	20000c74 	.word	0x20000c74
 8001948:	20000cb6 	.word	0x20000cb6
 800194c:	20000c64 	.word	0x20000c64
 8001950:	20000c6c 	.word	0x20000c6c
 8001954:	20000c60 	.word	0x20000c60
 8001958:	20000c70 	.word	0x20000c70
 800195c:	20000cb7 	.word	0x20000cb7
 8001960:	20000c7a 	.word	0x20000c7a

08001964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b09a      	sub	sp, #104	; 0x68
 8001968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	2248      	movs	r2, #72	; 0x48
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f008 fbac 	bl	800a0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800198a:	f001 fdc9 	bl	8003520 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800198e:	2010      	movs	r0, #16
 8001990:	f7ff fe6f 	bl	8001672 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <SystemClock_Config+0xc0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <SystemClock_Config+0xc0>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <SystemClock_Config+0xc0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80019b0:	2327      	movs	r3, #39	; 0x27
 80019b2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019ba:	2301      	movs	r3, #1
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c8:	2340      	movs	r3, #64	; 0x40
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80019d0:	23a0      	movs	r3, #160	; 0xa0
 80019d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d8:	f107 0320 	add.w	r3, r7, #32
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 f91b 	bl	8003c18 <HAL_RCC_OscConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80019e8:	f000 fa94 	bl	8001f14 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80019ec:	236f      	movs	r3, #111	; 0x6f
 80019ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fc77 	bl	8004300 <HAL_RCC_ClockConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a18:	f000 fa7c 	bl	8001f14 <Error_Handler>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3768      	adds	r7, #104	; 0x68
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	58000400 	.word	0x58000400

08001a28 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b094      	sub	sp, #80	; 0x50
 8001a2c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2250      	movs	r2, #80	; 0x50
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f008 fb4b 	bl	800a0d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001a3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a3e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a44:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001a46:	2300      	movs	r3, #0
 8001a48:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 f866 	bl	8004b22 <HAL_RCCEx_PeriphCLKConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001a5c:	f000 fa5a 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001a60:	bf00      	nop
 8001a62:	3750      	adds	r7, #80	; 0x50
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_IPCC_Init+0x20>)
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <MX_IPCC_Init+0x24>)
 8001a70:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_IPCC_Init+0x20>)
 8001a74:	f001 fcce 	bl	8003414 <HAL_IPCC_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a7e:	f000 fa49 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200009cc 	.word	0x200009cc
 8001a8c:	58000c00 	.word	0x58000c00

08001a90 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_RTC_Init+0x60>)
 8001aa6:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <MX_RTC_Init+0x64>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <MX_RTC_Init+0x60>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_RTC_Init+0x60>)
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <MX_RTC_Init+0x60>)
 8001ab8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001abc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_RTC_Init+0x60>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_RTC_Init+0x60>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <MX_RTC_Init+0x60>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_RTC_Init+0x60>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ad6:	480a      	ldr	r0, [pc, #40]	; (8001b00 <MX_RTC_Init+0x60>)
 8001ad8:	f003 faaa 	bl	8005030 <HAL_RTC_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ae2:	f000 fa17 	bl	8001f14 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_RTC_Init+0x60>)
 8001aec:	f003 fba0 	bl	8005230 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001af6:	f000 fa0d 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000a08 	.word	0x20000a08
 8001b04:	40002800 	.word	0x40002800

08001b08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <MX_SPI1_Init+0x78>)
 8001b10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b3e:	2228      	movs	r2, #40	; 0x28
 8001b40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b56:	2207      	movs	r2, #7
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_SPI1_Init+0x74>)
 8001b68:	f003 fc1e 	bl	80053a8 <HAL_SPI_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b72:	f000 f9cf 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000a2c 	.word	0x20000a2c
 8001b80:	40013000 	.word	0x40013000

08001b84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <MX_SPI2_Init+0x78>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001b9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ba2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001bba:	2228      	movs	r2, #40	; 0x28
 8001bbc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_SPI2_Init+0x74>)
 8001be4:	f003 fbe0 	bl	80053a8 <HAL_SPI_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001bee:	f000 f991 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000a90 	.word	0x20000a90
 8001bfc:	40003800 	.word	0x40003800

08001c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c04:	2004      	movs	r0, #4
 8001c06:	f7ff fd4a 	bl	800169e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f7ff fd47 	bl	800169e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	200b      	movs	r0, #11
 8001c16:	f001 f854 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c1a:	200b      	movs	r0, #11
 8001c1c:	f001 f86b 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	200c      	movs	r0, #12
 8001c26:	f001 f84c 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c2a:	200c      	movs	r0, #12
 8001c2c:	f001 f863 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c48:	2004      	movs	r0, #4
 8001c4a:	f7ff fd41 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f7ff fd3e 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7ff fd3b 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	2008      	movs	r0, #8
 8001c5c:	f7ff fd38 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|EMS_CS_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f001 fb7d 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_12|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f241 0123 	movw	r1, #4131	; 0x1023
 8001c74:	4830      	ldr	r0, [pc, #192]	; (8001d38 <MX_GPIO_Init+0x104>)
 8001c76:	f001 fb77 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001c7a:	2310      	movs	r3, #16
 8001c7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c92:	f001 f9e1 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMS_CS_Pin */
  GPIO_InitStruct.Pin = EMS_CS_Pin;
 8001c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EMS_CS_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb0:	f001 f9d2 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481d      	ldr	r0, [pc, #116]	; (8001d3c <MX_GPIO_Init+0x108>)
 8001cc6:	f001 f9c7 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4816      	ldr	r0, [pc, #88]	; (8001d38 <MX_GPIO_Init+0x104>)
 8001ce0:	f001 f9ba 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480f      	ldr	r0, [pc, #60]	; (8001d38 <MX_GPIO_Init+0x104>)
 8001cfc:	f001 f9ac 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_3_Pin;
 8001d00:	2303      	movs	r3, #3
 8001d02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480b      	ldr	r0, [pc, #44]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001d12:	f001 f9a1 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001d16:	2320      	movs	r3, #32
 8001d18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4803      	ldr	r0, [pc, #12]	; (8001d38 <MX_GPIO_Init+0x104>)
 8001d2c:	f001 f994 	bl	8003058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d30:	bf00      	nop
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000c00 	.word	0x48000c00

08001d44 <SW2_CloseButton_Scan>:

/* USER CODE BEGIN 4 */
int SW2_CloseButton_Scan(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
    /* Button SW2 debounce*/
		  int reading = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	4821      	ldr	r0, [pc, #132]	; (8001dd4 <SW2_CloseButton_Scan+0x90>)
 8001d4e:	f001 faf3 	bl	8003338 <HAL_GPIO_ReadPin>
 8001d52:	4603      	mov	r3, r0
 8001d54:	607b      	str	r3, [r7, #4]
		  // check to see if you just pressed the button
		  // (i.e. the input went from LOW to HIGH), and you've waited long enough
		  // since the last press to ignore any noise:

		  // If the switch changed, due to noise or pressing:
		  if (reading != lastButtonState2) {
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <SW2_CloseButton_Scan+0x94>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d004      	beq.n	8001d6a <SW2_CloseButton_Scan+0x26>
		    // reset the debouncing timer
		    lastDebounceTime2 = HAL_GetTick();
 8001d60:	f000 fe44 	bl	80029ec <HAL_GetTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <SW2_CloseButton_Scan+0x98>)
 8001d68:	6013      	str	r3, [r2, #0]
		  }

		  if ((HAL_GetTick() - lastDebounceTime2) > debounceDelay) {
 8001d6a:	f000 fe3f 	bl	80029ec <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <SW2_CloseButton_Scan+0x98>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1ad2      	subs	r2, r2, r3
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <SW2_CloseButton_Scan+0x9c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d920      	bls.n	8001dc0 <SW2_CloseButton_Scan+0x7c>
		    // whatever the reading is at, it's been there for longer than the debounce
		    // delay, so take it as the actual current state:

		    // if the button state has changed:
		    if (reading != buttonState2) {
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <SW2_CloseButton_Scan+0xa0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d01b      	beq.n	8001dc0 <SW2_CloseButton_Scan+0x7c>
		      buttonState2 = reading;
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <SW2_CloseButton_Scan+0xa0>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]

		      // only toggle the LED if the new button state is HIGH
		    if (buttonState2 == 1) {
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <SW2_CloseButton_Scan+0xa0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d114      	bne.n	8001dc0 <SW2_CloseButton_Scan+0x7c>
          sw2_count++;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <SW2_CloseButton_Scan+0xa4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <SW2_CloseButton_Scan+0xa4>)
 8001d9e:	6013      	str	r3, [r2, #0]
          tx_close_door = 1;
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <SW2_CloseButton_Scan+0xa8>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
          tx_open_door = 0;
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <SW2_CloseButton_Scan+0xac>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
          send = 1;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <SW2_CloseButton_Scan+0xb0>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
          if (sw2_count == 2) {
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <SW2_CloseButton_Scan+0xa4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d102      	bne.n	8001dc0 <SW2_CloseButton_Scan+0x7c>
            start_tx = 1;
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <SW2_CloseButton_Scan+0xb4>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
            }
		      }
		    }
		  }
		  // save the reading. Next time through the loop, it'll be the lastButtonState:
		  lastButtonState2 = reading;
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <SW2_CloseButton_Scan+0x94>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
    return tx_close_door;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <SW2_CloseButton_Scan+0xa8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	48000c00 	.word	0x48000c00
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	20000c50 	.word	0x20000c50
 8001de0:	20000010 	.word	0x20000010
 8001de4:	20000c48 	.word	0x20000c48
 8001de8:	20000c58 	.word	0x20000c58
 8001dec:	20000c60 	.word	0x20000c60
 8001df0:	20000c64 	.word	0x20000c64
 8001df4:	20000c68 	.word	0x20000c68
 8001df8:	20000c74 	.word	0x20000c74

08001dfc <SW3_OpenButton_Scan>:

int SW3_OpenButton_Scan(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
    /* Button SW3 debounce*/
		  int reading = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8001e02:	2102      	movs	r1, #2
 8001e04:	4821      	ldr	r0, [pc, #132]	; (8001e8c <SW3_OpenButton_Scan+0x90>)
 8001e06:	f001 fa97 	bl	8003338 <HAL_GPIO_ReadPin>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	607b      	str	r3, [r7, #4]
		  // check to see if you just pressed the button
		  // (i.e. the input went from LOW to HIGH), and you've waited long enough
		  // since the last press to ignore any noise:

		  // If the switch changed, due to noise or pressing:
		  if (reading != lastButtonState3) {
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <SW3_OpenButton_Scan+0x94>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d004      	beq.n	8001e22 <SW3_OpenButton_Scan+0x26>
		    // reset the debouncing timer
		    lastDebounceTime3 = HAL_GetTick();
 8001e18:	f000 fde8 	bl	80029ec <HAL_GetTick>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <SW3_OpenButton_Scan+0x98>)
 8001e20:	6013      	str	r3, [r2, #0]
		  }

		  if ((HAL_GetTick() - lastDebounceTime3) > debounceDelay) {
 8001e22:	f000 fde3 	bl	80029ec <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <SW3_OpenButton_Scan+0x98>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	1ad2      	subs	r2, r2, r3
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <SW3_OpenButton_Scan+0x9c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d920      	bls.n	8001e78 <SW3_OpenButton_Scan+0x7c>
		    // whatever the reading is at, it's been there for longer than the debounce
		    // delay, so take it as the actual current state:

		    // if the button state has changed:
		    if (reading != buttonState3) {
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <SW3_OpenButton_Scan+0xa0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d01b      	beq.n	8001e78 <SW3_OpenButton_Scan+0x7c>
		      buttonState3 = reading;
 8001e40:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <SW3_OpenButton_Scan+0xa0>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]

		      // only toggle the LED if the new button state is HIGH
		    if (buttonState3 == 1) {
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <SW3_OpenButton_Scan+0xa0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d114      	bne.n	8001e78 <SW3_OpenButton_Scan+0x7c>
          sw3_count++;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <SW3_OpenButton_Scan+0xa4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <SW3_OpenButton_Scan+0xa4>)
 8001e56:	6013      	str	r3, [r2, #0]
          tx_close_door = 0;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <SW3_OpenButton_Scan+0xa8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
          tx_open_door = 1;
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <SW3_OpenButton_Scan+0xac>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
          //send_open = 1;
          send = 1;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <SW3_OpenButton_Scan+0xb0>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
          if (sw3_count == 2) {
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <SW3_OpenButton_Scan+0xa4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d102      	bne.n	8001e78 <SW3_OpenButton_Scan+0x7c>
              start_tx = 1;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <SW3_OpenButton_Scan+0xb4>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
          }
		    }
		  }
    }
		  // save the reading. Next time through the loop, it'll be the lastButtonState:
		  lastButtonState3 = reading;
 8001e78:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <SW3_OpenButton_Scan+0x94>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
    return tx_open_door;
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <SW3_OpenButton_Scan+0xac>)
 8001e80:	681b      	ldr	r3, [r3, #0]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	48000c00 	.word	0x48000c00
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000c54 	.word	0x20000c54
 8001e98:	20000010 	.word	0x20000010
 8001e9c:	20000c4c 	.word	0x20000c4c
 8001ea0:	20000c5c 	.word	0x20000c5c
 8001ea4:	20000c60 	.word	0x20000c60
 8001ea8:	20000c64 	.word	0x20000c64
 8001eac:	20000c68 	.word	0x20000c68
 8001eb0:	20000c74 	.word	0x20000c74

08001eb4 <VGSIZeitOpenDoor>:

void VGSIZeitOpenDoor(void){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	  MCP2515_WriteReg(MCP_TXB0_DATA0, 0x00, 1);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2036      	movs	r0, #54	; 0x36
 8001ebe:	f000 fbea 	bl	8002696 <MCP2515_WriteReg>
	  MCP2515_WriteReg(MCP_TXB0_DATA1, 0x30, 1);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2130      	movs	r1, #48	; 0x30
 8001ec6:	2037      	movs	r0, #55	; 0x37
 8001ec8:	f000 fbe5 	bl	8002696 <MCP2515_WriteReg>
	  MCP2515_WriteReg(MCP_TXB0_DATA2, 0x00, 1);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2038      	movs	r0, #56	; 0x38
 8001ed2:	f000 fbe0 	bl	8002696 <MCP2515_WriteReg>
	  MCP2515_WriteReg(MCP_TXB0_DATA3, 0xF0, 1);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	21f0      	movs	r1, #240	; 0xf0
 8001eda:	2039      	movs	r0, #57	; 0x39
 8001edc:	f000 fbdb 	bl	8002696 <MCP2515_WriteReg>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <VGSIZeitCloseDoor>:

void VGSIZeitCloseDoor(void){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	  MCP2515_WriteReg(MCP_TXB0_DATA0, 0x00, 1);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2100      	movs	r1, #0
 8001eec:	2036      	movs	r0, #54	; 0x36
 8001eee:	f000 fbd2 	bl	8002696 <MCP2515_WriteReg>
	  MCP2515_WriteReg(MCP_TXB0_DATA1, 0x00, 1);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2037      	movs	r0, #55	; 0x37
 8001ef8:	f000 fbcd 	bl	8002696 <MCP2515_WriteReg>
	  MCP2515_WriteReg(MCP_TXB0_DATA2, 0x00, 1);
 8001efc:	2201      	movs	r2, #1
 8001efe:	2100      	movs	r1, #0
 8001f00:	2038      	movs	r0, #56	; 0x38
 8001f02:	f000 fbc8 	bl	8002696 <MCP2515_WriteReg>
	  MCP2515_WriteReg(MCP_TXB0_DATA3, 0x00, 1);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2039      	movs	r0, #57	; 0x39
 8001f0c:	f000 fbc3 	bl	8002696 <MCP2515_WriteReg>
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f18:	b672      	cpsid	i
}
 8001f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <Error_Handler+0x8>

08001f1e <LL_RCC_EnableRTC>:
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_AHB2_GRP1_EnableClock>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f64:	68fb      	ldr	r3, [r7, #12]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_AHB3_GRP1_EnableClock>:
{
 8001f72:	b480      	push	{r7}
 8001f74:	b085      	sub	sp, #20
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4013      	ands	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_APB1_GRP1_EnableClock>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_APB2_GRP1_EnableClock>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800200c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002010:	f7ff ffaf 	bl	8001f72 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	202e      	movs	r0, #46	; 0x2e
 800201a:	f000 fe52 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800201e:	202e      	movs	r0, #46	; 0x2e
 8002020:	f000 fe69 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <HAL_IPCC_MspInit+0x44>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d113      	bne.n	8002062 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800203a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800203e:	f7ff ff98 	bl	8001f72 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	202c      	movs	r0, #44	; 0x2c
 8002048:	f000 fe3b 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800204c:	202c      	movs	r0, #44	; 0x2c
 800204e:	f000 fe52 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	202d      	movs	r0, #45	; 0x2d
 8002058:	f000 fe33 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800205c:	202d      	movs	r0, #45	; 0x2d
 800205e:	f000 fe4a 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	58000c00 	.word	0x58000c00

08002070 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b096      	sub	sp, #88	; 0x58
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	2250      	movs	r2, #80	; 0x50
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f008 f825 	bl	800a0d0 <memset>
  if(hrtc->Instance==RTC)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <HAL_RTC_MspInit+0x64>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d11d      	bne.n	80020cc <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002094:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800209a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 fd3e 	bl	8004b22 <HAL_RCCEx_PeriphCLKConfig>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80020ac:	f7ff ff32 	bl	8001f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020b0:	f7ff ff35 	bl	8001f1e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80020b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020b8:	f7ff ff74 	bl	8001fa4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 fdfe 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80020c6:	2003      	movs	r0, #3
 80020c8:	f000 fe15 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020cc:	bf00      	nop
 80020ce:	3758      	adds	r7, #88	; 0x58
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40002800 	.word	0x40002800

080020d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a26      	ldr	r2, [pc, #152]	; (8002190 <HAL_SPI_MspInit+0xb8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d120      	bne.n	800213c <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020fe:	f7ff ff6a 	bl	8001fd6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	2001      	movs	r0, #1
 8002104:	f7ff ff1c 	bl	8001f40 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002108:	23e0      	movs	r3, #224	; 0xe0
 800210a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002118:	2305      	movs	r3, #5
 800211a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	4619      	mov	r1, r3
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002126:	f000 ff97 	bl	8003058 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2022      	movs	r0, #34	; 0x22
 8002130:	f000 fdc7 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002134:	2022      	movs	r0, #34	; 0x22
 8002136:	f000 fdde 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800213a:	e024      	b.n	8002186 <HAL_SPI_MspInit+0xae>
  else if(hspi->Instance==SPI2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <HAL_SPI_MspInit+0xbc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d11f      	bne.n	8002186 <HAL_SPI_MspInit+0xae>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002146:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800214a:	f7ff ff2b 	bl	8001fa4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214e:	2002      	movs	r0, #2
 8002150:	f7ff fef6 	bl	8001f40 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002154:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002158:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002166:	2305      	movs	r3, #5
 8002168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	4619      	mov	r1, r3
 8002170:	4809      	ldr	r0, [pc, #36]	; (8002198 <HAL_SPI_MspInit+0xc0>)
 8002172:	f000 ff71 	bl	8003058 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2023      	movs	r0, #35	; 0x23
 800217c:	f000 fda1 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002180:	2023      	movs	r0, #35	; 0x23
 8002182:	f000 fdb8 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40013000 	.word	0x40013000
 8002194:	40003800 	.word	0x40003800
 8002198:	48000400 	.word	0x48000400

0800219c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <NMI_Handler+0x4>

080021a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <HardFault_Handler+0x4>

080021a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <MemManage_Handler+0x4>

080021ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <BusFault_Handler+0x4>

080021b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <UsageFault_Handler+0x4>

080021ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e8:	f000 fbec 	bl	80029c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80021f4:	f7fe ff84 	bl	8001100 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA1_Channel1_IRQHandler+0x10>)
 8002202:	f000 fe7a 	bl	8002efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000b88 	.word	0x20000b88

08002210 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <DMA1_Channel2_IRQHandler+0x10>)
 8002216:	f000 fe70 	bl	8002efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000be8 	.word	0x20000be8

08002224 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <SPI1_IRQHandler+0x10>)
 800222a:	f003 fe11 	bl	8005e50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000a2c 	.word	0x20000a2c

08002238 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <SPI2_IRQHandler+0x10>)
 800223e:	f003 fe07 	bl	8005e50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000a90 	.word	0x20000a90

0800224c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <USART1_IRQHandler+0x10>)
 8002252:	f004 f8cd 	bl	80063f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000af4 	.word	0x20000af4

08002260 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002264:	f007 fb76 	bl	8009954 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002270:	f007 fba6 	bl	80099c0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800227c:	f001 f8a6 	bl	80033cc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <SystemInit+0x98>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a23      	ldr	r2, [pc, #140]	; (800231c <SystemInit+0x98>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80022b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <SystemInit+0x9c>)
 80022be:	4013      	ands	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ce:	f023 0305 	bic.w	r3, r3, #5
 80022d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80022ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ee:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <SystemInit+0xa0>)
 80022f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f6:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <SystemInit+0xa0>)
 80022f8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00
 8002320:	faf6fefb 	.word	0xfaf6fefb
 8002324:	22041000 	.word	0x22041000

08002328 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002328:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232c:	3304      	adds	r3, #4

0800232e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002330:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002332:	d3f9      	bcc.n	8002328 <CopyDataInit>
  bx lr
 8002334:	4770      	bx	lr

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002336:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002338:	3004      	adds	r0, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800233a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>
  bx lr
 800233e:	4770      	bx	lr

08002340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002344:	f7ff ff9e 	bl	8002284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002348:	480b      	ldr	r0, [pc, #44]	; (8002378 <LoopForever+0x6>)
 800234a:	490c      	ldr	r1, [pc, #48]	; (800237c <LoopForever+0xa>)
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <LoopForever+0xe>)
 800234e:	2300      	movs	r3, #0
 8002350:	f7ff ffed 	bl	800232e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002354:	480b      	ldr	r0, [pc, #44]	; (8002384 <LoopForever+0x12>)
 8002356:	490c      	ldr	r1, [pc, #48]	; (8002388 <LoopForever+0x16>)
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <LoopForever+0x1a>)
 800235a:	2300      	movs	r3, #0
 800235c:	f7ff ffe7 	bl	800232e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002360:	480b      	ldr	r0, [pc, #44]	; (8002390 <LoopForever+0x1e>)
 8002362:	490c      	ldr	r1, [pc, #48]	; (8002394 <LoopForever+0x22>)
 8002364:	2300      	movs	r3, #0
 8002366:	f7ff ffe8 	bl	800233a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800236a:	f007 feb9 	bl	800a0e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800236e:	f7ff f9c9 	bl	8001704 <main>

08002372 <LoopForever>:

LoopForever:
  b LoopForever
 8002372:	e7fe      	b.n	8002372 <LoopForever>
  ldr   r0, =_estack
 8002374:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002378:	20000008 	.word	0x20000008
 800237c:	20000040 	.word	0x20000040
 8002380:	0800a41c 	.word	0x0800a41c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002384:	200301e3 	.word	0x200301e3
 8002388:	200301e3 	.word	0x200301e3
 800238c:	0800ad1d 	.word	0x0800ad1d
  INIT_BSS _sbss, _ebss
 8002390:	20000910 	.word	0x20000910
 8002394:	20000e6c 	.word	0x20000e6c

08002398 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC1_IRQHandler>
	...

0800239c <Read_TXdata>:
#include "mcp2515.h"

extern uint8 TxDataAdrr[8];
extern uint8 TxBufferData[8];

void Read_TXdata(int dlc_length) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < sizeof(TxDataAdrr)/sizeof(uint8); i++) {
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e00d      	b.n	80023c6 <Read_TXdata+0x2a>
        MCP2515_ReadReg(TxDataAdrr[i], &TxBufferData[i], 1);
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <Read_TXdata+0x58>)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	7818      	ldrb	r0, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <Read_TXdata+0x5c>)
 80023b6:	4413      	add	r3, r2
 80023b8:	2201      	movs	r2, #1
 80023ba:	4619      	mov	r1, r3
 80023bc:	f000 f93f 	bl	800263e <MCP2515_ReadReg>
    for(int i = 0; i < sizeof(TxDataAdrr)/sizeof(uint8); i++) {
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b07      	cmp	r3, #7
 80023ca:	d9ee      	bls.n	80023aa <Read_TXdata+0xe>
    }
    for (int i = dlc_length; i < 8; i++) {
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	e007      	b.n	80023e2 <Read_TXdata+0x46>
    	TxBufferData[i] = 0x00;
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <Read_TXdata+0x5c>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4413      	add	r3, r2
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    for (int i = dlc_length; i < 8; i++) {
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3301      	adds	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b07      	cmp	r3, #7
 80023e6:	ddf4      	ble.n	80023d2 <Read_TXdata+0x36>
    }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000014 	.word	0x20000014
 80023f8:	20000c84 	.word	0x20000c84

080023fc <Read_RXdata>:
extern uint8 ID_501[8];
//extern uint8 ID_48C[8];
extern uint8 ID_68B[8];
extern uint8 rxLength;

void Read_RXdata(uint16* rx_id, uint8* base_adr) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    
    switch(*rx_id) 
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	f240 628b 	movw	r2, #1675	; 0x68b
 800240e:	4293      	cmp	r3, r2
 8002410:	f000 80ac 	beq.w	800256c <Read_RXdata+0x170>
 8002414:	f240 628b 	movw	r2, #1675	; 0x68b
 8002418:	4293      	cmp	r3, r2
 800241a:	f300 80cb 	bgt.w	80025b4 <Read_RXdata+0x1b8>
 800241e:	f240 5201 	movw	r2, #1281	; 0x501
 8002422:	4293      	cmp	r3, r2
 8002424:	d07e      	beq.n	8002524 <Read_RXdata+0x128>
 8002426:	f240 5201 	movw	r2, #1281	; 0x501
 800242a:	4293      	cmp	r3, r2
 800242c:	f300 80c2 	bgt.w	80025b4 <Read_RXdata+0x1b8>
 8002430:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8002434:	d052      	beq.n	80024dc <Read_RXdata+0xe0>
 8002436:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 800243a:	f300 80bb 	bgt.w	80025b4 <Read_RXdata+0x1b8>
 800243e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002442:	d003      	beq.n	800244c <Read_RXdata+0x50>
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d024      	beq.n	8002494 <Read_RXdata+0x98>
			}

        break;

    }
}
 800244a:	e0b3      	b.n	80025b4 <Read_RXdata+0x1b8>
            MCP2515_ReadReg(0x65, &rxLength, 1);
 800244c:	2201      	movs	r2, #1
 800244e:	495b      	ldr	r1, [pc, #364]	; (80025bc <Read_RXdata+0x1c0>)
 8002450:	2065      	movs	r0, #101	; 0x65
 8002452:	f000 f8f4 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	e014      	b.n	8002486 <Read_RXdata+0x8a>
              ID_200[i] = 0x00;
 800245c:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <Read_RXdata+0x1c4>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
              MCP2515_ReadReg(*base_adr+i, &ID_200[i], 1);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4413      	add	r3, r2
 8002470:	b2d8      	uxtb	r0, r3
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <Read_RXdata+0x1c4>)
 8002476:	4413      	add	r3, r2
 8002478:	2201      	movs	r2, #1
 800247a:	4619      	mov	r1, r3
 800247c:	f000 f8df 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3301      	adds	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <Read_RXdata+0x1c0>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	4293      	cmp	r3, r2
 8002490:	dbe4      	blt.n	800245c <Read_RXdata+0x60>
        break;
 8002492:	e08f      	b.n	80025b4 <Read_RXdata+0x1b8>
            MCP2515_ReadReg(0x65, &rxLength, 1);
 8002494:	2201      	movs	r2, #1
 8002496:	4949      	ldr	r1, [pc, #292]	; (80025bc <Read_RXdata+0x1c0>)
 8002498:	2065      	movs	r0, #101	; 0x65
 800249a:	f000 f8d0 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	e014      	b.n	80024ce <Read_RXdata+0xd2>
              ID_400[i] = 0x00;
 80024a4:	4a47      	ldr	r2, [pc, #284]	; (80025c4 <Read_RXdata+0x1c8>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4413      	add	r3, r2
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
              MCP2515_ReadReg(*base_adr+i, &ID_400[i], 1);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	b2d8      	uxtb	r0, r3
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4a41      	ldr	r2, [pc, #260]	; (80025c4 <Read_RXdata+0x1c8>)
 80024be:	4413      	add	r3, r2
 80024c0:	2201      	movs	r2, #1
 80024c2:	4619      	mov	r1, r3
 80024c4:	f000 f8bb 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	3301      	adds	r3, #1
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <Read_RXdata+0x1c0>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4293      	cmp	r3, r2
 80024d8:	dbe4      	blt.n	80024a4 <Read_RXdata+0xa8>
        break;
 80024da:	e06b      	b.n	80025b4 <Read_RXdata+0x1b8>
            MCP2515_ReadReg(0x65, &rxLength, 1);
 80024dc:	2201      	movs	r2, #1
 80024de:	4937      	ldr	r1, [pc, #220]	; (80025bc <Read_RXdata+0x1c0>)
 80024e0:	2065      	movs	r0, #101	; 0x65
 80024e2:	f000 f8ac 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e014      	b.n	8002516 <Read_RXdata+0x11a>
              ID_490[i] = 0x00;
 80024ec:	4a36      	ldr	r2, [pc, #216]	; (80025c8 <Read_RXdata+0x1cc>)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	4413      	add	r3, r2
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
              MCP2515_ReadReg(*base_adr+i, &ID_490[i], 1);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4413      	add	r3, r2
 8002500:	b2d8      	uxtb	r0, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4a30      	ldr	r2, [pc, #192]	; (80025c8 <Read_RXdata+0x1cc>)
 8002506:	4413      	add	r3, r2
 8002508:	2201      	movs	r2, #1
 800250a:	4619      	mov	r1, r3
 800250c:	f000 f897 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <Read_RXdata+0x1c0>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	4293      	cmp	r3, r2
 8002520:	dbe4      	blt.n	80024ec <Read_RXdata+0xf0>
        break;
 8002522:	e047      	b.n	80025b4 <Read_RXdata+0x1b8>
            MCP2515_ReadReg(0x65, &rxLength, 1);
 8002524:	2201      	movs	r2, #1
 8002526:	4925      	ldr	r1, [pc, #148]	; (80025bc <Read_RXdata+0x1c0>)
 8002528:	2065      	movs	r0, #101	; 0x65
 800252a:	f000 f888 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	e014      	b.n	800255e <Read_RXdata+0x162>
               ID_501[i] = 0x00;
 8002534:	4a25      	ldr	r2, [pc, #148]	; (80025cc <Read_RXdata+0x1d0>)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
               MCP2515_ReadReg(*base_adr+i, &ID_501[i], 1);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4413      	add	r3, r2
 8002548:	b2d8      	uxtb	r0, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <Read_RXdata+0x1d0>)
 800254e:	4413      	add	r3, r2
 8002550:	2201      	movs	r2, #1
 8002552:	4619      	mov	r1, r3
 8002554:	f000 f873 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	3301      	adds	r3, #1
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <Read_RXdata+0x1c0>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4293      	cmp	r3, r2
 8002568:	dbe4      	blt.n	8002534 <Read_RXdata+0x138>
        break;
 800256a:	e023      	b.n	80025b4 <Read_RXdata+0x1b8>
            MCP2515_ReadReg(0x65, &rxLength, 1);
 800256c:	2201      	movs	r2, #1
 800256e:	4913      	ldr	r1, [pc, #76]	; (80025bc <Read_RXdata+0x1c0>)
 8002570:	2065      	movs	r0, #101	; 0x65
 8002572:	f000 f864 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e014      	b.n	80025a6 <Read_RXdata+0x1aa>
              ID_68B[i] = 0x00;
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <Read_RXdata+0x1d4>)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
              MCP2515_ReadReg(*base_adr+i, &ID_68B[i], 1);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4413      	add	r3, r2
 8002590:	b2d8      	uxtb	r0, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <Read_RXdata+0x1d4>)
 8002596:	4413      	add	r3, r2
 8002598:	2201      	movs	r2, #1
 800259a:	4619      	mov	r1, r3
 800259c:	f000 f84f 	bl	800263e <MCP2515_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <Read_RXdata+0x1c0>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4293      	cmp	r3, r2
 80025b0:	dbe4      	blt.n	800257c <Read_RXdata+0x180>
        break;
 80025b2:	bf00      	nop
}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000c7c 	.word	0x20000c7c
 80025c0:	20000c8c 	.word	0x20000c8c
 80025c4:	20000c90 	.word	0x20000c90
 80025c8:	20000c98 	.word	0x20000c98
 80025cc:	20000ca0 	.word	0x20000ca0
 80025d0:	20000ca8 	.word	0x20000ca8

080025d4 <SPI_Tx>:
#include "main.h"
#include "stm32wbxx_hal.h"

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80025de:	1df9      	adds	r1, r7, #7
 80025e0:	2364      	movs	r3, #100	; 0x64
 80025e2:	2201      	movs	r2, #1
 80025e4:	4803      	ldr	r0, [pc, #12]	; (80025f4 <SPI_Tx+0x20>)
 80025e6:	f002 ff82 	bl	80054ee <HAL_SPI_Transmit>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000a2c 	.word	0x20000a2c

080025f8 <SPI_Rx>:
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
}

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80025fe:	1df9      	adds	r1, r7, #7
 8002600:	2364      	movs	r3, #100	; 0x64
 8002602:	2201      	movs	r2, #1
 8002604:	4803      	ldr	r0, [pc, #12]	; (8002614 <SPI_Rx+0x1c>)
 8002606:	f003 f8e0 	bl	80057ca <HAL_SPI_Receive>
  return retVal;
 800260a:	79fb      	ldrb	r3, [r7, #7]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000a2c 	.word	0x20000a2c

08002618 <MCP2515_Reset>:
  SPI_Tx(data);  
    
  MCP_CS_ON();
}
void MCP2515_Reset(void)
{    
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  MCP_CS_OFF();
 800261c:	2200      	movs	r2, #0
 800261e:	2110      	movs	r1, #16
 8002620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002624:	f000 fea0 	bl	8003368 <HAL_GPIO_WritePin>
      
  SPI_Tx(MCP_RESET);
 8002628:	20c0      	movs	r0, #192	; 0xc0
 800262a:	f7ff ffd3 	bl	80025d4 <SPI_Tx>
      
  MCP_CS_ON();
 800262e:	2201      	movs	r2, #1
 8002630:	2110      	movs	r1, #16
 8002632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002636:	f000 fe97 	bl	8003368 <HAL_GPIO_WritePin>
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}

0800263e <MCP2515_ReadReg>:
  MCP_CS_ON();
  
  return retVal;
}

void MCP2515_ReadReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 800263e:	b590      	push	{r4, r7, lr}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	6039      	str	r1, [r7, #0]
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	4613      	mov	r3, r2
 800264c:	71bb      	strb	r3, [r7, #6]
	MCP_CS_OFF();
 800264e:	2200      	movs	r2, #0
 8002650:	2110      	movs	r1, #16
 8002652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002656:	f000 fe87 	bl	8003368 <HAL_GPIO_WritePin>
	SPI_Tx(MCP_READ);
 800265a:	2003      	movs	r0, #3
 800265c:	f7ff ffba 	bl	80025d4 <SPI_Tx>
	SPI_Tx(addr);
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ffb6 	bl	80025d4 <SPI_Tx>
	while(size--) {
 8002668:	e006      	b.n	8002678 <MCP2515_ReadReg+0x3a>
		*buff ++= SPI_Rx();
 800266a:	683c      	ldr	r4, [r7, #0]
 800266c:	1c63      	adds	r3, r4, #1
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	f7ff ffc2 	bl	80025f8 <SPI_Rx>
 8002674:	4603      	mov	r3, r0
 8002676:	7023      	strb	r3, [r4, #0]
	while(size--) {
 8002678:	79bb      	ldrb	r3, [r7, #6]
 800267a:	1e5a      	subs	r2, r3, #1
 800267c:	71ba      	strb	r2, [r7, #6]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f3      	bne.n	800266a <MCP2515_ReadReg+0x2c>
	}
	MCP_CS_ON();
 8002682:	2201      	movs	r2, #1
 8002684:	2110      	movs	r1, #16
 8002686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268a:	f000 fe6d 	bl	8003368 <HAL_GPIO_WritePin>
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}

08002696 <MCP2515_WriteReg>:

void MCP2515_WriteReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	6039      	str	r1, [r7, #0]
 80026a0:	71fb      	strb	r3, [r7, #7]
 80026a2:	4613      	mov	r3, r2
 80026a4:	71bb      	strb	r3, [r7, #6]
	MCP_CS_OFF();
 80026a6:	2200      	movs	r2, #0
 80026a8:	2110      	movs	r1, #16
 80026aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ae:	f000 fe5b 	bl	8003368 <HAL_GPIO_WritePin>
	SPI_Tx(MCP_WRITE);
 80026b2:	2002      	movs	r0, #2
 80026b4:	f7ff ff8e 	bl	80025d4 <SPI_Tx>
	SPI_Tx(addr);
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff8a 	bl	80025d4 <SPI_Tx>
	while(size--) {
 80026c0:	e006      	b.n	80026d0 <MCP2515_WriteReg+0x3a>
		SPI_Tx(buff++);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	603a      	str	r2, [r7, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff82 	bl	80025d4 <SPI_Tx>
	while(size--) {
 80026d0:	79bb      	ldrb	r3, [r7, #6]
 80026d2:	1e5a      	subs	r2, r3, #1
 80026d4:	71ba      	strb	r2, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f3      	bne.n	80026c2 <MCP2515_WriteReg+0x2c>
	}
	MCP_CS_ON();
 80026da:	2201      	movs	r2, #1
 80026dc:	2110      	movs	r1, #16
 80026de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e2:	f000 fe41 	bl	8003368 <HAL_GPIO_WritePin>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <MCP2515_RegModify>:

void MCP2515_RegModify(uint8_t addr, uint8_t mask, uint8_t data) {
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	71fb      	strb	r3, [r7, #7]
 80026f8:	460b      	mov	r3, r1
 80026fa:	71bb      	strb	r3, [r7, #6]
 80026fc:	4613      	mov	r3, r2
 80026fe:	717b      	strb	r3, [r7, #5]
	MCP_CS_OFF();
 8002700:	2200      	movs	r2, #0
 8002702:	2110      	movs	r1, #16
 8002704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002708:	f000 fe2e 	bl	8003368 <HAL_GPIO_WritePin>
	SPI_Tx(MCP_BITMOD);
 800270c:	2005      	movs	r0, #5
 800270e:	f7ff ff61 	bl	80025d4 <SPI_Tx>
	SPI_Tx(addr);
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5d 	bl	80025d4 <SPI_Tx>
	SPI_Tx(mask);
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff59 	bl	80025d4 <SPI_Tx>
	SPI_Tx(data);
 8002722:	797b      	ldrb	r3, [r7, #5]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff55 	bl	80025d4 <SPI_Tx>
	MCP_CS_ON();
 800272a:	2201      	movs	r2, #1
 800272c:	2110      	movs	r1, #16
 800272e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002732:	f000 fe19 	bl	8003368 <HAL_GPIO_WritePin>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <MCP2515_RateConfig>:

void MCP2515_RateConfig(void) {
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0
	MCP2515_WriteReg(MCP_CNF1, MCP_8M_125K_CF1, 1);
 8002742:	2201      	movs	r2, #1
 8002744:	2101      	movs	r1, #1
 8002746:	202a      	movs	r0, #42	; 0x2a
 8002748:	f7ff ffa5 	bl	8002696 <MCP2515_WriteReg>
	MCP2515_WriteReg(MCP_CNF2, MCP_8M_125K_CF2, 1);
 800274c:	2201      	movs	r2, #1
 800274e:	219a      	movs	r1, #154	; 0x9a
 8002750:	2029      	movs	r0, #41	; 0x29
 8002752:	f7ff ffa0 	bl	8002696 <MCP2515_WriteReg>
	MCP2515_WriteReg(MCP_CNF3, MCP_8M_125K_CF3, 1);
 8002756:	2201      	movs	r2, #1
 8002758:	2107      	movs	r1, #7
 800275a:	2028      	movs	r0, #40	; 0x28
 800275c:	f7ff ff9b 	bl	8002696 <MCP2515_WriteReg>
	HAL_Delay(5);
 8002760:	2005      	movs	r0, #5
 8002762:	f7fe f926 	bl	80009b2 <HAL_Delay>
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <MCP2515_AddrReset>:
	{MCP_RXF3SIDH, 0x00},
	{MCP_RXF4SIDH, 0x00},
	{MCP_RXF5SIDH, 0x00},
};

void MCP2515_AddrReset(void) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	e040      	b.n	80027fa <MCP2515_AddrReset+0x8e>
		MCP_CS_OFF();
 8002778:	2200      	movs	r2, #0
 800277a:	2110      	movs	r1, #16
 800277c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002780:	f000 fdf2 	bl	8003368 <HAL_GPIO_WritePin>
		SPI_Tx(MCP_WRITE);
 8002784:	2002      	movs	r0, #2
 8002786:	f7ff ff25 	bl	80025d4 <SPI_Tx>
		SPI_Tx(mcp2515_bufffers_init[i][0]);
 800278a:	4a20      	ldr	r2, [pc, #128]	; (800280c <MCP2515_AddrReset+0xa0>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff1d 	bl	80025d4 <SPI_Tx>
		SPI_Tx(mcp2515_bufffers_init[i][1]);
 800279a:	4a1c      	ldr	r2, [pc, #112]	; (800280c <MCP2515_AddrReset+0xa0>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff14 	bl	80025d4 <SPI_Tx>
		SPI_Tx(mcp2515_bufffers_init[i][1] >> 8);
 80027ac:	4a17      	ldr	r2, [pc, #92]	; (800280c <MCP2515_AddrReset+0xa0>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff0a 	bl	80025d4 <SPI_Tx>
		SPI_Tx(mcp2515_bufffers_init[i][1] >> 16);
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <MCP2515_AddrReset+0xa0>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff00 	bl	80025d4 <SPI_Tx>
		SPI_Tx(mcp2515_bufffers_init[i][1] >> 24);
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <MCP2515_AddrReset+0xa0>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0e1b      	lsrs	r3, r3, #24
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fef6 	bl	80025d4 <SPI_Tx>
		MCP_CS_ON();
 80027e8:	2201      	movs	r2, #1
 80027ea:	2110      	movs	r1, #16
 80027ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f0:	f000 fdba 	bl	8003368 <HAL_GPIO_WritePin>
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3301      	adds	r3, #1
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b07      	cmp	r3, #7
 80027fe:	d9bb      	bls.n	8002778 <MCP2515_AddrReset+0xc>
	}
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	0800a39c 	.word	0x0800a39c

08002810 <MCP2515_CanInit>:
void MCP2515_CanInit(void) {
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	MCP2515_Reset();
 8002814:	f7ff ff00 	bl	8002618 <MCP2515_Reset>
	MCP2515_RegModify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	21e0      	movs	r1, #224	; 0xe0
 800281c:	200f      	movs	r0, #15
 800281e:	f7ff ff66 	bl	80026ee <MCP2515_RegModify>
	MCP2515_AddrReset();
 8002822:	f7ff ffa3 	bl	800276c <MCP2515_AddrReset>
	MCP2515_RateConfig();
 8002826:	f7ff ff8a 	bl	800273e <MCP2515_RateConfig>
	MCP2515_RegModify(MCP_CANINTE, 0xFF, 0xFF);
 800282a:	22ff      	movs	r2, #255	; 0xff
 800282c:	21ff      	movs	r1, #255	; 0xff
 800282e:	202b      	movs	r0, #43	; 0x2b
 8002830:	f7ff ff5d 	bl	80026ee <MCP2515_RegModify>
	MCP2515_RegModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 8002834:	2200      	movs	r2, #0
 8002836:	21e0      	movs	r1, #224	; 0xe0
 8002838:	200f      	movs	r0, #15
 800283a:	f7ff ff58 	bl	80026ee <MCP2515_RegModify>
	MCP2515_RegModify(MCP_RXB0CTRL,0x04,0x04);
 800283e:	2204      	movs	r2, #4
 8002840:	2104      	movs	r1, #4
 8002842:	2060      	movs	r0, #96	; 0x60
 8002844:	f7ff ff53 	bl	80026ee <MCP2515_RegModify>

}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <MCP2515_GetRxStatus>:

/* read RX STATUS register */
void MCP2515_GetRxStatus(uint16_t* buffer)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  MCP_CS_OFF();
 8002854:	2200      	movs	r2, #0
 8002856:	2110      	movs	r1, #16
 8002858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285c:	f000 fd84 	bl	8003368 <HAL_GPIO_WritePin>
  SPI_Tx(MCP_RX_STATUS);
 8002860:	20b0      	movs	r0, #176	; 0xb0
 8002862:	f7ff feb7 	bl	80025d4 <SPI_Tx>
  *buffer = HAL_SPI_Receive(SPI_CAN, buffer, 2, SPI_TIMEOUT);
 8002866:	2364      	movs	r3, #100	; 0x64
 8002868:	2202      	movs	r2, #2
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4808      	ldr	r0, [pc, #32]	; (8002890 <MCP2515_GetRxStatus+0x44>)
 800286e:	f002 ffac 	bl	80057ca <HAL_SPI_Receive>
 8002872:	4603      	mov	r3, r0
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	801a      	strh	r2, [r3, #0]
  MCP_CS_ON();
 800287a:	2201      	movs	r2, #1
 800287c:	2110      	movs	r1, #16
 800287e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002882:	f000 fd71 	bl	8003368 <HAL_GPIO_WritePin>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000a2c 	.word	0x20000a2c

08002894 <MCP2515_ReadStatus>:

void MCP2515_ReadStatus(uint8_t* buffer)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  MCP_CS_OFF();
 800289c:	2200      	movs	r2, #0
 800289e:	2110      	movs	r1, #16
 80028a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a4:	f000 fd60 	bl	8003368 <HAL_GPIO_WritePin>
  SPI_Tx(MCP_READ_STATUS);
 80028a8:	20a0      	movs	r0, #160	; 0xa0
 80028aa:	f7ff fe93 	bl	80025d4 <SPI_Tx>
  *buffer = SPI_Rx(); 
 80028ae:	f7ff fea3 	bl	80025f8 <SPI_Rx>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	701a      	strb	r2, [r3, #0]
  MCP_CS_ON();
 80028ba:	2201      	movs	r2, #1
 80028bc:	2110      	movs	r1, #16
 80028be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c2:	f000 fd51 	bl	8003368 <HAL_GPIO_WritePin>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6053      	str	r3, [r2, #4]
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e0042000 	.word	0xe0042000

080028f0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	6053      	str	r3, [r2, #4]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e0042000 	.word	0xe0042000

08002910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_Init+0x3c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_Init+0x3c>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002926:	2003      	movs	r0, #3
 8002928:	f000 f9c0 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800292c:	200f      	movs	r0, #15
 800292e:	f000 f80f 	bl	8002950 <HAL_InitTick>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	e001      	b.n	8002942 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800293e:	f7ff fb63 	bl	8002008 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002942:	79fb      	ldrb	r3, [r7, #7]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	58004000 	.word	0x58004000

08002950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_InitTick+0x6c>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d024      	beq.n	80029ae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002964:	f001 fe78 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_InitTick+0x6c>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002974:	fbb3 f3f1 	udiv	r3, r3, r1
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f9d6 	bl	8002d2e <HAL_SYSTICK_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d809      	bhi.n	80029a2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298e:	2200      	movs	r2, #0
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	f000 f994 	bl	8002cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_InitTick+0x70>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e007      	b.n	80029b2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e004      	b.n	80029b2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000028 	.word	0x20000028
 80029c0:	20000024 	.word	0x20000024

080029c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_IncTick+0x20>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x24>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_IncTick+0x24>)
 80029d6:	6013      	str	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000028 	.word	0x20000028
 80029e8:	20000cb8 	.word	0x20000cb8

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000cb8 	.word	0x20000cb8

08002a04 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_GetTickPrio+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000024 	.word	0x20000024

08002a1c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_GetTickFreq+0x14>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000028 	.word	0x20000028

08002a34 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002a38:	f7ff ff4a 	bl	80028d0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002a44:	f7ff ff54 	bl	80028f0 <LL_DBGMCU_EnableDBGStopMode>
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db12      	blt.n	8002b24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	490a      	ldr	r1, [pc, #40]	; (8002b30 <__NVIC_DisableIRQ+0x44>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	3320      	adds	r3, #32
 8002b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b18:	f3bf 8f4f 	dsb	sy
}
 8002b1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b1e:	f3bf 8f6f 	isb	sy
}
 8002b22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	db0c      	blt.n	8002b60 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	4907      	ldr	r1, [pc, #28]	; (8002b6c <__NVIC_SetPendingIRQ+0x38>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2001      	movs	r0, #1
 8002b56:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5a:	3340      	adds	r3, #64	; 0x40
 8002b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000e100 	.word	0xe000e100

08002b70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0c      	blt.n	8002b9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_ClearPendingIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	3360      	adds	r3, #96	; 0x60
 8002b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fec9 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd0:	f7ff fee0 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	6978      	ldr	r0, [r7, #20]
 8002cdc:	f7ff ff90 	bl	8002c00 <NVIC_EncodePriority>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff5f 	bl	8002bac <__NVIC_SetPriority>
}
 8002cee:	bf00      	nop
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fed3 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fee3 	bl	8002aec <__NVIC_DisableIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ff96 	bl	8002c68 <SysTick_Config>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff feed 	bl	8002b34 <__NVIC_SetPendingIRQ>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fefd 	bl	8002b70 <__NVIC_ClearPendingIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e04f      	b.n	8002e30 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d008      	beq.n	8002dae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2204      	movs	r2, #4
 8002da0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e040      	b.n	8002e30 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 020e 	bic.w	r2, r2, #14
 8002dbc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f003 021c 	and.w	r2, r3, #28
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dfa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00c      	beq.n	8002e1e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d005      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2204      	movs	r2, #4
 8002e58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	e047      	b.n	8002ef0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f003 021c 	and.w	r2, r3, #28
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002eac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ece:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
    }
  }
  return status;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f003 031c 	and.w	r3, r3, #28
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d026      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x7a>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d021      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0204 	bic.w	r2, r2, #4
 8002f4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f003 021c 	and.w	r2, r3, #28
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2104      	movs	r1, #4
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d071      	beq.n	800304e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f72:	e06c      	b.n	800304e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f003 031c 	and.w	r3, r3, #28
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02e      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xec>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d029      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 020a 	bic.w	r2, r2, #10
 8002fae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f003 021c 	and.w	r2, r3, #28
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d038      	beq.n	800304e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002fe4:	e033      	b.n	800304e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f003 031c 	and.w	r3, r3, #28
 8002fee:	2208      	movs	r2, #8
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d02a      	beq.n	8003050 <HAL_DMA_IRQHandler+0x156>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d025      	beq.n	8003050 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 020e 	bic.w	r2, r2, #14
 8003012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f003 021c 	and.w	r2, r3, #28
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800304e:	bf00      	nop
 8003050:	bf00      	nop
}
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003066:	e14c      	b.n	8003302 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2101      	movs	r1, #1
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	4013      	ands	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 813e 	beq.w	80032fc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d005      	beq.n	8003098 <HAL_GPIO_Init+0x40>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d130      	bne.n	80030fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ce:	2201      	movs	r2, #1
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 0201 	and.w	r2, r3, #1
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b03      	cmp	r3, #3
 8003104:	d017      	beq.n	8003136 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d123      	bne.n	800318a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	220f      	movs	r2, #15
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	08da      	lsrs	r2, r3, #3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3208      	adds	r2, #8
 8003184:	6939      	ldr	r1, [r7, #16]
 8003186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0203 	and.w	r2, r3, #3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8098 	beq.w	80032fc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80031cc:	4a54      	ldr	r2, [pc, #336]	; (8003320 <HAL_GPIO_Init+0x2c8>)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f6:	d019      	beq.n	800322c <HAL_GPIO_Init+0x1d4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a4a      	ldr	r2, [pc, #296]	; (8003324 <HAL_GPIO_Init+0x2cc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d013      	beq.n	8003228 <HAL_GPIO_Init+0x1d0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a49      	ldr	r2, [pc, #292]	; (8003328 <HAL_GPIO_Init+0x2d0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00d      	beq.n	8003224 <HAL_GPIO_Init+0x1cc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a48      	ldr	r2, [pc, #288]	; (800332c <HAL_GPIO_Init+0x2d4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <HAL_GPIO_Init+0x1c8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a47      	ldr	r2, [pc, #284]	; (8003330 <HAL_GPIO_Init+0x2d8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_GPIO_Init+0x1c4>
 8003218:	2304      	movs	r3, #4
 800321a:	e008      	b.n	800322e <HAL_GPIO_Init+0x1d6>
 800321c:	2307      	movs	r3, #7
 800321e:	e006      	b.n	800322e <HAL_GPIO_Init+0x1d6>
 8003220:	2303      	movs	r3, #3
 8003222:	e004      	b.n	800322e <HAL_GPIO_Init+0x1d6>
 8003224:	2302      	movs	r3, #2
 8003226:	e002      	b.n	800322e <HAL_GPIO_Init+0x1d6>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <HAL_GPIO_Init+0x1d6>
 800322c:	2300      	movs	r3, #0
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	f002 0203 	and.w	r2, r2, #3
 8003234:	0092      	lsls	r2, r2, #2
 8003236:	4093      	lsls	r3, r2
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800323e:	4938      	ldr	r1, [pc, #224]	; (8003320 <HAL_GPIO_Init+0x2c8>)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	3302      	adds	r3, #2
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800324c:	4b39      	ldr	r3, [pc, #228]	; (8003334 <HAL_GPIO_Init+0x2dc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003270:	4a30      	ldr	r2, [pc, #192]	; (8003334 <HAL_GPIO_Init+0x2dc>)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003276:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_GPIO_Init+0x2dc>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800329a:	4a26      	ldr	r2, [pc, #152]	; (8003334 <HAL_GPIO_Init+0x2dc>)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_GPIO_Init+0x2dc>)
 80032a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_GPIO_Init+0x2dc>)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80032ce:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_GPIO_Init+0x2dc>)
 80032d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032f4:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <HAL_GPIO_Init+0x2dc>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	f47f aeab 	bne.w	8003068 <HAL_GPIO_Init+0x10>
  }
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40010000 	.word	0x40010000
 8003324:	48000400 	.word	0x48000400
 8003328:	48000800 	.word	0x48000800
 800332c:	48000c00 	.word	0x48000c00
 8003330:	48001000 	.word	0x48001000
 8003334:	58000800 	.word	0x58000800

08003338 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e001      	b.n	800335a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
 8003374:	4613      	mov	r3, r2
 8003376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003384:	e002      	b.n	800338c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	43d9      	mvns	r1, r3
 80033b6:	887b      	ldrh	r3, [r7, #2]
 80033b8:	400b      	ands	r3, r1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_HSEM_IRQHandler+0x30>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_HSEM_IRQHandler+0x30>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	43db      	mvns	r3, r3
 80033e0:	4906      	ldr	r1, [pc, #24]	; (80033fc <HAL_HSEM_IRQHandler+0x30>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80033e6:	4a05      	ldr	r2, [pc, #20]	; (80033fc <HAL_HSEM_IRQHandler+0x30>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f807 	bl	8003400 <HAL_HSEM_FreeCallback>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	58001500 	.word	0x58001500

08003400 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01e      	beq.n	8003464 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <HAL_IPCC_Init+0x60>)
 8003428:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fdf6 	bl	8002028 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800343c:	68b8      	ldr	r0, [r7, #8]
 800343e:	f000 f85b 	bl	80034f8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f82c 	bl	80034ac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003462:	e001      	b.n	8003468 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	58000c00 	.word	0x58000c00

08003478 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	4613      	mov	r3, r2
 800349e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e00f      	b.n	80034da <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	4a0b      	ldr	r2, [pc, #44]	; (80034f0 <IPCC_SetDefaultCallbacks+0x44>)
 80034c4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3306      	adds	r3, #6
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <IPCC_SetDefaultCallbacks+0x48>)
 80034d2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3301      	adds	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d9ec      	bls.n	80034ba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	08003479 	.word	0x08003479
 80034f4:	08003493 	.word	0x08003493

080034f8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800350c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	223f      	movs	r2, #63	; 0x3f
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	58000400 	.word	0x58000400

08003540 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <HAL_PWREx_GetVoltageRange+0x18>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	58000400 	.word	0x58000400

0800355c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356e:	d101      	bne.n	8003574 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_RCC_HSE_Enable>:
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <LL_RCC_HSE_Disable>:
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80035a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <LL_RCC_HSE_IsReady>:
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ce:	d101      	bne.n	80035d4 <LL_RCC_HSE_IsReady+0x18>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <LL_RCC_HSE_IsReady+0x1a>
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_HSI_Enable>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <LL_RCC_HSI_Disable>:
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800360c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_RCC_HSI_IsReady>:
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362e:	d101      	bne.n	8003634 <LL_RCC_HSI_IsReady+0x18>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <LL_RCC_HSI_IsReady+0x1a>
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <LL_RCC_HSI48_Enable>:
{
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_RCC_HSI48_Disable>:
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <LL_RCC_HSI48_IsReady>:
{
 80036ae:	b480      	push	{r7}
 80036b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d101      	bne.n	80036c6 <LL_RCC_HSI48_IsReady+0x18>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <LL_RCC_HSI48_IsReady+0x1a>
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_RCC_LSE_Enable>:
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_RCC_LSE_Disable>:
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_RCC_LSE_EnableBypass>:
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800371a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_RCC_LSE_DisableBypass>:
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <LL_RCC_LSE_IsReady>:
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d101      	bne.n	8003772 <LL_RCC_LSE_IsReady+0x18>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <LL_RCC_LSE_IsReady+0x1a>
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_RCC_LSI1_Enable>:
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_RCC_LSI1_Disable>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_RCC_LSI1_IsReady>:
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80037c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d101      	bne.n	80037da <LL_RCC_LSI1_IsReady+0x18>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <LL_RCC_LSI1_IsReady+0x1a>
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_RCC_LSI2_Enable>:
{
 80037e6:	b480      	push	{r7}
 80037e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_RCC_LSI2_Disable>:
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800380c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <LL_RCC_LSI2_IsReady>:
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b08      	cmp	r3, #8
 800383c:	d101      	bne.n	8003842 <LL_RCC_LSI2_IsReady+0x18>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <LL_RCC_LSI2_IsReady+0x1a>
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_RCC_LSI2_SetTrimming>:
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_RCC_MSI_Enable>:
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_RCC_MSI_Disable>:
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6013      	str	r3, [r2, #0]
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_RCC_MSI_IsReady>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80038bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d101      	bne.n	80038ce <LL_RCC_MSI_IsReady+0x16>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <LL_RCC_MSI_IsReady+0x18>
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <LL_RCC_MSI_SetRange>:
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <LL_RCC_MSI_GetRange>:
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003912:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2bb0      	cmp	r3, #176	; 0xb0
 8003918:	d901      	bls.n	800391e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800391a:	23b0      	movs	r3, #176	; 0xb0
 800391c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800391e:	687b      	ldr	r3, [r7, #4]
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_RCC_MSI_SetCalibTrimming>:
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_RCC_SetSysClkSource>:
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800395e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 0203 	bic.w	r2, r3, #3
 8003968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <LL_RCC_GetSysClkSource>:
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_RCC_SetAHBPrescaler>:
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_C2_RCC_SetAHBPrescaler>:
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80039c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_RCC_SetAHB4Prescaler>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80039f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039fa:	f023 020f 	bic.w	r2, r3, #15
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_RCC_SetAPB1Prescaler>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_RCC_SetAPB2Prescaler>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_RCC_GetAHBPrescaler>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_GetAHB4Prescaler>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_RCC_PLL_Enable>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aae:	6013      	str	r3, [r2, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_RCC_PLL_Disable>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003acc:	6013      	str	r3, [r2, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_PLL_IsReady>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aea:	d101      	bne.n	8003af0 <LL_RCC_PLL_IsReady+0x18>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <LL_RCC_PLL_IsReady+0x1a>
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_RCC_PLL_GetN>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <LL_RCC_PLL_GetR>:
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <LL_RCC_PLL_GetDivider>:
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_PLL_GetMainSource>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0303 	and.w	r3, r3, #3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_IsActiveFlag_HPRE>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d101      	bne.n	8003b76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b96:	d101      	bne.n	8003b9c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d101      	bne.n	8003bc2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003be0:	d101      	bne.n	8003be6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c04:	d101      	bne.n	8003c0a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b08d      	sub	sp, #52	; 0x34
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e363      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 808d 	beq.w	8003d52 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c38:	f7ff fea1 	bl	800397e <LL_RCC_GetSysClkSource>
 8003c3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c3e:	f7ff ff82 	bl	8003b46 <LL_RCC_PLL_GetMainSource>
 8003c42:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_RCC_OscConfig+0x3e>
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d147      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d144      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e347      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003c66:	f7ff fe4c 	bl	8003902 <LL_RCC_MSI_GetRange>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	429c      	cmp	r4, r3
 8003c6e:	d914      	bls.n	8003c9a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fd03 	bl	8004680 <RCC_SetFlashLatencyFromMSIRange>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e336      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fe26 	bl	80038da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fe4a 	bl	800392c <LL_RCC_MSI_SetCalibTrimming>
 8003c98:	e013      	b.n	8003cc2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fe1b 	bl	80038da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fe3f 	bl	800392c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fce4 	bl	8004680 <RCC_SetFlashLatencyFromMSIRange>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e317      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003cc2:	f000 fcc9 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4aa4      	ldr	r2, [pc, #656]	; (8003f5c <HAL_RCC_OscConfig+0x344>)
 8003cca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ccc:	4ba4      	ldr	r3, [pc, #656]	; (8003f60 <HAL_RCC_OscConfig+0x348>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe fe3d 	bl	8002950 <HAL_InitTick>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d039      	beq.n	8003d50 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e308      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01e      	beq.n	8003d26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ce8:	f7ff fdc8 	bl	800387c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cec:	f7fe fe7e 	bl	80029ec <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fe7a 	bl	80029ec <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e2f5      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d06:	f7ff fdd7 	bl	80038b8 <LL_RCC_MSI_IsReady>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f1      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fde0 	bl	80038da <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fe04 	bl	800392c <LL_RCC_MSI_SetCalibTrimming>
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d26:	f7ff fdb8 	bl	800389a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe fe5f 	bl	80029ec <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d32:	f7fe fe5b 	bl	80029ec <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e2d6      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d44:	f7ff fdb8 	bl	80038b8 <LL_RCC_MSI_IsReady>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f1      	bne.n	8003d32 <HAL_RCC_OscConfig+0x11a>
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003d50:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d047      	beq.n	8003dee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	f7ff fe0e 	bl	800397e <LL_RCC_GetSysClkSource>
 8003d62:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d64:	f7ff feef 	bl	8003b46 <LL_RCC_PLL_GetMainSource>
 8003d68:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_OscConfig+0x164>
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d108      	bne.n	8003d88 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d134      	bne.n	8003dee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e2b4      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d102      	bne.n	8003d98 <HAL_RCC_OscConfig+0x180>
 8003d92:	f7ff fbf5 	bl	8003580 <LL_RCC_HSE_Enable>
 8003d96:	e001      	b.n	8003d9c <HAL_RCC_OscConfig+0x184>
 8003d98:	f7ff fc01 	bl	800359e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fe fe22 	bl	80029ec <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fe fe1e 	bl	80029ec <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e299      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003dbe:	f7ff fbfd 	bl	80035bc <LL_RCC_HSE_IsReady>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f1      	beq.n	8003dac <HAL_RCC_OscConfig+0x194>
 8003dc8:	e011      	b.n	8003dee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fe fe0f 	bl	80029ec <HAL_GetTick>
 8003dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd2:	f7fe fe0b 	bl	80029ec <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	; 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e286      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003de4:	f7ff fbea 	bl	80035bc <LL_RCC_HSE_IsReady>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f1      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d04c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfa:	f7ff fdc0 	bl	800397e <LL_RCC_GetSysClkSource>
 8003dfe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e00:	f7ff fea1 	bl	8003b46 <LL_RCC_PLL_GetMainSource>
 8003e04:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_OscConfig+0x200>
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d10e      	bne.n	8003e30 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e266      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fc09 	bl	8003640 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003e2e:	e031      	b.n	8003e94 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d019      	beq.n	8003e6c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e38:	f7ff fbd2 	bl	80035e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fdd6 	bl	80029ec <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fe fdd2 	bl	80029ec <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e24d      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003e56:	f7ff fbe1 	bl	800361c <LL_RCC_HSI_IsReady>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f1      	beq.n	8003e44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fbeb 	bl	8003640 <LL_RCC_HSI_SetCalibTrimming>
 8003e6a:	e013      	b.n	8003e94 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6c:	f7ff fbc7 	bl	80035fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe fdbc 	bl	80029ec <HAL_GetTick>
 8003e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e78:	f7fe fdb8 	bl	80029ec <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e233      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003e8a:	f7ff fbc7 	bl	800361c <LL_RCC_HSI_IsReady>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f1      	bne.n	8003e78 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a3 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d076      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d046      	beq.n	8003f50 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003ec2:	f7ff fc7e 	bl	80037c2 <LL_RCC_LSI1_IsReady>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d113      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003ecc:	f7ff fc57 	bl	800377e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ed0:	f7fe fd8c 	bl	80029ec <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ed8:	f7fe fd88 	bl	80029ec <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e203      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003eea:	f7ff fc6a 	bl	80037c2 <LL_RCC_LSI1_IsReady>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f1      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003ef4:	f7ff fc77 	bl	80037e6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fd78 	bl	80029ec <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f00:	f7fe fd74 	bl	80029ec <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1ef      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f12:	f7ff fc8a 	bl	800382a <LL_RCC_LSI2_IsReady>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f1      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fc94 	bl	800384e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003f26:	f7ff fc3b 	bl	80037a0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fe fd5f 	bl	80029ec <HAL_GetTick>
 8003f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f32:	f7fe fd5b 	bl	80029ec <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e1d6      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003f44:	f7ff fc3d 	bl	80037c2 <LL_RCC_LSI1_IsReady>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f1      	bne.n	8003f32 <HAL_RCC_OscConfig+0x31a>
 8003f4e:	e051      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003f50:	f7ff fc15 	bl	800377e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fe fd4a 	bl	80029ec <HAL_GetTick>
 8003f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003f5a:	e00c      	b.n	8003f76 <HAL_RCC_OscConfig+0x35e>
 8003f5c:	20000020 	.word	0x20000020
 8003f60:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f64:	f7fe fd42 	bl	80029ec <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e1bd      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003f76:	f7ff fc24 	bl	80037c2 <LL_RCC_LSI1_IsReady>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f1      	beq.n	8003f64 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003f80:	f7ff fc42 	bl	8003808 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f86:	f7fe fd31 	bl	80029ec <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1ac      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003f98:	f7ff fc47 	bl	800382a <LL_RCC_LSI2_IsReady>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f1      	bne.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003fa2:	e027      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003fa4:	f7ff fc30 	bl	8003808 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fe fd20 	bl	80029ec <HAL_GetTick>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fb0:	f7fe fd1c 	bl	80029ec <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e197      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003fc2:	f7ff fc32 	bl	800382a <LL_RCC_LSI2_IsReady>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f1      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003fcc:	f7ff fbe8 	bl	80037a0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7fe fd0c 	bl	80029ec <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fd8:	f7fe fd08 	bl	80029ec <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e183      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003fea:	f7ff fbea 	bl	80037c2 <LL_RCC_LSI1_IsReady>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f1      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05b      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004000:	4ba7      	ldr	r3, [pc, #668]	; (80042a0 <HAL_RCC_OscConfig+0x688>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d114      	bne.n	8004036 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800400c:	f7ff fa88 	bl	8003520 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004010:	f7fe fcec 	bl	80029ec <HAL_GetTick>
 8004014:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fe fce8 	bl	80029ec <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e163      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402a:	4b9d      	ldr	r3, [pc, #628]	; (80042a0 <HAL_RCC_OscConfig+0x688>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d102      	bne.n	8004044 <HAL_RCC_OscConfig+0x42c>
 800403e:	f7ff fb48 	bl	80036d2 <LL_RCC_LSE_Enable>
 8004042:	e00c      	b.n	800405e <HAL_RCC_OscConfig+0x446>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b05      	cmp	r3, #5
 800404a:	d104      	bne.n	8004056 <HAL_RCC_OscConfig+0x43e>
 800404c:	f7ff fb63 	bl	8003716 <LL_RCC_LSE_EnableBypass>
 8004050:	f7ff fb3f 	bl	80036d2 <LL_RCC_LSE_Enable>
 8004054:	e003      	b.n	800405e <HAL_RCC_OscConfig+0x446>
 8004056:	f7ff fb4d 	bl	80036f4 <LL_RCC_LSE_Disable>
 800405a:	f7ff fb6d 	bl	8003738 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d014      	beq.n	8004090 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004066:	f7fe fcc1 	bl	80029ec <HAL_GetTick>
 800406a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fe fcbd 	bl	80029ec <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e136      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004084:	f7ff fb69 	bl	800375a <LL_RCC_LSE_IsReady>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ef      	beq.n	800406e <HAL_RCC_OscConfig+0x456>
 800408e:	e013      	b.n	80040b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fe fcac 	bl	80029ec <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fe fca8 	bl	80029ec <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e121      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80040ae:	f7ff fb54 	bl	800375a <LL_RCC_LSE_IsReady>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1ef      	bne.n	8004098 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02c      	beq.n	800411e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d014      	beq.n	80040f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040cc:	f7ff facd 	bl	800366a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fe fc8c 	bl	80029ec <HAL_GetTick>
 80040d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040d8:	f7fe fc88 	bl	80029ec <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e103      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80040ea:	f7ff fae0 	bl	80036ae <LL_RCC_HSI48_IsReady>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f1      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4c0>
 80040f4:	e013      	b.n	800411e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040f6:	f7ff fac9 	bl	800368c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fe fc77 	bl	80029ec <HAL_GetTick>
 80040fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004102:	f7fe fc73 	bl	80029ec <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e0ee      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004114:	f7ff facb 	bl	80036ae <LL_RCC_HSI48_IsReady>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f1      	bne.n	8004102 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80e4 	beq.w	80042f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004128:	f7ff fc29 	bl	800397e <LL_RCC_GetSysClkSource>
 800412c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	2b02      	cmp	r3, #2
 800413c:	f040 80b4 	bne.w	80042a8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0203 	and.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	429a      	cmp	r2, r3
 800414c:	d123      	bne.n	8004196 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d11c      	bne.n	8004196 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d114      	bne.n	8004196 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d10d      	bne.n	8004196 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d05d      	beq.n	8004252 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d058      	beq.n	800424e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0a1      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041ae:	f7ff fc84 	bl	8003aba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041b2:	f7fe fc1b 	bl	80029ec <HAL_GetTick>
 80041b6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fe fc17 	bl	80029ec <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e092      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ef      	bne.n	80041ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCC_OscConfig+0x68c>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ec:	4311      	orrs	r1, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041f2:	0212      	lsls	r2, r2, #8
 80041f4:	4311      	orrs	r1, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004200:	4311      	orrs	r1, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004206:	430a      	orrs	r2, r1
 8004208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800420c:	4313      	orrs	r3, r2
 800420e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004210:	f7ff fc44 	bl	8003a9c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004222:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004224:	f7fe fbe2 	bl	80029ec <HAL_GetTick>
 8004228:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fe fbde 	bl	80029ec <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e059      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ef      	beq.n	800422c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800424c:	e050      	b.n	80042f0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e04f      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d147      	bne.n	80042f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004260:	f7ff fc1c 	bl	8003a9c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004272:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004274:	f7fe fbba 	bl	80029ec <HAL_GetTick>
 8004278:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427c:	f7fe fbb6 	bl	80029ec <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e031      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <HAL_RCC_OscConfig+0x664>
 800429c:	e028      	b.n	80042f0 <HAL_RCC_OscConfig+0x6d8>
 800429e:	bf00      	nop
 80042a0:	58000400 	.word	0x58000400
 80042a4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d01e      	beq.n	80042ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	f7ff fc04 	bl	8003aba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fe fb9b 	bl	80029ec <HAL_GetTick>
 80042b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fe fb97 	bl	80029ec <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e012      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1ef      	bne.n	80042ba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_OscConfig+0x6e4>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	60cb      	str	r3, [r1, #12]
 80042ea:	e001      	b.n	80042f0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3734      	adds	r7, #52	; 0x34
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd90      	pop	{r4, r7, pc}
 80042fa:	bf00      	nop
 80042fc:	eefefffc 	.word	0xeefefffc

08004300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e12d      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004314:	4b98      	ldr	r3, [pc, #608]	; (8004578 <HAL_RCC_ClockConfig+0x278>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d91b      	bls.n	800435a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b95      	ldr	r3, [pc, #596]	; (8004578 <HAL_RCC_ClockConfig+0x278>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 0207 	bic.w	r2, r3, #7
 800432a:	4993      	ldr	r1, [pc, #588]	; (8004578 <HAL_RCC_ClockConfig+0x278>)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004332:	f7fe fb5b 	bl	80029ec <HAL_GetTick>
 8004336:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004338:	e008      	b.n	800434c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800433a:	f7fe fb57 	bl	80029ec <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e111      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434c:	4b8a      	ldr	r3, [pc, #552]	; (8004578 <HAL_RCC_ClockConfig+0x278>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d1ef      	bne.n	800433a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fb13 	bl	8003996 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004370:	f7fe fb3c 	bl	80029ec <HAL_GetTick>
 8004374:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004378:	f7fe fb38 	bl	80029ec <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0f2      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800438a:	f7ff fbe8 	bl	8003b5e <LL_RCC_IsActiveFlag_HPRE>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f1      	beq.n	8004378 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d016      	beq.n	80043ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fb0a 	bl	80039be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043aa:	f7fe fb1f 	bl	80029ec <HAL_GetTick>
 80043ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043b2:	f7fe fb1b 	bl	80029ec <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0d5      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80043c4:	f7ff fbdd 	bl	8003b82 <LL_RCC_IsActiveFlag_C2HPRE>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f1      	beq.n	80043b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fb03 	bl	80039ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043e4:	f7fe fb02 	bl	80029ec <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043ec:	f7fe fafe 	bl	80029ec <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e0b8      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80043fe:	f7ff fbd3 	bl	8003ba8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f1      	beq.n	80043ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d016      	beq.n	8004442 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fafd 	bl	8003a18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800441e:	f7fe fae5 	bl	80029ec <HAL_GetTick>
 8004422:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004426:	f7fe fae1 	bl	80029ec <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e09b      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004438:	f7ff fbc9 	bl	8003bce <LL_RCC_IsActiveFlag_PPRE1>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f1      	beq.n	8004426 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d017      	beq.n	800447e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff faf3 	bl	8003a40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800445a:	f7fe fac7 	bl	80029ec <HAL_GetTick>
 800445e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004462:	f7fe fac3 	bl	80029ec <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e07d      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004474:	f7ff fbbd 	bl	8003bf2 <LL_RCC_IsActiveFlag_PPRE2>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f1      	beq.n	8004462 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d043      	beq.n	8004512 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004492:	f7ff f893 	bl	80035bc <LL_RCC_HSE_IsReady>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d11e      	bne.n	80044da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e067      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80044a8:	f7ff fb16 	bl	8003ad8 <LL_RCC_PLL_IsReady>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d113      	bne.n	80044da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e05c      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80044be:	f7ff f9fb 	bl	80038b8 <LL_RCC_MSI_IsReady>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e051      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80044cc:	f7ff f8a6 	bl	800361c <LL_RCC_HSI_IsReady>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e04a      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fa39 	bl	8003956 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e4:	f7fe fa82 	bl	80029ec <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ec:	f7fe fa7e 	bl	80029ec <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e036      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	f7ff fa3c 	bl	800397e <LL_RCC_GetSysClkSource>
 8004506:	4602      	mov	r2, r0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	429a      	cmp	r2, r3
 8004510:	d1ec      	bne.n	80044ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004512:	4b19      	ldr	r3, [pc, #100]	; (8004578 <HAL_RCC_ClockConfig+0x278>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d21b      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004520:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_RCC_ClockConfig+0x278>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 0207 	bic.w	r2, r3, #7
 8004528:	4913      	ldr	r1, [pc, #76]	; (8004578 <HAL_RCC_ClockConfig+0x278>)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004530:	f7fe fa5c 	bl	80029ec <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004536:	e008      	b.n	800454a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004538:	f7fe fa58 	bl	80029ec <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e012      	b.n	8004570 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_RCC_ClockConfig+0x278>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d1ef      	bne.n	8004538 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004558:	f000 f87e 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 800455c:	4603      	mov	r3, r0
 800455e:	4a07      	ldr	r2, [pc, #28]	; (800457c <HAL_RCC_ClockConfig+0x27c>)
 8004560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004562:	f7fe fa4f 	bl	8002a04 <HAL_GetTickPrio>
 8004566:	4603      	mov	r3, r0
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe f9f1 	bl	8002950 <HAL_InitTick>
 800456e:	4603      	mov	r3, r0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	58004000 	.word	0x58004000
 800457c:	20000020 	.word	0x20000020

08004580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004586:	f7ff f9fa 	bl	800397e <LL_RCC_GetSysClkSource>
 800458a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004592:	f7ff f9b6 	bl	8003902 <LL_RCC_MSI_GetRange>
 8004596:	4603      	mov	r3, r0
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	4a2b      	ldr	r2, [pc, #172]	; (800464c <HAL_RCC_GetSysClockFreq+0xcc>)
 80045a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e04b      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d102      	bne.n	80045b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045ae:	4b28      	ldr	r3, [pc, #160]	; (8004650 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e045      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d10a      	bne.n	80045d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80045ba:	f7fe ffcf 	bl	800355c <LL_RCC_HSE_IsEnabledDiv2>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d102      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80045c4:	4b22      	ldr	r3, [pc, #136]	; (8004650 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e03a      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80045ca:	4b22      	ldr	r3, [pc, #136]	; (8004654 <HAL_RCC_GetSysClockFreq+0xd4>)
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e037      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80045d0:	f7ff fab9 	bl	8003b46 <LL_RCC_PLL_GetMainSource>
 80045d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d003      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x64>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x6a>
 80045e2:	e00d      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80045e4:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045e6:	60bb      	str	r3, [r7, #8]
        break;
 80045e8:	e015      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80045ea:	f7fe ffb7 	bl	800355c <LL_RCC_HSE_IsEnabledDiv2>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d102      	bne.n	80045fa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80045f4:	4b16      	ldr	r3, [pc, #88]	; (8004650 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80045f8:	e00d      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80045fa:	4b16      	ldr	r3, [pc, #88]	; (8004654 <HAL_RCC_GetSysClockFreq+0xd4>)
 80045fc:	60bb      	str	r3, [r7, #8]
        break;
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004600:	f7ff f97f 	bl	8003902 <LL_RCC_MSI_GetRange>
 8004604:	4603      	mov	r3, r0
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	4a0f      	ldr	r2, [pc, #60]	; (800464c <HAL_RCC_GetSysClockFreq+0xcc>)
 800460e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004612:	60bb      	str	r3, [r7, #8]
        break;
 8004614:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004616:	f7ff fa71 	bl	8003afc <LL_RCC_PLL_GetN>
 800461a:	4602      	mov	r2, r0
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	fb03 f402 	mul.w	r4, r3, r2
 8004622:	f7ff fa84 	bl	8003b2e <LL_RCC_PLL_GetDivider>
 8004626:	4603      	mov	r3, r0
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	3301      	adds	r3, #1
 800462c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004630:	f7ff fa71 	bl	8003b16 <LL_RCC_PLL_GetR>
 8004634:	4603      	mov	r3, r0
 8004636:	0f5b      	lsrs	r3, r3, #29
 8004638:	3301      	adds	r3, #1
 800463a:	fbb4 f3f3 	udiv	r3, r4, r3
 800463e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004640:	68fb      	ldr	r3, [r7, #12]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	bd90      	pop	{r4, r7, pc}
 800464a:	bf00      	nop
 800464c:	0800a35c 	.word	0x0800a35c
 8004650:	00f42400 	.word	0x00f42400
 8004654:	01e84800 	.word	0x01e84800

08004658 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004658:	b598      	push	{r3, r4, r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800465c:	f7ff ff90 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 8004660:	4604      	mov	r4, r0
 8004662:	f7ff fa01 	bl	8003a68 <LL_RCC_GetAHBPrescaler>
 8004666:	4603      	mov	r3, r0
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	4a03      	ldr	r2, [pc, #12]	; (800467c <HAL_RCC_GetHCLKFreq+0x24>)
 8004670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004674:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd98      	pop	{r3, r4, r7, pc}
 800467c:	0800a31c 	.word	0x0800a31c

08004680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2bb0      	cmp	r3, #176	; 0xb0
 800468c:	d903      	bls.n	8004696 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e007      	b.n	80046a6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80046a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80046a6:	f7ff f9eb 	bl	8003a80 <LL_RCC_GetAHB4Prescaler>
 80046aa:	4603      	mov	r3, r0
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	4a0d      	ldr	r2, [pc, #52]	; (80046e8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	0c9c      	lsrs	r4, r3, #18
 80046ca:	f7fe ff39 	bl	8003540 <HAL_PWREx_GetVoltageRange>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4619      	mov	r1, r3
 80046d2:	4620      	mov	r0, r4
 80046d4:	f000 f80c 	bl	80046f0 <RCC_SetFlashLatency>
 80046d8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	bf00      	nop
 80046e4:	0800a35c 	.word	0x0800a35c
 80046e8:	0800a31c 	.word	0x0800a31c
 80046ec:	431bde83 	.word	0x431bde83

080046f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80046f0:	b590      	push	{r4, r7, lr}
 80046f2:	b093      	sub	sp, #76	; 0x4c
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80046fa:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <RCC_SetFlashLatency+0xe8>)
 80046fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004702:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004706:	4a35      	ldr	r2, [pc, #212]	; (80047dc <RCC_SetFlashLatency+0xec>)
 8004708:	f107 031c 	add.w	r3, r7, #28
 800470c:	ca07      	ldmia	r2, {r0, r1, r2}
 800470e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004712:	4b33      	ldr	r3, [pc, #204]	; (80047e0 <RCC_SetFlashLatency+0xf0>)
 8004714:	f107 040c 	add.w	r4, r7, #12
 8004718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800471a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800471e:	2300      	movs	r3, #0
 8004720:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004728:	d11a      	bne.n	8004760 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800472a:	2300      	movs	r3, #0
 800472c:	643b      	str	r3, [r7, #64]	; 0x40
 800472e:	e013      	b.n	8004758 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	3348      	adds	r3, #72	; 0x48
 8004736:	443b      	add	r3, r7
 8004738:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	d807      	bhi.n	8004752 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	3348      	adds	r3, #72	; 0x48
 8004748:	443b      	add	r3, r7
 800474a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800474e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004750:	e020      	b.n	8004794 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004754:	3301      	adds	r3, #1
 8004756:	643b      	str	r3, [r7, #64]	; 0x40
 8004758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475a:	2b03      	cmp	r3, #3
 800475c:	d9e8      	bls.n	8004730 <RCC_SetFlashLatency+0x40>
 800475e:	e019      	b.n	8004794 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004760:	2300      	movs	r3, #0
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004764:	e013      	b.n	800478e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	3348      	adds	r3, #72	; 0x48
 800476c:	443b      	add	r3, r7
 800476e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	d807      	bhi.n	8004788 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	3348      	adds	r3, #72	; 0x48
 800477e:	443b      	add	r3, r7
 8004780:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004784:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004786:	e005      	b.n	8004794 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	3301      	adds	r3, #1
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004790:	2b02      	cmp	r3, #2
 8004792:	d9e8      	bls.n	8004766 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004794:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <RCC_SetFlashLatency+0xf4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 0207 	bic.w	r2, r3, #7
 800479c:	4911      	ldr	r1, [pc, #68]	; (80047e4 <RCC_SetFlashLatency+0xf4>)
 800479e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a0:	4313      	orrs	r3, r2
 80047a2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047a4:	f7fe f922 	bl	80029ec <HAL_GetTick>
 80047a8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80047aa:	e008      	b.n	80047be <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047ac:	f7fe f91e 	bl	80029ec <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e007      	b.n	80047ce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <RCC_SetFlashLatency+0xf4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1ef      	bne.n	80047ac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	374c      	adds	r7, #76	; 0x4c
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}
 80047d6:	bf00      	nop
 80047d8:	0800a178 	.word	0x0800a178
 80047dc:	0800a188 	.word	0x0800a188
 80047e0:	0800a194 	.word	0x0800a194
 80047e4:	58004000 	.word	0x58004000

080047e8 <LL_RCC_LSE_IsEnabled>:
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80047ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <LL_RCC_LSE_IsEnabled+0x18>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <LL_RCC_LSE_IsEnabled+0x1a>
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <LL_RCC_LSE_IsReady>:
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b02      	cmp	r3, #2
 800481e:	d101      	bne.n	8004824 <LL_RCC_LSE_IsReady+0x18>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <LL_RCC_LSE_IsReady+0x1a>
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_RCC_SetRFWKPClockSource>:
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004840:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <LL_RCC_SetSMPSClockSource>:
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4313      	orrs	r3, r2
 8004876:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <LL_RCC_SetSMPSPrescaler>:
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4313      	orrs	r3, r2
 800489e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_RCC_SetUSARTClockSource>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80048b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f023 0203 	bic.w	r2, r3, #3
 80048c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <LL_RCC_SetLPUARTClockSource>:
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_RCC_SetI2CClockSource>:
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800490c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004910:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800491c:	43db      	mvns	r3, r3
 800491e:	401a      	ands	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <LL_RCC_SetLPTIMClockSource>:
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	041b      	lsls	r3, r3, #16
 8004954:	43db      	mvns	r3, r3
 8004956:	401a      	ands	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <LL_RCC_SetSAIClockSource>:
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_RCC_SetRNGClockSource>:
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80049a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80049b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <LL_RCC_SetCLK48ClockSource>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80049d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_SetUSBClockSource>:
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ffe3 	bl	80049ca <LL_RCC_SetCLK48ClockSource>
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <LL_RCC_SetADCClockSource>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_RCC_SetRTCClockSource>:
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <LL_RCC_GetRTCClockSource>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_RCC_ForceBackupDomainReset>:
{
 8004a7e:	b480      	push	{r7}
 8004a80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <LL_RCC_PLLSAI1_Enable>:
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ad4:	6013      	str	r3, [r2, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_RCC_PLLSAI1_Disable>:
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <LL_RCC_PLLSAI1_IsReady>:
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b10:	d101      	bne.n	8004b16 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b088      	sub	sp, #32
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004b2e:	2300      	movs	r3, #0
 8004b30:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d034      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b46:	d021      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004b48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b4c:	d81b      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b52:	d01d      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b58:	d815      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b62:	d110      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b72:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b74:	e00d      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f947 	bl	8004e0e <RCCEx_PLLSAI1_ConfigNP>
 8004b80:	4603      	mov	r3, r0
 8004b82:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b84:	e005      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	77fb      	strb	r3, [r7, #31]
        break;
 8004b8a:	e002      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004b8c:	bf00      	nop
 8004b8e:	e000      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b92:	7ffb      	ldrb	r3, [r7, #31]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d105      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fee8 	bl	8004972 <LL_RCC_SetSAIClockSource>
 8004ba2:	e001      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba4:	7ffb      	ldrb	r3, [r7, #31]
 8004ba6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d046      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004bb4:	f7ff ff56 	bl	8004a64 <LL_RCC_GetRTCClockSource>
 8004bb8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d03c      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004bc4:	f7fe fcac 	bl	8003520 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff30 	bl	8004a38 <LL_RCC_SetRTCClockSource>
 8004bd8:	e02e      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004be4:	f7ff ff4b 	bl	8004a7e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004be8:	f7ff ff5a 	bl	8004aa0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004c04:	f7ff fdf0 	bl	80047e8 <LL_RCC_LSE_IsEnabled>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d114      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c0e:	f7fd feed 	bl	80029ec <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004c14:	e00b      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fd fee9 	bl	80029ec <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d902      	bls.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	77fb      	strb	r3, [r7, #31]
              break;
 8004c2c:	e004      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004c2e:	f7ff fded 	bl	800480c <LL_RCC_LSE_IsReady>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d1ee      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004c38:	7ffb      	ldrb	r3, [r7, #31]
 8004c3a:	77bb      	strb	r3, [r7, #30]
 8004c3c:	e001      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	7ffb      	ldrb	r3, [r7, #31]
 8004c40:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fe2a 	bl	80048ac <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fe35 	bl	80048d8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d004      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fe5d 	bl	800493e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d004      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fe52 	bl	800493e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fe2a 	bl	8004904 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fe1f 	bl	8004904 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d022      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fe8d 	bl	80049f6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cfe:	d10b      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 f8dd 	bl	8004ec4 <RCCEx_PLLSAI1_ConfigNQ>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004d0e:	7ffb      	ldrb	r3, [r7, #31]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004d14:	7ffb      	ldrb	r3, [r7, #31]
 8004d16:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d02b      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2c:	d008      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d36:	d003      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fe2a 	bl	800499e <LL_RCC_SetRNGClockSource>
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	2000      	movs	r0, #0
 8004d58:	f7ff fe21 	bl	800499e <LL_RCC_SetRNGClockSource>
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff fe34 	bl	80049ca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d022      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fe3d 	bl	8004a0c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9a:	d107      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004daa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004db4:	d10b      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f8dd 	bl	8004f7a <RCCEx_PLLSAI1_ConfigNR>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004dc4:	7ffb      	ldrb	r3, [r7, #31]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004dca:	7ffb      	ldrb	r3, [r7, #31]
 8004dcc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fd26 	bl	8004830 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d009      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fd45 	bl	8004884 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fd2c 	bl	800485c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004e1a:	f7ff fe61 	bl	8004ae0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e1e:	f7fd fde5 	bl	80029ec <HAL_GetTick>
 8004e22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e24:	e009      	b.n	8004e3a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e26:	f7fd fde1 	bl	80029ec <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d902      	bls.n	8004e3a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	73fb      	strb	r3, [r7, #15]
      break;
 8004e38:	e004      	b.n	8004e44 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e3a:	f7ff fe60 	bl	8004afe <LL_RCC_PLLSAI1_IsReady>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f0      	bne.n	8004e26 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d137      	bne.n	8004eba <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e74:	4313      	orrs	r3, r2
 8004e76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004e78:	f7ff fe23 	bl	8004ac2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd fdb6 	bl	80029ec <HAL_GetTick>
 8004e80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e82:	e009      	b.n	8004e98 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e84:	f7fd fdb2 	bl	80029ec <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d902      	bls.n	8004e98 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	73fb      	strb	r3, [r7, #15]
        break;
 8004e96:	e004      	b.n	8004ea2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e98:	f7ff fe31 	bl	8004afe <LL_RCC_PLLSAI1_IsReady>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d1f0      	bne.n	8004e84 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ed0:	f7ff fe06 	bl	8004ae0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ed4:	f7fd fd8a 	bl	80029ec <HAL_GetTick>
 8004ed8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004eda:	e009      	b.n	8004ef0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004edc:	f7fd fd86 	bl	80029ec <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d902      	bls.n	8004ef0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	73fb      	strb	r3, [r7, #15]
      break;
 8004eee:	e004      	b.n	8004efa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ef0:	f7ff fe05 	bl	8004afe <LL_RCC_PLLSAI1_IsReady>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d137      	bne.n	8004f70 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f14:	4313      	orrs	r3, r2
 8004f16:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004f2e:	f7ff fdc8 	bl	8004ac2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f32:	f7fd fd5b 	bl	80029ec <HAL_GetTick>
 8004f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f38:	e009      	b.n	8004f4e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f3a:	f7fd fd57 	bl	80029ec <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d902      	bls.n	8004f4e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	73fb      	strb	r3, [r7, #15]
        break;
 8004f4c:	e004      	b.n	8004f58 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f4e:	f7ff fdd6 	bl	8004afe <LL_RCC_PLLSAI1_IsReady>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d1f0      	bne.n	8004f3a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d108      	bne.n	8004f70 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f86:	f7ff fdab 	bl	8004ae0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f8a:	f7fd fd2f 	bl	80029ec <HAL_GetTick>
 8004f8e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f90:	e009      	b.n	8004fa6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f92:	f7fd fd2b 	bl	80029ec <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d902      	bls.n	8004fa6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa4:	e004      	b.n	8004fb0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fa6:	f7ff fdaa 	bl	8004afe <LL_RCC_PLLSAI1_IsReady>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d137      	bne.n	8005026 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fe4:	f7ff fd6d 	bl	8004ac2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe8:	f7fd fd00 	bl	80029ec <HAL_GetTick>
 8004fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fee:	e009      	b.n	8005004 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ff0:	f7fd fcfc 	bl	80029ec <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d902      	bls.n	8005004 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	73fb      	strb	r3, [r7, #15]
        break;
 8005002:	e004      	b.n	800500e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005004:	f7ff fd7b 	bl	8004afe <LL_RCC_PLLSAI1_IsReady>
 8005008:	4603      	mov	r3, r0
 800500a:	2b01      	cmp	r3, #1
 800500c:	d1f0      	bne.n	8004ff0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d108      	bne.n	8005026 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005022:	4313      	orrs	r3, r2
 8005024:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005026:	7bfb      	ldrb	r3, [r7, #15]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e09f      	b.n	8005182 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fd f80a 	bl	8002070 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005064:	4b49      	ldr	r3, [pc, #292]	; (800518c <HAL_RTC_Init+0x15c>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b10      	cmp	r3, #16
 800506e:	d07e      	beq.n	800516e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	22ca      	movs	r2, #202	; 0xca
 8005076:	625a      	str	r2, [r3, #36]	; 0x24
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2253      	movs	r2, #83	; 0x53
 800507e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f8ab 	bl	80051dc <RTC_EnterInitMode>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	22ff      	movs	r2, #255	; 0xff
 8005092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2204      	movs	r2, #4
 8005098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
 80050a0:	e067      	b.n	8005172 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6899      	ldr	r1, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	68d2      	ldr	r2, [r2, #12]
 80050dc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6919      	ldr	r1, [r3, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	041a      	lsls	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005100:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0203 	bic.w	r2, r2, #3
 8005110:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d113      	bne.n	8005160 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f829 	bl	8005190 <HAL_RTC_WaitForSynchro>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00d      	beq.n	8005160 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	22ff      	movs	r2, #255	; 0xff
 800514a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2204      	movs	r2, #4
 8005150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e010      	b.n	8005182 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	e001      	b.n	8005172 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d103      	bne.n	8005180 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40002800 	.word	0x40002800

08005190 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80051a8:	f7fd fc20 	bl	80029ec <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051ae:	e009      	b.n	80051c4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051b0:	f7fd fc1c 	bl	80029ec <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051be:	d901      	bls.n	80051c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e007      	b.n	80051d4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0ee      	beq.n	80051b0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d119      	bne.n	8005226 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f04f 32ff 	mov.w	r2, #4294967295
 80051fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80051fc:	f7fd fbf6 	bl	80029ec <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005202:	e009      	b.n	8005218 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005204:	f7fd fbf2 	bl	80029ec <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005212:	d901      	bls.n	8005218 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e007      	b.n	8005228 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0ee      	beq.n	8005204 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005246:	2302      	movs	r3, #2
 8005248:	e0a8      	b.n	800539c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	22ca      	movs	r2, #202	; 0xca
 8005260:	625a      	str	r2, [r3, #36]	; 0x24
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2253      	movs	r2, #83	; 0x53
 8005268:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005278:	f7fd fbb8 	bl	80029ec <HAL_GetTick>
 800527c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800527e:	e015      	b.n	80052ac <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005280:	f7fd fbb4 	bl	80029ec <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800528e:	d90d      	bls.n	80052ac <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2203      	movs	r2, #3
 800529c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e077      	b.n	800539c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e2      	bne.n	8005280 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80052da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80052dc:	f7fd fb86 	bl	80029ec <HAL_GetTick>
 80052e0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80052e2:	e015      	b.n	8005310 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052e4:	f7fd fb82 	bl	80029ec <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f2:	d90d      	bls.n	8005310 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	22ff      	movs	r2, #255	; 0xff
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2203      	movs	r2, #3
 8005300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e045      	b.n	800539c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0e2      	beq.n	80052e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0207 	bic.w	r2, r2, #7
 8005334:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6899      	ldr	r1, [r3, #8]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	430a      	orrs	r2, r1
 8005344:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005346:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800534c:	4a15      	ldr	r2, [pc, #84]	; (80053a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800534e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005352:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a12      	ldr	r2, [pc, #72]	; (80053a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800535c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005360:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005370:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005380:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	22ff      	movs	r2, #255	; 0xff
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	58000800 	.word	0x58000800

080053a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e095      	b.n	80054e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d108      	bne.n	80053d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ca:	d009      	beq.n	80053e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	61da      	str	r2, [r3, #28]
 80053d2:	e005      	b.n	80053e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc fe6c 	bl	80020d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005416:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005420:	d902      	bls.n	8005428 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e002      	b.n	800542e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800542c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005436:	d007      	beq.n	8005448 <HAL_SPI_Init+0xa0>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005440:	d002      	beq.n	8005448 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	ea42 0103 	orr.w	r1, r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	0c1b      	lsrs	r3, r3, #16
 80054a4:	f003 0204 	and.w	r2, r3, #4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054c4:	ea42 0103 	orr.w	r1, r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b088      	sub	sp, #32
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_SPI_Transmit+0x22>
 800550c:	2302      	movs	r3, #2
 800550e:	e158      	b.n	80057c2 <HAL_SPI_Transmit+0x2d4>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005518:	f7fd fa68 	bl	80029ec <HAL_GetTick>
 800551c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	d002      	beq.n	8005534 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005532:	e13d      	b.n	80057b0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_SPI_Transmit+0x52>
 800553a:	88fb      	ldrh	r3, [r7, #6]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005544:	e134      	b.n	80057b0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2203      	movs	r2, #3
 800554a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	88fa      	ldrh	r2, [r7, #6]
 8005564:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005590:	d10f      	bne.n	80055b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d007      	beq.n	80055d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055d8:	d94b      	bls.n	8005672 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_SPI_Transmit+0xfa>
 80055e2:	8afb      	ldrh	r3, [r7, #22]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d13e      	bne.n	8005666 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	881a      	ldrh	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	1c9a      	adds	r2, r3, #2
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800560c:	e02b      	b.n	8005666 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b02      	cmp	r3, #2
 800561a:	d112      	bne.n	8005642 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	881a      	ldrh	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	1c9a      	adds	r2, r3, #2
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005640:	e011      	b.n	8005666 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005642:	f7fd f9d3 	bl	80029ec <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d803      	bhi.n	800565a <HAL_SPI_Transmit+0x16c>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d102      	bne.n	8005660 <HAL_SPI_Transmit+0x172>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005664:	e0a4      	b.n	80057b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1ce      	bne.n	800560e <HAL_SPI_Transmit+0x120>
 8005670:	e07c      	b.n	800576c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_SPI_Transmit+0x192>
 800567a:	8afb      	ldrh	r3, [r7, #22]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d170      	bne.n	8005762 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d912      	bls.n	80056b0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	881a      	ldrh	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	1c9a      	adds	r2, r3, #2
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b02      	subs	r3, #2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056ae:	e058      	b.n	8005762 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	7812      	ldrb	r2, [r2, #0]
 80056bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056d6:	e044      	b.n	8005762 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d12b      	bne.n	800573e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d912      	bls.n	8005716 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	881a      	ldrh	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	1c9a      	adds	r2, r3, #2
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b02      	subs	r3, #2
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005714:	e025      	b.n	8005762 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	7812      	ldrb	r2, [r2, #0]
 8005722:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800573c:	e011      	b.n	8005762 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573e:	f7fd f955 	bl	80029ec <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d803      	bhi.n	8005756 <HAL_SPI_Transmit+0x268>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d102      	bne.n	800575c <HAL_SPI_Transmit+0x26e>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005760:	e026      	b.n	80057b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1b5      	bne.n	80056d8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fdf7 	bl	8006364 <SPI_EndRxTxTransaction>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800578a:	2300      	movs	r3, #0
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e000      	b.n	80057b0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80057ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b088      	sub	sp, #32
 80057ce:	af02      	add	r7, sp, #8
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e6:	d112      	bne.n	800580e <HAL_SPI_Receive+0x44>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10e      	bne.n	800580e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2204      	movs	r2, #4
 80057f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	4613      	mov	r3, r2
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f910 	bl	8005a2a <HAL_SPI_TransmitReceive>
 800580a:	4603      	mov	r3, r0
 800580c:	e109      	b.n	8005a22 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_SPI_Receive+0x52>
 8005818:	2302      	movs	r3, #2
 800581a:	e102      	b.n	8005a22 <HAL_SPI_Receive+0x258>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005824:	f7fd f8e2 	bl	80029ec <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d002      	beq.n	800583c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005836:	2302      	movs	r3, #2
 8005838:	75fb      	strb	r3, [r7, #23]
    goto error;
 800583a:	e0e9      	b.n	8005a10 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_SPI_Receive+0x7e>
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800584c:	e0e0      	b.n	8005a10 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2204      	movs	r2, #4
 8005852:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	88fa      	ldrh	r2, [r7, #6]
 8005866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005898:	d908      	bls.n	80058ac <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	e007      	b.n	80058bc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058ba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c4:	d10f      	bne.n	80058e6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d007      	beq.n	8005904 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005902:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800590c:	d867      	bhi.n	80059de <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800590e:	e030      	b.n	8005972 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	d117      	bne.n	800594e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f103 020c 	add.w	r2, r3, #12
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800594c:	e011      	b.n	8005972 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800594e:	f7fd f84d 	bl	80029ec <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d803      	bhi.n	8005966 <HAL_SPI_Receive+0x19c>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d102      	bne.n	800596c <HAL_SPI_Receive+0x1a2>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005970:	e04e      	b.n	8005a10 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1c8      	bne.n	8005910 <HAL_SPI_Receive+0x146>
 800597e:	e034      	b.n	80059ea <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d115      	bne.n	80059ba <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	b292      	uxth	r2, r2
 800599a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	1c9a      	adds	r2, r3, #2
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80059b8:	e011      	b.n	80059de <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ba:	f7fd f817 	bl	80029ec <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d803      	bhi.n	80059d2 <HAL_SPI_Receive+0x208>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d102      	bne.n	80059d8 <HAL_SPI_Receive+0x20e>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059dc:	e018      	b.n	8005a10 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1ca      	bne.n	8005980 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fc60 	bl	80062b4 <SPI_EndRxTransaction>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	75fb      	strb	r3, [r7, #23]
 8005a0c:	e000      	b.n	8005a10 <HAL_SPI_Receive+0x246>
  }

error :
 8005a0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b08a      	sub	sp, #40	; 0x28
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x26>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e1fb      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x41e>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a58:	f7fc ffc8 	bl	80029ec <HAL_GetTick>
 8005a5c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a64:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a6c:	887b      	ldrh	r3, [r7, #2]
 8005a6e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a74:	7efb      	ldrb	r3, [r7, #27]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d00e      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x6e>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a80:	d106      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x66>
 8005a8a:	7efb      	ldrb	r3, [r7, #27]
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d003      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a90:	2302      	movs	r3, #2
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a96:	e1cd      	b.n	8005e34 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x80>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x80>
 8005aa4:	887b      	ldrh	r3, [r7, #2]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ab0:	e1c0      	b.n	8005e34 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d003      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2205      	movs	r2, #5
 8005ac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	887a      	ldrh	r2, [r7, #2]
 8005ad6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	887a      	ldrh	r2, [r7, #2]
 8005ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	887a      	ldrh	r2, [r7, #2]
 8005aec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	887a      	ldrh	r2, [r7, #2]
 8005af2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b08:	d802      	bhi.n	8005b10 <HAL_SPI_TransmitReceive+0xe6>
 8005b0a:	8a3b      	ldrh	r3, [r7, #16]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d908      	bls.n	8005b22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	e007      	b.n	8005b32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d007      	beq.n	8005b50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b58:	d97c      	bls.n	8005c54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_TransmitReceive+0x13e>
 8005b62:	8a7b      	ldrh	r3, [r7, #18]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d169      	bne.n	8005c3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	881a      	ldrh	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	1c9a      	adds	r2, r3, #2
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b8c:	e056      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x1aa>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d016      	beq.n	8005bd4 <HAL_SPI_TransmitReceive+0x1aa>
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d113      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	1c9a      	adds	r2, r3, #2
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d11c      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x1f2>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	b292      	uxth	r2, r2
 8005bfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	1c9a      	adds	r2, r3, #2
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c1c:	f7fc fee6 	bl	80029ec <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d807      	bhi.n	8005c3c <HAL_SPI_TransmitReceive+0x212>
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d003      	beq.n	8005c3c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c3a:	e0fb      	b.n	8005e34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1a3      	bne.n	8005b8e <HAL_SPI_TransmitReceive+0x164>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d19d      	bne.n	8005b8e <HAL_SPI_TransmitReceive+0x164>
 8005c52:	e0df      	b.n	8005e14 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_SPI_TransmitReceive+0x23a>
 8005c5c:	8a7b      	ldrh	r3, [r7, #18]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	f040 80cb 	bne.w	8005dfa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d912      	bls.n	8005c94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	881a      	ldrh	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	1c9a      	adds	r2, r3, #2
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b02      	subs	r3, #2
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c92:	e0b2      	b.n	8005dfa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cba:	e09e      	b.n	8005dfa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d134      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x30a>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d02f      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0x30a>
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d12c      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d912      	bls.n	8005d0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	881a      	ldrh	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	1c9a      	adds	r2, r3, #2
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b02      	subs	r3, #2
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d08:	e012      	b.n	8005d30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d148      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x3aa>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d042      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d923      	bls.n	8005da2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	b292      	uxth	r2, r2
 8005d66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	1c9a      	adds	r2, r3, #2
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b02      	subs	r3, #2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d81f      	bhi.n	8005dd0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	e016      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f103 020c 	add.w	r2, r3, #12
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	7812      	ldrb	r2, [r2, #0]
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005dd4:	f7fc fe0a 	bl	80029ec <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d803      	bhi.n	8005dec <HAL_SPI_TransmitReceive+0x3c2>
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d102      	bne.n	8005df2 <HAL_SPI_TransmitReceive+0x3c8>
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005df8:	e01c      	b.n	8005e34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f47f af5b 	bne.w	8005cbc <HAL_SPI_TransmitReceive+0x292>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f47f af54 	bne.w	8005cbc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 faa3 	bl	8006364 <SPI_EndRxTxTransaction>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d006      	beq.n	8005e32 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	661a      	str	r2, [r3, #96]	; 0x60
 8005e30:	e000      	b.n	8005e34 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3728      	adds	r7, #40	; 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10e      	bne.n	8005e90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d009      	beq.n	8005e90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d004      	beq.n	8005e90 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
    return;
 8005e8e:	e0ce      	b.n	800602e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <HAL_SPI_IRQHandler+0x5e>
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d004      	beq.n	8005eae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
    return;
 8005eac:	e0bf      	b.n	800602e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <HAL_SPI_IRQHandler+0x7e>
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80b0 	beq.w	800602e <HAL_SPI_IRQHandler+0x1de>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80aa 	beq.w	800602e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d023      	beq.n	8005f2c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d011      	beq.n	8005f14 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef4:	f043 0204 	orr.w	r2, r3, #4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	e00b      	b.n	8005f2c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	693b      	ldr	r3, [r7, #16]
        return;
 8005f2a:	e080      	b.n	800602e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d014      	beq.n	8005f60 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3a:	f043 0201 	orr.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00c      	beq.n	8005f84 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6e:	f043 0208 	orr.w	r2, r3, #8
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d04f      	beq.n	800602c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f9a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <HAL_SPI_IRQHandler+0x168>
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d034      	beq.n	8006022 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0203 	bic.w	r2, r2, #3
 8005fc6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d011      	beq.n	8005ff4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd4:	4a17      	ldr	r2, [pc, #92]	; (8006034 <HAL_SPI_IRQHandler+0x1e4>)
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fc ff2d 	bl	8002e3c <HAL_DMA_Abort_IT>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d016      	beq.n	800602a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <HAL_SPI_IRQHandler+0x1e4>)
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	4618      	mov	r0, r3
 800600a:	f7fc ff17 	bl	8002e3c <HAL_DMA_Abort_IT>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006018:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006020:	e003      	b.n	800602a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f808 	bl	8006038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006028:	e000      	b.n	800602c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800602a:	bf00      	nop
    return;
 800602c:	bf00      	nop
  }
}
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	0800604d 	.word	0x0800604d

08006038 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff ffe5 	bl	8006038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006088:	f7fc fcb0 	bl	80029ec <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	4413      	add	r3, r2
 8006096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006098:	f7fc fca8 	bl	80029ec <HAL_GetTick>
 800609c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800609e:	4b39      	ldr	r3, [pc, #228]	; (8006184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	015b      	lsls	r3, r3, #5
 80060a4:	0d1b      	lsrs	r3, r3, #20
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	fb02 f303 	mul.w	r3, r2, r3
 80060ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ae:	e054      	b.n	800615a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b6:	d050      	beq.n	800615a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060b8:	f7fc fc98 	bl	80029ec <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d902      	bls.n	80060ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d13d      	bne.n	800614a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e6:	d111      	bne.n	800610c <SPI_WaitFlagStateUntilTimeout+0x94>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f0:	d004      	beq.n	80060fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fa:	d107      	bne.n	800610c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800610a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006114:	d10f      	bne.n	8006136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e017      	b.n	800617a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	3b01      	subs	r3, #1
 8006158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	429a      	cmp	r2, r3
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	429a      	cmp	r2, r3
 8006176:	d19b      	bne.n	80060b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000020 	.word	0x20000020

08006188 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	; 0x28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800619a:	f7fc fc27 	bl	80029ec <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	4413      	add	r3, r2
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80061aa:	f7fc fc1f 	bl	80029ec <HAL_GetTick>
 80061ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061b8:	4b3d      	ldr	r3, [pc, #244]	; (80062b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	00da      	lsls	r2, r3, #3
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	0d1b      	lsrs	r3, r3, #20
 80061c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061d0:	e060      	b.n	8006294 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061d8:	d107      	bne.n	80061ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d050      	beq.n	8006294 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061f2:	f7fc fbfb 	bl	80029ec <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fe:	429a      	cmp	r2, r3
 8006200:	d902      	bls.n	8006208 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d13d      	bne.n	8006284 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006216:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006220:	d111      	bne.n	8006246 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622a:	d004      	beq.n	8006236 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006234:	d107      	bne.n	8006246 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006244:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624e:	d10f      	bne.n	8006270 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800626e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e010      	b.n	80062a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	3b01      	subs	r3, #1
 8006292:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4013      	ands	r3, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d196      	bne.n	80061d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3728      	adds	r7, #40	; 0x28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000020 	.word	0x20000020

080062b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c8:	d111      	bne.n	80062ee <SPI_EndRxTransaction+0x3a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d2:	d004      	beq.n	80062de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062dc:	d107      	bne.n	80062ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2180      	movs	r1, #128	; 0x80
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff febd 	bl	8006078 <SPI_WaitFlagStateUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e023      	b.n	800635c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800631c:	d11d      	bne.n	800635a <SPI_EndRxTransaction+0xa6>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006326:	d004      	beq.n	8006332 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006330:	d113      	bne.n	800635a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2200      	movs	r2, #0
 800633a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff ff22 	bl	8006188 <SPI_WaitFifoStateUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e000      	b.n	800635c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af02      	add	r7, sp, #8
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2200      	movs	r2, #0
 8006378:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff ff03 	bl	8006188 <SPI_WaitFifoStateUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e027      	b.n	80063e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2200      	movs	r2, #0
 80063a0:	2180      	movs	r1, #128	; 0x80
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff fe68 	bl	8006078 <SPI_WaitFlagStateUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b2:	f043 0220 	orr.w	r2, r3, #32
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e014      	b.n	80063e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff fedc 	bl	8006188 <SPI_WaitFifoStateUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063da:	f043 0220 	orr.w	r2, r3, #32
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e000      	b.n	80063e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b0ba      	sub	sp, #232	; 0xe8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006416:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800641a:	f640 030f 	movw	r3, #2063	; 0x80f
 800641e:	4013      	ands	r3, r2
 8006420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006428:	2b00      	cmp	r3, #0
 800642a:	d11b      	bne.n	8006464 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800642c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d015      	beq.n	8006464 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 82e3 	beq.w	8006a20 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
      }
      return;
 8006462:	e2dd      	b.n	8006a20 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8123 	beq.w	80066b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800646e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006472:	4b8d      	ldr	r3, [pc, #564]	; (80066a8 <HAL_UART_IRQHandler+0x2b8>)
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800647a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800647e:	4b8b      	ldr	r3, [pc, #556]	; (80066ac <HAL_UART_IRQHandler+0x2bc>)
 8006480:	4013      	ands	r3, r2
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 8116 	beq.w	80066b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d011      	beq.n	80064b8 <HAL_UART_IRQHandler+0xc8>
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ae:	f043 0201 	orr.w	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d011      	beq.n	80064e8 <HAL_UART_IRQHandler+0xf8>
 80064c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2202      	movs	r2, #2
 80064d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	f043 0204 	orr.w	r2, r3, #4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d011      	beq.n	8006518 <HAL_UART_IRQHandler+0x128>
 80064f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2204      	movs	r2, #4
 8006506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650e:	f043 0202 	orr.w	r2, r3, #2
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b00      	cmp	r3, #0
 8006522:	d017      	beq.n	8006554 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006530:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006534:	4b5c      	ldr	r3, [pc, #368]	; (80066a8 <HAL_UART_IRQHandler+0x2b8>)
 8006536:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2208      	movs	r2, #8
 8006542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654a:	f043 0208 	orr.w	r2, r3, #8
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800655c:	2b00      	cmp	r3, #0
 800655e:	d012      	beq.n	8006586 <HAL_UART_IRQHandler+0x196>
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657c:	f043 0220 	orr.w	r2, r3, #32
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8249 	beq.w	8006a24 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d013      	beq.n	80065c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800659e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d005      	beq.n	80065ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d054      	beq.n	8006694 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa44 	bl	8006a78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d146      	bne.n	800668c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3308      	adds	r3, #8
 8006604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800662a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800662e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006636:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1d9      	bne.n	80065fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006650:	2b00      	cmp	r3, #0
 8006652:	d017      	beq.n	8006684 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665a:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <HAL_UART_IRQHandler+0x2c0>)
 800665c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006664:	4618      	mov	r0, r3
 8006666:	f7fc fbe9 	bl	8002e3c <HAL_DMA_Abort_IT>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d019      	beq.n	80066a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800667e:	4610      	mov	r0, r2
 8006680:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006682:	e00f      	b.n	80066a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f9e1 	bl	8006a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668a:	e00b      	b.n	80066a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f9dd 	bl	8006a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006692:	e007      	b.n	80066a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f9d9 	bl	8006a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80066a2:	e1bf      	b.n	8006a24 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	bf00      	nop
    return;
 80066a6:	e1bd      	b.n	8006a24 <HAL_UART_IRQHandler+0x634>
 80066a8:	10000001 	.word	0x10000001
 80066ac:	04000120 	.word	0x04000120
 80066b0:	08006b45 	.word	0x08006b45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	f040 8153 	bne.w	8006964 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 814c 	beq.w	8006964 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8145 	beq.w	8006964 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2210      	movs	r2, #16
 80066e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	f040 80bb 	bne.w	8006868 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 818f 	beq.w	8006a28 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006710:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006714:	429a      	cmp	r2, r3
 8006716:	f080 8187 	bcs.w	8006a28 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006720:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	f040 8087 	bne.w	8006846 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800674c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006762:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006766:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800676e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800677a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1da      	bne.n	8006738 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3308      	adds	r3, #8
 8006788:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006794:	f023 0301 	bic.w	r3, r3, #1
 8006798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3308      	adds	r3, #8
 80067a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e1      	bne.n	8006782 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3308      	adds	r3, #8
 80067c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e3      	bne.n	80067be <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006814:	f023 0310 	bic.w	r3, r3, #16
 8006818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006826:	65bb      	str	r3, [r7, #88]	; 0x58
 8006828:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800682c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e4      	bne.n	8006804 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006840:	4618      	mov	r0, r3
 8006842:	f7fc fa9c 	bl	8002d7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006858:	b29b      	uxth	r3, r3
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	b29b      	uxth	r3, r3
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f8fd 	bl	8006a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006866:	e0df      	b.n	8006a28 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006874:	b29b      	uxth	r3, r3
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80d1 	beq.w	8006a2c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800688a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 80cc 	beq.w	8006a2c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068b6:	647b      	str	r3, [r7, #68]	; 0x44
 80068b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e4      	bne.n	8006894 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	623b      	str	r3, [r7, #32]
   return(result);
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3308      	adds	r3, #8
 80068ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068f2:	633a      	str	r2, [r7, #48]	; 0x30
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e1      	bne.n	80068ca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	60fb      	str	r3, [r7, #12]
   return(result);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0310 	bic.w	r3, r3, #16
 800692e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	69b9      	ldr	r1, [r7, #24]
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	617b      	str	r3, [r7, #20]
   return(result);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e4      	bne.n	800691a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f87f 	bl	8006a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006962:	e063      	b.n	8006a2c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00e      	beq.n	800698e <HAL_UART_IRQHandler+0x59e>
 8006970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f91d 	bl	8006bc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800698c:	e051      	b.n	8006a32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006996:	2b00      	cmp	r3, #0
 8006998:	d014      	beq.n	80069c4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800699a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d105      	bne.n	80069b2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d03a      	beq.n	8006a30 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
    }
    return;
 80069c2:	e035      	b.n	8006a30 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <HAL_UART_IRQHandler+0x5f4>
 80069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f8c7 	bl	8006b70 <UART_EndTransmit_IT>
    return;
 80069e2:	e026      	b.n	8006a32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d009      	beq.n	8006a04 <HAL_UART_IRQHandler+0x614>
 80069f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f8f6 	bl	8006bee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a02:	e016      	b.n	8006a32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d010      	beq.n	8006a32 <HAL_UART_IRQHandler+0x642>
 8006a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	da0c      	bge.n	8006a32 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f8de 	bl	8006bda <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a1e:	e008      	b.n	8006a32 <HAL_UART_IRQHandler+0x642>
      return;
 8006a20:	bf00      	nop
 8006a22:	e006      	b.n	8006a32 <HAL_UART_IRQHandler+0x642>
    return;
 8006a24:	bf00      	nop
 8006a26:	e004      	b.n	8006a32 <HAL_UART_IRQHandler+0x642>
      return;
 8006a28:	bf00      	nop
 8006a2a:	e002      	b.n	8006a32 <HAL_UART_IRQHandler+0x642>
      return;
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <HAL_UART_IRQHandler+0x642>
    return;
 8006a30:	bf00      	nop
  }
}
 8006a32:	37e8      	adds	r7, #232	; 0xe8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b095      	sub	sp, #84	; 0x54
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e6      	bne.n	8006a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e3      	bne.n	8006ab2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d118      	bne.n	8006b24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f023 0310 	bic.w	r3, r3, #16
 8006b06:	647b      	str	r3, [r7, #68]	; 0x44
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6979      	ldr	r1, [r7, #20]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e6      	bne.n	8006af2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b38:	bf00      	nop
 8006b3a:	3754      	adds	r7, #84	; 0x54
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f7ff ff72 	bl	8006a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6979      	ldr	r1, [r7, #20]
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e6      	bne.n	8006b78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff ff3d 	bl	8006a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bbe:	bf00      	nop
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b088      	sub	sp, #32
 8006c06:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c0c:	f107 0308 	add.w	r3, r7, #8
 8006c10:	2218      	movs	r2, #24
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 f8d8 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c1a:	233f      	movs	r3, #63	; 0x3f
 8006c1c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006c1e:	2381      	movs	r3, #129	; 0x81
 8006c20:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006c22:	1dfb      	adds	r3, r7, #7
 8006c24:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006c26:	2301      	movs	r3, #1
 8006c28:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c2a:	f107 0308 	add.w	r3, r7, #8
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 fb53 	bl	80082dc <hci_send_req>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	da01      	bge.n	8006c40 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006c3c:	23ff      	movs	r3, #255	; 0xff
 8006c3e:	e000      	b.n	8006c42 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006c40:	79fb      	ldrb	r3, [r7, #7]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006c4a:	b5b0      	push	{r4, r5, r7, lr}
 8006c4c:	b0ce      	sub	sp, #312	; 0x138
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	4605      	mov	r5, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	4610      	mov	r0, r2
 8006c56:	4619      	mov	r1, r3
 8006c58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c5c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006c60:	462a      	mov	r2, r5
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c74:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006c78:	4602      	mov	r2, r0
 8006c7a:	801a      	strh	r2, [r3, #0]
 8006c7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c80:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006c84:	460a      	mov	r2, r1
 8006c86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006c88:	f107 0310 	add.w	r3, r7, #16
 8006c8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006c90:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006c94:	3308      	adds	r3, #8
 8006c96:	f107 0210 	add.w	r2, r7, #16
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006ca0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006ca4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006ca8:	4413      	add	r3, r2
 8006caa:	3309      	adds	r3, #9
 8006cac:	f107 0210 	add.w	r2, r7, #16
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006cb6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006cba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006cc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ccc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006cd0:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006cd4:	7812      	ldrb	r2, [r2, #0]
 8006cd6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006cd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cdc:	3301      	adds	r3, #1
 8006cde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006ce2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ce6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006cea:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006cee:	8812      	ldrh	r2, [r2, #0]
 8006cf0:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006cfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d02:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006d06:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006d0a:	8812      	ldrh	r2, [r2, #0]
 8006d0c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d14:	3302      	adds	r3, #2
 8006d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d1e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006d22:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006d26:	7812      	ldrb	r2, [r2, #0]
 8006d28:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006d2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006d34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d38:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006d3c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006d3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d42:	3301      	adds	r3, #1
 8006d44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006d48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d4c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006d50:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006d52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d56:	3301      	adds	r3, #1
 8006d58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006d5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d60:	3308      	adds	r3, #8
 8006d62:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006d66:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 f81d 	bl	8007daa <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006d70:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006d74:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006d78:	4413      	add	r3, r2
 8006d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006d7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d82:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006d86:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006d92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d96:	3301      	adds	r3, #1
 8006d98:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006d9c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 f802 	bl	8007daa <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006da6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006daa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006dae:	4413      	add	r3, r2
 8006db0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006dbc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006dbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dcc:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006dd0:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006dd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dd6:	3302      	adds	r3, #2
 8006dd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006de0:	2218      	movs	r2, #24
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fff0 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006dea:	233f      	movs	r3, #63	; 0x3f
 8006dec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006df0:	2383      	movs	r3, #131	; 0x83
 8006df2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006df6:	f107 0310 	add.w	r3, r7, #16
 8006dfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e06:	f107 030f 	add.w	r3, r7, #15
 8006e0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 fa5e 	bl	80082dc <hci_send_req>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	da01      	bge.n	8006e2a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006e26:	23ff      	movs	r3, #255	; 0xff
 8006e28:	e004      	b.n	8006e34 <aci_gap_set_discoverable+0x1ea>
  return status;
 8006e2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e2e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006e32:	781b      	ldrb	r3, [r3, #0]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bdb0      	pop	{r4, r5, r7, pc}

08006e3e <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b0cc      	sub	sp, #304	; 0x130
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	4602      	mov	r2, r0
 8006e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006e4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006e50:	f107 0310 	add.w	r3, r7, #16
 8006e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e72:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006e76:	7812      	ldrb	r2, [r2, #0]
 8006e78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e7e:	3301      	adds	r3, #1
 8006e80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e88:	2218      	movs	r2, #24
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 ff9c 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e92:	233f      	movs	r3, #63	; 0x3f
 8006e94:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006e98:	2385      	movs	r3, #133	; 0x85
 8006e9a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e9e:	f107 0310 	add.w	r3, r7, #16
 8006ea2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ea6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eaa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006eae:	f107 030f 	add.w	r3, r7, #15
 8006eb2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ebc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fa0a 	bl	80082dc <hci_send_req>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da01      	bge.n	8006ed2 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006ece:	23ff      	movs	r3, #255	; 0xff
 8006ed0:	e004      	b.n	8006edc <aci_gap_set_io_capability+0x9e>
  return status;
 8006ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006eda:	781b      	ldrb	r3, [r3, #0]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006ee6:	b5b0      	push	{r4, r5, r7, lr}
 8006ee8:	b0cc      	sub	sp, #304	; 0x130
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	4605      	mov	r5, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006efc:	462a      	mov	r2, r5
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f04:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006f08:	4622      	mov	r2, r4
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f10:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006f14:	4602      	mov	r2, r0
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f20:	460a      	mov	r2, r1
 8006f22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006f24:	f107 0310 	add.w	r3, r7, #16
 8006f28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f30:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f34:	2200      	movs	r2, #0
 8006f36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f46:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006f4a:	7812      	ldrb	r2, [r2, #0]
 8006f4c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f52:	3301      	adds	r3, #1
 8006f54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f60:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006f64:	7812      	ldrb	r2, [r2, #0]
 8006f66:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f7a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006f82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f86:	3301      	adds	r3, #1
 8006f88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f94:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f98:	7812      	ldrb	r2, [r2, #0]
 8006f9a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006faa:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006fae:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbe:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006fc2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fc8:	3301      	adds	r3, #1
 8006fca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006fd6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fdc:	3301      	adds	r3, #1
 8006fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006fea:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffc:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007000:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007002:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007006:	3301      	adds	r3, #1
 8007008:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800700c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007010:	2218      	movs	r2, #24
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fed8 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 800701a:	233f      	movs	r3, #63	; 0x3f
 800701c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007020:	2386      	movs	r3, #134	; 0x86
 8007022:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007026:	f107 0310 	add.w	r3, r7, #16
 800702a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800702e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007032:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007036:	f107 030f 	add.w	r3, r7, #15
 800703a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800703e:	2301      	movs	r3, #1
 8007040:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007044:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f001 f946 	bl	80082dc <hci_send_req>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	da01      	bge.n	800705a <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007056:	23ff      	movs	r3, #255	; 0xff
 8007058:	e004      	b.n	8007064 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007062:	781b      	ldrb	r3, [r3, #0]
}
 8007064:	4618      	mov	r0, r3
 8007066:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800706a:	46bd      	mov	sp, r7
 800706c:	bdb0      	pop	{r4, r5, r7, pc}

0800706e <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b0cc      	sub	sp, #304	; 0x130
 8007072:	af00      	add	r7, sp, #0
 8007074:	4602      	mov	r2, r0
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	6019      	str	r1, [r3, #0]
 8007080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007084:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007088:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800708a:	f107 0310 	add.w	r3, r7, #16
 800708e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80070a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80070b0:	8812      	ldrh	r2, [r2, #0]
 80070b2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80070b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070b8:	3302      	adds	r3, #2
 80070ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80070be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070c6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80070d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070d4:	3304      	adds	r3, #4
 80070d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070de:	2218      	movs	r2, #24
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fe71 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 80070e8:	233f      	movs	r3, #63	; 0x3f
 80070ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80070ee:	2388      	movs	r3, #136	; 0x88
 80070f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80070f4:	f107 0310 	add.w	r3, r7, #16
 80070f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80070fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007100:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007104:	f107 030f 	add.w	r3, r7, #15
 8007108:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800710c:	2301      	movs	r3, #1
 800710e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f001 f8df 	bl	80082dc <hci_send_req>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	da01      	bge.n	8007128 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007124:	23ff      	movs	r3, #255	; 0xff
 8007126:	e004      	b.n	8007132 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007130:	781b      	ldrb	r3, [r3, #0]
}
 8007132:	4618      	mov	r0, r3
 8007134:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b0cd      	sub	sp, #308	; 0x134
 8007140:	af00      	add	r7, sp, #0
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800714c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007156:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800715a:	4622      	mov	r2, r4
 800715c:	701a      	strb	r2, [r3, #0]
 800715e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007162:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007166:	4602      	mov	r2, r0
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007172:	460a      	mov	r2, r1
 8007174:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007176:	f107 0310 	add.w	r3, r7, #16
 800717a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800717e:	f107 0308 	add.w	r3, r7, #8
 8007182:	2207      	movs	r2, #7
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fe1f 	bl	8007dca <Osal_MemSet>
  int index_input = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007196:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800719a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800719e:	7812      	ldrb	r2, [r2, #0]
 80071a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071a6:	3301      	adds	r3, #1
 80071a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80071ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071b4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80071b8:	7812      	ldrb	r2, [r2, #0]
 80071ba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80071bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071c0:	3301      	adds	r3, #1
 80071c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80071c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071ce:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80071d2:	7812      	ldrb	r2, [r2, #0]
 80071d4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80071d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071da:	3301      	adds	r3, #1
 80071dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071e4:	2218      	movs	r2, #24
 80071e6:	2100      	movs	r1, #0
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fdee 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 80071ee:	233f      	movs	r3, #63	; 0x3f
 80071f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80071f4:	238a      	movs	r3, #138	; 0x8a
 80071f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80071fa:	f107 0310 	add.w	r3, r7, #16
 80071fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007206:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800720a:	f107 0308 	add.w	r3, r7, #8
 800720e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007212:	2307      	movs	r3, #7
 8007214:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007218:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f85c 	bl	80082dc <hci_send_req>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	da01      	bge.n	800722e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800722a:	23ff      	movs	r3, #255	; 0xff
 800722c:	e02e      	b.n	800728c <aci_gap_init+0x150>
  if ( resp.Status )
 800722e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007232:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <aci_gap_init+0x10c>
    return resp.Status;
 800723c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007240:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	e021      	b.n	800728c <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007250:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007254:	b29a      	uxth	r2, r3
 8007256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007266:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800726a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800726e:	b29a      	uxth	r2, r3
 8007270:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007274:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800727e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007282:	b29a      	uxth	r2, r3
 8007284:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007288:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007292:	46bd      	mov	sp, r7
 8007294:	bd90      	pop	{r4, r7, pc}

08007296 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b0cc      	sub	sp, #304	; 0x130
 800729a:	af00      	add	r7, sp, #0
 800729c:	4602      	mov	r2, r0
 800729e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a6:	6019      	str	r1, [r3, #0]
 80072a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ac:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80072b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80072b2:	f107 0310 	add.w	r3, r7, #16
 80072b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80072ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80072cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072d4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80072d8:	7812      	ldrb	r2, [r2, #0]
 80072da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e0:	3301      	adds	r3, #1
 80072e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80072e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ea:	1c58      	adds	r0, r3, #1
 80072ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80072f4:	781a      	ldrb	r2, [r3, #0]
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	f000 fd53 	bl	8007daa <Osal_MemCpy>
  index_input += AdvDataLen;
 8007304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007308:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007312:	4413      	add	r3, r2
 8007314:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007318:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800731c:	2218      	movs	r2, #24
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fd52 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007326:	233f      	movs	r3, #63	; 0x3f
 8007328:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800732c:	238e      	movs	r3, #142	; 0x8e
 800732e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007332:	f107 0310 	add.w	r3, r7, #16
 8007336:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800733a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800733e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007342:	f107 030f 	add.w	r3, r7, #15
 8007346:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800734a:	2301      	movs	r3, #1
 800734c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007350:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007354:	2100      	movs	r1, #0
 8007356:	4618      	mov	r0, r3
 8007358:	f000 ffc0 	bl	80082dc <hci_send_req>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	da01      	bge.n	8007366 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007362:	23ff      	movs	r3, #255	; 0xff
 8007364:	e004      	b.n	8007370 <aci_gap_update_adv_data+0xda>
  return status;
 8007366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800736e:	781b      	ldrb	r3, [r3, #0]
}
 8007370:	4618      	mov	r0, r3
 8007372:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b088      	sub	sp, #32
 800737e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007384:	f107 0308 	add.w	r3, r7, #8
 8007388:	2218      	movs	r2, #24
 800738a:	2100      	movs	r1, #0
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fd1c 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007392:	233f      	movs	r3, #63	; 0x3f
 8007394:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007396:	2392      	movs	r3, #146	; 0x92
 8007398:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800739a:	1dfb      	adds	r3, r7, #7
 800739c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800739e:	2301      	movs	r3, #1
 80073a0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073a2:	f107 0308 	add.w	r3, r7, #8
 80073a6:	2100      	movs	r1, #0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 ff97 	bl	80082dc <hci_send_req>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	da01      	bge.n	80073b8 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80073b4:	23ff      	movs	r3, #255	; 0xff
 80073b6:	e000      	b.n	80073ba <aci_gap_configure_whitelist+0x40>
  return status;
 80073b8:	79fb      	ldrb	r3, [r7, #7]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b0cc      	sub	sp, #304	; 0x130
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	4602      	mov	r2, r0
 80073ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80073dc:	460a      	mov	r2, r1
 80073de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80073e0:	f107 0310 	add.w	r3, r7, #16
 80073e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80073e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80073fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007402:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007406:	8812      	ldrh	r2, [r2, #0]
 8007408:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800740a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800740e:	3302      	adds	r3, #2
 8007410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007418:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800741c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007428:	3301      	adds	r3, #1
 800742a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800742e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007432:	2218      	movs	r2, #24
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fcc7 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 800743c:	233f      	movs	r3, #63	; 0x3f
 800743e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007442:	23a5      	movs	r3, #165	; 0xa5
 8007444:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007448:	f107 0310 	add.w	r3, r7, #16
 800744c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007454:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007458:	f107 030f 	add.w	r3, r7, #15
 800745c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007460:	2301      	movs	r3, #1
 8007462:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007466:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800746a:	2100      	movs	r1, #0
 800746c:	4618      	mov	r0, r3
 800746e:	f000 ff35 	bl	80082dc <hci_send_req>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	da01      	bge.n	800747c <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007478:	23ff      	movs	r3, #255	; 0xff
 800747a:	e004      	b.n	8007486 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800747c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007480:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007484:	781b      	ldrb	r3, [r3, #0]
}
 8007486:	4618      	mov	r0, r3
 8007488:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800749a:	f107 0308 	add.w	r3, r7, #8
 800749e:	2218      	movs	r2, #24
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fc91 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 80074a8:	233f      	movs	r3, #63	; 0x3f
 80074aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80074ac:	f240 1301 	movw	r3, #257	; 0x101
 80074b0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80074b2:	1dfb      	adds	r3, r7, #7
 80074b4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80074b6:	2301      	movs	r3, #1
 80074b8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074ba:	f107 0308 	add.w	r3, r7, #8
 80074be:	2100      	movs	r1, #0
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 ff0b 	bl	80082dc <hci_send_req>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	da01      	bge.n	80074d0 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80074cc:	23ff      	movs	r3, #255	; 0xff
 80074ce:	e000      	b.n	80074d2 <aci_gatt_init+0x42>
  return status;
 80074d0:	79fb      	ldrb	r3, [r7, #7]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80074da:	b590      	push	{r4, r7, lr}
 80074dc:	b0cf      	sub	sp, #316	; 0x13c
 80074de:	af00      	add	r7, sp, #0
 80074e0:	4604      	mov	r4, r0
 80074e2:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80074e6:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80074ea:	6001      	str	r1, [r0, #0]
 80074ec:	4610      	mov	r0, r2
 80074ee:	4619      	mov	r1, r3
 80074f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80074f4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80074f8:	4622      	mov	r2, r4
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007500:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007504:	4602      	mov	r2, r0
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800750c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007510:	460a      	mov	r2, r1
 8007512:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007514:	f107 0310 	add.w	r3, r7, #16
 8007518:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800751c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007520:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d00a      	beq.n	8007540 <aci_gatt_add_service+0x66>
 800752a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800752e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d101      	bne.n	800753c <aci_gatt_add_service+0x62>
 8007538:	2311      	movs	r3, #17
 800753a:	e002      	b.n	8007542 <aci_gatt_add_service+0x68>
 800753c:	2301      	movs	r3, #1
 800753e:	e000      	b.n	8007542 <aci_gatt_add_service+0x68>
 8007540:	2303      	movs	r3, #3
 8007542:	f107 0210 	add.w	r2, r7, #16
 8007546:	4413      	add	r3, r2
 8007548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800754c:	f107 030c 	add.w	r3, r7, #12
 8007550:	2203      	movs	r2, #3
 8007552:	2100      	movs	r1, #0
 8007554:	4618      	mov	r0, r3
 8007556:	f000 fc38 	bl	8007dca <Osal_MemSet>
  int index_input = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007560:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007564:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007568:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007574:	3301      	adds	r3, #1
 8007576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800757a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800757e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d002      	beq.n	800758e <aci_gatt_add_service+0xb4>
 8007588:	2b02      	cmp	r3, #2
 800758a:	d004      	beq.n	8007596 <aci_gatt_add_service+0xbc>
 800758c:	e007      	b.n	800759e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800758e:	2302      	movs	r3, #2
 8007590:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007594:	e005      	b.n	80075a2 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007596:	2310      	movs	r3, #16
 8007598:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800759c:	e001      	b.n	80075a2 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800759e:	2397      	movs	r3, #151	; 0x97
 80075a0:	e06c      	b.n	800767c <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80075a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075a6:	1c58      	adds	r0, r3, #1
 80075a8:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80075ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075b0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80075b4:	6819      	ldr	r1, [r3, #0]
 80075b6:	f000 fbf8 	bl	8007daa <Osal_MemCpy>
    index_input += size;
 80075ba:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80075be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80075c2:	4413      	add	r3, r2
 80075c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80075c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075cc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80075d0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80075d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075dc:	3301      	adds	r3, #1
 80075de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80075e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80075ea:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80075ee:	7812      	ldrb	r2, [r2, #0]
 80075f0:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80075f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075f6:	3301      	adds	r3, #1
 80075f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007600:	2218      	movs	r2, #24
 8007602:	2100      	movs	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fbe0 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 800760a:	233f      	movs	r3, #63	; 0x3f
 800760c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007610:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007614:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007618:	f107 0310 	add.w	r3, r7, #16
 800761c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007620:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007624:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007628:	f107 030c 	add.w	r3, r7, #12
 800762c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007630:	2303      	movs	r3, #3
 8007632:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007636:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fe4d 	bl	80082dc <hci_send_req>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	da01      	bge.n	800764c <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007648:	23ff      	movs	r3, #255	; 0xff
 800764a:	e017      	b.n	800767c <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800764c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007650:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800765a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800765e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	e00a      	b.n	800767c <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007666:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800766a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800766e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007672:	b29a      	uxth	r2, r3
 8007674:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007678:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007682:	46bd      	mov	sp, r7
 8007684:	bd90      	pop	{r4, r7, pc}

08007686 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007686:	b590      	push	{r4, r7, lr}
 8007688:	b0d1      	sub	sp, #324	; 0x144
 800768a:	af00      	add	r7, sp, #0
 800768c:	4604      	mov	r4, r0
 800768e:	4608      	mov	r0, r1
 8007690:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007694:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8007698:	600a      	str	r2, [r1, #0]
 800769a:	4619      	mov	r1, r3
 800769c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076a0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80076a4:	4622      	mov	r2, r4
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076ac:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80076b0:	4602      	mov	r2, r0
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076b8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80076bc:	460a      	mov	r2, r1
 80076be:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80076c0:	f107 0318 	add.w	r3, r7, #24
 80076c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80076c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076cc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d00a      	beq.n	80076ec <aci_gatt_add_char+0x66>
 80076d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80076da:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d101      	bne.n	80076e8 <aci_gatt_add_char+0x62>
 80076e4:	2313      	movs	r3, #19
 80076e6:	e002      	b.n	80076ee <aci_gatt_add_char+0x68>
 80076e8:	2303      	movs	r3, #3
 80076ea:	e000      	b.n	80076ee <aci_gatt_add_char+0x68>
 80076ec:	2305      	movs	r3, #5
 80076ee:	f107 0218 	add.w	r2, r7, #24
 80076f2:	4413      	add	r3, r2
 80076f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80076f8:	f107 0314 	add.w	r3, r7, #20
 80076fc:	2203      	movs	r2, #3
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fb62 	bl	8007dca <Osal_MemSet>
  int index_input = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800770c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007710:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007714:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007718:	8812      	ldrh	r2, [r2, #0]
 800771a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800771c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007720:	3302      	adds	r3, #2
 8007722:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007726:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800772a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800772e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007732:	7812      	ldrb	r2, [r2, #0]
 8007734:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007736:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800773a:	3301      	adds	r3, #1
 800773c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007740:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007744:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d002      	beq.n	8007754 <aci_gatt_add_char+0xce>
 800774e:	2b02      	cmp	r3, #2
 8007750:	d004      	beq.n	800775c <aci_gatt_add_char+0xd6>
 8007752:	e007      	b.n	8007764 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007754:	2302      	movs	r3, #2
 8007756:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800775a:	e005      	b.n	8007768 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800775c:	2310      	movs	r3, #16
 800775e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007762:	e001      	b.n	8007768 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007764:	2397      	movs	r3, #151	; 0x97
 8007766:	e091      	b.n	800788c <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007768:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800776c:	1cd8      	adds	r0, r3, #3
 800776e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007772:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007776:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800777a:	6819      	ldr	r1, [r3, #0]
 800777c:	f000 fb15 	bl	8007daa <Osal_MemCpy>
    index_input += size;
 8007780:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007784:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007788:	4413      	add	r3, r2
 800778a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800778e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007792:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007796:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800779a:	8812      	ldrh	r2, [r2, #0]
 800779c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800779e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077a2:	3302      	adds	r3, #2
 80077a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80077a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077ac:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80077b0:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80077b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077b6:	3301      	adds	r3, #1
 80077b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80077bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077c0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80077c4:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80077c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077ca:	3301      	adds	r3, #1
 80077cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80077d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077d4:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80077d8:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80077da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077de:	3301      	adds	r3, #1
 80077e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80077e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077e8:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80077ec:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80077ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077f2:	3301      	adds	r3, #1
 80077f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80077f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80077fc:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007800:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007802:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007806:	3301      	adds	r3, #1
 8007808:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800780c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007810:	2218      	movs	r2, #24
 8007812:	2100      	movs	r1, #0
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fad8 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 800781a:	233f      	movs	r3, #63	; 0x3f
 800781c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007820:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007824:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007828:	f107 0318 	add.w	r3, r7, #24
 800782c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007830:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007840:	2303      	movs	r3, #3
 8007842:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007846:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800784a:	2100      	movs	r1, #0
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fd45 	bl	80082dc <hci_send_req>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	da01      	bge.n	800785c <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007858:	23ff      	movs	r3, #255	; 0xff
 800785a:	e017      	b.n	800788c <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800785c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800786a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800786e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	e00a      	b.n	800788c <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007876:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800787a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800787e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007882:	b29a      	uxth	r2, r3
 8007884:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007888:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007892:	46bd      	mov	sp, r7
 8007894:	bd90      	pop	{r4, r7, pc}

08007896 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007896:	b5b0      	push	{r4, r5, r7, lr}
 8007898:	b0cc      	sub	sp, #304	; 0x130
 800789a:	af00      	add	r7, sp, #0
 800789c:	4605      	mov	r5, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	4610      	mov	r0, r2
 80078a2:	4619      	mov	r1, r3
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80078ac:	462a      	mov	r2, r5
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b8:	4622      	mov	r2, r4
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80078c4:	4602      	mov	r2, r0
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078cc:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80078d0:	460a      	mov	r2, r1
 80078d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80078d4:	f107 0310 	add.w	r3, r7, #16
 80078d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80078dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80078e4:	2200      	movs	r2, #0
 80078e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80078ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078f6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80078fa:	8812      	ldrh	r2, [r2, #0]
 80078fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80078fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007902:	3302      	adds	r3, #2
 8007904:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007910:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007914:	8812      	ldrh	r2, [r2, #0]
 8007916:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007918:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800791c:	3302      	adds	r3, #2
 800791e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007926:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800792a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800792e:	7812      	ldrb	r2, [r2, #0]
 8007930:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007932:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007936:	3301      	adds	r3, #1
 8007938:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800793c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007940:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007944:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007948:	7812      	ldrb	r2, [r2, #0]
 800794a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800794c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007950:	3301      	adds	r3, #1
 8007952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795a:	1d98      	adds	r0, r3, #6
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800796c:	f000 fa1d 	bl	8007daa <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007974:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800797e:	4413      	add	r3, r2
 8007980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007988:	2218      	movs	r2, #24
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fa1c 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007992:	233f      	movs	r3, #63	; 0x3f
 8007994:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007998:	f44f 7383 	mov.w	r3, #262	; 0x106
 800799c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80079a0:	f107 0310 	add.w	r3, r7, #16
 80079a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80079a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079b0:	f107 030f 	add.w	r3, r7, #15
 80079b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079b8:	2301      	movs	r3, #1
 80079ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fc89 	bl	80082dc <hci_send_req>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	da01      	bge.n	80079d4 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80079d0:	23ff      	movs	r3, #255	; 0xff
 80079d2:	e004      	b.n	80079de <aci_gatt_update_char_value+0x148>
  return status;
 80079d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079dc:	781b      	ldrb	r3, [r3, #0]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bdb0      	pop	{r4, r5, r7, pc}

080079e8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b0cc      	sub	sp, #304	; 0x130
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007a00:	4602      	mov	r2, r0
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a08:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a0c:	460a      	mov	r2, r1
 8007a0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007a10:	f107 0310 	add.w	r3, r7, #16
 8007a14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a20:	2200      	movs	r2, #0
 8007a22:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a32:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007a36:	7812      	ldrb	r2, [r2, #0]
 8007a38:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a3e:	3301      	adds	r3, #1
 8007a40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a4c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007a50:	7812      	ldrb	r2, [r2, #0]
 8007a52:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a58:	3301      	adds	r3, #1
 8007a5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a62:	1c98      	adds	r0, r3, #2
 8007a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a68:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a6c:	781a      	ldrb	r2, [r3, #0]
 8007a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a76:	6819      	ldr	r1, [r3, #0]
 8007a78:	f000 f997 	bl	8007daa <Osal_MemCpy>
  index_input += Length;
 8007a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a80:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a94:	2218      	movs	r2, #24
 8007a96:	2100      	movs	r1, #0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 f996 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a9e:	233f      	movs	r3, #63	; 0x3f
 8007aa0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007aa4:	230c      	movs	r3, #12
 8007aa6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007aaa:	f107 0310 	add.w	r3, r7, #16
 8007aae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ab6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007aba:	f107 030f 	add.w	r3, r7, #15
 8007abe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ac8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fc04 	bl	80082dc <hci_send_req>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da01      	bge.n	8007ade <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007ada:	23ff      	movs	r3, #255	; 0xff
 8007adc:	e004      	b.n	8007ae8 <aci_hal_write_config_data+0x100>
  return status;
 8007ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ae6:	781b      	ldrb	r3, [r3, #0]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b0cc      	sub	sp, #304	; 0x130
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	4602      	mov	r2, r0
 8007afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b08:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007b0c:	460a      	mov	r2, r1
 8007b0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007b10:	f107 0310 	add.w	r3, r7, #16
 8007b14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b20:	2200      	movs	r2, #0
 8007b22:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b32:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007b36:	7812      	ldrb	r2, [r2, #0]
 8007b38:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b3e:	3301      	adds	r3, #1
 8007b40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b4c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007b50:	7812      	ldrb	r2, [r2, #0]
 8007b52:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b58:	3301      	adds	r3, #1
 8007b5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b62:	2218      	movs	r2, #24
 8007b64:	2100      	movs	r1, #0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f92f 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b6c:	233f      	movs	r3, #63	; 0x3f
 8007b6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007b72:	230f      	movs	r3, #15
 8007b74:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b78:	f107 0310 	add.w	r3, r7, #16
 8007b7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b88:	f107 030f 	add.w	r3, r7, #15
 8007b8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fb9d 	bl	80082dc <hci_send_req>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da01      	bge.n	8007bac <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007ba8:	23ff      	movs	r3, #255	; 0xff
 8007baa:	e004      	b.n	8007bb6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007bb4:	781b      	ldrb	r3, [r3, #0]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b0cc      	sub	sp, #304	; 0x130
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007bd0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007bd2:	f107 0310 	add.w	r3, r7, #16
 8007bd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bde:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bf4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007bf8:	8812      	ldrh	r2, [r2, #0]
 8007bfa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c00:	3302      	adds	r3, #2
 8007c02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c0a:	2218      	movs	r2, #24
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f8db 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c14:	233f      	movs	r3, #63	; 0x3f
 8007c16:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007c1a:	2318      	movs	r3, #24
 8007c1c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c20:	f107 0310 	add.w	r3, r7, #16
 8007c24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c30:	f107 030f 	add.w	r3, r7, #15
 8007c34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c42:	2100      	movs	r1, #0
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fb49 	bl	80082dc <hci_send_req>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da01      	bge.n	8007c54 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007c50:	23ff      	movs	r3, #255	; 0xff
 8007c52:	e004      	b.n	8007c5e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c5c:	781b      	ldrb	r3, [r3, #0]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	2218      	movs	r2, #24
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f8a5 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x03;
 8007c80:	2303      	movs	r3, #3
 8007c82:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007c84:	2303      	movs	r3, #3
 8007c86:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007c88:	1dfb      	adds	r3, r7, #7
 8007c8a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c90:	f107 0308 	add.w	r3, r7, #8
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fb20 	bl	80082dc <hci_send_req>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da01      	bge.n	8007ca6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ca2:	23ff      	movs	r3, #255	; 0xff
 8007ca4:	e000      	b.n	8007ca8 <hci_reset+0x40>
  return status;
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3720      	adds	r7, #32
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007cb0:	b590      	push	{r4, r7, lr}
 8007cb2:	b0cd      	sub	sp, #308	; 0x134
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ccc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	701a      	strb	r2, [r3, #0]
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007cdc:	460a      	mov	r2, r1
 8007cde:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007ce0:	f107 0310 	add.w	r3, r7, #16
 8007ce4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cfe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d02:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007d06:	7812      	ldrb	r2, [r2, #0]
 8007d08:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d0e:	3301      	adds	r3, #1
 8007d10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d1c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007d20:	7812      	ldrb	r2, [r2, #0]
 8007d22:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d28:	3301      	adds	r3, #1
 8007d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d36:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007d3a:	7812      	ldrb	r2, [r2, #0]
 8007d3c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d42:	3301      	adds	r3, #1
 8007d44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d4c:	2218      	movs	r2, #24
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f83a 	bl	8007dca <Osal_MemSet>
  rq.ogf = 0x08;
 8007d56:	2308      	movs	r3, #8
 8007d58:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007d5c:	2331      	movs	r3, #49	; 0x31
 8007d5e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d62:	f107 0310 	add.w	r3, r7, #16
 8007d66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d72:	f107 030f 	add.w	r3, r7, #15
 8007d76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d84:	2100      	movs	r1, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 faa8 	bl	80082dc <hci_send_req>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	da01      	bge.n	8007d96 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007d92:	23ff      	movs	r3, #255	; 0xff
 8007d94:	e004      	b.n	8007da0 <hci_le_set_default_phy+0xf0>
  return status;
 8007d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d9e:	781b      	ldrb	r3, [r3, #0]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd90      	pop	{r4, r7, pc}

08007daa <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f002 f9b4 	bl	800a128 <memcpy>
 8007dc0:	4603      	mov	r3, r0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f002 f978 	bl	800a0d0 <memset>
 8007de0:	4603      	mov	r3, r0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007dea:	b480      	push	{r7}
 8007dec:	af00      	add	r7, sp, #0
  return;
 8007dee:	bf00      	nop
}
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
  return;
 8007dfc:	bf00      	nop
}
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007e06:	b480      	push	{r7}
 8007e08:	af00      	add	r7, sp, #0
  return;
 8007e0a:	bf00      	nop
}
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  return;
 8007e18:	bf00      	nop
}
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007e22:	b480      	push	{r7}
 8007e24:	af00      	add	r7, sp, #0
  return;
 8007e26:	bf00      	nop
}
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  return;
 8007e34:	bf00      	nop
}
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007e3e:	b480      	push	{r7}
 8007e40:	af00      	add	r7, sp, #0
  return;
 8007e42:	bf00      	nop
}
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  return;
 8007e50:	bf00      	nop
}
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	af00      	add	r7, sp, #0
  return;
 8007e5e:	bf00      	nop
}
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
  return;
 8007e6c:	bf00      	nop
}
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007e76:	b480      	push	{r7}
 8007e78:	af00      	add	r7, sp, #0
  return;
 8007e7a:	bf00      	nop
}
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  return;
 8007e88:	bf00      	nop
}
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007e92:	b480      	push	{r7}
 8007e94:	af00      	add	r7, sp, #0
  return;
 8007e96:	bf00      	nop
}
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
  return;
 8007ea4:	bf00      	nop
}
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007eae:	b480      	push	{r7}
 8007eb0:	af00      	add	r7, sp, #0
  return;
 8007eb2:	bf00      	nop
}
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  return;
 8007ec0:	bf00      	nop
}
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007eca:	b480      	push	{r7}
 8007ecc:	af00      	add	r7, sp, #0
  return;
 8007ece:	bf00      	nop
}
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007edc:	4b04      	ldr	r3, [pc, #16]	; (8007ef0 <SVCCTL_Init+0x18>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007ee2:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <SVCCTL_Init+0x1c>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007ee8:	f000 f806 	bl	8007ef8 <SVCCTL_SvcInit>

  return;
 8007eec:	bf00      	nop
}
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	200008c4 	.word	0x200008c4
 8007ef4:	200008e4 	.word	0x200008e4

08007ef8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  BAS_Init();
 8007efc:	f7ff ff75 	bl	8007dea <BAS_Init>

  BLS_Init();
 8007f00:	f7ff ff7a 	bl	8007df8 <BLS_Init>

  CRS_STM_Init();
 8007f04:	f7ff ff7f 	bl	8007e06 <CRS_STM_Init>

  DIS_Init();
 8007f08:	f7ff ff84 	bl	8007e14 <DIS_Init>

  EDS_STM_Init();
 8007f0c:	f7ff ff89 	bl	8007e22 <EDS_STM_Init>

  HIDS_Init();
 8007f10:	f7ff ff8e 	bl	8007e30 <HIDS_Init>

  HRS_Init();
 8007f14:	f7ff ff93 	bl	8007e3e <HRS_Init>

  HTS_Init();
 8007f18:	f7ff ff98 	bl	8007e4c <HTS_Init>

  IAS_Init();
 8007f1c:	f7ff ff9d 	bl	8007e5a <IAS_Init>

  LLS_Init();
 8007f20:	f7ff ffa2 	bl	8007e68 <LLS_Init>

  TPS_Init();
 8007f24:	f7ff ffa7 	bl	8007e76 <TPS_Init>

  MOTENV_STM_Init();
 8007f28:	f7ff ffac 	bl	8007e84 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007f2c:	f7ff ffb1 	bl	8007e92 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007f30:	f7ff ffb6 	bl	8007ea0 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007f34:	f7ff ffbb 	bl	8007eae <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007f38:	f7ff ffc7 	bl	8007eca <BVOPUS_STM_Init>

  MESH_Init();
 8007f3c:	f7ff ffbe 	bl	8007ebc <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007f40:	f001 fb4e 	bl	80095e0 <SVCCTL_InitCustomSvc>
  
  return;
 8007f44:	bf00      	nop
}
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007f50:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f52:	7f1b      	ldrb	r3, [r3, #28]
 8007f54:	4619      	mov	r1, r3
 8007f56:	4a08      	ldr	r2, [pc, #32]	; (8007f78 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007f5e:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f60:	7f1b      	ldrb	r3, [r3, #28]
 8007f62:	3301      	adds	r3, #1
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <SVCCTL_RegisterSvcHandler+0x30>)
 8007f68:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007f6a:	bf00      	nop
}
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	200008c4 	.word	0x200008c4

08007f7c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3301      	adds	r3, #1
 8007f88:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2bff      	cmp	r3, #255	; 0xff
 8007f94:	d125      	bne.n	8007fe2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	3302      	adds	r3, #2
 8007f9a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007faa:	d118      	bne.n	8007fde <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007fac:	2300      	movs	r3, #0
 8007fae:	757b      	strb	r3, [r7, #21]
 8007fb0:	e00d      	b.n	8007fce <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007fb2:	7d7b      	ldrb	r3, [r7, #21]
 8007fb4:	4a1a      	ldr	r2, [pc, #104]	; (8008020 <SVCCTL_UserEvtRx+0xa4>)
 8007fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d108      	bne.n	8007fda <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007fc8:	7d7b      	ldrb	r3, [r7, #21]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	757b      	strb	r3, [r7, #21]
 8007fce:	4b14      	ldr	r3, [pc, #80]	; (8008020 <SVCCTL_UserEvtRx+0xa4>)
 8007fd0:	7f1b      	ldrb	r3, [r3, #28]
 8007fd2:	7d7a      	ldrb	r2, [r7, #21]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d3ec      	bcc.n	8007fb2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007fd8:	e002      	b.n	8007fe0 <SVCCTL_UserEvtRx+0x64>
              break;
 8007fda:	bf00      	nop
          break;
 8007fdc:	e000      	b.n	8007fe0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007fde:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007fe0:	e000      	b.n	8007fe4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007fe2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d00f      	beq.n	800800a <SVCCTL_UserEvtRx+0x8e>
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	dc10      	bgt.n	8008010 <SVCCTL_UserEvtRx+0x94>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <SVCCTL_UserEvtRx+0x7c>
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d006      	beq.n	8008004 <SVCCTL_UserEvtRx+0x88>
 8007ff6:	e00b      	b.n	8008010 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 ff7b 	bl	8008ef4 <SVCCTL_App_Notification>
 8007ffe:	4603      	mov	r3, r0
 8008000:	75bb      	strb	r3, [r7, #22]
      break;
 8008002:	e008      	b.n	8008016 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008004:	2301      	movs	r3, #1
 8008006:	75bb      	strb	r3, [r7, #22]
      break;
 8008008:	e005      	b.n	8008016 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800800a:	2300      	movs	r3, #0
 800800c:	75bb      	strb	r3, [r7, #22]
      break;
 800800e:	e002      	b.n	8008016 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008010:	2301      	movs	r3, #1
 8008012:	75bb      	strb	r3, [r7, #22]
      break;
 8008014:	bf00      	nop
  }

  return (return_status);
 8008016:	7dbb      	ldrb	r3, [r7, #22]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	200008c4 	.word	0x200008c4

08008024 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800802c:	f107 030c 	add.w	r3, r7, #12
 8008030:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	212e      	movs	r1, #46	; 0x2e
 800803c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008040:	f000 fae2 	bl	8008608 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	330b      	adds	r3, #11
 8008048:	78db      	ldrb	r3, [r3, #3]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800805a:	f107 030c 	add.w	r3, r7, #12
 800805e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	210f      	movs	r1, #15
 800806a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800806e:	f000 facb 	bl	8008608 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	330b      	adds	r3, #11
 8008076:	78db      	ldrb	r3, [r3, #3]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3720      	adds	r7, #32
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008088:	f107 030c 	add.w	r3, r7, #12
 800808c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	2110      	movs	r1, #16
 8008094:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8008098:	f000 fab6 	bl	8008608 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	330b      	adds	r3, #11
 80080a0:	78db      	ldrb	r3, [r3, #3]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80080ac:	b480      	push	{r7}
 80080ae:	b08b      	sub	sp, #44	; 0x2c
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80080d4:	4b4a      	ldr	r3, [pc, #296]	; (8008200 <SHCI_GetWirelessFwInfo+0x154>)
 80080d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80080dc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80080e6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a44      	ldr	r2, [pc, #272]	; (8008204 <SHCI_GetWirelessFwInfo+0x158>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d10f      	bne.n	8008118 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	e01a      	b.n	800814e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008120:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008124:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	0e1b      	lsrs	r3, r3, #24
 8008152:	b2da      	uxtb	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	0c1b      	lsrs	r3, r3, #16
 800815c:	b2da      	uxtb	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	0a1b      	lsrs	r3, r3, #8
 8008166:	b2da      	uxtb	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	091b      	lsrs	r3, r3, #4
 8008170:	b2db      	uxtb	r3, r3
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	b2da      	uxtb	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 030f 	and.w	r3, r3, #15
 8008184:	b2da      	uxtb	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	0e1b      	lsrs	r3, r3, #24
 800818e:	b2da      	uxtb	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	b2da      	uxtb	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	0e1b      	lsrs	r3, r3, #24
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	0e1b      	lsrs	r3, r3, #24
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	0c1b      	lsrs	r3, r3, #16
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	372c      	adds	r7, #44	; 0x2c
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	58004000 	.word	0x58004000
 8008204:	a94656b9 	.word	0xa94656b9

08008208 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	4a08      	ldr	r2, [pc, #32]	; (8008238 <hci_init+0x30>)
 8008218:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800821a:	4a08      	ldr	r2, [pc, #32]	; (800823c <hci_init+0x34>)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008220:	4806      	ldr	r0, [pc, #24]	; (800823c <hci_init+0x34>)
 8008222:	f000 f973 	bl	800850c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 f8d4 	bl	80083d8 <TlInit>

  return;
 8008230:	bf00      	nop
}
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20000ce4 	.word	0x20000ce4
 800823c:	20000cbc 	.word	0x20000cbc

08008240 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008246:	4822      	ldr	r0, [pc, #136]	; (80082d0 <hci_user_evt_proc+0x90>)
 8008248:	f000 fd28 	bl	8008c9c <LST_is_empty>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d12b      	bne.n	80082aa <hci_user_evt_proc+0x6a>
 8008252:	4b20      	ldr	r3, [pc, #128]	; (80082d4 <hci_user_evt_proc+0x94>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d027      	beq.n	80082aa <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800825a:	f107 030c 	add.w	r3, r7, #12
 800825e:	4619      	mov	r1, r3
 8008260:	481b      	ldr	r0, [pc, #108]	; (80082d0 <hci_user_evt_proc+0x90>)
 8008262:	f000 fdaa 	bl	8008dba <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008266:	4b1c      	ldr	r3, [pc, #112]	; (80082d8 <hci_user_evt_proc+0x98>)
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00c      	beq.n	8008288 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008272:	2301      	movs	r3, #1
 8008274:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008276:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <hci_user_evt_proc+0x98>)
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	1d3a      	adds	r2, r7, #4
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008280:	793a      	ldrb	r2, [r7, #4]
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <hci_user_evt_proc+0x94>)
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e002      	b.n	800828e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008288:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <hci_user_evt_proc+0x94>)
 800828a:	2201      	movs	r2, #1
 800828c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800828e:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <hci_user_evt_proc+0x94>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d004      	beq.n	80082a0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4618      	mov	r0, r3
 800829a:	f000 fc03 	bl	8008aa4 <TL_MM_EvtDone>
 800829e:	e004      	b.n	80082aa <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4619      	mov	r1, r3
 80082a4:	480a      	ldr	r0, [pc, #40]	; (80082d0 <hci_user_evt_proc+0x90>)
 80082a6:	f000 fd1b 	bl	8008ce0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80082aa:	4809      	ldr	r0, [pc, #36]	; (80082d0 <hci_user_evt_proc+0x90>)
 80082ac:	f000 fcf6 	bl	8008c9c <LST_is_empty>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d107      	bne.n	80082c6 <hci_user_evt_proc+0x86>
 80082b6:	4b07      	ldr	r3, [pc, #28]	; (80082d4 <hci_user_evt_proc+0x94>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80082be:	4804      	ldr	r0, [pc, #16]	; (80082d0 <hci_user_evt_proc+0x90>)
 80082c0:	f001 f830 	bl	8009324 <hci_notify_asynch_evt>
  }


  return;
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
}
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	200008ec 	.word	0x200008ec
 80082d4:	200008f8 	.word	0x200008f8
 80082d8:	20000cbc 	.word	0x20000cbc

080082dc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80082e8:	2000      	movs	r0, #0
 80082ea:	f000 f8cb 	bl	8008484 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80082ee:	2300      	movs	r3, #0
 80082f0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	885b      	ldrh	r3, [r3, #2]
 80082f6:	b21b      	sxth	r3, r3
 80082f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082fc:	b21a      	sxth	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	029b      	lsls	r3, r3, #10
 8008304:	b21b      	sxth	r3, r3
 8008306:	4313      	orrs	r3, r2
 8008308:	b21b      	sxth	r3, r3
 800830a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	b2d9      	uxtb	r1, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689a      	ldr	r2, [r3, #8]
 8008316:	8bbb      	ldrh	r3, [r7, #28]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 f88d 	bl	8008438 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800831e:	e04e      	b.n	80083be <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008320:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008324:	f001 f815 	bl	8009352 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008328:	e043      	b.n	80083b2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800832a:	f107 030c 	add.w	r3, r7, #12
 800832e:	4619      	mov	r1, r3
 8008330:	4828      	ldr	r0, [pc, #160]	; (80083d4 <hci_send_req+0xf8>)
 8008332:	f000 fd42 	bl	8008dba <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	7a5b      	ldrb	r3, [r3, #9]
 800833a:	2b0f      	cmp	r3, #15
 800833c:	d114      	bne.n	8008368 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	330b      	adds	r3, #11
 8008342:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	885b      	ldrh	r3, [r3, #2]
 8008348:	b29b      	uxth	r3, r3
 800834a:	8bba      	ldrh	r2, [r7, #28]
 800834c:	429a      	cmp	r2, r3
 800834e:	d104      	bne.n	800835a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	7812      	ldrb	r2, [r2, #0]
 8008358:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	785b      	ldrb	r3, [r3, #1]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d027      	beq.n	80083b2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008362:	2301      	movs	r3, #1
 8008364:	77fb      	strb	r3, [r7, #31]
 8008366:	e024      	b.n	80083b2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	330b      	adds	r3, #11
 800836c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008374:	b29b      	uxth	r3, r3
 8008376:	8bba      	ldrh	r2, [r7, #28]
 8008378:	429a      	cmp	r2, r3
 800837a:	d114      	bne.n	80083a6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	7a9b      	ldrb	r3, [r3, #10]
 8008380:	3b03      	subs	r3, #3
 8008382:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	695a      	ldr	r2, [r3, #20]
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	429a      	cmp	r2, r3
 800838c:	bfa8      	it	ge
 800838e:	461a      	movge	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6918      	ldr	r0, [r3, #16]
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	1cd9      	adds	r1, r3, #3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	461a      	mov	r2, r3
 80083a2:	f001 fec1 	bl	800a128 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80083ae:	2301      	movs	r3, #1
 80083b0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80083b2:	4808      	ldr	r0, [pc, #32]	; (80083d4 <hci_send_req+0xf8>)
 80083b4:	f000 fc72 	bl	8008c9c <LST_is_empty>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0b5      	beq.n	800832a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80083be:	7ffb      	ldrb	r3, [r7, #31]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0ad      	beq.n	8008320 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80083c4:	2001      	movs	r0, #1
 80083c6:	f000 f85d 	bl	8008484 <NotifyCmdStatus>

  return 0;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3720      	adds	r7, #32
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000cdc 	.word	0x20000cdc

080083d8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80083e0:	480f      	ldr	r0, [pc, #60]	; (8008420 <TlInit+0x48>)
 80083e2:	f000 fc4b 	bl	8008c7c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80083e6:	4a0f      	ldr	r2, [pc, #60]	; (8008424 <TlInit+0x4c>)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80083ec:	480e      	ldr	r0, [pc, #56]	; (8008428 <TlInit+0x50>)
 80083ee:	f000 fc45 	bl	8008c7c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80083f2:	4b0e      	ldr	r3, [pc, #56]	; (800842c <TlInit+0x54>)
 80083f4:	2201      	movs	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80083f8:	4b0d      	ldr	r3, [pc, #52]	; (8008430 <TlInit+0x58>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008404:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <TlInit+0x5c>)
 8008406:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008408:	4b09      	ldr	r3, [pc, #36]	; (8008430 <TlInit+0x58>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f107 0208 	add.w	r2, r7, #8
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
  }

  return;
 8008414:	bf00      	nop
 8008416:	bf00      	nop
}
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000cdc 	.word	0x20000cdc
 8008424:	200008f4 	.word	0x200008f4
 8008428:	200008ec 	.word	0x200008ec
 800842c:	200008f8 	.word	0x200008f8
 8008430:	20000cbc 	.word	0x20000cbc
 8008434:	080084c5 	.word	0x080084c5

08008438 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	603a      	str	r2, [r7, #0]
 8008442:	80fb      	strh	r3, [r7, #6]
 8008444:	460b      	mov	r3, r1
 8008446:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008448:	4b0c      	ldr	r3, [pc, #48]	; (800847c <SendCmd+0x44>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	88fa      	ldrh	r2, [r7, #6]
 800844e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008452:	4b0a      	ldr	r3, [pc, #40]	; (800847c <SendCmd+0x44>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	797a      	ldrb	r2, [r7, #5]
 8008458:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800845a:	4b08      	ldr	r3, [pc, #32]	; (800847c <SendCmd+0x44>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	797a      	ldrb	r2, [r7, #5]
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f001 fe5f 	bl	800a128 <memcpy>

  hciContext.io.Send(0,0);
 800846a:	4b05      	ldr	r3, [pc, #20]	; (8008480 <SendCmd+0x48>)
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2100      	movs	r1, #0
 8008470:	2000      	movs	r0, #0
 8008472:	4798      	blx	r3

  return;
 8008474:	bf00      	nop
}
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	200008f4 	.word	0x200008f4
 8008480:	20000cbc 	.word	0x20000cbc

08008484 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d108      	bne.n	80084a6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <NotifyCmdStatus+0x3c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00d      	beq.n	80084b8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800849c:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <NotifyCmdStatus+0x3c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2000      	movs	r0, #0
 80084a2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80084a4:	e008      	b.n	80084b8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80084a6:	4b06      	ldr	r3, [pc, #24]	; (80084c0 <NotifyCmdStatus+0x3c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80084ae:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <NotifyCmdStatus+0x3c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2001      	movs	r0, #1
 80084b4:	4798      	blx	r3
  return;
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
}
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20000ce4 	.word	0x20000ce4

080084c4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7a5b      	ldrb	r3, [r3, #9]
 80084d0:	2b0f      	cmp	r3, #15
 80084d2:	d003      	beq.n	80084dc <TlEvtReceived+0x18>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7a5b      	ldrb	r3, [r3, #9]
 80084d8:	2b0e      	cmp	r3, #14
 80084da:	d107      	bne.n	80084ec <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	4809      	ldr	r0, [pc, #36]	; (8008504 <TlEvtReceived+0x40>)
 80084e0:	f000 fc24 	bl	8008d2c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80084e4:	2000      	movs	r0, #0
 80084e6:	f000 ff29 	bl	800933c <hci_cmd_resp_release>
 80084ea:	e006      	b.n	80084fa <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4806      	ldr	r0, [pc, #24]	; (8008508 <TlEvtReceived+0x44>)
 80084f0:	f000 fc1c 	bl	8008d2c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80084f4:	4804      	ldr	r0, [pc, #16]	; (8008508 <TlEvtReceived+0x44>)
 80084f6:	f000 ff15 	bl	8009324 <hci_notify_asynch_evt>
  }

  return;
 80084fa:	bf00      	nop
}
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20000cdc 	.word	0x20000cdc
 8008508:	200008ec 	.word	0x200008ec

0800850c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a05      	ldr	r2, [pc, #20]	; (800852c <hci_register_io_bus+0x20>)
 8008518:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a04      	ldr	r2, [pc, #16]	; (8008530 <hci_register_io_bus+0x24>)
 800851e:	611a      	str	r2, [r3, #16]

  return;
 8008520:	bf00      	nop
}
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	0800881d 	.word	0x0800881d
 8008530:	08008885 	.word	0x08008885

08008534 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	4a08      	ldr	r2, [pc, #32]	; (8008564 <shci_init+0x30>)
 8008544:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008546:	4a08      	ldr	r2, [pc, #32]	; (8008568 <shci_init+0x34>)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800854c:	4806      	ldr	r0, [pc, #24]	; (8008568 <shci_init+0x34>)
 800854e:	f000 f911 	bl	8008774 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f894 	bl	8008684 <TlInit>

  return;
 800855c:	bf00      	nop
}
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000d08 	.word	0x20000d08
 8008568:	20000ce8 	.word	0x20000ce8

0800856c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008572:	4822      	ldr	r0, [pc, #136]	; (80085fc <shci_user_evt_proc+0x90>)
 8008574:	f000 fb92 	bl	8008c9c <LST_is_empty>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d12b      	bne.n	80085d6 <shci_user_evt_proc+0x6a>
 800857e:	4b20      	ldr	r3, [pc, #128]	; (8008600 <shci_user_evt_proc+0x94>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d027      	beq.n	80085d6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008586:	f107 030c 	add.w	r3, r7, #12
 800858a:	4619      	mov	r1, r3
 800858c:	481b      	ldr	r0, [pc, #108]	; (80085fc <shci_user_evt_proc+0x90>)
 800858e:	f000 fc14 	bl	8008dba <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008592:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <shci_user_evt_proc+0x98>)
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00c      	beq.n	80085b4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800859e:	2301      	movs	r3, #1
 80085a0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80085a2:	4b18      	ldr	r3, [pc, #96]	; (8008604 <shci_user_evt_proc+0x98>)
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	1d3a      	adds	r2, r7, #4
 80085a8:	4610      	mov	r0, r2
 80085aa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80085ac:	793a      	ldrb	r2, [r7, #4]
 80085ae:	4b14      	ldr	r3, [pc, #80]	; (8008600 <shci_user_evt_proc+0x94>)
 80085b0:	701a      	strb	r2, [r3, #0]
 80085b2:	e002      	b.n	80085ba <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80085b4:	4b12      	ldr	r3, [pc, #72]	; (8008600 <shci_user_evt_proc+0x94>)
 80085b6:	2201      	movs	r2, #1
 80085b8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80085ba:	4b11      	ldr	r3, [pc, #68]	; (8008600 <shci_user_evt_proc+0x94>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d004      	beq.n	80085cc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fa6d 	bl	8008aa4 <TL_MM_EvtDone>
 80085ca:	e004      	b.n	80085d6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4619      	mov	r1, r3
 80085d0:	480a      	ldr	r0, [pc, #40]	; (80085fc <shci_user_evt_proc+0x90>)
 80085d2:	f000 fb85 	bl	8008ce0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80085d6:	4809      	ldr	r0, [pc, #36]	; (80085fc <shci_user_evt_proc+0x90>)
 80085d8:	f000 fb60 	bl	8008c9c <LST_is_empty>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d107      	bne.n	80085f2 <shci_user_evt_proc+0x86>
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <shci_user_evt_proc+0x94>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80085ea:	4804      	ldr	r0, [pc, #16]	; (80085fc <shci_user_evt_proc+0x90>)
 80085ec:	f7f8 fa1a 	bl	8000a24 <shci_notify_asynch_evt>
  }


  return;
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
}
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	200008fc 	.word	0x200008fc
 8008600:	2000090c 	.word	0x2000090c
 8008604:	20000ce8 	.word	0x20000ce8

08008608 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	60ba      	str	r2, [r7, #8]
 8008610:	607b      	str	r3, [r7, #4]
 8008612:	4603      	mov	r3, r0
 8008614:	81fb      	strh	r3, [r7, #14]
 8008616:	460b      	mov	r3, r1
 8008618:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800861a:	2000      	movs	r0, #0
 800861c:	f000 f864 	bl	80086e8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008620:	4b16      	ldr	r3, [pc, #88]	; (800867c <shci_send+0x74>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	89fa      	ldrh	r2, [r7, #14]
 8008626:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800862a:	4b14      	ldr	r3, [pc, #80]	; (800867c <shci_send+0x74>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	7b7a      	ldrb	r2, [r7, #13]
 8008630:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008632:	4b12      	ldr	r3, [pc, #72]	; (800867c <shci_send+0x74>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	330c      	adds	r3, #12
 8008638:	7b7a      	ldrb	r2, [r7, #13]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	4618      	mov	r0, r3
 800863e:	f001 fd73 	bl	800a128 <memcpy>

  shciContext.io.Send(0,0);
 8008642:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <shci_send+0x78>)
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2100      	movs	r1, #0
 8008648:	2000      	movs	r0, #0
 800864a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800864c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008650:	f7f8 f9ff 	bl	8000a52 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f103 0008 	add.w	r0, r3, #8
 800865a:	4b08      	ldr	r3, [pc, #32]	; (800867c <shci_send+0x74>)
 800865c:	6819      	ldr	r1, [r3, #0]
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <shci_send+0x74>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	789b      	ldrb	r3, [r3, #2]
 8008664:	3303      	adds	r3, #3
 8008666:	461a      	mov	r2, r3
 8008668:	f001 fd5e 	bl	800a128 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800866c:	2001      	movs	r0, #1
 800866e:	f000 f83b 	bl	80086e8 <Cmd_SetStatus>

  return;
 8008672:	bf00      	nop
}
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000908 	.word	0x20000908
 8008680:	20000ce8 	.word	0x20000ce8

08008684 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800868c:	4a10      	ldr	r2, [pc, #64]	; (80086d0 <TlInit+0x4c>)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008692:	4810      	ldr	r0, [pc, #64]	; (80086d4 <TlInit+0x50>)
 8008694:	f000 faf2 	bl	8008c7c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008698:	2001      	movs	r0, #1
 800869a:	f000 f825 	bl	80086e8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800869e:	4b0e      	ldr	r3, [pc, #56]	; (80086d8 <TlInit+0x54>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80086a4:	4b0d      	ldr	r3, [pc, #52]	; (80086dc <TlInit+0x58>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80086b0:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <TlInit+0x5c>)
 80086b2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80086b4:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <TlInit+0x60>)
 80086b6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80086b8:	4b08      	ldr	r3, [pc, #32]	; (80086dc <TlInit+0x58>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f107 020c 	add.w	r2, r7, #12
 80086c0:	4610      	mov	r0, r2
 80086c2:	4798      	blx	r3
  }

  return;
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
}
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000908 	.word	0x20000908
 80086d4:	200008fc 	.word	0x200008fc
 80086d8:	2000090c 	.word	0x2000090c
 80086dc:	20000ce8 	.word	0x20000ce8
 80086e0:	08008739 	.word	0x08008739
 80086e4:	08008751 	.word	0x08008751

080086e8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10b      	bne.n	8008710 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80086f8:	4b0d      	ldr	r3, [pc, #52]	; (8008730 <Cmd_SetStatus+0x48>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <Cmd_SetStatus+0x48>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2000      	movs	r0, #0
 8008706:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008708:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <Cmd_SetStatus+0x4c>)
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800870e:	e00b      	b.n	8008728 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008710:	4b08      	ldr	r3, [pc, #32]	; (8008734 <Cmd_SetStatus+0x4c>)
 8008712:	2201      	movs	r2, #1
 8008714:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008716:	4b06      	ldr	r3, [pc, #24]	; (8008730 <Cmd_SetStatus+0x48>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d004      	beq.n	8008728 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800871e:	4b04      	ldr	r3, [pc, #16]	; (8008730 <Cmd_SetStatus+0x48>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2001      	movs	r0, #1
 8008724:	4798      	blx	r3
  return;
 8008726:	bf00      	nop
 8008728:	bf00      	nop
}
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	20000d08 	.word	0x20000d08
 8008734:	20000904 	.word	0x20000904

08008738 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008740:	2000      	movs	r0, #0
 8008742:	f7f8 f97b 	bl	8000a3c <shci_cmd_resp_release>

  return;
 8008746:	bf00      	nop
}
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	4805      	ldr	r0, [pc, #20]	; (8008770 <TlUserEvtReceived+0x20>)
 800875c:	f000 fae6 	bl	8008d2c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008760:	4803      	ldr	r0, [pc, #12]	; (8008770 <TlUserEvtReceived+0x20>)
 8008762:	f7f8 f95f 	bl	8000a24 <shci_notify_asynch_evt>

  return;
 8008766:	bf00      	nop
}
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	200008fc 	.word	0x200008fc

08008774 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a05      	ldr	r2, [pc, #20]	; (8008794 <shci_register_io_bus+0x20>)
 8008780:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a04      	ldr	r2, [pc, #16]	; (8008798 <shci_register_io_bus+0x24>)
 8008786:	611a      	str	r2, [r3, #16]

  return;
 8008788:	bf00      	nop
}
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	08008931 	.word	0x08008931
 8008798:	08008985 	.word	0x08008985

0800879c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80087a0:	f001 f944 	bl	8009a2c <HW_IPCC_Enable>

  return;
 80087a4:	bf00      	nop
}
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <TL_Init>:


void TL_Init( void )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <TL_Init+0x48>)
 80087ae:	4a11      	ldr	r2, [pc, #68]	; (80087f4 <TL_Init+0x4c>)
 80087b0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80087b2:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <TL_Init+0x48>)
 80087b4:	4a10      	ldr	r2, [pc, #64]	; (80087f8 <TL_Init+0x50>)
 80087b6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80087b8:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <TL_Init+0x48>)
 80087ba:	4a10      	ldr	r2, [pc, #64]	; (80087fc <TL_Init+0x54>)
 80087bc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80087be:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <TL_Init+0x48>)
 80087c0:	4a0f      	ldr	r2, [pc, #60]	; (8008800 <TL_Init+0x58>)
 80087c2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80087c4:	4b0a      	ldr	r3, [pc, #40]	; (80087f0 <TL_Init+0x48>)
 80087c6:	4a0f      	ldr	r2, [pc, #60]	; (8008804 <TL_Init+0x5c>)
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80087ca:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <TL_Init+0x48>)
 80087cc:	4a0e      	ldr	r2, [pc, #56]	; (8008808 <TL_Init+0x60>)
 80087ce:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <TL_Init+0x48>)
 80087d2:	4a0e      	ldr	r2, [pc, #56]	; (800880c <TL_Init+0x64>)
 80087d4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80087d6:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <TL_Init+0x48>)
 80087d8:	4a0d      	ldr	r2, [pc, #52]	; (8008810 <TL_Init+0x68>)
 80087da:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80087dc:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <TL_Init+0x48>)
 80087de:	4a0d      	ldr	r2, [pc, #52]	; (8008814 <TL_Init+0x6c>)
 80087e0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80087e2:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <TL_Init+0x48>)
 80087e4:	4a0c      	ldr	r2, [pc, #48]	; (8008818 <TL_Init+0x70>)
 80087e6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80087e8:	f001 f934 	bl	8009a54 <HW_IPCC_Init>

  return;
 80087ec:	bf00      	nop
}
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20030000 	.word	0x20030000
 80087f4:	20030028 	.word	0x20030028
 80087f8:	20030048 	.word	0x20030048
 80087fc:	20030058 	.word	0x20030058
 8008800:	20030068 	.word	0x20030068
 8008804:	20030070 	.word	0x20030070
 8008808:	20030078 	.word	0x20030078
 800880c:	20030080 	.word	0x20030080
 8008810:	2003009c 	.word	0x2003009c
 8008814:	200300a0 	.word	0x200300a0
 8008818:	200300ac 	.word	0x200300ac

0800881c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008828:	4811      	ldr	r0, [pc, #68]	; (8008870 <TL_BLE_Init+0x54>)
 800882a:	f000 fa27 	bl	8008c7c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800882e:	4b11      	ldr	r3, [pc, #68]	; (8008874 <TL_BLE_Init+0x58>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	68da      	ldr	r2, [r3, #12]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4a0c      	ldr	r2, [pc, #48]	; (8008878 <TL_BLE_Init+0x5c>)
 8008848:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	4a08      	ldr	r2, [pc, #32]	; (8008870 <TL_BLE_Init+0x54>)
 800884e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008850:	f001 f916 	bl	8009a80 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a08      	ldr	r2, [pc, #32]	; (800887c <TL_BLE_Init+0x60>)
 800885a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	4a07      	ldr	r2, [pc, #28]	; (8008880 <TL_BLE_Init+0x64>)
 8008862:	6013      	str	r3, [r2, #0]

  return 0;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	200300c8 	.word	0x200300c8
 8008874:	20030000 	.word	0x20030000
 8008878:	200008b4 	.word	0x200008b4
 800887c:	20000d14 	.word	0x20000d14
 8008880:	20000d18 	.word	0x20000d18

08008884 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <TL_BLE_SendCmd+0x34>)
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2201      	movs	r2, #1
 8008898:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800889a:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <TL_BLE_SendCmd+0x34>)
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4619      	mov	r1, r3
 80088a2:	2001      	movs	r0, #1
 80088a4:	f000 f96c 	bl	8008b80 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80088a8:	f001 f8f4 	bl	8009a94 <HW_IPCC_BLE_SendCmd>

  return 0;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20030000 	.word	0x20030000

080088bc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80088c2:	e01c      	b.n	80088fe <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80088c4:	1d3b      	adds	r3, r7, #4
 80088c6:	4619      	mov	r1, r3
 80088c8:	4812      	ldr	r0, [pc, #72]	; (8008914 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80088ca:	f000 fa76 	bl	8008dba <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7a5b      	ldrb	r3, [r3, #9]
 80088d2:	2b0f      	cmp	r3, #15
 80088d4:	d003      	beq.n	80088de <HW_IPCC_BLE_RxEvtNot+0x22>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7a5b      	ldrb	r3, [r3, #9]
 80088da:	2b0e      	cmp	r3, #14
 80088dc:	d105      	bne.n	80088ea <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4619      	mov	r1, r3
 80088e2:	2002      	movs	r0, #2
 80088e4:	f000 f94c 	bl	8008b80 <OutputDbgTrace>
 80088e8:	e004      	b.n	80088f4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4619      	mov	r1, r3
 80088ee:	2003      	movs	r0, #3
 80088f0:	f000 f946 	bl	8008b80 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80088f4:	4b08      	ldr	r3, [pc, #32]	; (8008918 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	4610      	mov	r0, r2
 80088fc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80088fe:	4805      	ldr	r0, [pc, #20]	; (8008914 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008900:	f000 f9cc 	bl	8008c9c <LST_is_empty>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0dc      	beq.n	80088c4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800890a:	bf00      	nop
}
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	200300c8 	.word	0x200300c8
 8008918:	20000d14 	.word	0x20000d14

0800891c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008920:	4b02      	ldr	r3, [pc, #8]	; (800892c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4798      	blx	r3

  return;
 8008926:	bf00      	nop
}
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20000d18 	.word	0x20000d18

08008930 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800893c:	480d      	ldr	r0, [pc, #52]	; (8008974 <TL_SYS_Init+0x44>)
 800893e:	f000 f99d 	bl	8008c7c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008942:	4b0d      	ldr	r3, [pc, #52]	; (8008978 <TL_SYS_Init+0x48>)
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4a08      	ldr	r2, [pc, #32]	; (8008974 <TL_SYS_Init+0x44>)
 8008954:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008956:	f001 f8bf 	bl	8009ad8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a07      	ldr	r2, [pc, #28]	; (800897c <TL_SYS_Init+0x4c>)
 8008960:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	4a06      	ldr	r2, [pc, #24]	; (8008980 <TL_SYS_Init+0x50>)
 8008968:	6013      	str	r3, [r2, #0]

  return 0;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	200300d0 	.word	0x200300d0
 8008978:	20030000 	.word	0x20030000
 800897c:	20000d1c 	.word	0x20000d1c
 8008980:	20000d20 	.word	0x20000d20

08008984 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008990:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <TL_SYS_SendCmd+0x34>)
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2210      	movs	r2, #16
 8008998:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800899a:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <TL_SYS_SendCmd+0x34>)
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4619      	mov	r1, r3
 80089a2:	2004      	movs	r0, #4
 80089a4:	f000 f8ec 	bl	8008b80 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80089a8:	f001 f8a0 	bl	8009aec <HW_IPCC_SYS_SendCmd>

  return 0;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	20030000 	.word	0x20030000

080089bc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4619      	mov	r1, r3
 80089c8:	2005      	movs	r0, #5
 80089ca:	f000 f8d9 	bl	8008b80 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80089ce:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a03      	ldr	r2, [pc, #12]	; (80089e0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80089d4:	68d2      	ldr	r2, [r2, #12]
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3

  return;
 80089dc:	bf00      	nop
}
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	20030000 	.word	0x20030000
 80089e4:	20000d1c 	.word	0x20000d1c

080089e8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80089ee:	e00e      	b.n	8008a0e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80089f0:	1d3b      	adds	r3, r7, #4
 80089f2:	4619      	mov	r1, r3
 80089f4:	480b      	ldr	r0, [pc, #44]	; (8008a24 <HW_IPCC_SYS_EvtNot+0x3c>)
 80089f6:	f000 f9e0 	bl	8008dba <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4619      	mov	r1, r3
 80089fe:	2006      	movs	r0, #6
 8008a00:	f000 f8be 	bl	8008b80 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008a04:	4b08      	ldr	r3, [pc, #32]	; (8008a28 <HW_IPCC_SYS_EvtNot+0x40>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008a0e:	4805      	ldr	r0, [pc, #20]	; (8008a24 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008a10:	f000 f944 	bl	8008c9c <LST_is_empty>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0ea      	beq.n	80089f0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008a1a:	bf00      	nop
}
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	200300d0 	.word	0x200300d0
 8008a28:	20000d20 	.word	0x20000d20

08008a2c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008a34:	4817      	ldr	r0, [pc, #92]	; (8008a94 <TL_MM_Init+0x68>)
 8008a36:	f000 f921 	bl	8008c7c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008a3a:	4817      	ldr	r0, [pc, #92]	; (8008a98 <TL_MM_Init+0x6c>)
 8008a3c:	f000 f91e 	bl	8008c7c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008a40:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <TL_MM_Init+0x70>)
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	4a16      	ldr	r2, [pc, #88]	; (8008aa0 <TL_MM_Init+0x74>)
 8008a46:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008a48:	4b15      	ldr	r3, [pc, #84]	; (8008aa0 <TL_MM_Init+0x74>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6892      	ldr	r2, [r2, #8]
 8008a50:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008a52:	4b13      	ldr	r3, [pc, #76]	; (8008aa0 <TL_MM_Init+0x74>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	68d2      	ldr	r2, [r2, #12]
 8008a5a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008a5c:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <TL_MM_Init+0x74>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a0c      	ldr	r2, [pc, #48]	; (8008a94 <TL_MM_Init+0x68>)
 8008a62:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008a64:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <TL_MM_Init+0x74>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6812      	ldr	r2, [r2, #0]
 8008a6c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <TL_MM_Init+0x74>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6852      	ldr	r2, [r2, #4]
 8008a76:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008a78:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <TL_MM_Init+0x74>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6912      	ldr	r2, [r2, #16]
 8008a80:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008a82:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <TL_MM_Init+0x74>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	6952      	ldr	r2, [r2, #20]
 8008a8a:	619a      	str	r2, [r3, #24]

  return;
 8008a8c:	bf00      	nop
}
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	200300b8 	.word	0x200300b8
 8008a98:	20000d0c 	.word	0x20000d0c
 8008a9c:	20030000 	.word	0x20030000
 8008aa0:	20000d24 	.word	0x20000d24

08008aa4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008aac:	6879      	ldr	r1, [r7, #4]
 8008aae:	4807      	ldr	r0, [pc, #28]	; (8008acc <TL_MM_EvtDone+0x28>)
 8008ab0:	f000 f93c 	bl	8008d2c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f000 f862 	bl	8008b80 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008abc:	4804      	ldr	r0, [pc, #16]	; (8008ad0 <TL_MM_EvtDone+0x2c>)
 8008abe:	f001 f83b 	bl	8009b38 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008ac2:	bf00      	nop
}
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20000d0c 	.word	0x20000d0c
 8008ad0:	08008ad5 	.word	0x08008ad5

08008ad4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008ada:	e00c      	b.n	8008af6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008adc:	1d3b      	adds	r3, r7, #4
 8008ade:	4619      	mov	r1, r3
 8008ae0:	480a      	ldr	r0, [pc, #40]	; (8008b0c <SendFreeBuf+0x38>)
 8008ae2:	f000 f96a 	bl	8008dba <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008ae6:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <SendFreeBuf+0x3c>)
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f91b 	bl	8008d2c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008af6:	4805      	ldr	r0, [pc, #20]	; (8008b0c <SendFreeBuf+0x38>)
 8008af8:	f000 f8d0 	bl	8008c9c <LST_is_empty>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0ec      	beq.n	8008adc <SendFreeBuf+0x8>
  }

  return;
 8008b02:	bf00      	nop
}
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000d0c 	.word	0x20000d0c
 8008b10:	20030000 	.word	0x20030000

08008b14 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008b18:	4805      	ldr	r0, [pc, #20]	; (8008b30 <TL_TRACES_Init+0x1c>)
 8008b1a:	f000 f8af 	bl	8008c7c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008b1e:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <TL_TRACES_Init+0x20>)
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	4a03      	ldr	r2, [pc, #12]	; (8008b30 <TL_TRACES_Init+0x1c>)
 8008b24:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008b26:	f001 f83d 	bl	8009ba4 <HW_IPCC_TRACES_Init>

  return;
 8008b2a:	bf00      	nop
}
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200300c0 	.word	0x200300c0
 8008b34:	20030000 	.word	0x20030000

08008b38 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008b3e:	e008      	b.n	8008b52 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008b40:	1d3b      	adds	r3, r7, #4
 8008b42:	4619      	mov	r1, r3
 8008b44:	4808      	ldr	r0, [pc, #32]	; (8008b68 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008b46:	f000 f938 	bl	8008dba <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f80d 	bl	8008b6c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008b52:	4805      	ldr	r0, [pc, #20]	; (8008b68 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008b54:	f000 f8a2 	bl	8008c9c <LST_is_empty>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d0f0      	beq.n	8008b40 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008b5e:	bf00      	nop
}
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	200300c0 	.word	0x200300c0

08008b6c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	6039      	str	r1, [r7, #0]
 8008b8a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	2b06      	cmp	r3, #6
 8008b90:	d845      	bhi.n	8008c1e <OutputDbgTrace+0x9e>
 8008b92:	a201      	add	r2, pc, #4	; (adr r2, 8008b98 <OutputDbgTrace+0x18>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	08008bd9 	.word	0x08008bd9
 8008ba0:	08008bdf 	.word	0x08008bdf
 8008ba4:	08008bf3 	.word	0x08008bf3
 8008ba8:	08008bff 	.word	0x08008bff
 8008bac:	08008c05 	.word	0x08008c05
 8008bb0:	08008c13 	.word	0x08008c13
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	7a5b      	ldrb	r3, [r3, #9]
 8008bbc:	2bff      	cmp	r3, #255	; 0xff
 8008bbe:	d005      	beq.n	8008bcc <OutputDbgTrace+0x4c>
 8008bc0:	2bff      	cmp	r3, #255	; 0xff
 8008bc2:	dc05      	bgt.n	8008bd0 <OutputDbgTrace+0x50>
 8008bc4:	2b0e      	cmp	r3, #14
 8008bc6:	d005      	beq.n	8008bd4 <OutputDbgTrace+0x54>
 8008bc8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008bca:	e001      	b.n	8008bd0 <OutputDbgTrace+0x50>
          break;
 8008bcc:	bf00      	nop
 8008bce:	e027      	b.n	8008c20 <OutputDbgTrace+0xa0>
          break;
 8008bd0:	bf00      	nop
 8008bd2:	e025      	b.n	8008c20 <OutputDbgTrace+0xa0>
          break;
 8008bd4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008bd6:	e023      	b.n	8008c20 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008bdc:	e020      	b.n	8008c20 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	7a5b      	ldrb	r3, [r3, #9]
 8008be6:	2b0e      	cmp	r3, #14
 8008be8:	d001      	beq.n	8008bee <OutputDbgTrace+0x6e>
 8008bea:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008bec:	e000      	b.n	8008bf0 <OutputDbgTrace+0x70>
          break;
 8008bee:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008bf0:	e016      	b.n	8008c20 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	7a5b      	ldrb	r3, [r3, #9]
 8008bfa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008bfc:	e010      	b.n	8008c20 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008c02:	e00d      	b.n	8008c20 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	7a5b      	ldrb	r3, [r3, #9]
 8008c0c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008c0e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008c10:	e006      	b.n	8008c20 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	7a5b      	ldrb	r3, [r3, #9]
 8008c1a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008c1c:	e000      	b.n	8008c20 <OutputDbgTrace+0xa0>

    default:
      break;
 8008c1e:	bf00      	nop
  }

  return;
 8008c20:	bf00      	nop
}
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008c36:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <OTP_Read+0x48>)
 8008c38:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008c3a:	e002      	b.n	8008c42 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3b08      	subs	r3, #8
 8008c40:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3307      	adds	r3, #7
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	79fa      	ldrb	r2, [r7, #7]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d003      	beq.n	8008c56 <OTP_Read+0x2a>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4a09      	ldr	r2, [pc, #36]	; (8008c78 <OTP_Read+0x4c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d1f2      	bne.n	8008c3c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3307      	adds	r3, #7
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	79fa      	ldrb	r2, [r7, #7]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d001      	beq.n	8008c66 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008c66:	68fb      	ldr	r3, [r7, #12]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	1fff73f8 	.word	0x1fff73f8
 8008c78:	1fff7000 	.word	0x1fff7000

08008c7c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	605a      	str	r2, [r3, #4]
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ca8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008caa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008cac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cae:	b672      	cpsid	i
}
 8008cb0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d102      	bne.n	8008cc2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	75fb      	strb	r3, [r7, #23]
 8008cc0:	e001      	b.n	8008cc6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f383 8810 	msr	PRIMASK, r3
}
 8008cd0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	371c      	adds	r7, #28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cea:	f3ef 8310 	mrs	r3, PRIMASK
 8008cee:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008cf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cf4:	b672      	cpsid	i
}
 8008cf6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	605a      	str	r2, [r3, #4]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f383 8810 	msr	PRIMASK, r3
}
 8008d1e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008d20:	bf00      	nop
 8008d22:	371c      	adds	r7, #28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d36:	f3ef 8310 	mrs	r3, PRIMASK
 8008d3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d40:	b672      	cpsid	i
}
 8008d42:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f383 8810 	msr	PRIMASK, r3
}
 8008d6a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008d6c:	bf00      	nop
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d80:	f3ef 8310 	mrs	r3, PRIMASK
 8008d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d8a:	b672      	cpsid	i
}
 8008d8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6812      	ldr	r2, [r2, #0]
 8008d96:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6852      	ldr	r2, [r2, #4]
 8008da0:	605a      	str	r2, [r3, #4]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f383 8810 	msr	PRIMASK, r3
}
 8008dac:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008dae:	bf00      	nop
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b086      	sub	sp, #24
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008dcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008dce:	b672      	cpsid	i
}
 8008dd0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7ff ffca 	bl	8008d78 <LST_remove_node>
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f383 8810 	msr	PRIMASK, r3
}
 8008dee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008df0:	bf00      	nop
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008dfc:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <LL_FLASH_GetUDN+0x14>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	1fff7580 	.word	0x1fff7580

08008e10 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008e10:	b480      	push	{r7}
 8008e12:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008e14:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <LL_FLASH_GetDeviceID+0x14>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	b2db      	uxtb	r3, r3
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	1fff7584 	.word	0x1fff7584

08008e28 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008e2c:	4b03      	ldr	r3, [pc, #12]	; (8008e3c <LL_FLASH_GetSTCompanyID+0x14>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	0a1b      	lsrs	r3, r3, #8
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	1fff7584 	.word	0x1fff7584

08008e40 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008e40:	b5b0      	push	{r4, r5, r7, lr}
 8008e42:	b090      	sub	sp, #64	; 0x40
 8008e44:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008e46:	2392      	movs	r3, #146	; 0x92
 8008e48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
//  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
//  // Scheduler will run it exactly once.
//  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008e4c:	4b25      	ldr	r3, [pc, #148]	; (8008ee4 <APP_BLE_Init+0xa4>)
 8008e4e:	1d3c      	adds	r4, r7, #4
 8008e50:	461d      	mov	r5, r3
 8008e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e62:	c403      	stmia	r4!, {r0, r1}
 8008e64:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008e66:	f000 f905 	bl	8009074 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	2002      	movs	r0, #2
 8008e6e:	f000 fec1 	bl	8009bf4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008e72:	4a1d      	ldr	r2, [pc, #116]	; (8008ee8 <APP_BLE_Init+0xa8>)
 8008e74:	2100      	movs	r1, #0
 8008e76:	2002      	movs	r0, #2
 8008e78:	f000 ffe8 	bl	8009e4c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008e7c:	1d3b      	adds	r3, r7, #4
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff f8d0 	bl	8008024 <SHCI_C2_BLE_Init>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8008e8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008e92:	f7f9 f83f 	bl	8001f14 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008e96:	f000 f903 	bl	80090a0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008e9a:	f7ff f81d 	bl	8007ed8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008e9e:	4b13      	ldr	r3, [pc, #76]	; (8008eec <APP_BLE_Init+0xac>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008ea6:	4b11      	ldr	r3, [pc, #68]	; (8008eec <APP_BLE_Init+0xac>)
 8008ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eac:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008eae:	4a10      	ldr	r2, [pc, #64]	; (8008ef0 <APP_BLE_Init+0xb0>)
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	f000 ffca 	bl	8009e4c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008eb8:	2006      	movs	r0, #6
 8008eba:	f7fe fe81 	bl	8007bc0 <aci_hal_set_radio_activity_mask>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008ec4:	f000 fabc 	bl	8009440 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008ec8:	4b08      	ldr	r3, [pc, #32]	; (8008eec <APP_BLE_Init+0xac>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008ece:	4b07      	ldr	r3, [pc, #28]	; (8008eec <APP_BLE_Init+0xac>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	f000 f997 	bl	8009208 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008eda:	bf00      	nop
}
 8008edc:	3740      	adds	r7, #64	; 0x40
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	0800a1a4 	.word	0x0800a1a4
 8008ee8:	08008241 	.word	0x08008241
 8008eec:	20000d30 	.word	0x20000d30
 8008ef0:	080092f1 	.word	0x080092f1

08008ef4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008efc:	2392      	movs	r3, #146	; 0x92
 8008efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3301      	adds	r3, #1
 8008f06:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2bff      	cmp	r3, #255	; 0xff
 8008f0e:	d053      	beq.n	8008fb8 <SVCCTL_App_Notification+0xc4>
 8008f10:	2bff      	cmp	r3, #255	; 0xff
 8008f12:	f300 80a1 	bgt.w	8009058 <SVCCTL_App_Notification+0x164>
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d002      	beq.n	8008f20 <SVCCTL_App_Notification+0x2c>
 8008f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f1c:	d020      	beq.n	8008f60 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008f1e:	e09b      	b.n	8009058 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	3302      	adds	r3, #2
 8008f24:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	4b4e      	ldr	r3, [pc, #312]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8008f30:	8adb      	ldrh	r3, [r3, #22]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d106      	bne.n	8008f44 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008f36:	4b4c      	ldr	r3, [pc, #304]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008f3c:	4b4a      	ldr	r3, [pc, #296]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008f44:	2001      	movs	r0, #1
 8008f46:	f000 f95f 	bl	8009208 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008f4a:	4b48      	ldr	r3, [pc, #288]	; (800906c <SVCCTL_App_Notification+0x178>)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008f50:	4b45      	ldr	r3, [pc, #276]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8008f52:	8ada      	ldrh	r2, [r3, #22]
 8008f54:	4b45      	ldr	r3, [pc, #276]	; (800906c <SVCCTL_App_Notification+0x178>)
 8008f56:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008f58:	4844      	ldr	r0, [pc, #272]	; (800906c <SVCCTL_App_Notification+0x178>)
 8008f5a:	f000 fa5d 	bl	8009418 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008f5e:	e07e      	b.n	800905e <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	3302      	adds	r3, #2
 8008f64:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d001      	beq.n	8008f72 <SVCCTL_App_Notification+0x7e>
 8008f6e:	2b03      	cmp	r3, #3
          break;
 8008f70:	e021      	b.n	8008fb6 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	3301      	adds	r3, #1
 8008f76:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008f78:	4b3b      	ldr	r3, [pc, #236]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8008f7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	d104      	bne.n	8008f8c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008f82:	4b39      	ldr	r3, [pc, #228]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8008f84:	2206      	movs	r2, #6
 8008f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008f8a:	e003      	b.n	8008f94 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008f8c:	4b36      	ldr	r3, [pc, #216]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8008f8e:	2205      	movs	r2, #5
 8008f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	4b32      	ldr	r3, [pc, #200]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8008f9e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008fa0:	4b32      	ldr	r3, [pc, #200]	; (800906c <SVCCTL_App_Notification+0x178>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008fa6:	4b30      	ldr	r3, [pc, #192]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8008fa8:	8ada      	ldrh	r2, [r3, #22]
 8008faa:	4b30      	ldr	r3, [pc, #192]	; (800906c <SVCCTL_App_Notification+0x178>)
 8008fac:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008fae:	482f      	ldr	r0, [pc, #188]	; (800906c <SVCCTL_App_Notification+0x178>)
 8008fb0:	f000 fa32 	bl	8009418 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008fb4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008fb6:	e052      	b.n	800905e <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	3302      	adds	r3, #2
 8008fbc:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc8:	d040      	beq.n	800904c <SVCCTL_App_Notification+0x158>
 8008fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fce:	dc45      	bgt.n	800905c <SVCCTL_App_Notification+0x168>
 8008fd0:	2b04      	cmp	r3, #4
 8008fd2:	d03d      	beq.n	8009050 <SVCCTL_App_Notification+0x15c>
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	db41      	blt.n	800905c <SVCCTL_App_Notification+0x168>
 8008fd8:	f240 420a 	movw	r2, #1034	; 0x40a
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	dc3d      	bgt.n	800905c <SVCCTL_App_Notification+0x168>
 8008fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fe4:	dd3a      	ble.n	800905c <SVCCTL_App_Notification+0x168>
 8008fe6:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008fea:	2b09      	cmp	r3, #9
 8008fec:	d836      	bhi.n	800905c <SVCCTL_App_Notification+0x168>
 8008fee:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <SVCCTL_App_Notification+0x100>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	08009045 	.word	0x08009045
 8008ff8:	0800901d 	.word	0x0800901d
 8008ffc:	0800905d 	.word	0x0800905d
 8009000:	0800905d 	.word	0x0800905d
 8009004:	0800905d 	.word	0x0800905d
 8009008:	0800905d 	.word	0x0800905d
 800900c:	08009055 	.word	0x08009055
 8009010:	0800905d 	.word	0x0800905d
 8009014:	08009031 	.word	0x08009031
 8009018:	08009055 	.word	0x08009055
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800901c:	4b12      	ldr	r3, [pc, #72]	; (8009068 <SVCCTL_App_Notification+0x174>)
 800901e:	8adb      	ldrh	r3, [r3, #22]
 8009020:	4913      	ldr	r1, [pc, #76]	; (8009070 <SVCCTL_App_Notification+0x17c>)
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe f823 	bl	800706e <aci_gap_pass_key_resp>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800902e:	e012      	b.n	8009056 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009030:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <SVCCTL_App_Notification+0x174>)
 8009032:	8adb      	ldrh	r3, [r3, #22]
 8009034:	2101      	movs	r1, #1
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe f9c3 	bl	80073c2 <aci_gap_numeric_comparison_value_confirm_yesno>
 800903c:	4603      	mov	r3, r0
 800903e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8009042:	e008      	b.n	8009056 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	3302      	adds	r3, #2
 8009048:	61bb      	str	r3, [r7, #24]
          break;
 800904a:	e004      	b.n	8009056 <SVCCTL_App_Notification+0x162>
          break;
 800904c:	bf00      	nop
 800904e:	e005      	b.n	800905c <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009050:	bf00      	nop
 8009052:	e003      	b.n	800905c <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009054:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009056:	e001      	b.n	800905c <SVCCTL_App_Notification+0x168>
      break;
 8009058:	bf00      	nop
 800905a:	e000      	b.n	800905e <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800905c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800905e:	2301      	movs	r3, #1
}
 8009060:	4618      	mov	r0, r3
 8009062:	3728      	adds	r7, #40	; 0x28
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	20000d30 	.word	0x20000d30
 800906c:	20000db4 	.word	0x20000db4
 8009070:	0001b207 	.word	0x0001b207

08009074 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800907a:	4b06      	ldr	r3, [pc, #24]	; (8009094 <Ble_Tl_Init+0x20>)
 800907c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800907e:	4b06      	ldr	r3, [pc, #24]	; (8009098 <Ble_Tl_Init+0x24>)
 8009080:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009082:	463b      	mov	r3, r7
 8009084:	4619      	mov	r1, r3
 8009086:	4805      	ldr	r0, [pc, #20]	; (800909c <Ble_Tl_Init+0x28>)
 8009088:	f7ff f8be 	bl	8008208 <hci_init>

  return;
 800908c:	bf00      	nop
}
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	200300d8 	.word	0x200300d8
 8009098:	080093a1 	.word	0x080093a1
 800909c:	08009369 	.word	0x08009369

080090a0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80090a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a2:	b08d      	sub	sp, #52	; 0x34
 80090a4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80090a6:	2300      	movs	r3, #0
 80090a8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80090aa:	2392      	movs	r3, #146	; 0x92
 80090ac:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80090ae:	f7fe fddb 	bl	8007c68 <hci_reset>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80090b6:	f000 f8d7 	bl	8009268 <BleGetBdAddress>
 80090ba:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	2106      	movs	r1, #6
 80090c0:	2000      	movs	r0, #0
 80090c2:	f7fe fc91 	bl	80079e8 <aci_hal_write_config_data>
 80090c6:	4603      	mov	r3, r0
 80090c8:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80090ca:	4a4a      	ldr	r2, [pc, #296]	; (80091f4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 80090cc:	2110      	movs	r1, #16
 80090ce:	2018      	movs	r0, #24
 80090d0:	f7fe fc8a 	bl	80079e8 <aci_hal_write_config_data>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80090d8:	4a47      	ldr	r2, [pc, #284]	; (80091f8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 80090da:	2110      	movs	r1, #16
 80090dc:	2008      	movs	r0, #8
 80090de:	f7fe fc83 	bl	80079e8 <aci_hal_write_config_data>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80090e6:	2118      	movs	r1, #24
 80090e8:	2001      	movs	r0, #1
 80090ea:	f7fe fd02 	bl	8007af2 <aci_hal_set_tx_power_level>
 80090ee:	4603      	mov	r3, r0
 80090f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80090f2:	f7fe f9cd 	bl	8007490 <aci_gatt_init>
 80090f6:	4603      	mov	r3, r0
 80090f8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	f043 0301 	orr.w	r3, r3, #1
 8009104:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01f      	beq.n	800914c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800910c:	4b3b      	ldr	r3, [pc, #236]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800910e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009110:	1dba      	adds	r2, r7, #6
 8009112:	7bf8      	ldrb	r0, [r7, #15]
 8009114:	1cbb      	adds	r3, r7, #2
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	1d3b      	adds	r3, r7, #4
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	4613      	mov	r3, r2
 800911e:	2208      	movs	r2, #8
 8009120:	2100      	movs	r1, #0
 8009122:	f7fe f80b 	bl	800713c <aci_gap_init>
 8009126:	4603      	mov	r3, r0
 8009128:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800912a:	88fc      	ldrh	r4, [r7, #6]
 800912c:	88bd      	ldrh	r5, [r7, #4]
 800912e:	68b8      	ldr	r0, [r7, #8]
 8009130:	f7f7 f824 	bl	800017c <strlen>
 8009134:	4603      	mov	r3, r0
 8009136:	b2da      	uxtb	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	4613      	mov	r3, r2
 800913e:	2200      	movs	r2, #0
 8009140:	4629      	mov	r1, r5
 8009142:	4620      	mov	r0, r4
 8009144:	f7fe fba7 	bl	8007896 <aci_gatt_update_char_value>
 8009148:	4603      	mov	r3, r0
 800914a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800914c:	88f8      	ldrh	r0, [r7, #6]
 800914e:	8879      	ldrh	r1, [r7, #2]
 8009150:	463b      	mov	r3, r7
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	2302      	movs	r3, #2
 8009156:	2200      	movs	r2, #0
 8009158:	f7fe fb9d 	bl	8007896 <aci_gatt_update_char_value>
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8009160:	2202      	movs	r2, #2
 8009162:	2102      	movs	r1, #2
 8009164:	2000      	movs	r0, #0
 8009166:	f7fe fda3 	bl	8007cb0 <hci_le_set_default_phy>
 800916a:	4603      	mov	r3, r0
 800916c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800916e:	4b24      	ldr	r3, [pc, #144]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009170:	2201      	movs	r2, #1
 8009172:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009174:	4b22      	ldr	r3, [pc, #136]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	4618      	mov	r0, r3
 800917a:	f7fd fe60 	bl	8006e3e <aci_gap_set_io_capability>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009182:	4b1f      	ldr	r3, [pc, #124]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009184:	2201      	movs	r2, #1
 8009186:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009188:	4b1d      	ldr	r3, [pc, #116]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800918a:	2208      	movs	r2, #8
 800918c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800918e:	4b1c      	ldr	r3, [pc, #112]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009190:	2210      	movs	r2, #16
 8009192:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009194:	4b1a      	ldr	r3, [pc, #104]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009196:	2201      	movs	r2, #1
 8009198:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800919a:	4b19      	ldr	r3, [pc, #100]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800919c:	4a19      	ldr	r2, [pc, #100]	; (8009204 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800919e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80091a0:	4b17      	ldr	r3, [pc, #92]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80091a2:	2201      	movs	r2, #1
 80091a4:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80091a6:	4b16      	ldr	r3, [pc, #88]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80091a8:	789c      	ldrb	r4, [r3, #2]
 80091aa:	4b15      	ldr	r3, [pc, #84]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80091ac:	785d      	ldrb	r5, [r3, #1]
 80091ae:	4b14      	ldr	r3, [pc, #80]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80091b0:	791b      	ldrb	r3, [r3, #4]
 80091b2:	4a13      	ldr	r2, [pc, #76]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80091b4:	7952      	ldrb	r2, [r2, #5]
 80091b6:	4912      	ldr	r1, [pc, #72]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80091b8:	78c9      	ldrb	r1, [r1, #3]
 80091ba:	4811      	ldr	r0, [pc, #68]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80091bc:	6880      	ldr	r0, [r0, #8]
 80091be:	2600      	movs	r6, #0
 80091c0:	9604      	str	r6, [sp, #16]
 80091c2:	9003      	str	r0, [sp, #12]
 80091c4:	9102      	str	r1, [sp, #8]
 80091c6:	9201      	str	r2, [sp, #4]
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	2300      	movs	r3, #0
 80091cc:	2201      	movs	r2, #1
 80091ce:	4629      	mov	r1, r5
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7fd fe88 	bl	8006ee6 <aci_gap_set_authentication_requirement>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80091dc:	789b      	ldrb	r3, [r3, #2]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80091e2:	f7fe f8ca 	bl	800737a <aci_gap_configure_whitelist>
 80091e6:	4603      	mov	r3, r0
 80091e8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80091ea:	bf00      	nop
 80091ec:	371c      	adds	r7, #28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f2:	bf00      	nop
 80091f4:	0800a3e4 	.word	0x0800a3e4
 80091f8:	0800a3f4 	.word	0x0800a3f4
 80091fc:	0800a1e0 	.word	0x0800a1e0
 8009200:	20000d30 	.word	0x20000d30
 8009204:	0001b207 	.word	0x0001b207

08009208 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08c      	sub	sp, #48	; 0x30
 800920c:	af08      	add	r7, sp, #32
 800920e:	4603      	mov	r3, r0
 8009210:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009212:	2392      	movs	r3, #146	; 0x92
 8009214:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8009216:	4a12      	ldr	r2, [pc, #72]	; (8009260 <Adv_Request+0x58>)
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800921e:	2300      	movs	r3, #0
 8009220:	9306      	str	r3, [sp, #24]
 8009222:	2300      	movs	r3, #0
 8009224:	9305      	str	r3, [sp, #20]
 8009226:	2300      	movs	r3, #0
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	2300      	movs	r3, #0
 800922c:	9303      	str	r3, [sp, #12]
 800922e:	2300      	movs	r3, #0
 8009230:	9302      	str	r3, [sp, #8]
 8009232:	2300      	movs	r3, #0
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	2300      	movs	r3, #0
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	2300      	movs	r3, #0
 800923c:	22a0      	movs	r2, #160	; 0xa0
 800923e:	2180      	movs	r1, #128	; 0x80
 8009240:	2000      	movs	r0, #0
 8009242:	f7fd fd02 	bl	8006c4a <aci_gap_set_discoverable>
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800924a:	4906      	ldr	r1, [pc, #24]	; (8009264 <Adv_Request+0x5c>)
 800924c:	200a      	movs	r0, #10
 800924e:	f7fe f822 	bl	8007296 <aci_gap_update_adv_data>
 8009252:	4603      	mov	r3, r0
 8009254:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8009256:	bf00      	nop
}
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20000d30 	.word	0x20000d30
 8009264:	2000002c 	.word	0x2000002c

08009268 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800926e:	f7ff fdc3 	bl	8008df8 <LL_FLASH_GetUDN>
 8009272:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927a:	d023      	beq.n	80092c4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800927c:	f7ff fdd4 	bl	8008e28 <LL_FLASH_GetSTCompanyID>
 8009280:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009282:	f7ff fdc5 	bl	8008e10 <LL_FLASH_GetDeviceID>
 8009286:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	b2da      	uxtb	r2, r3
 800928c:	4b16      	ldr	r3, [pc, #88]	; (80092e8 <BleGetBdAddress+0x80>)
 800928e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	b2da      	uxtb	r2, r3
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <BleGetBdAddress+0x80>)
 8009298:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	b2da      	uxtb	r2, r3
 800929e:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <BleGetBdAddress+0x80>)
 80092a0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <BleGetBdAddress+0x80>)
 80092a8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	0a1b      	lsrs	r3, r3, #8
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <BleGetBdAddress+0x80>)
 80092b2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	0c1b      	lsrs	r3, r3, #16
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <BleGetBdAddress+0x80>)
 80092bc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80092be:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <BleGetBdAddress+0x80>)
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	e00b      	b.n	80092dc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80092c4:	2000      	movs	r0, #0
 80092c6:	f7ff fcb1 	bl	8008c2c <OTP_Read>
 80092ca:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	e001      	b.n	80092dc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80092d8:	4b04      	ldr	r3, [pc, #16]	; (80092ec <BleGetBdAddress+0x84>)
 80092da:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80092dc:	697b      	ldr	r3, [r7, #20]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000d28 	.word	0x20000d28
 80092ec:	0800a3dc 	.word	0x0800a3dc

080092f0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80092f6:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <Adv_Cancel+0x30>)
 80092f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092fc:	2b05      	cmp	r3, #5
 80092fe:	d00a      	beq.n	8009316 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009300:	2392      	movs	r3, #146	; 0x92
 8009302:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009304:	f7fd fc7d 	bl	8006c02 <aci_gap_set_non_discoverable>
 8009308:	4603      	mov	r3, r0
 800930a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800930c:	4b04      	ldr	r3, [pc, #16]	; (8009320 <Adv_Cancel+0x30>)
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009314:	bf00      	nop
 8009316:	bf00      	nop
}
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20000d30 	.word	0x20000d30

08009324 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800932c:	2100      	movs	r1, #0
 800932e:	2002      	movs	r0, #2
 8009330:	f000 fdae 	bl	8009e90 <UTIL_SEQ_SetTask>

  return;
 8009334:	bf00      	nop
}
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009344:	2001      	movs	r0, #1
 8009346:	f000 fe0f 	bl	8009f68 <UTIL_SEQ_SetEvt>

  return;
 800934a:	bf00      	nop
}
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800935a:	2001      	movs	r0, #1
 800935c:	f000 fe24 	bl	8009fa8 <UTIL_SEQ_WaitEvt>

  return;
 8009360:	bf00      	nop
}
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	3308      	adds	r3, #8
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fdfe 	bl	8007f7c <SVCCTL_UserEvtRx>
 8009380:	4603      	mov	r3, r0
 8009382:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2201      	movs	r2, #1
 800938e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009390:	e003      	b.n	800939a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	701a      	strb	r2, [r3, #0]
  return;
 8009398:	bf00      	nop
}
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <BLE_StatusNot+0x16>
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d006      	beq.n	80093c2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80093b4:	e00b      	b.n	80093ce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80093b6:	2307      	movs	r3, #7
 80093b8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 fd94 	bl	8009ee8 <UTIL_SEQ_PauseTask>
      break;
 80093c0:	e005      	b.n	80093ce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80093c2:	2307      	movs	r3, #7
 80093c4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fdae 	bl	8009f28 <UTIL_SEQ_ResumeTask>
      break;
 80093cc:	bf00      	nop
  }

  return;
 80093ce:	bf00      	nop
}
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <Custom_STM_App_Notification>:
}
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b05      	cmp	r3, #5
 80093e6:	d80f      	bhi.n	8009408 <Custom_STM_App_Notification+0x30>
 80093e8:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <Custom_STM_App_Notification+0x18>)
 80093ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ee:	bf00      	nop
 80093f0:	08009409 	.word	0x08009409
 80093f4:	08009409 	.word	0x08009409
 80093f8:	08009409 	.word	0x08009409
 80093fc:	08009409 	.word	0x08009409
 8009400:	08009409 	.word	0x08009409
 8009404:	08009409 	.word	0x08009409

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8009408:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800940a:	bf00      	nop
}
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop

08009418 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <Custom_APP_Notification+0x16>
 8009428:	2b01      	cmp	r3, #1
 800942a:	d002      	beq.n	8009432 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800942c:	e002      	b.n	8009434 <Custom_APP_Notification+0x1c>
      break;
 800942e:	bf00      	nop
 8009430:	e000      	b.n	8009434 <Custom_APP_Notification+0x1c>
      break;
 8009432:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009434:	bf00      	nop
}
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8009440:	b480      	push	{r7}
 8009442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009444:	bf00      	nop
}
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
	...

08009450 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08a      	sub	sp, #40	; 0x28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009458:	2300      	movs	r3, #0
 800945a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3301      	adds	r3, #1
 8009462:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2bff      	cmp	r3, #255	; 0xff
 800946a:	f040 80ae 	bne.w	80095ca <Custom_STM_Event_Handler+0x17a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	3302      	adds	r3, #2
 8009472:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	b29b      	uxth	r3, r3
 800947a:	f640 4214 	movw	r2, #3092	; 0xc14
 800947e:	4293      	cmp	r3, r2
 8009480:	f000 809d 	beq.w	80095be <Custom_STM_Event_Handler+0x16e>
 8009484:	f640 4214 	movw	r2, #3092	; 0xc14
 8009488:	4293      	cmp	r3, r2
 800948a:	f300 809a 	bgt.w	80095c2 <Custom_STM_Event_Handler+0x172>
 800948e:	f640 4201 	movw	r2, #3073	; 0xc01
 8009492:	4293      	cmp	r3, r2
 8009494:	d003      	beq.n	800949e <Custom_STM_Event_Handler+0x4e>
 8009496:	f640 4213 	movw	r2, #3091	; 0xc13
 800949a:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800949c:	e094      	b.n	80095c8 <Custom_STM_Event_Handler+0x178>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	3302      	adds	r3, #2
 80094a2:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomVgsicharwriteHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	885b      	ldrh	r3, [r3, #2]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	4b4a      	ldr	r3, [pc, #296]	; (80095d8 <Custom_STM_Event_Handler+0x188>)
 80094ae:	885b      	ldrh	r3, [r3, #2]
 80094b0:	3302      	adds	r3, #2
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d119      	bne.n	80094ea <Custom_STM_Event_Handler+0x9a>
            return_value = SVCCTL_EvtAckFlowEnable;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	7a1b      	ldrb	r3, [r3, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <Custom_STM_Event_Handler+0x7a>
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d008      	beq.n	80094da <Custom_STM_Event_Handler+0x8a>
              break;
 80094c8:	e078      	b.n	80095bc <Custom_STM_Event_Handler+0x16c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSICHARWRITE_NOTIFY_DISABLED_EVT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80094ce:	f107 0308 	add.w	r3, r7, #8
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff ff80 	bl	80093d8 <Custom_STM_App_Notification>
                break;
 80094d8:	e070      	b.n	80095bc <Custom_STM_Event_Handler+0x16c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSICHARWRITE_NOTIFY_ENABLED_EVT;
 80094da:	2302      	movs	r3, #2
 80094dc:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80094de:	f107 0308 	add.w	r3, r7, #8
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff ff78 	bl	80093d8 <Custom_STM_App_Notification>
                break;
 80094e8:	e068      	b.n	80095bc <Custom_STM_Event_Handler+0x16c>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomVgsizeitreadHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	885b      	ldrh	r3, [r3, #2]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b39      	ldr	r3, [pc, #228]	; (80095d8 <Custom_STM_Event_Handler+0x188>)
 80094f4:	889b      	ldrh	r3, [r3, #4]
 80094f6:	3302      	adds	r3, #2
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d119      	bne.n	8009530 <Custom_STM_Event_Handler+0xe0>
            return_value = SVCCTL_EvtAckFlowEnable;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	7a1b      	ldrb	r3, [r3, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d002      	beq.n	8009510 <Custom_STM_Event_Handler+0xc0>
 800950a:	2b01      	cmp	r3, #1
 800950c:	d008      	beq.n	8009520 <Custom_STM_Event_Handler+0xd0>
              break;
 800950e:	e055      	b.n	80095bc <Custom_STM_Event_Handler+0x16c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSIZEITREAD_NOTIFY_DISABLED_EVT;
 8009510:	2305      	movs	r3, #5
 8009512:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8009514:	f107 0308 	add.w	r3, r7, #8
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff ff5d 	bl	80093d8 <Custom_STM_App_Notification>
                break;
 800951e:	e04d      	b.n	80095bc <Custom_STM_Event_Handler+0x16c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSIZEITREAD_NOTIFY_ENABLED_EVT;
 8009520:	2304      	movs	r3, #4
 8009522:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8009524:	f107 0308 	add.w	r3, r7, #8
 8009528:	4618      	mov	r0, r3
 800952a:	f7ff ff55 	bl	80093d8 <Custom_STM_App_Notification>
                break;
 800952e:	e045      	b.n	80095bc <Custom_STM_Event_Handler+0x16c>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomVgsicharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	885b      	ldrh	r3, [r3, #2]
 8009534:	b29b      	uxth	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	4b27      	ldr	r3, [pc, #156]	; (80095d8 <Custom_STM_Event_Handler+0x188>)
 800953a:	885b      	ldrh	r3, [r3, #2]
 800953c:	3301      	adds	r3, #1
 800953e:	429a      	cmp	r2, r3
 8009540:	d141      	bne.n	80095c6 <Custom_STM_Event_Handler+0x176>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009542:	2301      	movs	r3, #1
 8009544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8009548:	2102      	movs	r1, #2
 800954a:	4824      	ldr	r0, [pc, #144]	; (80095dc <Custom_STM_Event_Handler+0x18c>)
 800954c:	f7f9 ff24 	bl	8003398 <HAL_GPIO_TogglePin>
            MCP2515_RegModify(MCP_TXB0CTRL, MCP_TXB_ABTF_M | MCP_TXB_MLOA_M \
 8009550:	2200      	movs	r2, #0
 8009552:	2178      	movs	r1, #120	; 0x78
 8009554:	2030      	movs	r0, #48	; 0x30
 8009556:	f7f9 f8ca 	bl	80026ee <MCP2515_RegModify>
            MCP2515_RegModify(MCP_TXB0CTRL, 0x03, 0xFF);
 800955a:	22ff      	movs	r2, #255	; 0xff
 800955c:	2103      	movs	r1, #3
 800955e:	2030      	movs	r0, #48	; 0x30
 8009560:	f7f9 f8c5 	bl	80026ee <MCP2515_RegModify>
            MCP2515_WriteReg(MCP_TXB0SIDH, 0x40, 1);  // 0x200 = 0010 0000 0000 -> 0100 0000    = 0x40
 8009564:	2201      	movs	r2, #1
 8009566:	2140      	movs	r1, #64	; 0x40
 8009568:	2031      	movs	r0, #49	; 0x31
 800956a:	f7f9 f894 	bl	8002696 <MCP2515_WriteReg>
            MCP2515_WriteReg(MCP_TXB0SIDL, 0x00, 1);   // 000 = 0x00
 800956e:	2201      	movs	r2, #1
 8009570:	2100      	movs	r1, #0
 8009572:	2032      	movs	r0, #50	; 0x32
 8009574:	f7f9 f88f 	bl	8002696 <MCP2515_WriteReg>
            MCP2515_WriteReg(MCP_TXB0DLC, 0x04, 1); // change to corespoind byte length
 8009578:	2201      	movs	r2, #1
 800957a:	2104      	movs	r1, #4
 800957c:	2035      	movs	r0, #53	; 0x35
 800957e:	f7f9 f88a 	bl	8002696 <MCP2515_WriteReg>
            MCP2515_WriteReg(MCP_TXB0_DATA0, 0x00, 1);
 8009582:	2201      	movs	r2, #1
 8009584:	2100      	movs	r1, #0
 8009586:	2036      	movs	r0, #54	; 0x36
 8009588:	f7f9 f885 	bl	8002696 <MCP2515_WriteReg>
            MCP2515_WriteReg(MCP_TXB0_DATA1, 0x30, 1);
 800958c:	2201      	movs	r2, #1
 800958e:	2130      	movs	r1, #48	; 0x30
 8009590:	2037      	movs	r0, #55	; 0x37
 8009592:	f7f9 f880 	bl	8002696 <MCP2515_WriteReg>
            MCP2515_WriteReg(MCP_TXB0_DATA2, 0x00, 1);
 8009596:	2201      	movs	r2, #1
 8009598:	2100      	movs	r1, #0
 800959a:	2038      	movs	r0, #56	; 0x38
 800959c:	f7f9 f87b 	bl	8002696 <MCP2515_WriteReg>
            MCP2515_WriteReg(MCP_TXB0_DATA3, 0xF0, 1);
 80095a0:	2201      	movs	r2, #1
 80095a2:	21f0      	movs	r1, #240	; 0xf0
 80095a4:	2039      	movs	r0, #57	; 0x39
 80095a6:	f7f9 f876 	bl	8002696 <MCP2515_WriteReg>
    	    MCP2515_RegModify(MCP_TXB0CTRL, 0x08, 0x08);
 80095aa:	2208      	movs	r2, #8
 80095ac:	2108      	movs	r1, #8
 80095ae:	2030      	movs	r0, #48	; 0x30
 80095b0:	f7f9 f89d 	bl	80026ee <MCP2515_RegModify>
    	    Read_TXdata(4);
 80095b4:	2004      	movs	r0, #4
 80095b6:	f7f8 fef1 	bl	800239c <Read_TXdata>
          break;
 80095ba:	e004      	b.n	80095c6 <Custom_STM_Event_Handler+0x176>
 80095bc:	e003      	b.n	80095c6 <Custom_STM_Event_Handler+0x176>
          break;
 80095be:	bf00      	nop
 80095c0:	e004      	b.n	80095cc <Custom_STM_Event_Handler+0x17c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80095c2:	bf00      	nop
 80095c4:	e002      	b.n	80095cc <Custom_STM_Event_Handler+0x17c>
          break;
 80095c6:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80095c8:	e000      	b.n	80095cc <Custom_STM_Event_Handler+0x17c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80095ca:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80095cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 80095d0:	4618      	mov	r0, r3
 80095d2:	3728      	adds	r7, #40	; 0x28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	20000db8 	.word	0x20000db8
 80095dc:	48000400 	.word	0x48000400

080095e0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08c      	sub	sp, #48	; 0x30
 80095e4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80095e6:	2392      	movs	r3, #146	; 0x92
 80095e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80095ea:	484f      	ldr	r0, [pc, #316]	; (8009728 <SVCCTL_InitCustomSvc+0x148>)
 80095ec:	f7fe fcac 	bl	8007f48 <SVCCTL_RegisterSvcHandler>
   *                                1 for VGSICHARWRITE configuration descriptor +
   *                                1 for VGSIZEITREAD configuration descriptor +
   *                              = 7
   */

  COPY_VGSIZEITEMS_UUID(uuid.Char_UUID_128);
 80095f0:	238f      	movs	r3, #143	; 0x8f
 80095f2:	713b      	strb	r3, [r7, #4]
 80095f4:	23e5      	movs	r3, #229	; 0xe5
 80095f6:	717b      	strb	r3, [r7, #5]
 80095f8:	23b3      	movs	r3, #179	; 0xb3
 80095fa:	71bb      	strb	r3, [r7, #6]
 80095fc:	23d5      	movs	r3, #213	; 0xd5
 80095fe:	71fb      	strb	r3, [r7, #7]
 8009600:	232e      	movs	r3, #46	; 0x2e
 8009602:	723b      	strb	r3, [r7, #8]
 8009604:	237f      	movs	r3, #127	; 0x7f
 8009606:	727b      	strb	r3, [r7, #9]
 8009608:	234a      	movs	r3, #74	; 0x4a
 800960a:	72bb      	strb	r3, [r7, #10]
 800960c:	2398      	movs	r3, #152	; 0x98
 800960e:	72fb      	strb	r3, [r7, #11]
 8009610:	232a      	movs	r3, #42	; 0x2a
 8009612:	733b      	strb	r3, [r7, #12]
 8009614:	2348      	movs	r3, #72	; 0x48
 8009616:	737b      	strb	r3, [r7, #13]
 8009618:	237a      	movs	r3, #122	; 0x7a
 800961a:	73bb      	strb	r3, [r7, #14]
 800961c:	23cc      	movs	r3, #204	; 0xcc
 800961e:	73fb      	strb	r3, [r7, #15]
 8009620:	2300      	movs	r3, #0
 8009622:	743b      	strb	r3, [r7, #16]
 8009624:	2300      	movs	r3, #0
 8009626:	747b      	strb	r3, [r7, #17]
 8009628:	2300      	movs	r3, #0
 800962a:	74bb      	strb	r3, [r7, #18]
 800962c:	2300      	movs	r3, #0
 800962e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009630:	1d39      	adds	r1, r7, #4
 8009632:	4b3e      	ldr	r3, [pc, #248]	; (800972c <SVCCTL_InitCustomSvc+0x14c>)
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	2307      	movs	r3, #7
 8009638:	2201      	movs	r2, #1
 800963a:	2002      	movs	r0, #2
 800963c:	f7fd ff4d 	bl	80074da <aci_gatt_add_service>
 8009640:	4603      	mov	r3, r0
 8009642:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  VGSICHARWRITE
   */
  COPY_VGSICHARWRITE_UUID(uuid.Char_UUID_128);
 8009644:	2319      	movs	r3, #25
 8009646:	713b      	strb	r3, [r7, #4]
 8009648:	23ed      	movs	r3, #237	; 0xed
 800964a:	717b      	strb	r3, [r7, #5]
 800964c:	2382      	movs	r3, #130	; 0x82
 800964e:	71bb      	strb	r3, [r7, #6]
 8009650:	23ae      	movs	r3, #174	; 0xae
 8009652:	71fb      	strb	r3, [r7, #7]
 8009654:	23ed      	movs	r3, #237	; 0xed
 8009656:	723b      	strb	r3, [r7, #8]
 8009658:	2321      	movs	r3, #33	; 0x21
 800965a:	727b      	strb	r3, [r7, #9]
 800965c:	234c      	movs	r3, #76	; 0x4c
 800965e:	72bb      	strb	r3, [r7, #10]
 8009660:	239d      	movs	r3, #157	; 0x9d
 8009662:	72fb      	strb	r3, [r7, #11]
 8009664:	2341      	movs	r3, #65	; 0x41
 8009666:	733b      	strb	r3, [r7, #12]
 8009668:	2345      	movs	r3, #69	; 0x45
 800966a:	737b      	strb	r3, [r7, #13]
 800966c:	2322      	movs	r3, #34	; 0x22
 800966e:	73bb      	strb	r3, [r7, #14]
 8009670:	238e      	movs	r3, #142	; 0x8e
 8009672:	73fb      	strb	r3, [r7, #15]
 8009674:	2300      	movs	r3, #0
 8009676:	743b      	strb	r3, [r7, #16]
 8009678:	2300      	movs	r3, #0
 800967a:	747b      	strb	r3, [r7, #17]
 800967c:	2300      	movs	r3, #0
 800967e:	74bb      	strb	r3, [r7, #18]
 8009680:	2300      	movs	r3, #0
 8009682:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomVgsizeitemsHdle,
 8009684:	4b29      	ldr	r3, [pc, #164]	; (800972c <SVCCTL_InitCustomSvc+0x14c>)
 8009686:	8818      	ldrh	r0, [r3, #0]
 8009688:	4b29      	ldr	r3, [pc, #164]	; (8009730 <SVCCTL_InitCustomSvc+0x150>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	b29b      	uxth	r3, r3
 800968e:	1d3a      	adds	r2, r7, #4
 8009690:	4928      	ldr	r1, [pc, #160]	; (8009734 <SVCCTL_InitCustomSvc+0x154>)
 8009692:	9105      	str	r1, [sp, #20]
 8009694:	2100      	movs	r1, #0
 8009696:	9104      	str	r1, [sp, #16]
 8009698:	2110      	movs	r1, #16
 800969a:	9103      	str	r1, [sp, #12]
 800969c:	2101      	movs	r1, #1
 800969e:	9102      	str	r1, [sp, #8]
 80096a0:	2109      	movs	r1, #9
 80096a2:	9101      	str	r1, [sp, #4]
 80096a4:	211a      	movs	r1, #26
 80096a6:	9100      	str	r1, [sp, #0]
 80096a8:	2102      	movs	r1, #2
 80096aa:	f7fd ffec 	bl	8007686 <aci_gatt_add_char>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : VGSICHARWRITE \n\r");
  }
  /**
   *  VGSIZEITREAD
   */
  COPY_VGSIZEITREAD_UUID(uuid.Char_UUID_128);
 80096b2:	2319      	movs	r3, #25
 80096b4:	713b      	strb	r3, [r7, #4]
 80096b6:	23ed      	movs	r3, #237	; 0xed
 80096b8:	717b      	strb	r3, [r7, #5]
 80096ba:	2382      	movs	r3, #130	; 0x82
 80096bc:	71bb      	strb	r3, [r7, #6]
 80096be:	23ae      	movs	r3, #174	; 0xae
 80096c0:	71fb      	strb	r3, [r7, #7]
 80096c2:	23ed      	movs	r3, #237	; 0xed
 80096c4:	723b      	strb	r3, [r7, #8]
 80096c6:	2321      	movs	r3, #33	; 0x21
 80096c8:	727b      	strb	r3, [r7, #9]
 80096ca:	234c      	movs	r3, #76	; 0x4c
 80096cc:	72bb      	strb	r3, [r7, #10]
 80096ce:	239d      	movs	r3, #157	; 0x9d
 80096d0:	72fb      	strb	r3, [r7, #11]
 80096d2:	2341      	movs	r3, #65	; 0x41
 80096d4:	733b      	strb	r3, [r7, #12]
 80096d6:	2345      	movs	r3, #69	; 0x45
 80096d8:	737b      	strb	r3, [r7, #13]
 80096da:	2322      	movs	r3, #34	; 0x22
 80096dc:	73bb      	strb	r3, [r7, #14]
 80096de:	238e      	movs	r3, #142	; 0x8e
 80096e0:	73fb      	strb	r3, [r7, #15]
 80096e2:	2301      	movs	r3, #1
 80096e4:	743b      	strb	r3, [r7, #16]
 80096e6:	2300      	movs	r3, #0
 80096e8:	747b      	strb	r3, [r7, #17]
 80096ea:	2300      	movs	r3, #0
 80096ec:	74bb      	strb	r3, [r7, #18]
 80096ee:	2300      	movs	r3, #0
 80096f0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomVgsizeitemsHdle,
 80096f2:	4b0e      	ldr	r3, [pc, #56]	; (800972c <SVCCTL_InitCustomSvc+0x14c>)
 80096f4:	8818      	ldrh	r0, [r3, #0]
 80096f6:	4b10      	ldr	r3, [pc, #64]	; (8009738 <SVCCTL_InitCustomSvc+0x158>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	1d3a      	adds	r2, r7, #4
 80096fe:	490f      	ldr	r1, [pc, #60]	; (800973c <SVCCTL_InitCustomSvc+0x15c>)
 8009700:	9105      	str	r1, [sp, #20]
 8009702:	2100      	movs	r1, #0
 8009704:	9104      	str	r1, [sp, #16]
 8009706:	2110      	movs	r1, #16
 8009708:	9103      	str	r1, [sp, #12]
 800970a:	2107      	movs	r1, #7
 800970c:	9102      	str	r1, [sp, #8]
 800970e:	2101      	movs	r1, #1
 8009710:	9101      	str	r1, [sp, #4]
 8009712:	2110      	movs	r1, #16
 8009714:	9100      	str	r1, [sp, #0]
 8009716:	2102      	movs	r1, #2
 8009718:	f7fd ffb5 	bl	8007686 <aci_gatt_add_char>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009720:	bf00      	nop
}
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	08009451 	.word	0x08009451
 800972c:	20000db8 	.word	0x20000db8
 8009730:	20000036 	.word	0x20000036
 8009734:	20000dba 	.word	0x20000dba
 8009738:	20000037 	.word	0x20000037
 800973c:	20000dbc 	.word	0x20000dbc

08009740 <LL_PWR_EnableBootC2>:
{
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009744:	4b05      	ldr	r3, [pc, #20]	; (800975c <LL_PWR_EnableBootC2+0x1c>)
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	4a04      	ldr	r2, [pc, #16]	; (800975c <LL_PWR_EnableBootC2+0x1c>)
 800974a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800974e:	60d3      	str	r3, [r2, #12]
}
 8009750:	bf00      	nop
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	58000400 	.word	0x58000400

08009760 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009768:	4b06      	ldr	r3, [pc, #24]	; (8009784 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800976a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800976e:	4905      	ldr	r1, [pc, #20]	; (8009784 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4313      	orrs	r3, r2
 8009774:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	58000800 	.word	0x58000800

08009788 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009790:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009792:	6a1a      	ldr	r2, [r3, #32]
 8009794:	4904      	ldr	r1, [pc, #16]	; (80097a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4313      	orrs	r3, r2
 800979a:	620b      	str	r3, [r1, #32]
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	58000800 	.word	0x58000800

080097ac <LL_AHB3_GRP1_EnableClock>:
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80097b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80097c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4013      	ands	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80097d0:	68fb      	ldr	r3, [r7, #12]
}
 80097d2:	bf00      	nop
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80097de:	b480      	push	{r7}
 80097e0:	b085      	sub	sp, #20
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80097e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80097ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80097fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4013      	ands	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009808:	68fb      	ldr	r3, [r7, #12]
}
 800980a:	bf00      	nop
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <LL_C1_IPCC_EnableIT_TXF>:
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	601a      	str	r2, [r3, #0]
}
 800982a:	bf00      	nop
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <LL_C1_IPCC_EnableIT_RXO>:
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f043 0201 	orr.w	r2, r3, #1
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	601a      	str	r2, [r3, #0]
}
 800984a:	bf00      	nop
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	041b      	lsls	r3, r3, #16
 8009868:	43db      	mvns	r3, r3
 800986a:	401a      	ands	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	605a      	str	r2, [r3, #4]
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	041b      	lsls	r3, r3, #16
 800988e:	431a      	orrs	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	605a      	str	r2, [r3, #4]
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	43db      	mvns	r3, r3
 80098b2:	401a      	ands	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	605a      	str	r2, [r3, #4]
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	609a      	str	r2, [r3, #8]
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <LL_C1_IPCC_SetFlag_CHx>:
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	041a      	lsls	r2, r3, #16
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	609a      	str	r2, [r3, #8]
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	4013      	ands	r3, r2
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	429a      	cmp	r2, r3
 8009914:	d101      	bne.n	800991a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009916:	2301      	movs	r3, #1
 8009918:	e000      	b.n	800991c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	69da      	ldr	r2, [r3, #28]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	4013      	ands	r3, r2
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	d101      	bne.n	8009944 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009940:	2301      	movs	r3, #1
 8009942:	e000      	b.n	8009946 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009958:	2102      	movs	r1, #2
 800995a:	4818      	ldr	r0, [pc, #96]	; (80099bc <HW_IPCC_Rx_Handler+0x68>)
 800995c:	f7ff ffe4 	bl	8009928 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <HW_IPCC_Rx_Handler+0x24>
 8009966:	4b15      	ldr	r3, [pc, #84]	; (80099bc <HW_IPCC_Rx_Handler+0x68>)
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b00      	cmp	r3, #0
 8009970:	d102      	bne.n	8009978 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009972:	f000 f8d5 	bl	8009b20 <HW_IPCC_SYS_EvtHandler>
 8009976:	e01e      	b.n	80099b6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009978:	2101      	movs	r1, #1
 800997a:	4810      	ldr	r0, [pc, #64]	; (80099bc <HW_IPCC_Rx_Handler+0x68>)
 800997c:	f7ff ffd4 	bl	8009928 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d008      	beq.n	8009998 <HW_IPCC_Rx_Handler+0x44>
 8009986:	4b0d      	ldr	r3, [pc, #52]	; (80099bc <HW_IPCC_Rx_Handler+0x68>)
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009992:	f000 f889 	bl	8009aa8 <HW_IPCC_BLE_EvtHandler>
 8009996:	e00e      	b.n	80099b6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009998:	2108      	movs	r1, #8
 800999a:	4808      	ldr	r0, [pc, #32]	; (80099bc <HW_IPCC_Rx_Handler+0x68>)
 800999c:	f7ff ffc4 	bl	8009928 <LL_C2_IPCC_IsActiveFlag_CHx>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d008      	beq.n	80099b8 <HW_IPCC_Rx_Handler+0x64>
 80099a6:	4b05      	ldr	r3, [pc, #20]	; (80099bc <HW_IPCC_Rx_Handler+0x68>)
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f003 0308 	and.w	r3, r3, #8
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d102      	bne.n	80099b8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80099b2:	f000 f901 	bl	8009bb8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
}
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	58000c00 	.word	0x58000c00

080099c0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80099c4:	2102      	movs	r1, #2
 80099c6:	4818      	ldr	r0, [pc, #96]	; (8009a28 <HW_IPCC_Tx_Handler+0x68>)
 80099c8:	f7ff ff99 	bl	80098fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d108      	bne.n	80099e4 <HW_IPCC_Tx_Handler+0x24>
 80099d2:	4b15      	ldr	r3, [pc, #84]	; (8009a28 <HW_IPCC_Tx_Handler+0x68>)
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d102      	bne.n	80099e4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80099de:	f000 f893 	bl	8009b08 <HW_IPCC_SYS_CmdEvtHandler>
 80099e2:	e01e      	b.n	8009a22 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80099e4:	2108      	movs	r1, #8
 80099e6:	4810      	ldr	r0, [pc, #64]	; (8009a28 <HW_IPCC_Tx_Handler+0x68>)
 80099e8:	f7ff ff89 	bl	80098fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d108      	bne.n	8009a04 <HW_IPCC_Tx_Handler+0x44>
 80099f2:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <HW_IPCC_Tx_Handler+0x68>)
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d102      	bne.n	8009a04 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80099fe:	f000 f8bd 	bl	8009b7c <HW_IPCC_MM_FreeBufHandler>
 8009a02:	e00e      	b.n	8009a22 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009a04:	2120      	movs	r1, #32
 8009a06:	4808      	ldr	r0, [pc, #32]	; (8009a28 <HW_IPCC_Tx_Handler+0x68>)
 8009a08:	f7ff ff79 	bl	80098fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d108      	bne.n	8009a24 <HW_IPCC_Tx_Handler+0x64>
 8009a12:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <HW_IPCC_Tx_Handler+0x68>)
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d102      	bne.n	8009a24 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009a1e:	f000 f84f 	bl	8009ac0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
}
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	58000c00 	.word	0x58000c00

08009a2c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009a30:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009a34:	f7ff fed3 	bl	80097de <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009a38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009a3c:	f7ff fea4 	bl	8009788 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009a40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009a44:	f7ff fe8c 	bl	8009760 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009a48:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009a4a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009a4c:	f7ff fe78 	bl	8009740 <LL_PWR_EnableBootC2>

  return;
 8009a50:	bf00      	nop
}
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009a58:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009a5c:	f7ff fea6 	bl	80097ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009a60:	4806      	ldr	r0, [pc, #24]	; (8009a7c <HW_IPCC_Init+0x28>)
 8009a62:	f7ff fee8 	bl	8009836 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009a66:	4805      	ldr	r0, [pc, #20]	; (8009a7c <HW_IPCC_Init+0x28>)
 8009a68:	f7ff fed5 	bl	8009816 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009a6c:	202c      	movs	r0, #44	; 0x2c
 8009a6e:	f7f9 f942 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009a72:	202d      	movs	r0, #45	; 0x2d
 8009a74:	f7f9 f93f 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

  return;
 8009a78:	bf00      	nop
}
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	58000c00 	.word	0x58000c00

08009a80 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009a84:	2101      	movs	r1, #1
 8009a86:	4802      	ldr	r0, [pc, #8]	; (8009a90 <HW_IPCC_BLE_Init+0x10>)
 8009a88:	f7ff ff0a 	bl	80098a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009a8c:	bf00      	nop
}
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	58000c00 	.word	0x58000c00

08009a94 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009a98:	2101      	movs	r1, #1
 8009a9a:	4802      	ldr	r0, [pc, #8]	; (8009aa4 <HW_IPCC_BLE_SendCmd+0x10>)
 8009a9c:	f7ff ff20 	bl	80098e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009aa0:	bf00      	nop
}
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	58000c00 	.word	0x58000c00

08009aa8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009aac:	f7fe ff06 	bl	80088bc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	4802      	ldr	r0, [pc, #8]	; (8009abc <HW_IPCC_BLE_EvtHandler+0x14>)
 8009ab4:	f7ff ff06 	bl	80098c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009ab8:	bf00      	nop
}
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	58000c00 	.word	0x58000c00

08009ac0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009ac4:	2120      	movs	r1, #32
 8009ac6:	4803      	ldr	r0, [pc, #12]	; (8009ad4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009ac8:	f7ff fed8 	bl	800987c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009acc:	f7fe ff26 	bl	800891c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009ad0:	bf00      	nop
}
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	58000c00 	.word	0x58000c00

08009ad8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009adc:	2102      	movs	r1, #2
 8009ade:	4802      	ldr	r0, [pc, #8]	; (8009ae8 <HW_IPCC_SYS_Init+0x10>)
 8009ae0:	f7ff fede 	bl	80098a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009ae4:	bf00      	nop
}
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	58000c00 	.word	0x58000c00

08009aec <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009af0:	2102      	movs	r1, #2
 8009af2:	4804      	ldr	r0, [pc, #16]	; (8009b04 <HW_IPCC_SYS_SendCmd+0x18>)
 8009af4:	f7ff fef4 	bl	80098e0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009af8:	2102      	movs	r1, #2
 8009afa:	4802      	ldr	r0, [pc, #8]	; (8009b04 <HW_IPCC_SYS_SendCmd+0x18>)
 8009afc:	f7ff feab 	bl	8009856 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009b00:	bf00      	nop
}
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	58000c00 	.word	0x58000c00

08009b08 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009b0c:	2102      	movs	r1, #2
 8009b0e:	4803      	ldr	r0, [pc, #12]	; (8009b1c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009b10:	f7ff feb4 	bl	800987c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009b14:	f7fe ff52 	bl	80089bc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009b18:	bf00      	nop
}
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	58000c00 	.word	0x58000c00

08009b20 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009b24:	f7fe ff60 	bl	80089e8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009b28:	2102      	movs	r1, #2
 8009b2a:	4802      	ldr	r0, [pc, #8]	; (8009b34 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009b2c:	f7ff feca 	bl	80098c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009b30:	bf00      	nop
}
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	58000c00 	.word	0x58000c00

08009b38 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009b40:	2108      	movs	r1, #8
 8009b42:	480c      	ldr	r0, [pc, #48]	; (8009b74 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009b44:	f7ff fedb 	bl	80098fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d007      	beq.n	8009b5e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009b4e:	4a0a      	ldr	r2, [pc, #40]	; (8009b78 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b54:	2108      	movs	r1, #8
 8009b56:	4807      	ldr	r0, [pc, #28]	; (8009b74 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009b58:	f7ff fe7d 	bl	8009856 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009b5c:	e006      	b.n	8009b6c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b62:	2108      	movs	r1, #8
 8009b64:	4803      	ldr	r0, [pc, #12]	; (8009b74 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009b66:	f7ff febb 	bl	80098e0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009b6a:	bf00      	nop
}
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	58000c00 	.word	0x58000c00
 8009b78:	20000dc0 	.word	0x20000dc0

08009b7c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b80:	2108      	movs	r1, #8
 8009b82:	4806      	ldr	r0, [pc, #24]	; (8009b9c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009b84:	f7ff fe7a 	bl	800987c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009b88:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b8e:	2108      	movs	r1, #8
 8009b90:	4802      	ldr	r0, [pc, #8]	; (8009b9c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009b92:	f7ff fea5 	bl	80098e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009b96:	bf00      	nop
}
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	58000c00 	.word	0x58000c00
 8009ba0:	20000dc0 	.word	0x20000dc0

08009ba4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009ba8:	2108      	movs	r1, #8
 8009baa:	4802      	ldr	r0, [pc, #8]	; (8009bb4 <HW_IPCC_TRACES_Init+0x10>)
 8009bac:	f7ff fe78 	bl	80098a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009bb0:	bf00      	nop
}
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	58000c00 	.word	0x58000c00

08009bb8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009bbc:	f7fe ffbc 	bl	8008b38 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009bc0:	2108      	movs	r1, #8
 8009bc2:	4802      	ldr	r0, [pc, #8]	; (8009bcc <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009bc4:	f7ff fe7e 	bl	80098c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009bc8:	bf00      	nop
}
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	58000c00 	.word	0x58000c00

08009bd0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009bd4:	4b05      	ldr	r3, [pc, #20]	; (8009bec <UTIL_LPM_Init+0x1c>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <UTIL_LPM_Init+0x20>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009be0:	bf00      	nop
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	20000dc4 	.word	0x20000dc4
 8009bf0:	20000dc8 	.word	0x20000dc8

08009bf4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c00:	f3ef 8310 	mrs	r3, PRIMASK
 8009c04:	613b      	str	r3, [r7, #16]
  return(result);
 8009c06:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009c08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c0a:	b672      	cpsid	i
}
 8009c0c:	bf00      	nop
  
  switch(state)
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d008      	beq.n	8009c26 <UTIL_LPM_SetOffMode+0x32>
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d10e      	bne.n	8009c36 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009c18:	4b0d      	ldr	r3, [pc, #52]	; (8009c50 <UTIL_LPM_SetOffMode+0x5c>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	4a0b      	ldr	r2, [pc, #44]	; (8009c50 <UTIL_LPM_SetOffMode+0x5c>)
 8009c22:	6013      	str	r3, [r2, #0]
      break;
 8009c24:	e008      	b.n	8009c38 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	43da      	mvns	r2, r3
 8009c2a:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <UTIL_LPM_SetOffMode+0x5c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	4a07      	ldr	r2, [pc, #28]	; (8009c50 <UTIL_LPM_SetOffMode+0x5c>)
 8009c32:	6013      	str	r3, [r2, #0]
      break;
 8009c34:	e000      	b.n	8009c38 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009c36:	bf00      	nop
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f383 8810 	msr	PRIMASK, r3
}
 8009c42:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009c44:	bf00      	nop
 8009c46:	371c      	adds	r7, #28
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20000dc8 	.word	0x20000dc8

08009c54 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b090      	sub	sp, #64	; 0x40
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009c5c:	4b73      	ldr	r3, [pc, #460]	; (8009e2c <UTIL_SEQ_Run+0x1d8>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009c62:	4b72      	ldr	r3, [pc, #456]	; (8009e2c <UTIL_SEQ_Run+0x1d8>)
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	4a70      	ldr	r2, [pc, #448]	; (8009e2c <UTIL_SEQ_Run+0x1d8>)
 8009c6c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009c6e:	4b70      	ldr	r3, [pc, #448]	; (8009e30 <UTIL_SEQ_Run+0x1dc>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009c74:	4b6f      	ldr	r3, [pc, #444]	; (8009e34 <UTIL_SEQ_Run+0x1e0>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009c7a:	4b6f      	ldr	r3, [pc, #444]	; (8009e38 <UTIL_SEQ_Run+0x1e4>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009c80:	4b6e      	ldr	r3, [pc, #440]	; (8009e3c <UTIL_SEQ_Run+0x1e8>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009c86:	e08d      	b.n	8009da4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009c8c:	e002      	b.n	8009c94 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c90:	3301      	adds	r3, #1
 8009c92:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009c94:	4a6a      	ldr	r2, [pc, #424]	; (8009e40 <UTIL_SEQ_Run+0x1ec>)
 8009c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c98:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	401a      	ands	r2, r3
 8009ca0:	4b62      	ldr	r3, [pc, #392]	; (8009e2c <UTIL_SEQ_Run+0x1d8>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0f1      	beq.n	8009c8e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009caa:	4a65      	ldr	r2, [pc, #404]	; (8009e40 <UTIL_SEQ_Run+0x1ec>)
 8009cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	401a      	ands	r2, r3
 8009cb6:	4b5d      	ldr	r3, [pc, #372]	; (8009e2c <UTIL_SEQ_Run+0x1d8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4013      	ands	r3, r2
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009cbe:	4a60      	ldr	r2, [pc, #384]	; (8009e40 <UTIL_SEQ_Run+0x1ec>)
 8009cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	4413      	add	r3, r2
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	4013      	ands	r3, r2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009cd0:	4a5b      	ldr	r2, [pc, #364]	; (8009e40 <UTIL_SEQ_Run+0x1ec>)
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cdc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009cde:	4a58      	ldr	r2, [pc, #352]	; (8009e40 <UTIL_SEQ_Run+0x1ec>)
 8009ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce2:	00db      	lsls	r3, r3, #3
 8009ce4:	4413      	add	r3, r2
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	4013      	ands	r3, r2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f9b3 	bl	800a058 <SEQ_BitPosition>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4b53      	ldr	r3, [pc, #332]	; (8009e44 <UTIL_SEQ_Run+0x1f0>)
 8009cf8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009cfa:	4a51      	ldr	r2, [pc, #324]	; (8009e40 <UTIL_SEQ_Run+0x1ec>)
 8009cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	4413      	add	r3, r2
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	4b4f      	ldr	r3, [pc, #316]	; (8009e44 <UTIL_SEQ_Run+0x1f0>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2101      	movs	r1, #1
 8009d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d0e:	43db      	mvns	r3, r3
 8009d10:	401a      	ands	r2, r3
 8009d12:	494b      	ldr	r1, [pc, #300]	; (8009e40 <UTIL_SEQ_Run+0x1ec>)
 8009d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	440b      	add	r3, r1
 8009d1a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d20:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d22:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009d24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d26:	b672      	cpsid	i
}
 8009d28:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009d2a:	4b46      	ldr	r3, [pc, #280]	; (8009e44 <UTIL_SEQ_Run+0x1f0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	fa02 f303 	lsl.w	r3, r2, r3
 8009d34:	43da      	mvns	r2, r3
 8009d36:	4b3e      	ldr	r3, [pc, #248]	; (8009e30 <UTIL_SEQ_Run+0x1dc>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	4a3c      	ldr	r2, [pc, #240]	; (8009e30 <UTIL_SEQ_Run+0x1dc>)
 8009d3e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009d40:	2302      	movs	r3, #2
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d44:	e013      	b.n	8009d6e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	4a3d      	ldr	r2, [pc, #244]	; (8009e40 <UTIL_SEQ_Run+0x1ec>)
 8009d4c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009d50:	4b3c      	ldr	r3, [pc, #240]	; (8009e44 <UTIL_SEQ_Run+0x1f0>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2201      	movs	r2, #1
 8009d56:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5a:	43da      	mvns	r2, r3
 8009d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	400a      	ands	r2, r1
 8009d62:	4937      	ldr	r1, [pc, #220]	; (8009e40 <UTIL_SEQ_Run+0x1ec>)
 8009d64:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e8      	bne.n	8009d46 <UTIL_SEQ_Run+0xf2>
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f383 8810 	msr	PRIMASK, r3
}
 8009d7e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009d80:	4b30      	ldr	r3, [pc, #192]	; (8009e44 <UTIL_SEQ_Run+0x1f0>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a30      	ldr	r2, [pc, #192]	; (8009e48 <UTIL_SEQ_Run+0x1f4>)
 8009d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d8a:	4798      	blx	r3

    local_taskset = TaskSet;
 8009d8c:	4b28      	ldr	r3, [pc, #160]	; (8009e30 <UTIL_SEQ_Run+0x1dc>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8009d92:	4b28      	ldr	r3, [pc, #160]	; (8009e34 <UTIL_SEQ_Run+0x1e0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009d98:	4b27      	ldr	r3, [pc, #156]	; (8009e38 <UTIL_SEQ_Run+0x1e4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8009d9e:	4b27      	ldr	r3, [pc, #156]	; (8009e3c <UTIL_SEQ_Run+0x1e8>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	401a      	ands	r2, r3
 8009daa:	4b20      	ldr	r3, [pc, #128]	; (8009e2c <UTIL_SEQ_Run+0x1d8>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4013      	ands	r3, r2
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d005      	beq.n	8009dc0 <UTIL_SEQ_Run+0x16c>
 8009db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db8:	4013      	ands	r3, r2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f43f af64 	beq.w	8009c88 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009dc0:	4b20      	ldr	r3, [pc, #128]	; (8009e44 <UTIL_SEQ_Run+0x1f0>)
 8009dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009dc8:	f000 f938 	bl	800a03c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009dd0:	613b      	str	r3, [r7, #16]
  return(result);
 8009dd2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009dd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dd6:	b672      	cpsid	i
}
 8009dd8:	bf00      	nop
  local_taskset = TaskSet;
 8009dda:	4b15      	ldr	r3, [pc, #84]	; (8009e30 <UTIL_SEQ_Run+0x1dc>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009de0:	4b14      	ldr	r3, [pc, #80]	; (8009e34 <UTIL_SEQ_Run+0x1e0>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009de6:	4b14      	ldr	r3, [pc, #80]	; (8009e38 <UTIL_SEQ_Run+0x1e4>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	401a      	ands	r2, r3
 8009df2:	4b0e      	ldr	r3, [pc, #56]	; (8009e2c <UTIL_SEQ_Run+0x1d8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4013      	ands	r3, r2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d107      	bne.n	8009e0c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009dfc:	4b0f      	ldr	r3, [pc, #60]	; (8009e3c <UTIL_SEQ_Run+0x1e8>)
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e02:	4013      	ands	r3, r2
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009e08:	f7f6 fdf8 	bl	80009fc <UTIL_SEQ_Idle>
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f383 8810 	msr	PRIMASK, r3
}
 8009e16:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009e18:	f000 f917 	bl	800a04a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009e1c:	4a03      	ldr	r2, [pc, #12]	; (8009e2c <UTIL_SEQ_Run+0x1d8>)
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	6013      	str	r3, [r2, #0]

  return;
 8009e22:	bf00      	nop
}
 8009e24:	3740      	adds	r7, #64	; 0x40
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	2000003c 	.word	0x2000003c
 8009e30:	20000dcc 	.word	0x20000dcc
 8009e34:	20000dd0 	.word	0x20000dd0
 8009e38:	20000038 	.word	0x20000038
 8009e3c:	20000dd4 	.word	0x20000dd4
 8009e40:	20000e5c 	.word	0x20000e5c
 8009e44:	20000dd8 	.word	0x20000dd8
 8009e48:	20000ddc 	.word	0x20000ddc

08009e4c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e58:	f3ef 8310 	mrs	r3, PRIMASK
 8009e5c:	617b      	str	r3, [r7, #20]
  return(result);
 8009e5e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009e60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e62:	b672      	cpsid	i
}
 8009e64:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f000 f8f6 	bl	800a058 <SEQ_BitPosition>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4a06      	ldr	r2, [pc, #24]	; (8009e8c <UTIL_SEQ_RegTask+0x40>)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	f383 8810 	msr	PRIMASK, r3
}
 8009e82:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009e84:	bf00      	nop
}
 8009e86:	3720      	adds	r7, #32
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000ddc 	.word	0x20000ddc

08009e90 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009ea2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ea4:	b672      	cpsid	i
}
 8009ea6:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009ea8:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <UTIL_SEQ_SetTask+0x50>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	4a0b      	ldr	r2, [pc, #44]	; (8009ee0 <UTIL_SEQ_SetTask+0x50>)
 8009eb2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009eb4:	4a0b      	ldr	r2, [pc, #44]	; (8009ee4 <UTIL_SEQ_SetTask+0x54>)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	4908      	ldr	r1, [pc, #32]	; (8009ee4 <UTIL_SEQ_SetTask+0x54>)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f383 8810 	msr	PRIMASK, r3
}
 8009ed2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009ed4:	bf00      	nop
}
 8009ed6:	371c      	adds	r7, #28
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	20000dcc 	.word	0x20000dcc
 8009ee4:	20000e5c 	.word	0x20000e5c

08009ee8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009ef8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009efa:	b672      	cpsid	i
}
 8009efc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	43da      	mvns	r2, r3
 8009f02:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <UTIL_SEQ_PauseTask+0x3c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4013      	ands	r3, r2
 8009f08:	4a06      	ldr	r2, [pc, #24]	; (8009f24 <UTIL_SEQ_PauseTask+0x3c>)
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f383 8810 	msr	PRIMASK, r3
}
 8009f16:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009f18:	bf00      	nop
}
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	20000038 	.word	0x20000038

08009f28 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f30:	f3ef 8310 	mrs	r3, PRIMASK
 8009f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f36:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f3a:	b672      	cpsid	i
}
 8009f3c:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <UTIL_SEQ_ResumeTask+0x3c>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	4a07      	ldr	r2, [pc, #28]	; (8009f64 <UTIL_SEQ_ResumeTask+0x3c>)
 8009f48:	6013      	str	r3, [r2, #0]
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f383 8810 	msr	PRIMASK, r3
}
 8009f54:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009f56:	bf00      	nop
}
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20000038 	.word	0x20000038

08009f68 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f70:	f3ef 8310 	mrs	r3, PRIMASK
 8009f74:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f76:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009f78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f7a:	b672      	cpsid	i
}
 8009f7c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009f7e:	4b09      	ldr	r3, [pc, #36]	; (8009fa4 <UTIL_SEQ_SetEvt+0x3c>)
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	4a07      	ldr	r2, [pc, #28]	; (8009fa4 <UTIL_SEQ_SetEvt+0x3c>)
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f383 8810 	msr	PRIMASK, r3
}
 8009f94:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009f96:	bf00      	nop
}
 8009f98:	371c      	adds	r7, #28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	20000dd0 	.word	0x20000dd0

08009fa8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009fb0:	4b1f      	ldr	r3, [pc, #124]	; (800a030 <UTIL_SEQ_WaitEvt+0x88>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009fb6:	4b1e      	ldr	r3, [pc, #120]	; (800a030 <UTIL_SEQ_WaitEvt+0x88>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fbe:	d102      	bne.n	8009fc6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]
 8009fc4:	e005      	b.n	8009fd2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009fc6:	4b1a      	ldr	r3, [pc, #104]	; (800a030 <UTIL_SEQ_WaitEvt+0x88>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009fd2:	4b18      	ldr	r3, [pc, #96]	; (800a034 <UTIL_SEQ_WaitEvt+0x8c>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009fd8:	4a16      	ldr	r2, [pc, #88]	; (800a034 <UTIL_SEQ_WaitEvt+0x8c>)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009fde:	e003      	b.n	8009fe8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	69f8      	ldr	r0, [r7, #28]
 8009fe4:	f7f6 fd11 	bl	8000a0a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009fe8:	4b13      	ldr	r3, [pc, #76]	; (800a038 <UTIL_SEQ_WaitEvt+0x90>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0f5      	beq.n	8009fe0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009ff4:	4a0e      	ldr	r2, [pc, #56]	; (800a030 <UTIL_SEQ_WaitEvt+0x88>)
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8009ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 800a000:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a004:	b672      	cpsid	i
}
 800a006:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	43da      	mvns	r2, r3
 800a00c:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <UTIL_SEQ_WaitEvt+0x90>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4013      	ands	r3, r2
 800a012:	4a09      	ldr	r2, [pc, #36]	; (800a038 <UTIL_SEQ_WaitEvt+0x90>)
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f383 8810 	msr	PRIMASK, r3
}
 800a020:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a022:	4a04      	ldr	r2, [pc, #16]	; (800a034 <UTIL_SEQ_WaitEvt+0x8c>)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	6013      	str	r3, [r2, #0]
  return;
 800a028:	bf00      	nop
}
 800a02a:	3720      	adds	r7, #32
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20000dd8 	.word	0x20000dd8
 800a034:	20000dd4 	.word	0x20000dd4
 800a038:	20000dd0 	.word	0x20000dd0

0800a03c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a040:	bf00      	nop
}
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a04a:	b480      	push	{r7}
 800a04c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a04e:	bf00      	nop
}
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	0c1b      	lsrs	r3, r3, #16
 800a06c:	041b      	lsls	r3, r3, #16
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d104      	bne.n	800a07c <SEQ_BitPosition+0x24>
 800a072:	2310      	movs	r3, #16
 800a074:	73fb      	strb	r3, [r7, #15]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	041b      	lsls	r3, r3, #16
 800a07a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d105      	bne.n	800a092 <SEQ_BitPosition+0x3a>
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	3308      	adds	r3, #8
 800a08a:	73fb      	strb	r3, [r7, #15]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	021b      	lsls	r3, r3, #8
 800a090:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d105      	bne.n	800a0a8 <SEQ_BitPosition+0x50>
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	73fb      	strb	r3, [r7, #15]
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	011b      	lsls	r3, r3, #4
 800a0a6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	0f1b      	lsrs	r3, r3, #28
 800a0ac:	4a07      	ldr	r2, [pc, #28]	; (800a0cc <SEQ_BitPosition+0x74>)
 800a0ae:	5cd2      	ldrb	r2, [r2, r3]
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	f1c3 031f 	rsb	r3, r3, #31
 800a0bc:	b2db      	uxtb	r3, r3
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	0800a404 	.word	0x0800a404

0800a0d0 <memset>:
 800a0d0:	4402      	add	r2, r0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d100      	bne.n	800a0da <memset+0xa>
 800a0d8:	4770      	bx	lr
 800a0da:	f803 1b01 	strb.w	r1, [r3], #1
 800a0de:	e7f9      	b.n	800a0d4 <memset+0x4>

0800a0e0 <__libc_init_array>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	4d0d      	ldr	r5, [pc, #52]	; (800a118 <__libc_init_array+0x38>)
 800a0e4:	4c0d      	ldr	r4, [pc, #52]	; (800a11c <__libc_init_array+0x3c>)
 800a0e6:	1b64      	subs	r4, r4, r5
 800a0e8:	10a4      	asrs	r4, r4, #2
 800a0ea:	2600      	movs	r6, #0
 800a0ec:	42a6      	cmp	r6, r4
 800a0ee:	d109      	bne.n	800a104 <__libc_init_array+0x24>
 800a0f0:	4d0b      	ldr	r5, [pc, #44]	; (800a120 <__libc_init_array+0x40>)
 800a0f2:	4c0c      	ldr	r4, [pc, #48]	; (800a124 <__libc_init_array+0x44>)
 800a0f4:	f000 f826 	bl	800a144 <_init>
 800a0f8:	1b64      	subs	r4, r4, r5
 800a0fa:	10a4      	asrs	r4, r4, #2
 800a0fc:	2600      	movs	r6, #0
 800a0fe:	42a6      	cmp	r6, r4
 800a100:	d105      	bne.n	800a10e <__libc_init_array+0x2e>
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	f855 3b04 	ldr.w	r3, [r5], #4
 800a108:	4798      	blx	r3
 800a10a:	3601      	adds	r6, #1
 800a10c:	e7ee      	b.n	800a0ec <__libc_init_array+0xc>
 800a10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a112:	4798      	blx	r3
 800a114:	3601      	adds	r6, #1
 800a116:	e7f2      	b.n	800a0fe <__libc_init_array+0x1e>
 800a118:	0800a414 	.word	0x0800a414
 800a11c:	0800a414 	.word	0x0800a414
 800a120:	0800a414 	.word	0x0800a414
 800a124:	0800a418 	.word	0x0800a418

0800a128 <memcpy>:
 800a128:	440a      	add	r2, r1
 800a12a:	4291      	cmp	r1, r2
 800a12c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a130:	d100      	bne.n	800a134 <memcpy+0xc>
 800a132:	4770      	bx	lr
 800a134:	b510      	push	{r4, lr}
 800a136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a13a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a13e:	4291      	cmp	r1, r2
 800a140:	d1f9      	bne.n	800a136 <memcpy+0xe>
 800a142:	bd10      	pop	{r4, pc}

0800a144 <_init>:
 800a144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a146:	bf00      	nop
 800a148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14a:	bc08      	pop	{r3}
 800a14c:	469e      	mov	lr, r3
 800a14e:	4770      	bx	lr

0800a150 <_fini>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	bf00      	nop
 800a154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a156:	bc08      	pop	{r3}
 800a158:	469e      	mov	lr, r3
 800a15a:	4770      	bx	lr
