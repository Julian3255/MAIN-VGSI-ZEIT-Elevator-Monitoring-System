
EMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1c0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b8  0800e300  0800e300  0001e300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f7b8  0800f7b8  0001f7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f7c0  0800f7c0  0001f7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f7c4  0800f7c4  0001f7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000008  0800f7c8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  20000090  0800f850  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000914  080100d3  00020914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000094c  08010108  0002094c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000019e8  20000960  08010119  00020960  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002348  08010119  00022348  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002095d  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  0002098d  2**0
                  CONTENTS, READONLY
 16 .debug_info   000305a0  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006be5  00000000  00000000  00050f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002bf0  00000000  00000000  00057b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002194  00000000  00000000  0005a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002df6c  00000000  00000000  0005c8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000329e1  00000000  00000000  0008a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000fc4df  00000000  00000000  000bd229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000bf70  00000000  00000000  001b9708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007f  00000000  00000000  001c5678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000960 	.word	0x20000960
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e2e8 	.word	0x0800e2e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000964 	.word	0x20000964
 800017c:	0800e2e8 	.word	0x0800e2e8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b970 	b.w	8000af4 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	460f      	mov	r7, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d14a      	bne.n	80008d2 <__udivmoddi4+0xa6>
 800083c:	428a      	cmp	r2, r1
 800083e:	4694      	mov	ip, r2
 8000840:	d965      	bls.n	800090e <__udivmoddi4+0xe2>
 8000842:	fab2 f382 	clz	r3, r2
 8000846:	b143      	cbz	r3, 800085a <__udivmoddi4+0x2e>
 8000848:	fa02 fc03 	lsl.w	ip, r2, r3
 800084c:	f1c3 0220 	rsb	r2, r3, #32
 8000850:	409f      	lsls	r7, r3
 8000852:	fa20 f202 	lsr.w	r2, r0, r2
 8000856:	4317      	orrs	r7, r2
 8000858:	409c      	lsls	r4, r3
 800085a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800085e:	fa1f f58c 	uxth.w	r5, ip
 8000862:	fbb7 f1fe 	udiv	r1, r7, lr
 8000866:	0c22      	lsrs	r2, r4, #16
 8000868:	fb0e 7711 	mls	r7, lr, r1, r7
 800086c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000870:	fb01 f005 	mul.w	r0, r1, r5
 8000874:	4290      	cmp	r0, r2
 8000876:	d90a      	bls.n	800088e <__udivmoddi4+0x62>
 8000878:	eb1c 0202 	adds.w	r2, ip, r2
 800087c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000880:	f080 811c 	bcs.w	8000abc <__udivmoddi4+0x290>
 8000884:	4290      	cmp	r0, r2
 8000886:	f240 8119 	bls.w	8000abc <__udivmoddi4+0x290>
 800088a:	3902      	subs	r1, #2
 800088c:	4462      	add	r2, ip
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	b2a4      	uxth	r4, r4
 8000892:	fbb2 f0fe 	udiv	r0, r2, lr
 8000896:	fb0e 2210 	mls	r2, lr, r0, r2
 800089a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800089e:	fb00 f505 	mul.w	r5, r0, r5
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	d90a      	bls.n	80008bc <__udivmoddi4+0x90>
 80008a6:	eb1c 0404 	adds.w	r4, ip, r4
 80008aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ae:	f080 8107 	bcs.w	8000ac0 <__udivmoddi4+0x294>
 80008b2:	42a5      	cmp	r5, r4
 80008b4:	f240 8104 	bls.w	8000ac0 <__udivmoddi4+0x294>
 80008b8:	4464      	add	r4, ip
 80008ba:	3802      	subs	r0, #2
 80008bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008c0:	1b64      	subs	r4, r4, r5
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11e      	cbz	r6, 80008ce <__udivmoddi4+0xa2>
 80008c6:	40dc      	lsrs	r4, r3
 80008c8:	2300      	movs	r3, #0
 80008ca:	e9c6 4300 	strd	r4, r3, [r6]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0xbc>
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	f000 80ed 	beq.w	8000ab6 <__udivmoddi4+0x28a>
 80008dc:	2100      	movs	r1, #0
 80008de:	e9c6 0500 	strd	r0, r5, [r6]
 80008e2:	4608      	mov	r0, r1
 80008e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e8:	fab3 f183 	clz	r1, r3
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d149      	bne.n	8000984 <__udivmoddi4+0x158>
 80008f0:	42ab      	cmp	r3, r5
 80008f2:	d302      	bcc.n	80008fa <__udivmoddi4+0xce>
 80008f4:	4282      	cmp	r2, r0
 80008f6:	f200 80f8 	bhi.w	8000aea <__udivmoddi4+0x2be>
 80008fa:	1a84      	subs	r4, r0, r2
 80008fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000900:	2001      	movs	r0, #1
 8000902:	4617      	mov	r7, r2
 8000904:	2e00      	cmp	r6, #0
 8000906:	d0e2      	beq.n	80008ce <__udivmoddi4+0xa2>
 8000908:	e9c6 4700 	strd	r4, r7, [r6]
 800090c:	e7df      	b.n	80008ce <__udivmoddi4+0xa2>
 800090e:	b902      	cbnz	r2, 8000912 <__udivmoddi4+0xe6>
 8000910:	deff      	udf	#255	; 0xff
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8090 	bne.w	8000a3c <__udivmoddi4+0x210>
 800091c:	1a8a      	subs	r2, r1, r2
 800091e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	2101      	movs	r1, #1
 8000928:	fbb2 f5f7 	udiv	r5, r2, r7
 800092c:	fb07 2015 	mls	r0, r7, r5, r2
 8000930:	0c22      	lsrs	r2, r4, #16
 8000932:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000936:	fb0e f005 	mul.w	r0, lr, r5
 800093a:	4290      	cmp	r0, r2
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x124>
 800093e:	eb1c 0202 	adds.w	r2, ip, r2
 8000942:	f105 38ff 	add.w	r8, r5, #4294967295
 8000946:	d202      	bcs.n	800094e <__udivmoddi4+0x122>
 8000948:	4290      	cmp	r0, r2
 800094a:	f200 80cb 	bhi.w	8000ae4 <__udivmoddi4+0x2b8>
 800094e:	4645      	mov	r5, r8
 8000950:	1a12      	subs	r2, r2, r0
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb2 f0f7 	udiv	r0, r2, r7
 8000958:	fb07 2210 	mls	r2, r7, r0, r2
 800095c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000960:	fb0e fe00 	mul.w	lr, lr, r0
 8000964:	45a6      	cmp	lr, r4
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x14e>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x14c>
 8000972:	45a6      	cmp	lr, r4
 8000974:	f200 80bb 	bhi.w	8000aee <__udivmoddi4+0x2c2>
 8000978:	4610      	mov	r0, r2
 800097a:	eba4 040e 	sub.w	r4, r4, lr
 800097e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000982:	e79f      	b.n	80008c4 <__udivmoddi4+0x98>
 8000984:	f1c1 0720 	rsb	r7, r1, #32
 8000988:	408b      	lsls	r3, r1
 800098a:	fa22 fc07 	lsr.w	ip, r2, r7
 800098e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000992:	fa05 f401 	lsl.w	r4, r5, r1
 8000996:	fa20 f307 	lsr.w	r3, r0, r7
 800099a:	40fd      	lsrs	r5, r7
 800099c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009a0:	4323      	orrs	r3, r4
 80009a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009a6:	fa1f fe8c 	uxth.w	lr, ip
 80009aa:	fb09 5518 	mls	r5, r9, r8, r5
 80009ae:	0c1c      	lsrs	r4, r3, #16
 80009b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009b4:	fb08 f50e 	mul.w	r5, r8, lr
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	fa02 f201 	lsl.w	r2, r2, r1
 80009be:	fa00 f001 	lsl.w	r0, r0, r1
 80009c2:	d90b      	bls.n	80009dc <__udivmoddi4+0x1b0>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009cc:	f080 8088 	bcs.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d0:	42a5      	cmp	r5, r4
 80009d2:	f240 8085 	bls.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d6:	f1a8 0802 	sub.w	r8, r8, #2
 80009da:	4464      	add	r4, ip
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	b29d      	uxth	r5, r3
 80009e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009e4:	fb09 4413 	mls	r4, r9, r3, r4
 80009e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x1da>
 80009f4:	eb1c 0404 	adds.w	r4, ip, r4
 80009f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009fc:	d26c      	bcs.n	8000ad8 <__udivmoddi4+0x2ac>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	d96a      	bls.n	8000ad8 <__udivmoddi4+0x2ac>
 8000a02:	3b02      	subs	r3, #2
 8000a04:	4464      	add	r4, ip
 8000a06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a0e:	eba4 040e 	sub.w	r4, r4, lr
 8000a12:	42ac      	cmp	r4, r5
 8000a14:	46c8      	mov	r8, r9
 8000a16:	46ae      	mov	lr, r5
 8000a18:	d356      	bcc.n	8000ac8 <__udivmoddi4+0x29c>
 8000a1a:	d053      	beq.n	8000ac4 <__udivmoddi4+0x298>
 8000a1c:	b156      	cbz	r6, 8000a34 <__udivmoddi4+0x208>
 8000a1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a22:	eb64 040e 	sbc.w	r4, r4, lr
 8000a26:	fa04 f707 	lsl.w	r7, r4, r7
 8000a2a:	40ca      	lsrs	r2, r1
 8000a2c:	40cc      	lsrs	r4, r1
 8000a2e:	4317      	orrs	r7, r2
 8000a30:	e9c6 7400 	strd	r7, r4, [r6]
 8000a34:	4618      	mov	r0, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3c:	f1c3 0120 	rsb	r1, r3, #32
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	fa20 f201 	lsr.w	r2, r0, r1
 8000a48:	fa25 f101 	lsr.w	r1, r5, r1
 8000a4c:	409d      	lsls	r5, r3
 8000a4e:	432a      	orrs	r2, r5
 8000a50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a60:	0c11      	lsrs	r1, r2, #16
 8000a62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a66:	fb00 f50e 	mul.w	r5, r0, lr
 8000a6a:	428d      	cmp	r5, r1
 8000a6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x258>
 8000a72:	eb1c 0101 	adds.w	r1, ip, r1
 8000a76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a7a:	d22f      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000a7c:	428d      	cmp	r5, r1
 8000a7e:	d92d      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000a80:	3802      	subs	r0, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1b49      	subs	r1, r1, r5
 8000a86:	b292      	uxth	r2, r2
 8000a88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a94:	fb05 f10e 	mul.w	r1, r5, lr
 8000a98:	4291      	cmp	r1, r2
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x282>
 8000a9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aa4:	d216      	bcs.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aa6:	4291      	cmp	r1, r2
 8000aa8:	d914      	bls.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aaa:	3d02      	subs	r5, #2
 8000aac:	4462      	add	r2, ip
 8000aae:	1a52      	subs	r2, r2, r1
 8000ab0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ab4:	e738      	b.n	8000928 <__udivmoddi4+0xfc>
 8000ab6:	4631      	mov	r1, r6
 8000ab8:	4630      	mov	r0, r6
 8000aba:	e708      	b.n	80008ce <__udivmoddi4+0xa2>
 8000abc:	4639      	mov	r1, r7
 8000abe:	e6e6      	b.n	800088e <__udivmoddi4+0x62>
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	e6fb      	b.n	80008bc <__udivmoddi4+0x90>
 8000ac4:	4548      	cmp	r0, r9
 8000ac6:	d2a9      	bcs.n	8000a1c <__udivmoddi4+0x1f0>
 8000ac8:	ebb9 0802 	subs.w	r8, r9, r2
 8000acc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	e7a3      	b.n	8000a1c <__udivmoddi4+0x1f0>
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	e7ea      	b.n	8000aae <__udivmoddi4+0x282>
 8000ad8:	462b      	mov	r3, r5
 8000ada:	e794      	b.n	8000a06 <__udivmoddi4+0x1da>
 8000adc:	4640      	mov	r0, r8
 8000ade:	e7d1      	b.n	8000a84 <__udivmoddi4+0x258>
 8000ae0:	46d0      	mov	r8, sl
 8000ae2:	e77b      	b.n	80009dc <__udivmoddi4+0x1b0>
 8000ae4:	3d02      	subs	r5, #2
 8000ae6:	4462      	add	r2, ip
 8000ae8:	e732      	b.n	8000950 <__udivmoddi4+0x124>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e70a      	b.n	8000904 <__udivmoddi4+0xd8>
 8000aee:	4464      	add	r4, ip
 8000af0:	3802      	subs	r0, #2
 8000af2:	e742      	b.n	800097a <__udivmoddi4+0x14e>

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b06:	4905      	ldr	r1, [pc, #20]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	58000800 	.word	0x58000800

08000b20 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b44:	68fb      	ldr	r3, [r7, #12]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b72:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b8e:	f003 f865 	bl	8003c5c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b92:	f003 f869 	bl	8003c68 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b9a:	f7ff ffad 	bl	8000af8 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000b9e:	f00a fa47 	bl	800b030 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000ba2:	f000 f821 	bl	8000be8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000ba6:	f000 f8c1 	bl	8000d2c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000baa:	bf00      	nop
}
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <APPD_EnableCPU2+0x34>)
 8000bb8:	1d3c      	adds	r4, r7, #4
 8000bba:	461d      	mov	r5, r3
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc4:	c403      	stmia	r4!, {r0, r1}
 8000bc6:	8022      	strh	r2, [r4, #0]
 8000bc8:	3402      	adds	r4, #2
 8000bca:	0c13      	lsrs	r3, r2, #16
 8000bcc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bce:	f00a f96b 	bl	800aea8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f009 fc06 	bl	800a3e6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bda:	bf00      	nop
}
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	0800e300 	.word	0x0800e300

08000be8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	77fb      	strb	r3, [r7, #31]
 8000c0c:	e036      	b.n	8000c7c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c0e:	7ffb      	ldrb	r3, [r7, #31]
 8000c10:	4a43      	ldr	r2, [pc, #268]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4413      	add	r3, r2
 8000c16:	799b      	ldrb	r3, [r3, #6]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d02c      	beq.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c1c:	7ffb      	ldrb	r3, [r7, #31]
 8000c1e:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c24:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d01b      	beq.n	8000c62 <APPD_SetCPU2GpioConfig+0x7a>
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d821      	bhi.n	8000c74 <APPD_SetCPU2GpioConfig+0x8c>
 8000c30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c34:	d003      	beq.n	8000c3e <APPD_SetCPU2GpioConfig+0x56>
 8000c36:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d009      	beq.n	8000c50 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c3c:	e01a      	b.n	8000c74 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4413      	add	r3, r2
 8000c46:	889a      	ldrh	r2, [r3, #4]
 8000c48:	8bbb      	ldrh	r3, [r7, #28]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	83bb      	strh	r3, [r7, #28]
          break;
 8000c4e:	e012      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4413      	add	r3, r2
 8000c58:	889a      	ldrh	r2, [r3, #4]
 8000c5a:	8b7b      	ldrh	r3, [r7, #26]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	837b      	strh	r3, [r7, #26]
          break;
 8000c60:	e009      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c62:	7ffb      	ldrb	r3, [r7, #31]
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4413      	add	r3, r2
 8000c6a:	889a      	ldrh	r2, [r3, #4]
 8000c6c:	8b3b      	ldrh	r3, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	833b      	strh	r3, [r7, #24]
          break;
 8000c72:	e000      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c74:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c76:	7ffb      	ldrb	r3, [r7, #31]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	77fb      	strb	r3, [r7, #31]
 8000c7c:	7ffb      	ldrb	r3, [r7, #31]
 8000c7e:	2b25      	cmp	r3, #37	; 0x25
 8000c80:	d9c5      	bls.n	8000c0e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c8e:	8bbb      	ldrh	r3, [r7, #28]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d014      	beq.n	8000cbe <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000c94:	8bbb      	ldrh	r3, [r7, #28]
 8000c96:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff41 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ff57 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f003 fcae 	bl	800460c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cb0:	8bbb      	ldrh	r3, [r7, #28]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f003 fe2f 	bl	800491c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cbe:	8b7b      	ldrh	r3, [r7, #26]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d012      	beq.n	8000cea <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cc4:	8b7b      	ldrh	r3, [r7, #26]
 8000cc6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f7ff ff29 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f7ff ff3f 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000cda:	f003 fc97 	bl	800460c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cde:	8b7b      	ldrh	r3, [r7, #26]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000ce6:	f003 fe19 	bl	800491c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cea:	8b3b      	ldrh	r3, [r7, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000cf0:	8b3b      	ldrh	r3, [r7, #24]
 8000cf2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f7ff ff13 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000cfa:	2004      	movs	r0, #4
 8000cfc:	f7ff ff29 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d06:	f003 fc81 	bl	800460c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d0a:	8b3b      	ldrh	r3, [r7, #24]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d12:	f003 fe03 	bl	800491c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
}
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	0800f514 	.word	0x0800f514
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000400 	.word	0x48000400

08000d2c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d30:	bf00      	nop
}
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d3e:	f001 fc55 	bl	80025ec <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d42:	bf00      	nop
}
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d54:	897a      	ldrh	r2, [r7, #10]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f001 f9e2 	bl	8002124 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d60:	bf00      	nop
}
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d76:	f023 0207 	bic.w	r2, r3, #7
 8000d7a:	4905      	ldr	r1, [pc, #20]	; (8000d90 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	58000400 	.word	0x58000400

08000d94 <LL_EXTI_EnableIT_32_63>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000da2:	4905      	ldr	r1, [pc, #20]	; (8000db8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58000800 	.word	0x58000800

08000dbc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dd6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000de2:	4313      	orrs	r3, r2
 8000de4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	cafecafe 	.word	0xcafecafe

08000df8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e78:	d101      	bne.n	8000e7e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e9e:	d101      	bne.n	8000ea4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <LL_AHB3_GRP1_EnableClock>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <LL_DBGMCU_GetDeviceID+0x18>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e0042000 	.word	0xe0042000

08000f00 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <LL_DBGMCU_GetRevisionID+0x18>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	0c1b      	lsrs	r3, r3, #16
 8000f0a:	b29b      	uxth	r3, r3
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e0042000 	.word	0xe0042000

08000f1c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	605a      	str	r2, [r3, #4]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	605a      	str	r2, [r3, #4]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	615a      	str	r2, [r3, #20]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	615a      	str	r2, [r3, #20]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	609a      	str	r2, [r3, #8]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	619a      	str	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <LL_LPM_EnableSleep+0x1c>)
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <LL_LPM_EnableSleep+0x1c>)
 8000fea:	f023 0304 	bic.w	r3, r3, #4
 8000fee:	6113      	str	r3, [r2, #16]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	22ff      	movs	r2, #255	; 0xff
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	22ca      	movs	r2, #202	; 0xca
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2253      	movs	r2, #83	; 0x53
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f023 0207 	bic.w	r2, r3, #7
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <MX_APPE_Config+0x18>)
 8001066:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800106a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800106c:	f000 f826 	bl	80010bc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001070:	f000 f866 	bl	8001140 <Config_HSE>

  return;
 8001074:	bf00      	nop
}
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58004000 	.word	0x58004000

0800107c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001080:	f000 f872 	bl	8001168 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001084:	f000 f88a 	bl	800119c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001088:	4904      	ldr	r1, [pc, #16]	; (800109c <MX_APPE_Init+0x20>)
 800108a:	2000      	movs	r0, #0
 800108c:	f000 fe58 	bl	8001d40 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  // Call to APPD_Init function.
  APPD_Init();
 8001090:	f7ff fd7b 	bl	8000b8a <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001094:	f000 f890 	bl	80011b8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001098:	bf00      	nop
}
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20002000 	.word	0x20002000

080010a0 <Init_Smps>:

void Init_Smps(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80010a4:	bf00      	nop
}
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <Init_Exti>:

void Init_Exti(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80010b2:	2050      	movs	r0, #80	; 0x50
 80010b4:	f7ff fe6e 	bl	8000d94 <LL_EXTI_EnableIT_32_63>

  return;
 80010b8:	bf00      	nop
}
 80010ba:	bd80      	pop	{r7, pc}

080010bc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80010c0:	f000 f804 	bl	80010cc <Reset_BackupDomain>

  Reset_IPCC();
 80010c4:	f000 f81a 	bl	80010fc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010c8:	bf00      	nop
}
 80010ca:	bd80      	pop	{r7, pc}

080010cc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80010d0:	f7ff fec8 	bl	8000e64 <LL_RCC_IsActiveFlag_PINRST>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00d      	beq.n	80010f6 <Reset_BackupDomain+0x2a>
 80010da:	f7ff fed6 	bl	8000e8a <LL_RCC_IsActiveFlag_SFTRST>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d108      	bne.n	80010f6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80010e4:	f003 fcf6 	bl	8004ad4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80010e8:	f003 fcf4 	bl	8004ad4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80010ec:	f7ff fe98 	bl	8000e20 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80010f0:	f7ff fea7 	bl	8000e42 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
}
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001100:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001104:	f7ff fed4 	bl	8000eb0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001108:	213f      	movs	r1, #63	; 0x3f
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <Reset_IPCC+0x40>)
 800110c:	f7ff ff4c 	bl	8000fa8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001110:	213f      	movs	r1, #63	; 0x3f
 8001112:	480a      	ldr	r0, [pc, #40]	; (800113c <Reset_IPCC+0x40>)
 8001114:	f7ff ff56 	bl	8000fc4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001118:	213f      	movs	r1, #63	; 0x3f
 800111a:	4808      	ldr	r0, [pc, #32]	; (800113c <Reset_IPCC+0x40>)
 800111c:	f7ff fefe 	bl	8000f1c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001120:	213f      	movs	r1, #63	; 0x3f
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <Reset_IPCC+0x40>)
 8001124:	f7ff ff1d 	bl	8000f62 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001128:	213f      	movs	r1, #63	; 0x3f
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <Reset_IPCC+0x40>)
 800112c:	f7ff ff08 	bl	8000f40 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001130:	213f      	movs	r1, #63	; 0x3f
 8001132:	4802      	ldr	r0, [pc, #8]	; (800113c <Reset_IPCC+0x40>)
 8001134:	f7ff ff27 	bl	8000f86 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001138:	bf00      	nop
}
 800113a:	bd80      	pop	{r7, pc}
 800113c:	58000c00 	.word	0x58000c00

08001140 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001146:	2000      	movs	r0, #0
 8001148:	f009 fff0 	bl	800b12c <OTP_Read>
 800114c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	799b      	ldrb	r3, [r3, #6]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fe2f 	bl	8000dbc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800115e:	bf00      	nop
 8001160:	bf00      	nop
}
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <System_Init>:

static void System_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  Init_Smps();
 800116c:	f7ff ff98 	bl	80010a0 <Init_Smps>

  Init_Exti();
 8001170:	f7ff ff9d 	bl	80010ae <Init_Exti>

  Init_Rtc();
 8001174:	f000 f802 	bl	800117c <Init_Rtc>

  return;
 8001178:	bf00      	nop
}
 800117a:	bd80      	pop	{r7, pc}

0800117c <Init_Rtc>:

static void Init_Rtc(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <Init_Rtc+0x1c>)
 8001182:	f7ff ff4a 	bl	800101a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001186:	2100      	movs	r1, #0
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <Init_Rtc+0x1c>)
 800118a:	f7ff ff56 	bl	800103a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800118e:	4802      	ldr	r0, [pc, #8]	; (8001198 <Init_Rtc+0x1c>)
 8001190:	f7ff ff36 	bl	8001000 <LL_RTC_EnableWriteProtection>

  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40002800 	.word	0x40002800

0800119c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011a4:	f7ff fe28 	bl	8000df8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011a8:	f00b fe56 	bl	800ce58 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011ac:	2004      	movs	r0, #4
 80011ae:	f7ff fddb 	bl	8000d68 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011b2:	bf00      	nop
}
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80011be:	f009 fcbd 	bl	800ab3c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <appe_Tl_Init+0x50>)
 80011c4:	2100      	movs	r1, #0
 80011c6:	2008      	movs	r0, #8
 80011c8:	f00b ff84 	bl	800d0d4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <appe_Tl_Init+0x54>)
 80011ce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <appe_Tl_Init+0x58>)
 80011d2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	480e      	ldr	r0, [pc, #56]	; (8001214 <appe_Tl_Init+0x5c>)
 80011da:	f009 fb75 	bl	800a8c8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <appe_Tl_Init+0x60>)
 80011e0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <appe_Tl_Init+0x64>)
 80011e4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <appe_Tl_Init+0x68>)
 80011e8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011ea:	f240 533c 	movw	r3, #1340	; 0x53c
 80011ee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4618      	mov	r0, r3
 80011f6:	f009 fde3 	bl	800adc0 <TL_MM_Init>

  TL_Enable();
 80011fa:	f009 fc99 	bl	800ab30 <TL_Enable>

  return;
 80011fe:	bf00      	nop
}
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	0800a901 	.word	0x0800a901
 800120c:	200005e0 	.word	0x200005e0
 8001210:	08001225 	.word	0x08001225
 8001214:	0800123d 	.word	0x0800123d
 8001218:	200007f8 	.word	0x200007f8
 800121c:	200006ec 	.word	0x200006ec
 8001220:	200000a4 	.word	0x200000a4

08001224 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800122e:	bf00      	nop
}
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	330b      	adds	r3, #11
 800124a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001256:	2b07      	cmp	r3, #7
 8001258:	d860      	bhi.n	800131c <APPE_SysUserEvtRx+0xe0>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <APPE_SysUserEvtRx+0x24>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001281 	.word	0x08001281
 8001264:	080012c3 	.word	0x080012c3
 8001268:	080012d1 	.word	0x080012d1
 800126c:	0800131d 	.word	0x0800131d
 8001270:	080012ed 	.word	0x080012ed
 8001274:	080012fd 	.word	0x080012fd
 8001278:	08001305 	.word	0x08001305
 800127c:	08001315 	.word	0x08001315
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4618      	mov	r0, r3
 8001286:	f009 f8db 	bl	800a440 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800128a:	7b3b      	ldrb	r3, [r7, #12]
 800128c:	4619      	mov	r1, r3
 800128e:	7b7b      	ldrb	r3, [r7, #13]
 8001290:	461a      	mov	r2, r3
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	4824      	ldr	r0, [pc, #144]	; (8001328 <APPE_SysUserEvtRx+0xec>)
 8001296:	f00c f90f 	bl	800d4b8 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800129a:	7c3b      	ldrb	r3, [r7, #16]
 800129c:	4619      	mov	r1, r3
 800129e:	4823      	ldr	r0, [pc, #140]	; (800132c <APPE_SysUserEvtRx+0xf0>)
 80012a0:	f00c f90a 	bl	800d4b8 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012a4:	7dbb      	ldrb	r3, [r7, #22]
 80012a6:	4619      	mov	r1, r3
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	461a      	mov	r2, r3
 80012ac:	7e3b      	ldrb	r3, [r7, #24]
 80012ae:	4820      	ldr	r0, [pc, #128]	; (8001330 <APPE_SysUserEvtRx+0xf4>)
 80012b0:	f00c f902 	bl	800d4b8 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012b4:	481f      	ldr	r0, [pc, #124]	; (8001334 <APPE_SysUserEvtRx+0xf8>)
 80012b6:	f00c f8ff 	bl	800d4b8 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f870 	bl	80013a0 <APPE_SysEvtReadyProcessing>
    break;
 80012c0:	e02d      	b.n	800131e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012c2:	481d      	ldr	r0, [pc, #116]	; (8001338 <APPE_SysUserEvtRx+0xfc>)
 80012c4:	f00c f8f8 	bl	800d4b8 <iprintf>
    APPE_SysEvtError(pPayload);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f843 	bl	8001354 <APPE_SysEvtError>
    break;
 80012ce:	e026      	b.n	800131e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80012d0:	481a      	ldr	r0, [pc, #104]	; (800133c <APPE_SysUserEvtRx+0x100>)
 80012d2:	f00c f95f 	bl	800d594 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80012da:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <APPE_SysUserEvtRx+0x104>)
 80012e6:	f00c f8e7 	bl	800d4b8 <iprintf>
    break;
 80012ea:	e018      	b.n	800131e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <APPE_SysUserEvtRx+0x108>)
 80012f6:	f00c f8df 	bl	800d4b8 <iprintf>
    break;
 80012fa:	e010      	b.n	800131e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80012fc:	4812      	ldr	r0, [pc, #72]	; (8001348 <APPE_SysUserEvtRx+0x10c>)
 80012fe:	f00c f8db 	bl	800d4b8 <iprintf>
    break;
 8001302:	e00c      	b.n	800131e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <APPE_SysUserEvtRx+0x110>)
 800130e:	f00c f8d3 	bl	800d4b8 <iprintf>
    break;
 8001312:	e004      	b.n	800131e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001314:	480e      	ldr	r0, [pc, #56]	; (8001350 <APPE_SysUserEvtRx+0x114>)
 8001316:	f00c f8cf 	bl	800d4b8 <iprintf>
    break;
 800131a:	e000      	b.n	800131e <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 800131c:	bf00      	nop
  }

  return;
 800131e:	bf00      	nop
}
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	0800e31c 	.word	0x0800e31c
 800132c:	0800e340 	.word	0x0800e340
 8001330:	0800e35c 	.word	0x0800e35c
 8001334:	0800e374 	.word	0x0800e374
 8001338:	0800e394 	.word	0x0800e394
 800133c:	0800e3b8 	.word	0x0800e3b8
 8001340:	0800e408 	.word	0x0800e408
 8001344:	0800e430 	.word	0x0800e430
 8001348:	0800e46c 	.word	0x0800e46c
 800134c:	0800e490 	.word	0x0800e490
 8001350:	0800e4cc 	.word	0x0800e4cc

08001354 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	330b      	adds	r3, #11
 8001362:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3302      	adds	r3, #2
 8001368:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <APPE_SysEvtError+0x40>)
 8001372:	f00c f8a1 	bl	800d4b8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <APPE_SysEvtError+0x44>)
 8001380:	f00c f908 	bl	800d594 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001384:	e003      	b.n	800138e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <APPE_SysEvtError+0x48>)
 8001388:	f00c f904 	bl	800d594 <puts>
  return;
 800138c:	bf00      	nop
}
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	0800e4f0 	.word	0x0800e4f0
 8001398:	0800e520 	.word	0x0800e520
 800139c:	0800e55c 	.word	0x0800e55c

080013a0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	330b      	adds	r3, #11
 80013c4:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3302      	adds	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d128      	bne.n	8001426 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80013d4:	481d      	ldr	r0, [pc, #116]	; (800144c <APPE_SysEvtReadyProcessing+0xac>)
 80013d6:	f00c f8dd 	bl	800d594 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80013da:	f7ff fbe9 	bl	8000bb0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80013de:	230f      	movs	r3, #15
 80013e0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80013e2:	237f      	movs	r3, #127	; 0x7f
 80013e4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80013e6:	f7ff fd8b 	bl	8000f00 <LL_DBGMCU_GetRevisionID>
 80013ea:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80013ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ee:	4818      	ldr	r0, [pc, #96]	; (8001450 <APPE_SysEvtReadyProcessing+0xb0>)
 80013f0:	f00c f862 	bl	800d4b8 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80013fa:	f7ff fd73 	bl	8000ee4 <LL_DBGMCU_GetDeviceID>
 80013fe:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001400:	6a39      	ldr	r1, [r7, #32]
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <APPE_SysEvtReadyProcessing+0xb4>)
 8001404:	f00c f858 	bl	800d4b8 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	b29b      	uxth	r3, r3
 800140c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	4618      	mov	r0, r3
 8001414:	f008 fffe 	bl	800a414 <SHCI_C2_Config>

    APP_BLE_Init();
 8001418:	f00a fb94 	bl	800bb44 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800141c:	2100      	movs	r1, #0
 800141e:	2001      	movs	r0, #1
 8001420:	f00b fd2c 	bl	800ce7c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001424:	e00e      	b.n	8001444 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d106      	bne.n	800143c <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <APPE_SysEvtReadyProcessing+0xb8>)
 8001430:	f00c f842 	bl	800d4b8 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
  return;
 800143a:	e003      	b.n	8001444 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <APPE_SysEvtReadyProcessing+0xbc>)
 800143e:	f00c f83b 	bl	800d4b8 <iprintf>
  return;
 8001442:	bf00      	nop
}
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	0800e594 	.word	0x0800e594
 8001450:	0800e5b0 	.word	0x0800e5b0
 8001454:	0800e5d4 	.word	0x0800e5d4
 8001458:	0800e5f4 	.word	0x0800e5f4
 800145c:	0800e628 	.word	0x0800e628

08001460 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f002 fbd4 	bl	8003c14 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d00a      	beq.n	8001490 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800147a:	f002 fbe3 	bl	8003c44 <HAL_GetTickFreq>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001488:	e002      	b.n	8001490 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800148a:	f7ff fda9 	bl	8000fe0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800148e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001490:	f002 fbc0 	bl	8003c14 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f4      	bhi.n	800148a <HAL_Delay+0x2a>
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <UTIL_SEQ_Idle>:

  /* USER CODE END MX_APPE_Process_2 */
}

void UTIL_SEQ_Idle(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80014ae:	bf00      	nop
}
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014c2:	f04f 30ff 	mov.w	r0, #4294967295
 80014c6:	f00b fd09 	bl	800cedc <UTIL_SEQ_Run>

  return;
 80014ca:	bf00      	nop
}
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80014da:	2100      	movs	r1, #0
 80014dc:	2008      	movs	r0, #8
 80014de:	f00b fe1b 	bl	800d118 <UTIL_SEQ_SetTask>
  return;
 80014e2:	bf00      	nop
}
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80014f2:	2002      	movs	r0, #2
 80014f4:	f00b fe7c 	bl	800d1f0 <UTIL_SEQ_SetEvt>
  return;
 80014f8:	bf00      	nop
}
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001508:	2002      	movs	r0, #2
 800150a:	f00b fe91 	bl	800d230 <UTIL_SEQ_WaitEvt>
  return;
 800150e:	bf00      	nop
}
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <LL_EXTI_EnableIT_0_31>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <LL_EXTI_EnableIT_0_31+0x24>)
 8001522:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001526:	4905      	ldr	r1, [pc, #20]	; (800153c <LL_EXTI_EnableIT_0_31+0x24>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4313      	orrs	r3, r2
 800152c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	58000800 	.word	0x58000800

08001540 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4904      	ldr	r1, [pc, #16]	; (8001560 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]

}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	58000800 	.word	0x58000800

08001564 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <ReadRtcSsrValue+0x3c>)
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	b29b      	uxth	r3, r3
 8001570:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <ReadRtcSsrValue+0x3c>)
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	b29b      	uxth	r3, r3
 8001578:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800157a:	e005      	b.n	8001588 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <ReadRtcSsrValue+0x3c>)
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	b29b      	uxth	r3, r3
 8001586:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d1f5      	bne.n	800157c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001590:	683b      	ldr	r3, [r7, #0]
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40002800 	.word	0x40002800

080015a4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80015b4:	79ba      	ldrb	r2, [r7, #6]
 80015b6:	491d      	ldr	r1, [pc, #116]	; (800162c <LinkTimerAfter+0x88>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	3315      	adds	r3, #21
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d009      	beq.n	80015e2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	4916      	ldr	r1, [pc, #88]	; (800162c <LinkTimerAfter+0x88>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	3314      	adds	r3, #20
 80015de:	79fa      	ldrb	r2, [r7, #7]
 80015e0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	4911      	ldr	r1, [pc, #68]	; (800162c <LinkTimerAfter+0x88>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	3315      	adds	r3, #21
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <LinkTimerAfter+0x88>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	3314      	adds	r3, #20
 8001606:	79ba      	ldrb	r2, [r7, #6]
 8001608:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800160a:	79ba      	ldrb	r2, [r7, #6]
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <LinkTimerAfter+0x88>)
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	3315      	adds	r3, #21
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	701a      	strb	r2, [r3, #0]

  return;
 800161e:	bf00      	nop
}
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000097c 	.word	0x2000097c

08001630 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	460a      	mov	r2, r1
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	4613      	mov	r3, r2
 800163e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <LinkTimerBefore+0xb8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	79ba      	ldrb	r2, [r7, #6]
 8001648:	429a      	cmp	r2, r3
 800164a:	d032      	beq.n	80016b2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800164c:	79ba      	ldrb	r2, [r7, #6]
 800164e:	4927      	ldr	r1, [pc, #156]	; (80016ec <LinkTimerBefore+0xbc>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3314      	adds	r3, #20
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	4922      	ldr	r1, [pc, #136]	; (80016ec <LinkTimerBefore+0xbc>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3315      	adds	r3, #21
 8001670:	79fa      	ldrb	r2, [r7, #7]
 8001672:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	491d      	ldr	r1, [pc, #116]	; (80016ec <LinkTimerBefore+0xbc>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	3315      	adds	r3, #21
 8001684:	79ba      	ldrb	r2, [r7, #6]
 8001686:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	4918      	ldr	r1, [pc, #96]	; (80016ec <LinkTimerBefore+0xbc>)
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	3314      	adds	r3, #20
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800169c:	79ba      	ldrb	r2, [r7, #6]
 800169e:	4913      	ldr	r1, [pc, #76]	; (80016ec <LinkTimerBefore+0xbc>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3314      	adds	r3, #20
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80016b0:	e014      	b.n	80016dc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80016b2:	79fa      	ldrb	r2, [r7, #7]
 80016b4:	490d      	ldr	r1, [pc, #52]	; (80016ec <LinkTimerBefore+0xbc>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3315      	adds	r3, #21
 80016c2:	79ba      	ldrb	r2, [r7, #6]
 80016c4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80016c6:	79ba      	ldrb	r2, [r7, #6]
 80016c8:	4908      	ldr	r1, [pc, #32]	; (80016ec <LinkTimerBefore+0xbc>)
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3314      	adds	r3, #20
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	701a      	strb	r2, [r3, #0]
  return;
 80016da:	bf00      	nop
}
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000a0c 	.word	0x20000a0c
 80016ec:	2000097c 	.word	0x2000097c

080016f0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016fa:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <linkTimer+0x144>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b06      	cmp	r3, #6
 8001702:	d118      	bne.n	8001736 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <linkTimer+0x144>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <linkTimer+0x148>)
 800170c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800170e:	4a49      	ldr	r2, [pc, #292]	; (8001834 <linkTimer+0x144>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001714:	79fa      	ldrb	r2, [r7, #7]
 8001716:	4949      	ldr	r1, [pc, #292]	; (800183c <linkTimer+0x14c>)
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	3315      	adds	r3, #21
 8001724:	2206      	movs	r2, #6
 8001726:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001728:	4b45      	ldr	r3, [pc, #276]	; (8001840 <linkTimer+0x150>)
 800172a:	f04f 32ff 	mov.w	r2, #4294967295
 800172e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	81fb      	strh	r3, [r7, #14]
 8001734:	e078      	b.n	8001828 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001736:	f000 f909 	bl	800194c <ReturnTimeElapsed>
 800173a:	4603      	mov	r3, r0
 800173c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	493e      	ldr	r1, [pc, #248]	; (800183c <linkTimer+0x14c>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3308      	adds	r3, #8
 800174e:	6819      	ldr	r1, [r3, #0]
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4419      	add	r1, r3
 8001756:	4839      	ldr	r0, [pc, #228]	; (800183c <linkTimer+0x14c>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4403      	add	r3, r0
 8001762:	3308      	adds	r3, #8
 8001764:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001766:	79fa      	ldrb	r2, [r7, #7]
 8001768:	4934      	ldr	r1, [pc, #208]	; (800183c <linkTimer+0x14c>)
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	3308      	adds	r3, #8
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <linkTimer+0x144>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	4a2e      	ldr	r2, [pc, #184]	; (800183c <linkTimer+0x14c>)
 8001784:	460b      	mov	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	440b      	add	r3, r1
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	3308      	adds	r3, #8
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	429a      	cmp	r2, r3
 8001796:	d337      	bcc.n	8001808 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <linkTimer+0x144>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800179e:	7b7a      	ldrb	r2, [r7, #13]
 80017a0:	4926      	ldr	r1, [pc, #152]	; (800183c <linkTimer+0x14c>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	3315      	adds	r3, #21
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80017b2:	e013      	b.n	80017dc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80017b4:	7b7a      	ldrb	r2, [r7, #13]
 80017b6:	4921      	ldr	r1, [pc, #132]	; (800183c <linkTimer+0x14c>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3315      	adds	r3, #21
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80017c8:	7b7a      	ldrb	r2, [r7, #13]
 80017ca:	491c      	ldr	r1, [pc, #112]	; (800183c <linkTimer+0x14c>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3315      	adds	r3, #21
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80017dc:	7b3b      	ldrb	r3, [r7, #12]
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d00b      	beq.n	80017fa <linkTimer+0x10a>
 80017e2:	7b3a      	ldrb	r2, [r7, #12]
 80017e4:	4915      	ldr	r1, [pc, #84]	; (800183c <linkTimer+0x14c>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3308      	adds	r3, #8
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d2dc      	bcs.n	80017b4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80017fa:	7b7a      	ldrb	r2, [r7, #13]
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fecf 	bl	80015a4 <LinkTimerAfter>
 8001806:	e00f      	b.n	8001828 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <linkTimer+0x144>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff0c 	bl	8001630 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <linkTimer+0x144>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <linkTimer+0x148>)
 8001820:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <linkTimer+0x144>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001828:	89fb      	ldrh	r3, [r7, #14]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000a0c 	.word	0x20000a0c
 8001838:	20000a0d 	.word	0x20000a0d
 800183c:	2000097c 	.word	0x2000097c
 8001840:	20000a10 	.word	0x20000a10

08001844 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <UnlinkTimer+0xf8>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	429a      	cmp	r2, r3
 800185e:	d111      	bne.n	8001884 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <UnlinkTimer+0xf8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <UnlinkTimer+0xfc>)
 8001868:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	4935      	ldr	r1, [pc, #212]	; (8001944 <UnlinkTimer+0x100>)
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3315      	adds	r3, #21
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b2f      	ldr	r3, [pc, #188]	; (800193c <UnlinkTimer+0xf8>)
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e03e      	b.n	8001902 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	492f      	ldr	r1, [pc, #188]	; (8001944 <UnlinkTimer+0x100>)
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	3314      	adds	r3, #20
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001898:	79fa      	ldrb	r2, [r7, #7]
 800189a:	492a      	ldr	r1, [pc, #168]	; (8001944 <UnlinkTimer+0x100>)
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3315      	adds	r3, #21
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80018ac:	79f9      	ldrb	r1, [r7, #7]
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	4824      	ldr	r0, [pc, #144]	; (8001944 <UnlinkTimer+0x100>)
 80018b2:	460b      	mov	r3, r1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	440b      	add	r3, r1
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4403      	add	r3, r0
 80018bc:	3315      	adds	r3, #21
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b2d8      	uxtb	r0, r3
 80018c2:	4920      	ldr	r1, [pc, #128]	; (8001944 <UnlinkTimer+0x100>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3315      	adds	r3, #21
 80018d0:	4602      	mov	r2, r0
 80018d2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d013      	beq.n	8001902 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80018da:	79f9      	ldrb	r1, [r7, #7]
 80018dc:	7bba      	ldrb	r2, [r7, #14]
 80018de:	4819      	ldr	r0, [pc, #100]	; (8001944 <UnlinkTimer+0x100>)
 80018e0:	460b      	mov	r3, r1
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	440b      	add	r3, r1
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4403      	add	r3, r0
 80018ea:	3314      	adds	r3, #20
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b2d8      	uxtb	r0, r3
 80018f0:	4914      	ldr	r1, [pc, #80]	; (8001944 <UnlinkTimer+0x100>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3314      	adds	r3, #20
 80018fe:	4602      	mov	r2, r0
 8001900:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	490f      	ldr	r1, [pc, #60]	; (8001944 <UnlinkTimer+0x100>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	330c      	adds	r3, #12
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <UnlinkTimer+0xf8>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b06      	cmp	r3, #6
 800191e:	d107      	bne.n	8001930 <UnlinkTimer+0xec>
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d104      	bne.n	8001930 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <UnlinkTimer+0x104>)
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	601a      	str	r2, [r3, #0]
  }

  return;
 800192e:	bf00      	nop
 8001930:	bf00      	nop
}
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	20000a0c 	.word	0x20000a0c
 8001940:	20000a0d 	.word	0x20000a0d
 8001944:	2000097c 	.word	0x2000097c
 8001948:	20000a10 	.word	0x20000a10

0800194c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <ReturnTimeElapsed+0x70>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195a:	d026      	beq.n	80019aa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800195c:	f7ff fe02 	bl	8001564 <ReadRtcSsrValue>
 8001960:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <ReturnTimeElapsed+0x70>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	d805      	bhi.n	8001978 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <ReturnTimeElapsed+0x70>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	e00a      	b.n	800198e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <ReturnTimeElapsed+0x74>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <ReturnTimeElapsed+0x70>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	4413      	add	r3, r2
 800198c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <ReturnTimeElapsed+0x78>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <ReturnTimeElapsed+0x7c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	40d3      	lsrs	r3, r2
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	e001      	b.n	80019ae <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	b29b      	uxth	r3, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000a10 	.word	0x20000a10
 80019c0:	20000a18 	.word	0x20000a18
 80019c4:	20000a16 	.word	0x20000a16
 80019c8:	20000a15 	.word	0x20000a15

080019cc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d108      	bne.n	80019ee <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019dc:	f7ff fdc2 	bl	8001564 <ReadRtcSsrValue>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <RestartWakeupCounter+0x9c>)
 80019e4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80019e6:	2003      	movs	r0, #3
 80019e8:	f002 fac1 	bl	8003f6e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80019ec:	e039      	b.n	8001a62 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d803      	bhi.n	80019fc <RestartWakeupCounter+0x30>
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <RestartWakeupCounter+0xa0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d002      	beq.n	8001a02 <RestartWakeupCounter+0x36>
      Value -= 1;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a02:	bf00      	nop
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <RestartWakeupCounter+0xa4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f8      	beq.n	8001a04 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <RestartWakeupCounter+0xa4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <RestartWakeupCounter+0xa4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a22:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <RestartWakeupCounter+0xa8>)
 8001a26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a2a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f002 faac 	bl	8003f8a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <RestartWakeupCounter+0xac>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	88fa      	ldrh	r2, [r7, #6]
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <RestartWakeupCounter+0xac>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a42:	f7ff fd8f 	bl	8001564 <ReadRtcSsrValue>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <RestartWakeupCounter+0x9c>)
 8001a4a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <RestartWakeupCounter+0xa4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <RestartWakeupCounter+0xa4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a5a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001a5c:	f3af 8000 	nop.w
  return ;
 8001a60:	bf00      	nop
}
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000a10 	.word	0x20000a10
 8001a6c:	20000a15 	.word	0x20000a15
 8001a70:	20002000 	.word	0x20002000
 8001a74:	58000800 	.word	0x58000800
 8001a78:	40002800 	.word	0x40002800

08001a7c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a82:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <RescheduleTimerList+0x11c>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8e:	d107      	bne.n	8001aa0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a90:	bf00      	nop
 8001a92:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <RescheduleTimerList+0x120>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f8      	bne.n	8001a92 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001aa0:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <RescheduleTimerList+0x120>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <RescheduleTimerList+0x120>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aae:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <RescheduleTimerList+0x124>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	493a      	ldr	r1, [pc, #232]	; (8001ba4 <RescheduleTimerList+0x128>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3308      	adds	r3, #8
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001aca:	f7ff ff3f 	bl	800194c <ReturnTimeElapsed>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d205      	bcs.n	8001ae6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001ade:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <RescheduleTimerList+0x12c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e04d      	b.n	8001b82 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4a30      	ldr	r2, [pc, #192]	; (8001bac <RescheduleTimerList+0x130>)
 8001aea:	8812      	ldrh	r2, [r2, #0]
 8001aec:	b292      	uxth	r2, r2
 8001aee:	4413      	add	r3, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d906      	bls.n	8001b06 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001af8:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <RescheduleTimerList+0x130>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <RescheduleTimerList+0x12c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e03d      	b.n	8001b82 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <RescheduleTimerList+0x12c>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b16:	e034      	b.n	8001b82 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	4922      	ldr	r1, [pc, #136]	; (8001ba4 <RescheduleTimerList+0x128>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	3308      	adds	r3, #8
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d20a      	bcs.n	8001b46 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	491c      	ldr	r1, [pc, #112]	; (8001ba4 <RescheduleTimerList+0x128>)
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3308      	adds	r3, #8
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e013      	b.n	8001b6e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	4916      	ldr	r1, [pc, #88]	; (8001ba4 <RescheduleTimerList+0x128>)
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	3308      	adds	r3, #8
 8001b56:	6819      	ldr	r1, [r3, #0]
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	1ac9      	subs	r1, r1, r3
 8001b5e:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <RescheduleTimerList+0x128>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4403      	add	r3, r0
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <RescheduleTimerList+0x128>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3315      	adds	r3, #21
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d1c7      	bne.n	8001b18 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001b88:	89bb      	ldrh	r3, [r7, #12]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff1e 	bl	80019cc <RestartWakeupCounter>

  return ;
 8001b90:	bf00      	nop
}
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40002800 	.word	0x40002800
 8001b9c:	20002000 	.word	0x20002000
 8001ba0:	20000a0c 	.word	0x20000a0c
 8001ba4:	2000097c 	.word	0x2000097c
 8001ba8:	20000a14 	.word	0x20000a14
 8001bac:	20000a1a 	.word	0x20000a1a

08001bb0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8001bba:	617b      	str	r3, [r7, #20]
  return(result);
 8001bbc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bc4:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	22ca      	movs	r2, #202	; 0xca
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
 8001bcc:	4b57      	ldr	r3, [pc, #348]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2253      	movs	r2, #83	; 0x53
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001be4:	4b52      	ldr	r3, [pc, #328]	; (8001d30 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001bec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bf0:	4950      	ldr	r1, [pc, #320]	; (8001d34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d16e      	bne.n	8001ce4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c06:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c0a:	494a      	ldr	r1, [pc, #296]	; (8001d34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c1a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c1e:	4945      	ldr	r1, [pc, #276]	; (8001d34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	3310      	adds	r3, #16
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001c30:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04c      	beq.n	8001cd4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001c3a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c3e:	493d      	ldr	r1, [pc, #244]	; (8001d34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	330d      	adds	r3, #13
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d124      	bne.n	8001c9e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fdf2 	bl	8001844 <UnlinkTimer>
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f383 8810 	msr	PRIMASK, r3
}
 8001c6a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001c6c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c70:	4930      	ldr	r1, [pc, #192]	; (8001d34 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f9b8 	bl	8001ffc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	22ca      	movs	r2, #202	; 0xca
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2253      	movs	r2, #83	; 0x53
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c9c:	e012      	b.n	8001cc4 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f383 8810 	msr	PRIMASK, r3
}
 8001ca8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f920 	bl	8001ef4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	22ca      	movs	r2, #202	; 0xca
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2253      	movs	r2, #83	; 0x53
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	69b8      	ldr	r0, [r7, #24]
 8001cce:	f000 fa1b 	bl	8002108 <HW_TS_RTC_Int_AppNot>
 8001cd2:	e022      	b.n	8001d1a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001cd4:	f7ff fed2 	bl	8001a7c <RescheduleTimerList>
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f383 8810 	msr	PRIMASK, r3
}
 8001ce2:	e01a      	b.n	8001d1a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001ce4:	bf00      	nop
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f8      	beq.n	8001ce6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d04:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f383 8810 	msr	PRIMASK, r3
}
 8001d18:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	22ff      	movs	r2, #255	; 0xff
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001d22:	bf00      	nop
}
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20002000 	.word	0x20002000
 8001d30:	20000a0c 	.word	0x20000a0c
 8001d34:	2000097c 	.word	0x2000097c
 8001d38:	20000a14 	.word	0x20000a14
 8001d3c:	58000800 	.word	0x58000800

08001d40 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d4c:	4b5e      	ldr	r3, [pc, #376]	; (8001ec8 <HW_TS_Init+0x188>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	22ca      	movs	r2, #202	; 0xca
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24
 8001d54:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <HW_TS_Init+0x188>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2253      	movs	r2, #83	; 0x53
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001d5c:	4b5b      	ldr	r3, [pc, #364]	; (8001ecc <HW_TS_Init+0x18c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a5a      	ldr	r2, [pc, #360]	; (8001ecc <HW_TS_Init+0x18c>)
 8001d62:	f043 0320 	orr.w	r3, r3, #32
 8001d66:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001d68:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <HW_TS_Init+0x18c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f1c3 0304 	rsb	r3, r3, #4
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b55      	ldr	r3, [pc, #340]	; (8001ed0 <HW_TS_Init+0x190>)
 8001d7c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001d7e:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HW_TS_Init+0x18c>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d86:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001d8a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	2a00      	cmp	r2, #0
 8001d9c:	d101      	bne.n	8001da2 <HW_TS_Init+0x62>
  {
    return 32U;
 8001d9e:	2220      	movs	r2, #32
 8001da0:	e003      	b.n	8001daa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	40d3      	lsrs	r3, r2
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <HW_TS_Init+0x194>)
 8001db4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001db6:	4b45      	ldr	r3, [pc, #276]	; (8001ecc <HW_TS_Init+0x18c>)
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <HW_TS_Init+0x198>)
 8001dc8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HW_TS_Init+0x198>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	4a40      	ldr	r2, [pc, #256]	; (8001ed4 <HW_TS_Init+0x194>)
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ddc:	4a3c      	ldr	r2, [pc, #240]	; (8001ed0 <HW_TS_Init+0x190>)
 8001dde:	7812      	ldrb	r2, [r2, #0]
 8001de0:	40d3      	lsrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d904      	bls.n	8001df8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HW_TS_Init+0x19c>)
 8001df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df4:	801a      	strh	r2, [r3, #0]
 8001df6:	e003      	b.n	8001e00 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HW_TS_Init+0x19c>)
 8001dfe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e04:	f7ff fb9c 	bl	8001540 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e0c:	f7ff fb84 	bl	8001518 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d13d      	bne.n	8001e92 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e16:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HW_TS_Init+0x1a0>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HW_TS_Init+0x1a4>)
 8001e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e22:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	77fb      	strb	r3, [r7, #31]
 8001e28:	e00c      	b.n	8001e44 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001e2a:	7ffa      	ldrb	r2, [r7, #31]
 8001e2c:	492e      	ldr	r1, [pc, #184]	; (8001ee8 <HW_TS_Init+0x1a8>)
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	330c      	adds	r3, #12
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e3e:	7ffb      	ldrb	r3, [r7, #31]
 8001e40:	3301      	adds	r3, #1
 8001e42:	77fb      	strb	r3, [r7, #31]
 8001e44:	7ffb      	ldrb	r3, [r7, #31]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d9ef      	bls.n	8001e2a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HW_TS_Init+0x1ac>)
 8001e4c:	2206      	movs	r2, #6
 8001e4e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HW_TS_Init+0x188>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <HW_TS_Init+0x188>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HW_TS_Init+0x188>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HW_TS_Init+0x188>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e70:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HW_TS_Init+0x1b0>)
 8001e74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e78:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	f002 f885 	bl	8003f8a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HW_TS_Init+0x188>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HW_TS_Init+0x188>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e009      	b.n	8001ea6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HW_TS_Init+0x188>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f002 f864 	bl	8003f6e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HW_TS_Init+0x188>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	22ff      	movs	r2, #255	; 0xff
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f002 f819 	bl	8003eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f002 f830 	bl	8003f1e <HAL_NVIC_EnableIRQ>

  return;
 8001ebe:	bf00      	nop
}
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20002000 	.word	0x20002000
 8001ecc:	40002800 	.word	0x40002800
 8001ed0:	20000a15 	.word	0x20000a15
 8001ed4:	20000a16 	.word	0x20000a16
 8001ed8:	20000a18 	.word	0x20000a18
 8001edc:	20000a1a 	.word	0x20000a1a
 8001ee0:	20000a14 	.word	0x20000a14
 8001ee4:	20000a10 	.word	0x20000a10
 8001ee8:	2000097c 	.word	0x2000097c
 8001eec:	20000a0c 	.word	0x20000a0c
 8001ef0:	58000800 	.word	0x58000800

08001ef4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001efe:	f3ef 8310 	mrs	r3, PRIMASK
 8001f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f04:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f08:	b672      	cpsid	i
}
 8001f0a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f002 f814 	bl	8003f3a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f12:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HW_TS_Stop+0xf0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	22ca      	movs	r2, #202	; 0xca
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HW_TS_Stop+0xf0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2253      	movs	r2, #83	; 0x53
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f22:	79fa      	ldrb	r2, [r7, #7]
 8001f24:	4930      	ldr	r1, [pc, #192]	; (8001fe8 <HW_TS_Stop+0xf4>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	330c      	adds	r3, #12
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d142      	bne.n	8001fc0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fc80 	bl	8001844 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <HW_TS_Stop+0xf8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f4a:	7cfb      	ldrb	r3, [r7, #19]
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d12f      	bne.n	8001fb0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HW_TS_Stop+0xfc>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	d107      	bne.n	8001f6e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001f5e:	bf00      	nop
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HW_TS_Stop+0xf0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f8      	bne.n	8001f60 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HW_TS_Stop+0xf0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HW_TS_Stop+0xf0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f7e:	bf00      	nop
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HW_TS_Stop+0xf0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f8      	beq.n	8001f80 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HW_TS_Stop+0xf0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HW_TS_Stop+0xf0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f9e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HW_TS_Stop+0x100>)
 8001fa2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fa6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f001 ffee 	bl	8003f8a <HAL_NVIC_ClearPendingIRQ>
 8001fae:	e007      	b.n	8001fc0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HW_TS_Stop+0x104>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	7cfa      	ldrb	r2, [r7, #19]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001fbc:	f7ff fd5e 	bl	8001a7c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HW_TS_Stop+0xf0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	22ff      	movs	r2, #255	; 0xff
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f001 ffa8 	bl	8003f1e <HAL_NVIC_EnableIRQ>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f383 8810 	msr	PRIMASK, r3
}
 8001fd8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001fda:	bf00      	nop
}
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20002000 	.word	0x20002000
 8001fe8:	2000097c 	.word	0x2000097c
 8001fec:	20000a0c 	.word	0x20000a0c
 8001ff0:	40002800 	.word	0x40002800
 8001ff4:	58000800 	.word	0x58000800
 8001ff8:	20000a0d 	.word	0x20000a0d

08001ffc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002008:	79fa      	ldrb	r2, [r7, #7]
 800200a:	493b      	ldr	r1, [pc, #236]	; (80020f8 <HW_TS_Start+0xfc>)
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	330c      	adds	r3, #12
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d103      	bne.n	8002028 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff66 	bl	8001ef4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002028:	f3ef 8310 	mrs	r3, PRIMASK
 800202c:	60fb      	str	r3, [r7, #12]
  return(result);
 800202e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002030:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002032:	b672      	cpsid	i
}
 8002034:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002036:	2003      	movs	r0, #3
 8002038:	f001 ff7f 	bl	8003f3a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800203c:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HW_TS_Start+0x100>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	22ca      	movs	r2, #202	; 0xca
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
 8002044:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <HW_TS_Start+0x100>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2253      	movs	r2, #83	; 0x53
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800204c:	79fa      	ldrb	r2, [r7, #7]
 800204e:	492a      	ldr	r1, [pc, #168]	; (80020f8 <HW_TS_Start+0xfc>)
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	330c      	adds	r3, #12
 800205c:	2202      	movs	r2, #2
 800205e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002060:	79fa      	ldrb	r2, [r7, #7]
 8002062:	4925      	ldr	r1, [pc, #148]	; (80020f8 <HW_TS_Start+0xfc>)
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	3308      	adds	r3, #8
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002074:	79fa      	ldrb	r2, [r7, #7]
 8002076:	4920      	ldr	r1, [pc, #128]	; (80020f8 <HW_TS_Start+0xfc>)
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	3304      	adds	r3, #4
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fb30 	bl	80016f0 <linkTimer>
 8002090:	4603      	mov	r3, r0
 8002092:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HW_TS_Start+0x104>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HW_TS_Start+0x108>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	7c7a      	ldrb	r2, [r7, #17]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d002      	beq.n	80020ac <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80020a6:	f7ff fce9 	bl	8001a7c <RescheduleTimerList>
 80020aa:	e013      	b.n	80020d4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80020ac:	79fa      	ldrb	r2, [r7, #7]
 80020ae:	4912      	ldr	r1, [pc, #72]	; (80020f8 <HW_TS_Start+0xfc>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3308      	adds	r3, #8
 80020bc:	6819      	ldr	r1, [r3, #0]
 80020be:	8a7b      	ldrh	r3, [r7, #18]
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	1ac9      	subs	r1, r1, r3
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <HW_TS_Start+0xfc>)
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4403      	add	r3, r0
 80020d0:	3308      	adds	r3, #8
 80020d2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HW_TS_Start+0x100>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	22ff      	movs	r2, #255	; 0xff
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80020dc:	2003      	movs	r0, #3
 80020de:	f001 ff1e 	bl	8003f1e <HAL_NVIC_EnableIRQ>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f383 8810 	msr	PRIMASK, r3
}
 80020ec:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80020ee:	bf00      	nop
}
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000097c 	.word	0x2000097c
 80020fc:	20002000 	.word	0x20002000
 8002100:	20000a0c 	.word	0x20000a0c
 8002104:	20000a0d 	.word	0x20000a0d

08002108 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	460b      	mov	r3, r1
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4798      	blx	r3

  return;
 800211a:	bf00      	nop
}
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	4613      	mov	r3, r2
 8002134:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800213a:	2300      	movs	r3, #0
 800213c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10e      	bne.n	8002162 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HW_UART_Transmit_DMA+0x80>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <HW_UART_Transmit_DMA+0x84>)
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HW_UART_Transmit_DMA+0x88>)
 800214e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002150:	89bb      	ldrh	r3, [r7, #12]
 8002152:	461a      	mov	r2, r3
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	4814      	ldr	r0, [pc, #80]	; (80021a8 <HW_UART_Transmit_DMA+0x84>)
 8002158:	f005 fcd8 	bl	8007b0c <HAL_UART_Transmit_DMA>
 800215c:	4603      	mov	r3, r0
 800215e:	75fb      	strb	r3, [r7, #23]
            break;
 8002160:	e000      	b.n	8002164 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002162:	bf00      	nop
    }

    switch (hal_status)
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d816      	bhi.n	8002198 <HW_UART_Transmit_DMA+0x74>
 800216a:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <HW_UART_Transmit_DMA+0x4c>)
 800216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002170:	08002181 	.word	0x08002181
 8002174:	08002187 	.word	0x08002187
 8002178:	0800218d 	.word	0x0800218d
 800217c:	08002193 	.word	0x08002193
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002180:	2300      	movs	r3, #0
 8002182:	75bb      	strb	r3, [r7, #22]
            break;
 8002184:	e009      	b.n	800219a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002186:	2301      	movs	r3, #1
 8002188:	75bb      	strb	r3, [r7, #22]
            break;
 800218a:	e006      	b.n	800219a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800218c:	2302      	movs	r3, #2
 800218e:	75bb      	strb	r3, [r7, #22]
            break;
 8002190:	e003      	b.n	800219a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002192:	2303      	movs	r3, #3
 8002194:	75bb      	strb	r3, [r7, #22]
            break;
 8002196:	e000      	b.n	800219a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002198:	bf00      	nop
    }

    return hw_status;
 800219a:	7dbb      	ldrb	r3, [r7, #22]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20001d6c 	.word	0x20001d6c
 80021a8:	20001f6c 	.word	0x20001f6c
 80021ac:	40013800 	.word	0x40013800

080021b0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_UART_TxCpltCallback+0x34>)
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_UART_TxCpltCallback+0x38>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_UART_TxCpltCallback+0x38>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4798      	blx	r3
            }
            break;
 80021d2:	e001      	b.n	80021d8 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80021d4:	bf00      	nop
 80021d6:	e000      	b.n	80021da <HAL_UART_TxCpltCallback+0x2a>
            break;
 80021d8:	bf00      	nop
    }

    return;
 80021da:	bf00      	nop
}
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40013800 	.word	0x40013800
 80021e8:	20001d6c 	.word	0x20001d6c

080021ec <LL_RCC_LSE_SetDriveCapability>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80021f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fc:	f023 0218 	bic.w	r2, r3, #24
 8002200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_AHB1_GRP1_EnableClock>:
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4313      	orrs	r3, r2
 800222e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800223c:	68fb      	ldr	r3, [r7, #12]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_AHB2_GRP1_EnableClock>:
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4313      	orrs	r3, r2
 8002260:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4013      	ands	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002280:	f001 fc5a 	bl	8003b38 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002284:	f7fe feec 	bl	8001060 <MX_APPE_Config>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002288:	f000 f862 	bl	8002350 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800228c:	f000 f8c2 	bl	8002414 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002290:	f000 f8e0 	bl	8002454 <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002294:	f000 fa12 	bl	80026bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002298:	f000 f9f6 	bl	8002688 <MX_DMA_Init>
  MX_SPI2_Init();
 800229c:	f000 f968 	bl	8002570 <MX_SPI2_Init>
  MX_SPI1_Init();
 80022a0:	f000 f928 	bl	80024f4 <MX_SPI1_Init>
  MX_RTC_Init();
 80022a4:	f000 f8f2 	bl	800248c <MX_RTC_Init>
  MX_RF_Init();
 80022a8:	f000 f8e8 	bl	800247c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  MCP2515_SPI1_CanInit();
 80022ac:	f001 fac0 	bl	8003830 <MCP2515_SPI1_CanInit>
  MCP2515_SPI2_CanInit();
 80022b0:	f001 fc04 	bl	8003abc <MCP2515_SPI2_CanInit>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80022b4:	f7fe fee2 	bl	800107c <MX_APPE_Init>
  //EMS_data Master_EMS;

  while (1)
  {
    // Call to run the sequencer.
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f00a fe0e 	bl	800cedc <UTIL_SEQ_Run>

    /* Read value from SW2 and SW3 to get open and close door signal */
    SW2_CloseButton_Scan();
 80022c0:	f000 fa78 	bl	80027b4 <SW2_CloseButton_Scan>
    SW3_OpenButton_Scan();
 80022c4:	f000 fad2 	bl	800286c <SW3_OpenButton_Scan>

  #if(TEST_FUNCTION == RTX_FUNCTION)
    /*  READ  */
    /* Read the interrupt flag from both SPI channels*/
    MCP2515_SPI1_ReadReg(MCP_CANINTF, &can_intf, 1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	491b      	ldr	r1, [pc, #108]	; (8002338 <main+0xbc>)
 80022cc:	202c      	movs	r0, #44	; 0x2c
 80022ce:	f001 f9c6 	bl	800365e <MCP2515_SPI1_ReadReg>
    MCP2515_SPI2_ReadReg(MCP_CANINTF, &can_intf2, 1);
 80022d2:	2201      	movs	r2, #1
 80022d4:	4919      	ldr	r1, [pc, #100]	; (800233c <main+0xc0>)
 80022d6:	202c      	movs	r0, #44	; 0x2c
 80022d8:	f001 fb00 	bl	80038dc <MCP2515_SPI2_ReadReg>

    // If the interrupt for RX0B buffer is full -> extract the data
      if ((can_intf & (0x01))) {
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <main+0xbc>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <main+0x98>
          base_adr = 0x66;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <main+0xc4>)
 80022ea:	2266      	movs	r2, #102	; 0x66
 80022ec:	701a      	strb	r2, [r3, #0]
          rx_done++;
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <main+0xc8>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <main+0xc8>)
 80022fa:	801a      	strh	r2, [r3, #0]
      // Read the high-level and low-level address extracted from the CAN ID
        Read_CAN_ID();
 80022fc:	f000 fe9c 	bl	8003038 <Read_CAN_ID>
        Read_RXdata(&rx_id, &base_adr);
 8002300:	490f      	ldr	r1, [pc, #60]	; (8002340 <main+0xc4>)
 8002302:	4811      	ldr	r0, [pc, #68]	; (8002348 <main+0xcc>)
 8002304:	f000 fedc 	bl	80030c0 <Read_RXdata>
          Send_RXdata(&rx_id);
          Read_TXdata(SPI_CHANNEL_2);
          CAN_rx++;
		    #endif
      // Clear the interrupt flags
        MCP2515_SPI1_RegModify(MCP_CANINTF, 0xFF, 0x00);
 8002308:	2200      	movs	r2, #0
 800230a:	21ff      	movs	r1, #255	; 0xff
 800230c:	202c      	movs	r0, #44	; 0x2c
 800230e:	f001 f9fe 	bl	800370e <MCP2515_SPI1_RegModify>
 8002312:	e7d1      	b.n	80022b8 <main+0x3c>
      }

	  #if(EMS_TYPE == MASTER_EMS)
     // Extract the data buffer from SPI2 if buffer is full - Master only
		  else if ((can_intf2 & (0x01))) {
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <main+0xc0>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0cb      	beq.n	80022b8 <main+0x3c>
			  Read_CAN2_ID();
 8002320:	f000 feac 	bl	800307c <Read_CAN2_ID>
			  Read_Slave1_RXdata(&rx_id2, &base_adr);
 8002324:	4906      	ldr	r1, [pc, #24]	; (8002340 <main+0xc4>)
 8002326:	4809      	ldr	r0, [pc, #36]	; (800234c <main+0xd0>)
 8002328:	f000 ffe8 	bl	80032fc <Read_Slave1_RXdata>
			  MCP2515_SPI2_RegModify(MCP_CANINTF, 0xFF, 0x00);
 800232c:	2200      	movs	r2, #0
 800232e:	21ff      	movs	r1, #255	; 0xff
 8002330:	202c      	movs	r0, #44	; 0x2c
 8002332:	f001 fb2f 	bl	8003994 <MCP2515_SPI2_RegModify>
  {
 8002336:	e7bf      	b.n	80022b8 <main+0x3c>
 8002338:	20000a47 	.word	0x20000a47
 800233c:	20000a48 	.word	0x20000a48
 8002340:	20000a46 	.word	0x20000a46
 8002344:	20000a3c 	.word	0x20000a3c
 8002348:	20000a42 	.word	0x20000a42
 800234c:	20000a44 	.word	0x20000a44

08002350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b09a      	sub	sp, #104	; 0x68
 8002354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002356:	f107 0320 	add.w	r3, r7, #32
 800235a:	2248      	movs	r2, #72	; 0x48
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f00b f9f8 	bl	800d754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002376:	f002 fbad 	bl	8004ad4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800237a:	2010      	movs	r0, #16
 800237c:	f7ff ff36 	bl	80021ec <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <SystemClock_Config+0xc0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <SystemClock_Config+0xc0>)
 800238a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <SystemClock_Config+0xc0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800239c:	2327      	movs	r3, #39	; 0x27
 800239e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023a6:	2301      	movs	r3, #1
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80023b0:	2301      	movs	r3, #1
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80023b8:	2300      	movs	r3, #0
 80023ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80023bc:	23a0      	movs	r3, #160	; 0xa0
 80023be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c4:	f107 0320 	add.w	r3, r7, #32
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 ff17 	bl	80051fc <HAL_RCC_OscConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80023d4:	f000 faa6 	bl	8002924 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80023d8:	236f      	movs	r3, #111	; 0x6f
 80023da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2101      	movs	r1, #1
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 fa73 	bl	80058e4 <HAL_RCC_ClockConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002404:	f000 fa8e 	bl	8002924 <Error_Handler>
  }
}
 8002408:	bf00      	nop
 800240a:	3768      	adds	r7, #104	; 0x68
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	58000400 	.word	0x58000400

08002414 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b094      	sub	sp, #80	; 0x50
 8002418:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800241a:	463b      	mov	r3, r7
 800241c:	2250      	movs	r2, #80	; 0x50
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f00b f997 	bl	800d754 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002426:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800242a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800242c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002430:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002432:	2300      	movs	r3, #0
 8002434:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002436:	2310      	movs	r3, #16
 8002438:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fe8e 	bl	800615e <HAL_RCCEx_PeriphCLKConfig>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002448:	f000 fa6c 	bl	8002924 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */


  /* USER CODE END Smps */
}
 800244c:	bf00      	nop
 800244e:	3750      	adds	r7, #80	; 0x50
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN IPCC_Init 1 */


  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <MX_IPCC_Init+0x20>)
 800245a:	4a07      	ldr	r2, [pc, #28]	; (8002478 <MX_IPCC_Init+0x24>)
 800245c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_IPCC_Init+0x20>)
 8002460:	f002 fab2 	bl	80049c8 <HAL_IPCC_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800246a:	f000 fa5b 	bl	8002924 <Error_Handler>
  /* USER CODE BEGIN IPCC_Init 2 */


  /* USER CODE END IPCC_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20001e3c 	.word	0x20001e3c
 8002478:	58000c00 	.word	0x58000c00

0800247c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RF_Init 2 */


  /* USER CODE END RF_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_RTC_Init+0x60>)
 8002492:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <MX_RTC_Init+0x64>)
 8002494:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_RTC_Init+0x60>)
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <MX_RTC_Init+0x60>)
 800249e:	220f      	movs	r2, #15
 80024a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <MX_RTC_Init+0x60>)
 80024a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80024a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <MX_RTC_Init+0x60>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_RTC_Init+0x60>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <MX_RTC_Init+0x60>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <MX_RTC_Init+0x60>)
 80024be:	2200      	movs	r2, #0
 80024c0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024c2:	480a      	ldr	r0, [pc, #40]	; (80024ec <MX_RTC_Init+0x60>)
 80024c4:	f004 f8d2 	bl	800666c <HAL_RTC_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80024ce:	f000 fa29 	bl	8002924 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_RTC_Init+0x60>)
 80024d8:	f004 f9c8 	bl	800686c <HAL_RTCEx_SetWakeUpTimer_IT>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80024e2:	f000 fa1f 	bl	8002924 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20002000 	.word	0x20002000
 80024f0:	40002800 	.word	0x40002800

080024f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 1 */


  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <MX_SPI1_Init+0x74>)
 80024fa:	4a1c      	ldr	r2, [pc, #112]	; (800256c <MX_SPI1_Init+0x78>)
 80024fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <MX_SPI1_Init+0x74>)
 8002500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002504:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <MX_SPI1_Init+0x74>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_SPI1_Init+0x74>)
 800250e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002512:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MX_SPI1_Init+0x74>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <MX_SPI1_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_SPI1_Init+0x74>)
 8002522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002526:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_SPI1_Init+0x74>)
 800252a:	2228      	movs	r2, #40	; 0x28
 800252c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_SPI1_Init+0x74>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_SPI1_Init+0x74>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <MX_SPI1_Init+0x74>)
 800253c:	2200      	movs	r2, #0
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_SPI1_Init+0x74>)
 8002542:	2207      	movs	r2, #7
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <MX_SPI1_Init+0x74>)
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_SPI1_Init+0x74>)
 800254e:	2200      	movs	r2, #0
 8002550:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_SPI1_Init+0x74>)
 8002554:	f004 fa46 	bl	80069e4 <HAL_SPI_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800255e:	f000 f9e1 	bl	8002924 <Error_Handler>
  /* USER CODE BEGIN SPI1_Init 2 */


  /* USER CODE END SPI1_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20002064 	.word	0x20002064
 800256c:	40013000 	.word	0x40013000

08002570 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 1 */


  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <MX_SPI2_Init+0x74>)
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <MX_SPI2_Init+0x78>)
 8002578:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <MX_SPI2_Init+0x74>)
 800257c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002580:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <MX_SPI2_Init+0x74>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <MX_SPI2_Init+0x74>)
 800258a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800258e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MX_SPI2_Init+0x74>)
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <MX_SPI2_Init+0x74>)
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_SPI2_Init+0x74>)
 800259e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025a6:	2228      	movs	r2, #40	; 0x28
 80025a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025be:	2207      	movs	r2, #7
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_SPI2_Init+0x74>)
 80025d0:	f004 fa08 	bl	80069e4 <HAL_SPI_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025da:	f000 f9a3 	bl	8002924 <Error_Handler>
  /* USER CODE BEGIN SPI2_Init 2 */


  /* USER CODE END SPI2_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20001da0 	.word	0x20001da0
 80025e8:	40003800 	.word	0x40003800

080025ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 1 */


  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <MX_USART1_UART_Init+0x94>)
 80025f2:	4a24      	ldr	r2, [pc, #144]	; (8002684 <MX_USART1_UART_Init+0x98>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <MX_USART1_UART_Init+0x94>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <MX_USART1_UART_Init+0x94>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <MX_USART1_UART_Init+0x94>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <MX_USART1_UART_Init+0x94>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <MX_USART1_UART_Init+0x94>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <MX_USART1_UART_Init+0x94>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <MX_USART1_UART_Init+0x94>)
 800261e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002622:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <MX_USART1_UART_Init+0x94>)
 8002626:	2200      	movs	r2, #0
 8002628:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <MX_USART1_UART_Init+0x94>)
 800262c:	2200      	movs	r2, #0
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <MX_USART1_UART_Init+0x94>)
 8002632:	2200      	movs	r2, #0
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002636:	4812      	ldr	r0, [pc, #72]	; (8002680 <MX_USART1_UART_Init+0x94>)
 8002638:	f005 fa18 	bl	8007a6c <HAL_UART_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002642:	f000 f96f 	bl	8002924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002646:	2100      	movs	r1, #0
 8002648:	480d      	ldr	r0, [pc, #52]	; (8002680 <MX_USART1_UART_Init+0x94>)
 800264a:	f006 fbd8 	bl	8008dfe <HAL_UARTEx_SetTxFifoThreshold>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002654:	f000 f966 	bl	8002924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002658:	2100      	movs	r1, #0
 800265a:	4809      	ldr	r0, [pc, #36]	; (8002680 <MX_USART1_UART_Init+0x94>)
 800265c:	f006 fc0d 	bl	8008e7a <HAL_UARTEx_SetRxFifoThreshold>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002666:	f000 f95d 	bl	8002924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800266a:	4805      	ldr	r0, [pc, #20]	; (8002680 <MX_USART1_UART_Init+0x94>)
 800266c:	f006 fb8e 	bl	8008d8c <HAL_UARTEx_DisableFifoMode>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002676:	f000 f955 	bl	8002924 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20001f6c 	.word	0x20001f6c
 8002684:	40013800 	.word	0x40013800

08002688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800268c:	2004      	movs	r0, #4
 800268e:	f7ff fdc3 	bl	8002218 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002692:	2001      	movs	r0, #1
 8002694:	f7ff fdc0 	bl	8002218 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002698:	2200      	movs	r2, #0
 800269a:	2100      	movs	r1, #0
 800269c:	200b      	movs	r0, #11
 800269e:	f001 fc24 	bl	8003eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026a2:	200b      	movs	r0, #11
 80026a4:	f001 fc3b 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	200c      	movs	r0, #12
 80026ae:	f001 fc1c 	bl	8003eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80026b2:	200c      	movs	r0, #12
 80026b4:	f001 fc33 	bl	8003f1e <HAL_NVIC_EnableIRQ>

}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}

080026bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d0:	2004      	movs	r0, #4
 80026d2:	f7ff fdba 	bl	800224a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	2001      	movs	r0, #1
 80026d8:	f7ff fdb7 	bl	800224a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026dc:	2002      	movs	r0, #2
 80026de:	f7ff fdb4 	bl	800224a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e2:	2008      	movs	r0, #8
 80026e4:	f7ff fdb1 	bl	800224a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|EMS_CS_Pin, GPIO_PIN_RESET);
 80026e8:	2200      	movs	r2, #0
 80026ea:	f44f 7104 	mov.w	r1, #528	; 0x210
 80026ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f2:	f002 f913 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|GPIO_PIN_12|LED_BLUE_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	f241 0123 	movw	r1, #4131	; 0x1023
 80026fc:	482a      	ldr	r0, [pc, #168]	; (80027a8 <MX_GPIO_Init+0xec>)
 80026fe:	f002 f90d 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002702:	2310      	movs	r3, #16
 8002704:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	4619      	mov	r1, r3
 8002716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271a:	f001 ff77 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : EMS_CS_Pin */
  GPIO_InitStruct.Pin = EMS_CS_Pin;
 800271e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002722:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EMS_CS_GPIO_Port, &GPIO_InitStruct);
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002738:	f001 ff68 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800273c:	2310      	movs	r3, #16
 800273e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002740:	2300      	movs	r3, #0
 8002742:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002744:	2301      	movs	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	4619      	mov	r1, r3
 800274c:	4817      	ldr	r0, [pc, #92]	; (80027ac <MX_GPIO_Init+0xf0>)
 800274e:	f001 ff5d 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8002752:	2323      	movs	r3, #35	; 0x23
 8002754:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002756:	2301      	movs	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4810      	ldr	r0, [pc, #64]	; (80027a8 <MX_GPIO_Init+0xec>)
 8002768:	f001 ff50 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800276c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	4619      	mov	r1, r3
 8002782:	4809      	ldr	r0, [pc, #36]	; (80027a8 <MX_GPIO_Init+0xec>)
 8002784:	f001 ff42 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_3_Pin;
 8002788:	2303      	movs	r3, #3
 800278a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_GPIO_Init+0xf4>)
 800279a:	f001 ff37 	bl	800460c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	48000400 	.word	0x48000400
 80027ac:	48000800 	.word	0x48000800
 80027b0:	48000c00 	.word	0x48000c00

080027b4 <SW2_CloseButton_Scan>:

/* USER CODE BEGIN 4 */
int SW2_CloseButton_Scan(void) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
    /* Button SW2 debounce*/
      int reading = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 80027ba:	2101      	movs	r1, #1
 80027bc:	4821      	ldr	r0, [pc, #132]	; (8002844 <SW2_CloseButton_Scan+0x90>)
 80027be:	f002 f895 	bl	80048ec <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	607b      	str	r3, [r7, #4]
      // (i.e. the input went from LOW to HIGH), and you've waited long enough
      // since the last press to ignore any noise:


      // If the switch changed, due to noise or pressing:
      if (reading != lastButtonState2) {
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <SW2_CloseButton_Scan+0x94>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d004      	beq.n	80027da <SW2_CloseButton_Scan+0x26>
        // reset the debouncing timer
        lastDebounceTime2 = HAL_GetTick();
 80027d0:	f001 fa20 	bl	8003c14 <HAL_GetTick>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4a1d      	ldr	r2, [pc, #116]	; (800284c <SW2_CloseButton_Scan+0x98>)
 80027d8:	6013      	str	r3, [r2, #0]
      }


      if ((HAL_GetTick() - lastDebounceTime2) > debounceDelay) {
 80027da:	f001 fa1b 	bl	8003c14 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <SW2_CloseButton_Scan+0x98>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1ad2      	subs	r2, r2, r3
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <SW2_CloseButton_Scan+0x9c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d920      	bls.n	8002830 <SW2_CloseButton_Scan+0x7c>
        // whatever the reading is at, it's been there for longer than the debounce
        // delay, so take it as the actual current state:


        // if the button state has changed:
        if (reading != buttonState2) {
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <SW2_CloseButton_Scan+0xa0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d01b      	beq.n	8002830 <SW2_CloseButton_Scan+0x7c>
          buttonState2 = reading;
 80027f8:	4a16      	ldr	r2, [pc, #88]	; (8002854 <SW2_CloseButton_Scan+0xa0>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]


          // only toggle the LED if the new button state is HIGH
        if (buttonState2 == 1) {
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <SW2_CloseButton_Scan+0xa0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d114      	bne.n	8002830 <SW2_CloseButton_Scan+0x7c>
          sw2_count++;
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <SW2_CloseButton_Scan+0xa4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3301      	adds	r3, #1
 800280c:	4a12      	ldr	r2, [pc, #72]	; (8002858 <SW2_CloseButton_Scan+0xa4>)
 800280e:	6013      	str	r3, [r2, #0]
          tx_close_door = 1;
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <SW2_CloseButton_Scan+0xa8>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]
          tx_open_door = 0;
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <SW2_CloseButton_Scan+0xac>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
          send = 1;
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <SW2_CloseButton_Scan+0xb0>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]
          if (sw2_count == 2) {
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <SW2_CloseButton_Scan+0xa4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d102      	bne.n	8002830 <SW2_CloseButton_Scan+0x7c>
            start_tx = 1;
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <SW2_CloseButton_Scan+0xb4>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]
            }
          }
        }
      }
      // save the reading. Next time through the loop, it'll be the lastButtonState:
      lastButtonState2 = reading;
 8002830:	4a05      	ldr	r2, [pc, #20]	; (8002848 <SW2_CloseButton_Scan+0x94>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
    return tx_close_door;
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <SW2_CloseButton_Scan+0xa8>)
 8002838:	681b      	ldr	r3, [r3, #0]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	48000c00 	.word	0x48000c00
 8002848:	20000008 	.word	0x20000008
 800284c:	20000a1c 	.word	0x20000a1c
 8002850:	20000010 	.word	0x20000010
 8002854:	20001ed8 	.word	0x20001ed8
 8002858:	20000a24 	.word	0x20000a24
 800285c:	20000a2c 	.word	0x20000a2c
 8002860:	20000a30 	.word	0x20000a30
 8002864:	20000a34 	.word	0x20000a34
 8002868:	20000a38 	.word	0x20000a38

0800286c <SW3_OpenButton_Scan>:


int SW3_OpenButton_Scan(void) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
    /* Button SW3 debounce*/
      int reading = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8002872:	2102      	movs	r1, #2
 8002874:	4821      	ldr	r0, [pc, #132]	; (80028fc <SW3_OpenButton_Scan+0x90>)
 8002876:	f002 f839 	bl	80048ec <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	607b      	str	r3, [r7, #4]
      // (i.e. the input went from LOW to HIGH), and you've waited long enough
      // since the last press to ignore any noise:


      // If the switch changed, due to noise or pressing:
      if (reading != lastButtonState3) {
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <SW3_OpenButton_Scan+0x94>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	d004      	beq.n	8002892 <SW3_OpenButton_Scan+0x26>
        // reset the debouncing timer
        lastDebounceTime3 = HAL_GetTick();
 8002888:	f001 f9c4 	bl	8003c14 <HAL_GetTick>
 800288c:	4603      	mov	r3, r0
 800288e:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <SW3_OpenButton_Scan+0x98>)
 8002890:	6013      	str	r3, [r2, #0]
      }


      if ((HAL_GetTick() - lastDebounceTime3) > debounceDelay) {
 8002892:	f001 f9bf 	bl	8003c14 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <SW3_OpenButton_Scan+0x98>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1ad2      	subs	r2, r2, r3
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <SW3_OpenButton_Scan+0x9c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d920      	bls.n	80028e8 <SW3_OpenButton_Scan+0x7c>
        // whatever the reading is at, it's been there for longer than the debounce
        // delay, so take it as the actual current state:


        // if the button state has changed:
        if (reading != buttonState3) {
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <SW3_OpenButton_Scan+0xa0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d01b      	beq.n	80028e8 <SW3_OpenButton_Scan+0x7c>
          buttonState3 = reading;
 80028b0:	4a16      	ldr	r2, [pc, #88]	; (800290c <SW3_OpenButton_Scan+0xa0>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]


          // only toggle the LED if the new button state is HIGH
        if (buttonState3 == 1) {
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <SW3_OpenButton_Scan+0xa0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d114      	bne.n	80028e8 <SW3_OpenButton_Scan+0x7c>
          sw3_count++;
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <SW3_OpenButton_Scan+0xa4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <SW3_OpenButton_Scan+0xa4>)
 80028c6:	6013      	str	r3, [r2, #0]
          tx_close_door = 0;
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <SW3_OpenButton_Scan+0xa8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
          tx_open_door = 1;
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <SW3_OpenButton_Scan+0xac>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
          send = 1;
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <SW3_OpenButton_Scan+0xb0>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
          if (sw3_count == 2) {
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <SW3_OpenButton_Scan+0xa4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d102      	bne.n	80028e8 <SW3_OpenButton_Scan+0x7c>
              start_tx = 1;
 80028e2:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <SW3_OpenButton_Scan+0xb4>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
      // save the reading. Next time through the loop, it'll be the lastButtonState:
      lastButtonState3 = reading;
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <SW3_OpenButton_Scan+0x94>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
    return tx_open_door;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <SW3_OpenButton_Scan+0xac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	48000c00 	.word	0x48000c00
 8002900:	2000000c 	.word	0x2000000c
 8002904:	20000a20 	.word	0x20000a20
 8002908:	20000010 	.word	0x20000010
 800290c:	200020c8 	.word	0x200020c8
 8002910:	20000a28 	.word	0x20000a28
 8002914:	20000a2c 	.word	0x20000a2c
 8002918:	20000a30 	.word	0x20000a30
 800291c:	20000a34 	.word	0x20000a34
 8002920:	20000a38 	.word	0x20000a38

08002924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002928:	b672      	cpsid	i
}
 800292a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800292c:	e7fe      	b.n	800292c <Error_Handler+0x8>

0800292e <LL_RCC_EnableRTC>:
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_AHB2_GRP1_EnableClock>:
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800295e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4313      	orrs	r3, r2
 8002966:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002974:	68fb      	ldr	r3, [r7, #12]
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_AHB3_GRP1_EnableClock>:
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4313      	orrs	r3, r2
 8002998:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4013      	ands	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_APB1_GRP1_EnableClock>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029d8:	68fb      	ldr	r3, [r7, #12]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_APB2_GRP1_EnableClock>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002a1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a20:	f7ff ffaf 	bl	8002982 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	202e      	movs	r0, #46	; 0x2e
 8002a2a:	f001 fa5e 	bl	8003eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002a2e:	202e      	movs	r0, #46	; 0x2e
 8002a30:	f001 fa75 	bl	8003f1e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <HAL_IPCC_MspInit+0x44>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d113      	bne.n	8002a72 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002a4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a4e:	f7ff ff98 	bl	8002982 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	202c      	movs	r0, #44	; 0x2c
 8002a58:	f001 fa47 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002a5c:	202c      	movs	r0, #44	; 0x2c
 8002a5e:	f001 fa5e 	bl	8003f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	202d      	movs	r0, #45	; 0x2d
 8002a68:	f001 fa3f 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002a6c:	202d      	movs	r0, #45	; 0x2d
 8002a6e:	f001 fa56 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	58000c00 	.word	0x58000c00

08002a80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b096      	sub	sp, #88	; 0x58
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a88:	f107 0308 	add.w	r3, r7, #8
 8002a8c:	2250      	movs	r2, #80	; 0x50
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f00a fe5f 	bl	800d754 <memset>
  if(hrtc->Instance==RTC)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_RTC_MspInit+0x64>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d11d      	bne.n	8002adc <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aa4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aaa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fb54 	bl	800615e <HAL_RCCEx_PeriphCLKConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002abc:	f7ff ff32 	bl	8002924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ac0:	f7ff ff35 	bl	800292e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ac4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ac8:	f7ff ff74 	bl	80029b4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f001 fa0a 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002ad6:	2003      	movs	r0, #3
 8002ad8:	f001 fa21 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002adc:	bf00      	nop
 8002ade:	3758      	adds	r7, #88	; 0x58
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40002800 	.word	0x40002800

08002ae8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a26      	ldr	r2, [pc, #152]	; (8002ba0 <HAL_SPI_MspInit+0xb8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d120      	bne.n	8002b4c <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b0a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b0e:	f7ff ff6a 	bl	80029e6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7ff ff1c 	bl	8002950 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b18:	23e0      	movs	r3, #224	; 0xe0
 8002b1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b28:	2305      	movs	r3, #5
 8002b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	4619      	mov	r1, r3
 8002b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b36:	f001 fd69 	bl	800460c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2022      	movs	r0, #34	; 0x22
 8002b40:	f001 f9d3 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b44:	2022      	movs	r0, #34	; 0x22
 8002b46:	f001 f9ea 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b4a:	e024      	b.n	8002b96 <HAL_SPI_MspInit+0xae>
  else if(hspi->Instance==SPI2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_SPI_MspInit+0xbc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d11f      	bne.n	8002b96 <HAL_SPI_MspInit+0xae>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b5a:	f7ff ff2b 	bl	80029b4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5e:	2002      	movs	r0, #2
 8002b60:	f7ff fef6 	bl	8002950 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b64:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b72:	2303      	movs	r3, #3
 8002b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b76:	2305      	movs	r3, #5
 8002b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4809      	ldr	r0, [pc, #36]	; (8002ba8 <HAL_SPI_MspInit+0xc0>)
 8002b82:	f001 fd43 	bl	800460c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2023      	movs	r0, #35	; 0x23
 8002b8c:	f001 f9ad 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002b90:	2023      	movs	r0, #35	; 0x23
 8002b92:	f001 f9c4 	bl	8003f1e <HAL_NVIC_EnableIRQ>
}
 8002b96:	bf00      	nop
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40013000 	.word	0x40013000
 8002ba4:	40003800 	.word	0x40003800
 8002ba8:	48000400 	.word	0x48000400

08002bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b09c      	sub	sp, #112	; 0x70
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	2250      	movs	r2, #80	; 0x50
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f00a fdc1 	bl	800d754 <memset>
  if(huart->Instance==USART1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4e      	ldr	r2, [pc, #312]	; (8002d10 <HAL_UART_MspInit+0x164>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f040 8095 	bne.w	8002d08 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fab7 	bl	800615e <HAL_RCCEx_PeriphCLKConfig>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bf6:	f7ff fe95 	bl	8002924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bfa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bfe:	f7ff fef2 	bl	80029e6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7ff fea4 	bl	8002950 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c08:	2002      	movs	r0, #2
 8002c0a:	f7ff fea1 	bl	8002950 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c20:	2307      	movs	r3, #7
 8002c22:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2e:	f001 fced 	bl	800460c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c32:	2340      	movs	r3, #64	; 0x40
 8002c34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c42:	2307      	movs	r3, #7
 8002c44:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4831      	ldr	r0, [pc, #196]	; (8002d14 <HAL_UART_MspInit+0x168>)
 8002c4e:	f001 fcdd 	bl	800460c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002c52:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c54:	4a31      	ldr	r2, [pc, #196]	; (8002d1c <HAL_UART_MspInit+0x170>)
 8002c56:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c58:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c5a:	220e      	movs	r2, #14
 8002c5c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c5e:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c64:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6a:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c70:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c7c:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c88:	4823      	ldr	r0, [pc, #140]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c8a:	f001 f98d 	bl	8003fa8 <HAL_DMA_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8002c94:	f7ff fe46 	bl	8002924 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <HAL_UART_MspInit+0x16c>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_UART_MspInit+0x178>)
 8002caa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cae:	220f      	movs	r2, #15
 8002cb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cc4:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cdc:	4810      	ldr	r0, [pc, #64]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cde:	f001 f963 	bl	8003fa8 <HAL_DMA_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8002ce8:	f7ff fe1c 	bl	8002924 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cf0:	67da      	str	r2, [r3, #124]	; 0x7c
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <HAL_UART_MspInit+0x174>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2024      	movs	r0, #36	; 0x24
 8002cfe:	f001 f8f4 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d02:	2024      	movs	r0, #36	; 0x24
 8002d04:	f001 f90b 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d08:	bf00      	nop
 8002d0a:	3770      	adds	r7, #112	; 0x70
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40013800 	.word	0x40013800
 8002d14:	48000400 	.word	0x48000400
 8002d18:	20001ee0 	.word	0x20001ee0
 8002d1c:	40020008 	.word	0x40020008
 8002d20:	20001e78 	.word	0x20001e78
 8002d24:	4002001c 	.word	0x4002001c

08002d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <NMI_Handler+0x4>

08002d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d32:	e7fe      	b.n	8002d32 <HardFault_Handler+0x4>

08002d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <MemManage_Handler+0x4>

08002d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3e:	e7fe      	b.n	8002d3e <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d74:	f000 ff3a 	bl	8003bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002d80:	f7fe ff16 	bl	8001bb0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <DMA1_Channel1_IRQHandler+0x10>)
 8002d8e:	f001 faec 	bl	800436a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20001ee0 	.word	0x20001ee0

08002d9c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <DMA1_Channel2_IRQHandler+0x10>)
 8002da2:	f001 fae2 	bl	800436a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20001e78 	.word	0x20001e78

08002db0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <SPI1_IRQHandler+0x10>)
 8002db6:	f004 fb69 	bl	800748c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20002064 	.word	0x20002064

08002dc4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <SPI2_IRQHandler+0x10>)
 8002dca:	f004 fb5f 	bl	800748c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20001da0 	.word	0x20001da0

08002dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <USART1_IRQHandler+0x10>)
 8002dde:	f004 ff15 	bl	8007c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20001f6c 	.word	0x20001f6c

08002dec <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002df0:	f009 fef4 	bl	800cbdc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002dfc:	f009 ff24 	bl	800cc48 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002e08:	f001 fdba 	bl	8004980 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e00a      	b.n	8002e38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e22:	f3af 8000 	nop.w
 8002e26:	4601      	mov	r1, r0
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	60ba      	str	r2, [r7, #8]
 8002e2e:	b2ca      	uxtb	r2, r1
 8002e30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3301      	adds	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	dbf0      	blt.n	8002e22 <_read+0x12>
  }

  return len;
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e72:	605a      	str	r2, [r3, #4]
  return 0;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_isatty>:

int _isatty(int file)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <_sbrk+0x5c>)
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <_sbrk+0x60>)
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <_sbrk+0x64>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <_sbrk+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee4:	f00a fc84 	bl	800d7f0 <__errno>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	220c      	movs	r2, #12
 8002eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e009      	b.n	8002f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <_sbrk+0x64>)
 8002f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20030000 	.word	0x20030000
 8002f14:	00000400 	.word	0x00000400
 8002f18:	20000a4c 	.word	0x20000a4c
 8002f1c:	20002348 	.word	0x20002348

08002f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <SystemInit+0x98>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <SystemInit+0x98>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f48:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002f4c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <SystemInit+0x9c>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6a:	f023 0305 	bic.w	r3, r3, #5
 8002f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <SystemInit+0xa0>)
 8002f8c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f92:	4a0b      	ldr	r2, [pc, #44]	; (8002fc0 <SystemInit+0xa0>)
 8002f94:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	2200      	movs	r2, #0
 8002fac:	619a      	str	r2, [r3, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00
 8002fbc:	faf6fefb 	.word	0xfaf6fefb
 8002fc0:	22041000 	.word	0x22041000

08002fc4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002fc4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc8:	3304      	adds	r3, #4

08002fca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fcc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002fce:	d3f9      	bcc.n	8002fc4 <CopyDataInit>
  bx lr
 8002fd0:	4770      	bx	lr

08002fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002fd2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002fd4:	3004      	adds	r0, #4

08002fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002fd6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002fd8:	d3fb      	bcc.n	8002fd2 <FillZerobss>
  bx lr
 8002fda:	4770      	bx	lr

08002fdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fdc:	480c      	ldr	r0, [pc, #48]	; (8003010 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fe0:	f7ff ff9e 	bl	8002f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <LoopForever+0x6>)
 8002fe6:	490c      	ldr	r1, [pc, #48]	; (8003018 <LoopForever+0xa>)
 8002fe8:	4a0c      	ldr	r2, [pc, #48]	; (800301c <LoopForever+0xe>)
 8002fea:	2300      	movs	r3, #0
 8002fec:	f7ff ffed 	bl	8002fca <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002ff0:	480b      	ldr	r0, [pc, #44]	; (8003020 <LoopForever+0x12>)
 8002ff2:	490c      	ldr	r1, [pc, #48]	; (8003024 <LoopForever+0x16>)
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <LoopForever+0x1a>)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f7ff ffe7 	bl	8002fca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002ffc:	480b      	ldr	r0, [pc, #44]	; (800302c <LoopForever+0x1e>)
 8002ffe:	490c      	ldr	r1, [pc, #48]	; (8003030 <LoopForever+0x22>)
 8003000:	2300      	movs	r3, #0
 8003002:	f7ff ffe8 	bl	8002fd6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003006:	f00a fbf9 	bl	800d7fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800300a:	f7ff f937 	bl	800227c <main>

0800300e <LoopForever>:

LoopForever:
  b LoopForever
 800300e:	e7fe      	b.n	800300e <LoopForever>
  ldr   r0, =_estack
 8003010:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003014:	20000008 	.word	0x20000008
 8003018:	20000090 	.word	0x20000090
 800301c:	0800f7c8 	.word	0x0800f7c8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003020:	200301e3 	.word	0x200301e3
 8003024:	200301e3 	.word	0x200301e3
 8003028:	08010119 	.word	0x08010119
  INIT_BSS _sbss, _ebss
 800302c:	20000960 	.word	0x20000960
 8003030:	20002348 	.word	0x20002348

08003034 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC1_IRQHandler>
	...

08003038 <Read_CAN_ID>:
extern uint8 TxBufferData_SPI2[8];
extern volatile uint8 rxLength;
extern volatile uint8 rxLength2;

// Read the CAN ID from the CAN bus for SPI1 (apply for Master and Slave)
void Read_CAN_ID(void) {
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
    MCP2515_SPI1_ReadReg(0x61, &rx_sidh, 1);
 800303c:	2201      	movs	r2, #1
 800303e:	490c      	ldr	r1, [pc, #48]	; (8003070 <Read_CAN_ID+0x38>)
 8003040:	2061      	movs	r0, #97	; 0x61
 8003042:	f000 fb0c 	bl	800365e <MCP2515_SPI1_ReadReg>
    MCP2515_SPI1_ReadReg(0x62, &rx_sidl, 1);
 8003046:	2201      	movs	r2, #1
 8003048:	490a      	ldr	r1, [pc, #40]	; (8003074 <Read_CAN_ID+0x3c>)
 800304a:	2062      	movs	r0, #98	; 0x62
 800304c:	f000 fb07 	bl	800365e <MCP2515_SPI1_ReadReg>
    rx_id = (rx_sidh << 3) | (rx_sidl >> 5);
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <Read_CAN_ID+0x38>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	b21a      	sxth	r2, r3
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <Read_CAN_ID+0x3c>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	b2db      	uxtb	r3, r3
 8003060:	b21b      	sxth	r3, r3
 8003062:	4313      	orrs	r3, r2
 8003064:	b21b      	sxth	r3, r3
 8003066:	b29a      	uxth	r2, r3
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <Read_CAN_ID+0x40>)
 800306a:	801a      	strh	r2, [r3, #0]
}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000a3e 	.word	0x20000a3e
 8003074:	20000a3f 	.word	0x20000a3f
 8003078:	20000a42 	.word	0x20000a42

0800307c <Read_CAN2_ID>:

// Read the CAN ID from the CAN bus for SPI2 (apply for Slave only)
void Read_CAN2_ID(void) {
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
    MCP2515_SPI2_ReadReg(0x61, &rx_sidh2, 1);
 8003080:	2201      	movs	r2, #1
 8003082:	490c      	ldr	r1, [pc, #48]	; (80030b4 <Read_CAN2_ID+0x38>)
 8003084:	2061      	movs	r0, #97	; 0x61
 8003086:	f000 fc29 	bl	80038dc <MCP2515_SPI2_ReadReg>
    MCP2515_SPI2_ReadReg(0x62, &rx_sidl2, 1);
 800308a:	2201      	movs	r2, #1
 800308c:	490a      	ldr	r1, [pc, #40]	; (80030b8 <Read_CAN2_ID+0x3c>)
 800308e:	2062      	movs	r0, #98	; 0x62
 8003090:	f000 fc24 	bl	80038dc <MCP2515_SPI2_ReadReg>
    rx_id2 = (rx_sidh2 << 3) | (rx_sidl2 >> 5);
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <Read_CAN2_ID+0x38>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	b21a      	sxth	r2, r3
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <Read_CAN2_ID+0x3c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <Read_CAN2_ID+0x40>)
 80030ae:	801a      	strh	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000a40 	.word	0x20000a40
 80030b8:	20000a41 	.word	0x20000a41
 80030bc:	20000a44 	.word	0x20000a44

080030c0 <Read_RXdata>:
extern EMS_data Slave_EMS_2;
extern EMS_data Slave_EMS_3;
extern volatile uint16 send_rx;

// Read the received data from the CAN bus through SPI1 (apply for Master and Slave)
void Read_RXdata(uint16* rx_id, uint8* base_adr) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	 MCP2515_SPI1_ReadReg(0x65, &rxLength, 1);  // Extract the DLC length of the message frame
 80030ca:	2201      	movs	r2, #1
 80030cc:	4988      	ldr	r1, [pc, #544]	; (80032f0 <Read_RXdata+0x230>)
 80030ce:	2065      	movs	r0, #101	; 0x65
 80030d0:	f000 fac5 	bl	800365e <MCP2515_SPI1_ReadReg>
    switch(*rx_id) 
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	f240 628b 	movw	r2, #1675	; 0x68b
 80030dc:	4293      	cmp	r3, r2
 80030de:	f000 80d9 	beq.w	8003294 <Read_RXdata+0x1d4>
 80030e2:	f240 628b 	movw	r2, #1675	; 0x68b
 80030e6:	4293      	cmp	r3, r2
 80030e8:	f300 80f8 	bgt.w	80032dc <Read_RXdata+0x21c>
 80030ec:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80030f0:	d076      	beq.n	80031e0 <Read_RXdata+0x120>
 80030f2:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80030f6:	f300 80f1 	bgt.w	80032dc <Read_RXdata+0x21c>
 80030fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fe:	d004      	beq.n	800310a <Read_RXdata+0x4a>
 8003100:	f240 4281 	movw	r2, #1153	; 0x481
 8003104:	4293      	cmp	r3, r2
 8003106:	d02a      	beq.n	800315e <Read_RXdata+0x9e>
            }
            getEMStime_Master();
            break;

        default:
            break;
 8003108:	e0e8      	b.n	80032dc <Read_RXdata+0x21c>
            for (int i = 0; i < rxLength; i++) {
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	e014      	b.n	800313a <Read_RXdata+0x7a>
              Master.ID_400_buffer[i] = 0x00;
 8003110:	4a78      	ldr	r2, [pc, #480]	; (80032f4 <Read_RXdata+0x234>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
              MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_400_buffer[i], 1);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	4413      	add	r3, r2
 8003124:	b2d8      	uxtb	r0, r3
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	4a72      	ldr	r2, [pc, #456]	; (80032f4 <Read_RXdata+0x234>)
 800312a:	4413      	add	r3, r2
 800312c:	2201      	movs	r2, #1
 800312e:	4619      	mov	r1, r3
 8003130:	f000 fa95 	bl	800365e <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	3301      	adds	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <Read_RXdata+0x230>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4293      	cmp	r3, r2
 8003146:	dbe3      	blt.n	8003110 <Read_RXdata+0x50>
			if(Master.ID_400_buffer[0] == 0x40) {
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <Read_RXdata+0x234>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	f040 80c7 	bne.w	80032e0 <Read_RXdata+0x220>
				Master_EMS.curren_floor = Master.ID_400_buffer[1];
 8003152:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <Read_RXdata+0x234>)
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	461a      	mov	r2, r3
 8003158:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <Read_RXdata+0x238>)
 800315a:	61da      	str	r2, [r3, #28]
        break;
 800315c:	e0c0      	b.n	80032e0 <Read_RXdata+0x220>
            for (int i = 0; i < rxLength; i++) {
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	e010      	b.n	8003186 <Read_RXdata+0xc6>
                MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_481_buffer[i], 1);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	4413      	add	r3, r2
 800316e:	b2d8      	uxtb	r0, r3
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	3308      	adds	r3, #8
 8003174:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <Read_RXdata+0x234>)
 8003176:	4413      	add	r3, r2
 8003178:	2201      	movs	r2, #1
 800317a:	4619      	mov	r1, r3
 800317c:	f000 fa6f 	bl	800365e <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	3301      	adds	r3, #1
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	4b5a      	ldr	r3, [pc, #360]	; (80032f0 <Read_RXdata+0x230>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4293      	cmp	r3, r2
 8003192:	dbe7      	blt.n	8003164 <Read_RXdata+0xa4>
            for(int j = rxLength; j < 8; j++) {
 8003194:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <Read_RXdata+0x230>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e008      	b.n	80031b0 <Read_RXdata+0xf0>
                Master.ID_481_buffer[j] = 0x00;
 800319e:	4a55      	ldr	r2, [pc, #340]	; (80032f4 <Read_RXdata+0x234>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	4413      	add	r3, r2
 80031a4:	3308      	adds	r3, #8
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength; j < 8; j++) {
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	3301      	adds	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b07      	cmp	r3, #7
 80031b4:	ddf3      	ble.n	800319e <Read_RXdata+0xde>
			if((Master.ID_481_buffer[1] == 0x04) || (Master.ID_481_buffer[1] == 0x02)) {
 80031b6:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <Read_RXdata+0x234>)
 80031b8:	7a5b      	ldrb	r3, [r3, #9]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d004      	beq.n	80031c8 <Read_RXdata+0x108>
 80031be:	4b4d      	ldr	r3, [pc, #308]	; (80032f4 <Read_RXdata+0x234>)
 80031c0:	7a5b      	ldrb	r3, [r3, #9]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	f040 808e 	bne.w	80032e4 <Read_RXdata+0x224>
				if(Master.ID_481_buffer[5] == 0x00) {
 80031c8:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <Read_RXdata+0x234>)
 80031ca:	7b5b      	ldrb	r3, [r3, #13]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <Read_RXdata+0x118>
					Master_EMS.door_status = DOOR_OPENED;
 80031d0:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <Read_RXdata+0x238>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	621a      	str	r2, [r3, #32]
        break;
 80031d6:	e085      	b.n	80032e4 <Read_RXdata+0x224>
					Master_EMS.door_status = DOOR_CLOSED;
 80031d8:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <Read_RXdata+0x238>)
 80031da:	2201      	movs	r2, #1
 80031dc:	621a      	str	r2, [r3, #32]
        break;
 80031de:	e081      	b.n	80032e4 <Read_RXdata+0x224>
            for (int i = 0; i < rxLength; i++) {
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	e010      	b.n	8003208 <Read_RXdata+0x148>
              MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_490_buffer[i], 1);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	b2d8      	uxtb	r0, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3310      	adds	r3, #16
 80031f6:	4a3f      	ldr	r2, [pc, #252]	; (80032f4 <Read_RXdata+0x234>)
 80031f8:	4413      	add	r3, r2
 80031fa:	2201      	movs	r2, #1
 80031fc:	4619      	mov	r1, r3
 80031fe:	f000 fa2e 	bl	800365e <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3301      	adds	r3, #1
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <Read_RXdata+0x230>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4293      	cmp	r3, r2
 8003214:	dbe7      	blt.n	80031e6 <Read_RXdata+0x126>
            for(int j = rxLength; j < 8; j++) {
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <Read_RXdata+0x230>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e008      	b.n	8003232 <Read_RXdata+0x172>
                Master.ID_490_buffer[j] = 0x00;
 8003220:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <Read_RXdata+0x234>)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	3310      	adds	r3, #16
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength; j < 8; j++) {
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b07      	cmp	r3, #7
 8003236:	ddf3      	ble.n	8003220 <Read_RXdata+0x160>
            switch (Master.ID_490_buffer[0])
 8003238:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <Read_RXdata+0x234>)
 800323a:	7c1b      	ldrb	r3, [r3, #16]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d002      	beq.n	8003246 <Read_RXdata+0x186>
 8003240:	2b0e      	cmp	r3, #14
 8003242:	d006      	beq.n	8003252 <Read_RXdata+0x192>
        break;
 8003244:	e04f      	b.n	80032e6 <Read_RXdata+0x226>
                    Master_EMS.chosen_floor = Master.ID_490_buffer[1];
 8003246:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <Read_RXdata+0x234>)
 8003248:	7c5b      	ldrb	r3, [r3, #17]
 800324a:	461a      	mov	r2, r3
 800324c:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <Read_RXdata+0x238>)
 800324e:	619a      	str	r2, [r3, #24]
                    break;
 8003250:	e01f      	b.n	8003292 <Read_RXdata+0x1d2>
                    if(Master.ID_490_buffer[1] == 0x09) {
 8003252:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <Read_RXdata+0x234>)
 8003254:	7c5b      	ldrb	r3, [r3, #17]
 8003256:	2b09      	cmp	r3, #9
 8003258:	d10b      	bne.n	8003272 <Read_RXdata+0x1b2>
                        if(Master.ID_490_buffer[5] == 0x00) {
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <Read_RXdata+0x234>)
 800325c:	7d5b      	ldrb	r3, [r3, #21]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <Read_RXdata+0x1aa>
                            Master_EMS.open_door_button_stat = BUTTON_OFF;
 8003262:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <Read_RXdata+0x238>)
 8003264:	2200      	movs	r2, #0
 8003266:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8003268:	e012      	b.n	8003290 <Read_RXdata+0x1d0>
                            Master_EMS.open_door_button_stat = BUTTON_ON;
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <Read_RXdata+0x238>)
 800326c:	2201      	movs	r2, #1
 800326e:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8003270:	e00e      	b.n	8003290 <Read_RXdata+0x1d0>
                    else if (Master.ID_490_buffer[1] == 0x0A){
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <Read_RXdata+0x234>)
 8003274:	7c5b      	ldrb	r3, [r3, #17]
 8003276:	2b0a      	cmp	r3, #10
 8003278:	d10a      	bne.n	8003290 <Read_RXdata+0x1d0>
                        if(Master.ID_490_buffer[5] == 0x00) {
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <Read_RXdata+0x234>)
 800327c:	7d5b      	ldrb	r3, [r3, #21]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <Read_RXdata+0x1ca>
                            Master_EMS.close_door_button_stat = BUTTON_OFF;
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <Read_RXdata+0x238>)
 8003284:	2200      	movs	r2, #0
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
                    break;
 8003288:	e002      	b.n	8003290 <Read_RXdata+0x1d0>
                            Master_EMS.close_door_button_stat = BUTTON_ON;
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <Read_RXdata+0x238>)
 800328c:	2201      	movs	r2, #1
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
                    break;
 8003290:	bf00      	nop
        break;
 8003292:	e028      	b.n	80032e6 <Read_RXdata+0x226>
            for (int i = 0; i < rxLength; i++) {
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	e016      	b.n	80032c8 <Read_RXdata+0x208>
              Master.ID_68B_buffer[i] = 0x00;
 800329a:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <Read_RXdata+0x234>)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4413      	add	r3, r2
 80032a0:	3318      	adds	r3, #24
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
              MCP2515_SPI1_ReadReg(*base_adr+i, &Master.ID_68B_buffer[i], 1);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	b2d8      	uxtb	r0, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	3318      	adds	r3, #24
 80032b6:	4a0f      	ldr	r2, [pc, #60]	; (80032f4 <Read_RXdata+0x234>)
 80032b8:	4413      	add	r3, r2
 80032ba:	2201      	movs	r2, #1
 80032bc:	4619      	mov	r1, r3
 80032be:	f000 f9ce 	bl	800365e <MCP2515_SPI1_ReadReg>
            for (int i = 0; i < rxLength; i++) {
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3301      	adds	r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <Read_RXdata+0x230>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4293      	cmp	r3, r2
 80032d4:	dbe1      	blt.n	800329a <Read_RXdata+0x1da>
            getEMStime_Master();
 80032d6:	f000 f939 	bl	800354c <getEMStime_Master>
            break;
 80032da:	e004      	b.n	80032e6 <Read_RXdata+0x226>
            break;
 80032dc:	bf00      	nop
 80032de:	e002      	b.n	80032e6 <Read_RXdata+0x226>
        break;
 80032e0:	bf00      	nop
 80032e2:	e000      	b.n	80032e6 <Read_RXdata+0x226>
        break;
 80032e4:	bf00      	nop
    }  
} 
 80032e6:	bf00      	nop
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20001d9c 	.word	0x20001d9c
 80032f4:	200020f0 	.word	0x200020f0
 80032f8:	20002024 	.word	0x20002024

080032fc <Read_Slave1_RXdata>:

// Read the CAN data from Slave EMS 1 using SPI2 (apply for Master only)
void Read_Slave1_RXdata(uint16* rx_id, uint8* base_adr) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
	MCP2515_SPI2_ReadReg(0x65, &rxLength2, 1);  // Extract the DLC length of the messsage frame received from the Slaves 
 8003306:	2201      	movs	r2, #1
 8003308:	498d      	ldr	r1, [pc, #564]	; (8003540 <Read_Slave1_RXdata+0x244>)
 800330a:	2065      	movs	r0, #101	; 0x65
 800330c:	f000 fae6 	bl	80038dc <MCP2515_SPI2_ReadReg>
    switch(*rx_id)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	f240 3231 	movw	r2, #817	; 0x331
 8003318:	4293      	cmp	r3, r2
 800331a:	f000 80e8 	beq.w	80034ee <Read_Slave1_RXdata+0x1f2>
 800331e:	f240 3231 	movw	r2, #817	; 0x331
 8003322:	4293      	cmp	r3, r2
 8003324:	f300 8101 	bgt.w	800352a <Read_Slave1_RXdata+0x22e>
 8003328:	f240 3221 	movw	r2, #801	; 0x321
 800332c:	4293      	cmp	r3, r2
 800332e:	f000 8084 	beq.w	800343a <Read_Slave1_RXdata+0x13e>
 8003332:	f240 3221 	movw	r2, #801	; 0x321
 8003336:	4293      	cmp	r3, r2
 8003338:	f300 80f7 	bgt.w	800352a <Read_Slave1_RXdata+0x22e>
 800333c:	f240 3201 	movw	r2, #769	; 0x301
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <Read_Slave1_RXdata+0x52>
 8003344:	f240 3211 	movw	r2, #785	; 0x311
 8003348:	4293      	cmp	r3, r2
 800334a:	d035      	beq.n	80033b8 <Read_Slave1_RXdata+0xbc>
            }
            getEMStime_Slave1(); // Extract the time of the EMS slave - 1
        break;
        
        default:
            break;       
 800334c:	e0ed      	b.n	800352a <Read_Slave1_RXdata+0x22e>
            for (int i = 0; i < rxLength2; i++) {
 800334e:	2300      	movs	r3, #0
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
 8003352:	e00f      	b.n	8003374 <Read_Slave1_RXdata+0x78>
              MCP2515_SPI2_ReadReg(*base_adr+i, &Slave_1.ID_400_buffer[i], 1);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	b2db      	uxtb	r3, r3
 800335c:	4413      	add	r3, r2
 800335e:	b2d8      	uxtb	r0, r3
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	4a78      	ldr	r2, [pc, #480]	; (8003544 <Read_Slave1_RXdata+0x248>)
 8003364:	4413      	add	r3, r2
 8003366:	2201      	movs	r2, #1
 8003368:	4619      	mov	r1, r3
 800336a:	f000 fab7 	bl	80038dc <MCP2515_SPI2_ReadReg>
            for (int i = 0; i < rxLength2; i++) {
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	3301      	adds	r3, #1
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	4b72      	ldr	r3, [pc, #456]	; (8003540 <Read_Slave1_RXdata+0x244>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	4293      	cmp	r3, r2
 8003380:	dbe8      	blt.n	8003354 <Read_Slave1_RXdata+0x58>
            for(int j = rxLength2; j < 8; j++) {
 8003382:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <Read_Slave1_RXdata+0x244>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	623b      	str	r3, [r7, #32]
 800338a:	e007      	b.n	800339c <Read_Slave1_RXdata+0xa0>
                Slave_1.ID_400_buffer[j] = 0x00;
 800338c:	4a6d      	ldr	r2, [pc, #436]	; (8003544 <Read_Slave1_RXdata+0x248>)
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	4413      	add	r3, r2
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength2; j < 8; j++) {
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	3301      	adds	r3, #1
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	2b07      	cmp	r3, #7
 80033a0:	ddf4      	ble.n	800338c <Read_Slave1_RXdata+0x90>
            if(Slave_1.ID_400_buffer[0] == 0x40) {
 80033a2:	4b68      	ldr	r3, [pc, #416]	; (8003544 <Read_Slave1_RXdata+0x248>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	f040 80c1 	bne.w	800352e <Read_Slave1_RXdata+0x232>
                    Slave_EMS_1.curren_floor = Slave_1.ID_400_buffer[1];
 80033ac:	4b65      	ldr	r3, [pc, #404]	; (8003544 <Read_Slave1_RXdata+0x248>)
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b65      	ldr	r3, [pc, #404]	; (8003548 <Read_Slave1_RXdata+0x24c>)
 80033b4:	61da      	str	r2, [r3, #28]
        break;
 80033b6:	e0ba      	b.n	800352e <Read_Slave1_RXdata+0x232>
            for (int i = 0; i < rxLength2; i++) {
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	e010      	b.n	80033e0 <Read_Slave1_RXdata+0xe4>
                MCP2515_SPI2_ReadReg(*base_adr+i, &Slave_1.ID_481_buffer[i], 1);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	b2d8      	uxtb	r0, r3
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3308      	adds	r3, #8
 80033ce:	4a5d      	ldr	r2, [pc, #372]	; (8003544 <Read_Slave1_RXdata+0x248>)
 80033d0:	4413      	add	r3, r2
 80033d2:	2201      	movs	r2, #1
 80033d4:	4619      	mov	r1, r3
 80033d6:	f000 fa81 	bl	80038dc <MCP2515_SPI2_ReadReg>
            for (int i = 0; i < rxLength2; i++) {
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3301      	adds	r3, #1
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	4b57      	ldr	r3, [pc, #348]	; (8003540 <Read_Slave1_RXdata+0x244>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4293      	cmp	r3, r2
 80033ec:	dbe7      	blt.n	80033be <Read_Slave1_RXdata+0xc2>
            for(int j = rxLength2; j < 8; j++) {
 80033ee:	4b54      	ldr	r3, [pc, #336]	; (8003540 <Read_Slave1_RXdata+0x244>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e008      	b.n	800340a <Read_Slave1_RXdata+0x10e>
                Slave_1.ID_481_buffer[j] = 0x00;
 80033f8:	4a52      	ldr	r2, [pc, #328]	; (8003544 <Read_Slave1_RXdata+0x248>)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	3308      	adds	r3, #8
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength2; j < 8; j++) {
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	3301      	adds	r3, #1
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b07      	cmp	r3, #7
 800340e:	ddf3      	ble.n	80033f8 <Read_Slave1_RXdata+0xfc>
            if((Slave_1.ID_481_buffer[1] == 0x04)||(Slave_1.ID_481_buffer[1] == 0x02)) {
 8003410:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <Read_Slave1_RXdata+0x248>)
 8003412:	7a5b      	ldrb	r3, [r3, #9]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d004      	beq.n	8003422 <Read_Slave1_RXdata+0x126>
 8003418:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <Read_Slave1_RXdata+0x248>)
 800341a:	7a5b      	ldrb	r3, [r3, #9]
 800341c:	2b02      	cmp	r3, #2
 800341e:	f040 8088 	bne.w	8003532 <Read_Slave1_RXdata+0x236>
                if(Slave_1.ID_481_buffer[5] == 0x00) {
 8003422:	4b48      	ldr	r3, [pc, #288]	; (8003544 <Read_Slave1_RXdata+0x248>)
 8003424:	7b5b      	ldrb	r3, [r3, #13]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d103      	bne.n	8003432 <Read_Slave1_RXdata+0x136>
                    Slave_EMS_1.door_status = DOOR_OPENED;
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <Read_Slave1_RXdata+0x24c>)
 800342c:	2200      	movs	r2, #0
 800342e:	621a      	str	r2, [r3, #32]
        break;  
 8003430:	e07f      	b.n	8003532 <Read_Slave1_RXdata+0x236>
                    Slave_EMS_1.door_status = DOOR_CLOSED;
 8003432:	4b45      	ldr	r3, [pc, #276]	; (8003548 <Read_Slave1_RXdata+0x24c>)
 8003434:	2201      	movs	r2, #1
 8003436:	621a      	str	r2, [r3, #32]
        break;  
 8003438:	e07b      	b.n	8003532 <Read_Slave1_RXdata+0x236>
            for (int i = 0; i < rxLength2; i++) {
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e010      	b.n	8003462 <Read_Slave1_RXdata+0x166>
              MCP2515_SPI2_ReadReg(*base_adr+i, &Slave_1.ID_490_buffer[i], 1);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	4413      	add	r3, r2
 800344a:	b2d8      	uxtb	r0, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3310      	adds	r3, #16
 8003450:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <Read_Slave1_RXdata+0x248>)
 8003452:	4413      	add	r3, r2
 8003454:	2201      	movs	r2, #1
 8003456:	4619      	mov	r1, r3
 8003458:	f000 fa40 	bl	80038dc <MCP2515_SPI2_ReadReg>
            for (int i = 0; i < rxLength2; i++) {
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	3301      	adds	r3, #1
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	4b37      	ldr	r3, [pc, #220]	; (8003540 <Read_Slave1_RXdata+0x244>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4293      	cmp	r3, r2
 800346e:	dbe7      	blt.n	8003440 <Read_Slave1_RXdata+0x144>
            for(int j = rxLength2; j < 8; j++) {
 8003470:	4b33      	ldr	r3, [pc, #204]	; (8003540 <Read_Slave1_RXdata+0x244>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e008      	b.n	800348c <Read_Slave1_RXdata+0x190>
                Slave_1.ID_490_buffer[j] = 0x00;
 800347a:	4a32      	ldr	r2, [pc, #200]	; (8003544 <Read_Slave1_RXdata+0x248>)
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	3310      	adds	r3, #16
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
            for(int j = rxLength2; j < 8; j++) {
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3301      	adds	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b07      	cmp	r3, #7
 8003490:	ddf3      	ble.n	800347a <Read_Slave1_RXdata+0x17e>
            switch (Slave_1.ID_490_buffer[0])
 8003492:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <Read_Slave1_RXdata+0x248>)
 8003494:	7c1b      	ldrb	r3, [r3, #16]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d002      	beq.n	80034a0 <Read_Slave1_RXdata+0x1a4>
 800349a:	2b0e      	cmp	r3, #14
 800349c:	d007      	beq.n	80034ae <Read_Slave1_RXdata+0x1b2>
                break;
 800349e:	e04a      	b.n	8003536 <Read_Slave1_RXdata+0x23a>
                    Slave_EMS_1.chosen_floor = Slave_1.ID_490_buffer[1];
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <Read_Slave1_RXdata+0x248>)
 80034a2:	7c5b      	ldrb	r3, [r3, #17]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <Read_Slave1_RXdata+0x24c>)
 80034a8:	619a      	str	r2, [r3, #24]
                    break;
 80034aa:	bf00      	nop
                break;
 80034ac:	e043      	b.n	8003536 <Read_Slave1_RXdata+0x23a>
                    if(Slave_1.ID_490_buffer[1] == 0x09) {
 80034ae:	4b25      	ldr	r3, [pc, #148]	; (8003544 <Read_Slave1_RXdata+0x248>)
 80034b0:	7c5b      	ldrb	r3, [r3, #17]
 80034b2:	2b09      	cmp	r3, #9
 80034b4:	d10b      	bne.n	80034ce <Read_Slave1_RXdata+0x1d2>
                        if(Slave_1.ID_490_buffer[5] == 0x00) {
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <Read_Slave1_RXdata+0x248>)
 80034b8:	7d5b      	ldrb	r3, [r3, #21]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <Read_Slave1_RXdata+0x1ca>
                            Slave_EMS_1.open_door_button_stat = BUTTON_OFF;
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <Read_Slave1_RXdata+0x24c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 80034c4:	e037      	b.n	8003536 <Read_Slave1_RXdata+0x23a>
                            Slave_EMS_1.open_door_button_stat = BUTTON_ON;
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <Read_Slave1_RXdata+0x24c>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 80034cc:	e033      	b.n	8003536 <Read_Slave1_RXdata+0x23a>
                    else if (Slave_1.ID_490_buffer[1] == 0x0A){
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <Read_Slave1_RXdata+0x248>)
 80034d0:	7c5b      	ldrb	r3, [r3, #17]
 80034d2:	2b0a      	cmp	r3, #10
 80034d4:	d12f      	bne.n	8003536 <Read_Slave1_RXdata+0x23a>
                        if(Slave_1.ID_490_buffer[5] == 0x00) {
 80034d6:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <Read_Slave1_RXdata+0x248>)
 80034d8:	7d5b      	ldrb	r3, [r3, #21]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <Read_Slave1_RXdata+0x1ea>
                            Slave_EMS_1.close_door_button_stat = BUTTON_OFF;
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <Read_Slave1_RXdata+0x24c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
                break;
 80034e4:	e027      	b.n	8003536 <Read_Slave1_RXdata+0x23a>
                            Slave_EMS_1.close_door_button_stat = BUTTON_ON;
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <Read_Slave1_RXdata+0x24c>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
                break;
 80034ec:	e023      	b.n	8003536 <Read_Slave1_RXdata+0x23a>
            for (int i = 0; i < rxLength2; i++) {
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e010      	b.n	8003516 <Read_Slave1_RXdata+0x21a>
              MCP2515_SPI2_ReadReg(*base_adr+i, &Slave_1.ID_68B_buffer[i], 1);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	b2d8      	uxtb	r0, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3318      	adds	r3, #24
 8003504:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <Read_Slave1_RXdata+0x248>)
 8003506:	4413      	add	r3, r2
 8003508:	2201      	movs	r2, #1
 800350a:	4619      	mov	r1, r3
 800350c:	f000 f9e6 	bl	80038dc <MCP2515_SPI2_ReadReg>
            for (int i = 0; i < rxLength2; i++) {
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3301      	adds	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <Read_Slave1_RXdata+0x244>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4293      	cmp	r3, r2
 8003522:	dbe7      	blt.n	80034f4 <Read_Slave1_RXdata+0x1f8>
            getEMStime_Slave1(); // Extract the time of the EMS slave - 1
 8003524:	f000 f83c 	bl	80035a0 <getEMStime_Slave1>
        break;
 8003528:	e006      	b.n	8003538 <Read_Slave1_RXdata+0x23c>
            break;       
 800352a:	bf00      	nop
 800352c:	e004      	b.n	8003538 <Read_Slave1_RXdata+0x23c>
        break;
 800352e:	bf00      	nop
 8003530:	e002      	b.n	8003538 <Read_Slave1_RXdata+0x23c>
        break;  
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <Read_Slave1_RXdata+0x23c>
                break;
 8003536:	bf00      	nop
    }
}
 8003538:	bf00      	nop
 800353a:	3728      	adds	r7, #40	; 0x28
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200020cd 	.word	0x200020cd
 8003544:	20002110 	.word	0x20002110
 8003548:	20001e04 	.word	0x20001e04

0800354c <getEMStime_Master>:

// Extract the time of the EMS Master
void getEMStime_Master(void) {
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
    Master_EMS.EMS_time.second = Master.ID_68B_buffer[0];
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <getEMStime_Master+0x4c>)
 8003552:	7e1b      	ldrb	r3, [r3, #24]
 8003554:	461a      	mov	r2, r3
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <getEMStime_Master+0x50>)
 8003558:	601a      	str	r2, [r3, #0]
    Master_EMS.EMS_time.minute = Master.ID_68B_buffer[1];
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <getEMStime_Master+0x4c>)
 800355c:	7e5b      	ldrb	r3, [r3, #25]
 800355e:	461a      	mov	r2, r3
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <getEMStime_Master+0x50>)
 8003562:	605a      	str	r2, [r3, #4]
    Master_EMS.EMS_time.hour = Master.ID_68B_buffer[2];
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <getEMStime_Master+0x4c>)
 8003566:	7e9b      	ldrb	r3, [r3, #26]
 8003568:	461a      	mov	r2, r3
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <getEMStime_Master+0x50>)
 800356c:	609a      	str	r2, [r3, #8]
    Master_EMS.EMS_time.day = Master.ID_68B_buffer[3];
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <getEMStime_Master+0x4c>)
 8003570:	7edb      	ldrb	r3, [r3, #27]
 8003572:	461a      	mov	r2, r3
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <getEMStime_Master+0x50>)
 8003576:	60da      	str	r2, [r3, #12]
    Master_EMS.EMS_time.weekday = Master.ID_68B_buffer[4] & (0x07);  // Weekday is the first 3 bits of 5th byte
 8003578:	4b07      	ldr	r3, [pc, #28]	; (8003598 <getEMStime_Master+0x4c>)
 800357a:	7f1b      	ldrb	r3, [r3, #28]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4a06      	ldr	r2, [pc, #24]	; (800359c <getEMStime_Master+0x50>)
 8003582:	6113      	str	r3, [r2, #16]
    Master_EMS.EMS_time.year = Master.ID_68B_buffer[5];
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <getEMStime_Master+0x4c>)
 8003586:	7f5b      	ldrb	r3, [r3, #29]
 8003588:	461a      	mov	r2, r3
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <getEMStime_Master+0x50>)
 800358c:	615a      	str	r2, [r3, #20]
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	200020f0 	.word	0x200020f0
 800359c:	20002024 	.word	0x20002024

080035a0 <getEMStime_Slave1>:

// Extract the time of the EMS slave - 1
void getEMStime_Slave1(void) {
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
    Slave_EMS_1.EMS_time.second = Slave_1.ID_68B_buffer[0];
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <getEMStime_Slave1+0x4c>)
 80035a6:	7e1b      	ldrb	r3, [r3, #24]
 80035a8:	461a      	mov	r2, r3
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <getEMStime_Slave1+0x50>)
 80035ac:	601a      	str	r2, [r3, #0]
    Slave_EMS_1.EMS_time.minute = Slave_1.ID_68B_buffer[1];
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <getEMStime_Slave1+0x4c>)
 80035b0:	7e5b      	ldrb	r3, [r3, #25]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <getEMStime_Slave1+0x50>)
 80035b6:	605a      	str	r2, [r3, #4]
    Slave_EMS_1.EMS_time.hour = Slave_1.ID_68B_buffer[2];
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <getEMStime_Slave1+0x4c>)
 80035ba:	7e9b      	ldrb	r3, [r3, #26]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <getEMStime_Slave1+0x50>)
 80035c0:	609a      	str	r2, [r3, #8]
    Slave_EMS_1.EMS_time.day = Slave_1.ID_68B_buffer[3];
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <getEMStime_Slave1+0x4c>)
 80035c4:	7edb      	ldrb	r3, [r3, #27]
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <getEMStime_Slave1+0x50>)
 80035ca:	60da      	str	r2, [r3, #12]
    Slave_EMS_1.EMS_time.weekday = (Slave_1.ID_68B_buffer[4] & (0x07));  // Weekday is the first 3 bits of 5th byte
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <getEMStime_Slave1+0x4c>)
 80035ce:	7f1b      	ldrb	r3, [r3, #28]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <getEMStime_Slave1+0x50>)
 80035d6:	6113      	str	r3, [r2, #16]
    Slave_EMS_1.EMS_time.year = Slave_1.ID_68B_buffer[5];
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <getEMStime_Slave1+0x4c>)
 80035da:	7f5b      	ldrb	r3, [r3, #29]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <getEMStime_Slave1+0x50>)
 80035e0:	615a      	str	r2, [r3, #20]
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	20002110 	.word	0x20002110
 80035f0:	20001e04 	.word	0x20001e04

080035f4 <SPI1_Tx>:
	{MCP_RXF5SIDH, 0x00},
};

/* SPI Tx wrapper function  */
static void SPI1_Tx(uint8_t data)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80035fe:	1df9      	adds	r1, r7, #7
 8003600:	2364      	movs	r3, #100	; 0x64
 8003602:	2201      	movs	r2, #1
 8003604:	4803      	ldr	r0, [pc, #12]	; (8003614 <SPI1_Tx+0x20>)
 8003606:	f003 fa90 	bl	8006b2a <HAL_SPI_Transmit>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20002064 	.word	0x20002064

08003618 <SPI1_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI1_Rx(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800361e:	1df9      	adds	r1, r7, #7
 8003620:	2364      	movs	r3, #100	; 0x64
 8003622:	2201      	movs	r2, #1
 8003624:	4803      	ldr	r0, [pc, #12]	; (8003634 <SPI1_Rx+0x1c>)
 8003626:	f003 fbee 	bl	8006e06 <HAL_SPI_Receive>
  return retVal;
 800362a:	79fb      	ldrb	r3, [r7, #7]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20002064 	.word	0x20002064

08003638 <MCP2515_SPI1_Reset>:

// Reset the MCP2515 connected through SPI1
void MCP2515_SPI1_Reset(void)
{    
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  SPI1_CS_OFF();
 800363c:	2200      	movs	r2, #0
 800363e:	2110      	movs	r1, #16
 8003640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003644:	f001 f96a 	bl	800491c <HAL_GPIO_WritePin>
      
  SPI1_Tx(MCP_RESET);
 8003648:	20c0      	movs	r0, #192	; 0xc0
 800364a:	f7ff ffd3 	bl	80035f4 <SPI1_Tx>
      
  SPI1_CS_ON();
 800364e:	2201      	movs	r2, #1
 8003650:	2110      	movs	r1, #16
 8003652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003656:	f001 f961 	bl	800491c <HAL_GPIO_WritePin>
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}

0800365e <MCP2515_SPI1_ReadReg>:

// Read the content of the register and return to a buffer
void MCP2515_SPI1_ReadReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 800365e:	b590      	push	{r4, r7, lr}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	6039      	str	r1, [r7, #0]
 8003668:	71fb      	strb	r3, [r7, #7]
 800366a:	4613      	mov	r3, r2
 800366c:	71bb      	strb	r3, [r7, #6]
	SPI1_CS_OFF();
 800366e:	2200      	movs	r2, #0
 8003670:	2110      	movs	r1, #16
 8003672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003676:	f001 f951 	bl	800491c <HAL_GPIO_WritePin>
	SPI1_Tx(MCP_READ);
 800367a:	2003      	movs	r0, #3
 800367c:	f7ff ffba 	bl	80035f4 <SPI1_Tx>
	SPI1_Tx(addr);
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ffb6 	bl	80035f4 <SPI1_Tx>
	while(size--) {
 8003688:	e006      	b.n	8003698 <MCP2515_SPI1_ReadReg+0x3a>
		*buff ++= SPI1_Rx();
 800368a:	683c      	ldr	r4, [r7, #0]
 800368c:	1c63      	adds	r3, r4, #1
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	f7ff ffc2 	bl	8003618 <SPI1_Rx>
 8003694:	4603      	mov	r3, r0
 8003696:	7023      	strb	r3, [r4, #0]
	while(size--) {
 8003698:	79bb      	ldrb	r3, [r7, #6]
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	71ba      	strb	r2, [r7, #6]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f3      	bne.n	800368a <MCP2515_SPI1_ReadReg+0x2c>
	}
	SPI1_CS_ON();
 80036a2:	2201      	movs	r2, #1
 80036a4:	2110      	movs	r1, #16
 80036a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036aa:	f001 f937 	bl	800491c <HAL_GPIO_WritePin>
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd90      	pop	{r4, r7, pc}

080036b6 <MCP2515_SPI1_WriteReg>:

// Write the content to the register
void MCP2515_SPI1_WriteReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	4603      	mov	r3, r0
 80036be:	6039      	str	r1, [r7, #0]
 80036c0:	71fb      	strb	r3, [r7, #7]
 80036c2:	4613      	mov	r3, r2
 80036c4:	71bb      	strb	r3, [r7, #6]
	SPI1_CS_OFF();
 80036c6:	2200      	movs	r2, #0
 80036c8:	2110      	movs	r1, #16
 80036ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ce:	f001 f925 	bl	800491c <HAL_GPIO_WritePin>
	SPI1_Tx(MCP_WRITE);
 80036d2:	2002      	movs	r0, #2
 80036d4:	f7ff ff8e 	bl	80035f4 <SPI1_Tx>
	SPI1_Tx(addr);
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ff8a 	bl	80035f4 <SPI1_Tx>
	while(size--) {
 80036e0:	e006      	b.n	80036f0 <MCP2515_SPI1_WriteReg+0x3a>
		SPI1_Tx(buff++);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	603a      	str	r2, [r7, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff ff82 	bl	80035f4 <SPI1_Tx>
	while(size--) {
 80036f0:	79bb      	ldrb	r3, [r7, #6]
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	71ba      	strb	r2, [r7, #6]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f3      	bne.n	80036e2 <MCP2515_SPI1_WriteReg+0x2c>
	}
	SPI1_CS_ON();
 80036fa:	2201      	movs	r2, #1
 80036fc:	2110      	movs	r1, #16
 80036fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003702:	f001 f90b 	bl	800491c <HAL_GPIO_WritePin>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <MCP2515_SPI1_RegModify>:

// Modify the register content by setting the corresponding bits
void MCP2515_SPI1_RegModify(uint8_t addr, uint8_t mask, uint8_t data) {
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	71fb      	strb	r3, [r7, #7]
 8003718:	460b      	mov	r3, r1
 800371a:	71bb      	strb	r3, [r7, #6]
 800371c:	4613      	mov	r3, r2
 800371e:	717b      	strb	r3, [r7, #5]
	SPI1_CS_OFF();
 8003720:	2200      	movs	r2, #0
 8003722:	2110      	movs	r1, #16
 8003724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003728:	f001 f8f8 	bl	800491c <HAL_GPIO_WritePin>
	SPI1_Tx(MCP_BITMOD);
 800372c:	2005      	movs	r0, #5
 800372e:	f7ff ff61 	bl	80035f4 <SPI1_Tx>
	SPI1_Tx(addr);
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff5d 	bl	80035f4 <SPI1_Tx>
	SPI1_Tx(mask);
 800373a:	79bb      	ldrb	r3, [r7, #6]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff59 	bl	80035f4 <SPI1_Tx>
	SPI1_Tx(data);
 8003742:	797b      	ldrb	r3, [r7, #5]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff55 	bl	80035f4 <SPI1_Tx>
	SPI1_CS_ON();
 800374a:	2201      	movs	r2, #1
 800374c:	2110      	movs	r1, #16
 800374e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003752:	f001 f8e3 	bl	800491c <HAL_GPIO_WritePin>
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <MCP2515_SPI1_RateConfig>:

// Config the rate of MCP2515 to make sure the speed is 125000 bps
void MCP2515_SPI1_RateConfig(void) {
 800375e:	b580      	push	{r7, lr}
 8003760:	af00      	add	r7, sp, #0
	MCP2515_SPI1_WriteReg(MCP_CNF1, MCP_8M_125K_CF1, 1);
 8003762:	2201      	movs	r2, #1
 8003764:	2101      	movs	r1, #1
 8003766:	202a      	movs	r0, #42	; 0x2a
 8003768:	f7ff ffa5 	bl	80036b6 <MCP2515_SPI1_WriteReg>
	MCP2515_SPI1_WriteReg(MCP_CNF2, MCP_8M_125K_CF2, 1);
 800376c:	2201      	movs	r2, #1
 800376e:	219a      	movs	r1, #154	; 0x9a
 8003770:	2029      	movs	r0, #41	; 0x29
 8003772:	f7ff ffa0 	bl	80036b6 <MCP2515_SPI1_WriteReg>
	MCP2515_SPI1_WriteReg(MCP_CNF3, MCP_8M_125K_CF3, 1);
 8003776:	2201      	movs	r2, #1
 8003778:	2107      	movs	r1, #7
 800377a:	2028      	movs	r0, #40	; 0x28
 800377c:	f7ff ff9b 	bl	80036b6 <MCP2515_SPI1_WriteReg>
	HAL_Delay(5);
 8003780:	2005      	movs	r0, #5
 8003782:	f7fd fe6d 	bl	8001460 <HAL_Delay>
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <MCP2515_SPI1_AddrReset>:

// Reset all of the address in MCP2515
void MCP2515_SPI1_AddrReset(void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	e040      	b.n	800381a <MCP2515_SPI1_AddrReset+0x8e>
		SPI1_CS_OFF();
 8003798:	2200      	movs	r2, #0
 800379a:	2110      	movs	r1, #16
 800379c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a0:	f001 f8bc 	bl	800491c <HAL_GPIO_WritePin>
		SPI1_Tx(MCP_WRITE);
 80037a4:	2002      	movs	r0, #2
 80037a6:	f7ff ff25 	bl	80035f4 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][0]);
 80037aa:	4a20      	ldr	r2, [pc, #128]	; (800382c <MCP2515_SPI1_AddrReset+0xa0>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff1d 	bl	80035f4 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1]);
 80037ba:	4a1c      	ldr	r2, [pc, #112]	; (800382c <MCP2515_SPI1_AddrReset+0xa0>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff ff14 	bl	80035f4 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1] >> 8);
 80037cc:	4a17      	ldr	r2, [pc, #92]	; (800382c <MCP2515_SPI1_AddrReset+0xa0>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ff0a 	bl	80035f4 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1] >> 16);
 80037e0:	4a12      	ldr	r2, [pc, #72]	; (800382c <MCP2515_SPI1_AddrReset+0xa0>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff ff00 	bl	80035f4 <SPI1_Tx>
		SPI1_Tx(mcp2515_bufffers_init[i][1] >> 24);
 80037f4:	4a0d      	ldr	r2, [pc, #52]	; (800382c <MCP2515_SPI1_AddrReset+0xa0>)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0e1b      	lsrs	r3, r3, #24
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fef6 	bl	80035f4 <SPI1_Tx>
		SPI1_CS_ON();
 8003808:	2201      	movs	r2, #1
 800380a:	2110      	movs	r1, #16
 800380c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003810:	f001 f884 	bl	800491c <HAL_GPIO_WritePin>
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b07      	cmp	r3, #7
 800381e:	d9bb      	bls.n	8003798 <MCP2515_SPI1_AddrReset+0xc>
	}
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	0800f6e4 	.word	0x0800f6e4

08003830 <MCP2515_SPI1_CanInit>:

// Initilize the MCP2515 connected through SPI1
void MCP2515_SPI1_CanInit(void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
	MCP2515_SPI1_Reset();
 8003834:	f7ff ff00 	bl	8003638 <MCP2515_SPI1_Reset>
	MCP2515_SPI1_RegModify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	21e0      	movs	r1, #224	; 0xe0
 800383c:	200f      	movs	r0, #15
 800383e:	f7ff ff66 	bl	800370e <MCP2515_SPI1_RegModify>
	MCP2515_SPI1_AddrReset();
 8003842:	f7ff ffa3 	bl	800378c <MCP2515_SPI1_AddrReset>
	MCP2515_SPI1_RateConfig();
 8003846:	f7ff ff8a 	bl	800375e <MCP2515_SPI1_RateConfig>
	MCP2515_SPI1_RegModify(MCP_CANINTE, 0xFF, 0xFF);
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	21ff      	movs	r1, #255	; 0xff
 800384e:	202b      	movs	r0, #43	; 0x2b
 8003850:	f7ff ff5d 	bl	800370e <MCP2515_SPI1_RegModify>
	MCP2515_SPI1_RegModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 8003854:	2200      	movs	r2, #0
 8003856:	21e0      	movs	r1, #224	; 0xe0
 8003858:	200f      	movs	r0, #15
 800385a:	f7ff ff58 	bl	800370e <MCP2515_SPI1_RegModify>
	MCP2515_SPI1_RegModify(MCP_RXB0CTRL,0xFF,0x00);
 800385e:	2200      	movs	r2, #0
 8003860:	21ff      	movs	r1, #255	; 0xff
 8003862:	2060      	movs	r0, #96	; 0x60
 8003864:	f7ff ff53 	bl	800370e <MCP2515_SPI1_RegModify>

}
 8003868:	bf00      	nop
 800386a:	bd80      	pop	{r7, pc}

0800386c <SPI2_Tx>:
}


/* SPI Tx wrapper function  */
static void SPI2_Tx(uint8_t data)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_EMS, &data, 1, SPI_TIMEOUT);    
 8003876:	1df9      	adds	r1, r7, #7
 8003878:	2364      	movs	r3, #100	; 0x64
 800387a:	2201      	movs	r2, #1
 800387c:	4803      	ldr	r0, [pc, #12]	; (800388c <SPI2_Tx+0x20>)
 800387e:	f003 f954 	bl	8006b2a <HAL_SPI_Transmit>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20001da0 	.word	0x20001da0

08003890 <SPI2_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI2_Rx(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_EMS, &retVal, 1, SPI_TIMEOUT);
 8003896:	1df9      	adds	r1, r7, #7
 8003898:	2364      	movs	r3, #100	; 0x64
 800389a:	2201      	movs	r2, #1
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <SPI2_Rx+0x1c>)
 800389e:	f003 fab2 	bl	8006e06 <HAL_SPI_Receive>
  return retVal;
 80038a2:	79fb      	ldrb	r3, [r7, #7]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20001da0 	.word	0x20001da0

080038b0 <MCP2515_SPI2_Reset>:

void MCP2515_SPI2_Reset(void)
{    
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  SPI2_CS_OFF();
 80038b4:	2200      	movs	r2, #0
 80038b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038ba:	4807      	ldr	r0, [pc, #28]	; (80038d8 <MCP2515_SPI2_Reset+0x28>)
 80038bc:	f001 f82e 	bl	800491c <HAL_GPIO_WritePin>
      
  SPI2_Tx(MCP_RESET);
 80038c0:	20c0      	movs	r0, #192	; 0xc0
 80038c2:	f7ff ffd3 	bl	800386c <SPI2_Tx>

  SPI2_CS_ON();
 80038c6:	2201      	movs	r2, #1
 80038c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038cc:	4802      	ldr	r0, [pc, #8]	; (80038d8 <MCP2515_SPI2_Reset+0x28>)
 80038ce:	f001 f825 	bl	800491c <HAL_GPIO_WritePin>
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	48000400 	.word	0x48000400

080038dc <MCP2515_SPI2_ReadReg>:

void MCP2515_SPI2_ReadReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	6039      	str	r1, [r7, #0]
 80038e6:	71fb      	strb	r3, [r7, #7]
 80038e8:	4613      	mov	r3, r2
 80038ea:	71bb      	strb	r3, [r7, #6]
	SPI2_CS_OFF();
 80038ec:	2200      	movs	r2, #0
 80038ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038f2:	4810      	ldr	r0, [pc, #64]	; (8003934 <MCP2515_SPI2_ReadReg+0x58>)
 80038f4:	f001 f812 	bl	800491c <HAL_GPIO_WritePin>
	SPI2_Tx(MCP_READ);
 80038f8:	2003      	movs	r0, #3
 80038fa:	f7ff ffb7 	bl	800386c <SPI2_Tx>
	SPI2_Tx(addr);
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ffb3 	bl	800386c <SPI2_Tx>
	while(size--) {
 8003906:	e006      	b.n	8003916 <MCP2515_SPI2_ReadReg+0x3a>
		*buff ++= SPI2_Rx();
 8003908:	683c      	ldr	r4, [r7, #0]
 800390a:	1c63      	adds	r3, r4, #1
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	f7ff ffbf 	bl	8003890 <SPI2_Rx>
 8003912:	4603      	mov	r3, r0
 8003914:	7023      	strb	r3, [r4, #0]
	while(size--) {
 8003916:	79bb      	ldrb	r3, [r7, #6]
 8003918:	1e5a      	subs	r2, r3, #1
 800391a:	71ba      	strb	r2, [r7, #6]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f3      	bne.n	8003908 <MCP2515_SPI2_ReadReg+0x2c>
	}
	SPI2_CS_ON();
 8003920:	2201      	movs	r2, #1
 8003922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003926:	4803      	ldr	r0, [pc, #12]	; (8003934 <MCP2515_SPI2_ReadReg+0x58>)
 8003928:	f000 fff8 	bl	800491c <HAL_GPIO_WritePin>
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bd90      	pop	{r4, r7, pc}
 8003934:	48000400 	.word	0x48000400

08003938 <MCP2515_SPI2_WriteReg>:

void MCP2515_SPI2_WriteReg(uint8_t addr, uint8_t* buff, uint8_t size) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
 8003944:	4613      	mov	r3, r2
 8003946:	71bb      	strb	r3, [r7, #6]
	SPI2_CS_OFF();
 8003948:	2200      	movs	r2, #0
 800394a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800394e:	4810      	ldr	r0, [pc, #64]	; (8003990 <MCP2515_SPI2_WriteReg+0x58>)
 8003950:	f000 ffe4 	bl	800491c <HAL_GPIO_WritePin>
	SPI2_Tx(MCP_WRITE);
 8003954:	2002      	movs	r0, #2
 8003956:	f7ff ff89 	bl	800386c <SPI2_Tx>
	SPI2_Tx(addr);
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff85 	bl	800386c <SPI2_Tx>
	while(size--) {
 8003962:	e006      	b.n	8003972 <MCP2515_SPI2_WriteReg+0x3a>
		SPI2_Tx(buff++);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	603a      	str	r2, [r7, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff7d 	bl	800386c <SPI2_Tx>
	while(size--) {
 8003972:	79bb      	ldrb	r3, [r7, #6]
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	71ba      	strb	r2, [r7, #6]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f3      	bne.n	8003964 <MCP2515_SPI2_WriteReg+0x2c>
	}
	SPI2_CS_ON();
 800397c:	2201      	movs	r2, #1
 800397e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003982:	4803      	ldr	r0, [pc, #12]	; (8003990 <MCP2515_SPI2_WriteReg+0x58>)
 8003984:	f000 ffca 	bl	800491c <HAL_GPIO_WritePin>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	48000400 	.word	0x48000400

08003994 <MCP2515_SPI2_RegModify>:

void MCP2515_SPI2_RegModify(uint8_t addr, uint8_t mask, uint8_t data) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
 800399e:	460b      	mov	r3, r1
 80039a0:	71bb      	strb	r3, [r7, #6]
 80039a2:	4613      	mov	r3, r2
 80039a4:	717b      	strb	r3, [r7, #5]
	SPI2_CS_OFF();
 80039a6:	2200      	movs	r2, #0
 80039a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ac:	480d      	ldr	r0, [pc, #52]	; (80039e4 <MCP2515_SPI2_RegModify+0x50>)
 80039ae:	f000 ffb5 	bl	800491c <HAL_GPIO_WritePin>
	SPI2_Tx(MCP_BITMOD);
 80039b2:	2005      	movs	r0, #5
 80039b4:	f7ff ff5a 	bl	800386c <SPI2_Tx>
	SPI2_Tx(addr);
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff56 	bl	800386c <SPI2_Tx>
	SPI2_Tx(mask);
 80039c0:	79bb      	ldrb	r3, [r7, #6]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff52 	bl	800386c <SPI2_Tx>
	SPI2_Tx(data);
 80039c8:	797b      	ldrb	r3, [r7, #5]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff4e 	bl	800386c <SPI2_Tx>
	SPI2_CS_ON();
 80039d0:	2201      	movs	r2, #1
 80039d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039d6:	4803      	ldr	r0, [pc, #12]	; (80039e4 <MCP2515_SPI2_RegModify+0x50>)
 80039d8:	f000 ffa0 	bl	800491c <HAL_GPIO_WritePin>
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	48000400 	.word	0x48000400

080039e8 <MCP2515_SPI2_RateConfig>:

void MCP2515_SPI2_RateConfig(void) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	MCP2515_SPI2_WriteReg(MCP_CNF1, MCP_8M_125K_CF1, 1);
 80039ec:	2201      	movs	r2, #1
 80039ee:	2101      	movs	r1, #1
 80039f0:	202a      	movs	r0, #42	; 0x2a
 80039f2:	f7ff ffa1 	bl	8003938 <MCP2515_SPI2_WriteReg>
	MCP2515_SPI2_WriteReg(MCP_CNF2, MCP_8M_125K_CF2, 1);
 80039f6:	2201      	movs	r2, #1
 80039f8:	219a      	movs	r1, #154	; 0x9a
 80039fa:	2029      	movs	r0, #41	; 0x29
 80039fc:	f7ff ff9c 	bl	8003938 <MCP2515_SPI2_WriteReg>
	MCP2515_SPI2_WriteReg(MCP_CNF3, MCP_8M_125K_CF3, 1);
 8003a00:	2201      	movs	r2, #1
 8003a02:	2107      	movs	r1, #7
 8003a04:	2028      	movs	r0, #40	; 0x28
 8003a06:	f7ff ff97 	bl	8003938 <MCP2515_SPI2_WriteReg>
	HAL_Delay(5);
 8003a0a:	2005      	movs	r0, #5
 8003a0c:	f7fd fd28 	bl	8001460 <HAL_Delay>
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <MCP2515_SPI2_AddrReset>:

void MCP2515_SPI2_AddrReset(void) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	e040      	b.n	8003aa2 <MCP2515_SPI2_AddrReset+0x8e>
		SPI2_CS_OFF();
 8003a20:	2200      	movs	r2, #0
 8003a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a26:	4823      	ldr	r0, [pc, #140]	; (8003ab4 <MCP2515_SPI2_AddrReset+0xa0>)
 8003a28:	f000 ff78 	bl	800491c <HAL_GPIO_WritePin>
		SPI2_Tx(MCP_WRITE);
 8003a2c:	2002      	movs	r0, #2
 8003a2e:	f7ff ff1d 	bl	800386c <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][0]);
 8003a32:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <MCP2515_SPI2_AddrReset+0xa4>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff15 	bl	800386c <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1]);
 8003a42:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <MCP2515_SPI2_AddrReset+0xa4>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff0c 	bl	800386c <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1] >> 8);
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <MCP2515_SPI2_AddrReset+0xa4>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff02 	bl	800386c <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1] >> 16);
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <MCP2515_SPI2_AddrReset+0xa4>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fef8 	bl	800386c <SPI2_Tx>
		SPI2_Tx(mcp2515_bufffers_init[i][1] >> 24);
 8003a7c:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <MCP2515_SPI2_AddrReset+0xa4>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0e1b      	lsrs	r3, r3, #24
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff feee 	bl	800386c <SPI2_Tx>
		SPI2_CS_ON();
 8003a90:	2201      	movs	r2, #1
 8003a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a96:	4807      	ldr	r0, [pc, #28]	; (8003ab4 <MCP2515_SPI2_AddrReset+0xa0>)
 8003a98:	f000 ff40 	bl	800491c <HAL_GPIO_WritePin>
	for (int i = 0; i < sizeof(mcp2515_bufffers_init)/(2*sizeof(DWORD)); i++) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b07      	cmp	r3, #7
 8003aa6:	d9bb      	bls.n	8003a20 <MCP2515_SPI2_AddrReset+0xc>
	}
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	48000400 	.word	0x48000400
 8003ab8:	0800f6e4 	.word	0x0800f6e4

08003abc <MCP2515_SPI2_CanInit>:

void MCP2515_SPI2_CanInit(void) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
	MCP2515_SPI2_Reset();
 8003ac0:	f7ff fef6 	bl	80038b0 <MCP2515_SPI2_Reset>
	MCP2515_SPI2_RegModify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	21e0      	movs	r1, #224	; 0xe0
 8003ac8:	200f      	movs	r0, #15
 8003aca:	f7ff ff63 	bl	8003994 <MCP2515_SPI2_RegModify>
	MCP2515_SPI2_AddrReset();
 8003ace:	f7ff ffa1 	bl	8003a14 <MCP2515_SPI2_AddrReset>
	MCP2515_SPI2_RateConfig();
 8003ad2:	f7ff ff89 	bl	80039e8 <MCP2515_SPI2_RateConfig>
	MCP2515_SPI2_RegModify(MCP_CANINTE, 0xFF, 0xFF);
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	21ff      	movs	r1, #255	; 0xff
 8003ada:	202b      	movs	r0, #43	; 0x2b
 8003adc:	f7ff ff5a 	bl	8003994 <MCP2515_SPI2_RegModify>
	MCP2515_SPI2_RegModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	21e0      	movs	r1, #224	; 0xe0
 8003ae4:	200f      	movs	r0, #15
 8003ae6:	f7ff ff55 	bl	8003994 <MCP2515_SPI2_RegModify>
	MCP2515_SPI1_RegModify(MCP_RXB0CTRL,0xFF,0x00);
 8003aea:	2200      	movs	r2, #0
 8003aec:	21ff      	movs	r1, #255	; 0xff
 8003aee:	2060      	movs	r0, #96	; 0x60
 8003af0:	f7ff fe0d 	bl	800370e <MCP2515_SPI1_RegModify>

}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6053      	str	r3, [r2, #4]
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	e0042000 	.word	0xe0042000

08003b18 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	6053      	str	r3, [r2, #4]
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e0042000 	.word	0xe0042000

08003b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_Init+0x3c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <HAL_Init+0x3c>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4e:	2003      	movs	r0, #3
 8003b50:	f000 f9c0 	bl	8003ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b54:	200f      	movs	r0, #15
 8003b56:	f000 f80f 	bl	8003b78 <HAL_InitTick>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	71fb      	strb	r3, [r7, #7]
 8003b64:	e001      	b.n	8003b6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b66:	f7fe ff57 	bl	8002a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	58004000 	.word	0x58004000

08003b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_InitTick+0x6c>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d024      	beq.n	8003bd6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b8c:	f002 f856 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_InitTick+0x6c>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 f9d6 	bl	8003f56 <HAL_SYSTICK_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10f      	bne.n	8003bd0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d809      	bhi.n	8003bca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbe:	f000 f994 	bl	8003eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bc2:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HAL_InitTick+0x70>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	e007      	b.n	8003bda <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	e004      	b.n	8003bda <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	e001      	b.n	8003bda <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	2000001c 	.word	0x2000001c
 8003be8:	20000018 	.word	0x20000018

08003bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_IncTick+0x20>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_IncTick+0x24>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_IncTick+0x24>)
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	2000001c 	.word	0x2000001c
 8003c10:	20002150 	.word	0x20002150

08003c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return uwTick;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_GetTick+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20002150 	.word	0x20002150

08003c2c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <HAL_GetTickPrio+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000018 	.word	0x20000018

08003c44 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003c48:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <HAL_GetTickFreq+0x14>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	2000001c 	.word	0x2000001c

08003c5c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003c60:	f7ff ff4a 	bl	8003af8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003c6c:	f7ff ff54 	bl	8003b18 <LL_DBGMCU_EnableDBGStopMode>
}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c90:	4013      	ands	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ca6:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	60d3      	str	r3, [r2, #12]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	f003 0307 	and.w	r3, r3, #7
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	db0b      	blt.n	8003d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	f003 021f 	and.w	r2, r3, #31
 8003cf0:	4907      	ldr	r1, [pc, #28]	; (8003d10 <__NVIC_EnableIRQ+0x38>)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000e100 	.word	0xe000e100

08003d14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	db12      	blt.n	8003d4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	f003 021f 	and.w	r2, r3, #31
 8003d2c:	490a      	ldr	r1, [pc, #40]	; (8003d58 <__NVIC_DisableIRQ+0x44>)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2001      	movs	r0, #1
 8003d36:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3a:	3320      	adds	r3, #32
 8003d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d40:	f3bf 8f4f 	dsb	sy
}
 8003d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d46:	f3bf 8f6f 	isb	sy
}
 8003d4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	e000e100 	.word	0xe000e100

08003d5c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	db0c      	blt.n	8003d88 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	f003 021f 	and.w	r2, r3, #31
 8003d74:	4907      	ldr	r1, [pc, #28]	; (8003d94 <__NVIC_SetPendingIRQ+0x38>)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d82:	3340      	adds	r3, #64	; 0x40
 8003d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000e100 	.word	0xe000e100

08003d98 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	db0c      	blt.n	8003dc4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	4907      	ldr	r1, [pc, #28]	; (8003dd0 <__NVIC_ClearPendingIRQ+0x38>)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	2001      	movs	r0, #1
 8003dba:	fa00 f202 	lsl.w	r2, r0, r2
 8003dbe:	3360      	adds	r3, #96	; 0x60
 8003dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100

08003dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	db0a      	blt.n	8003dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	490c      	ldr	r1, [pc, #48]	; (8003e20 <__NVIC_SetPriority+0x4c>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	0112      	lsls	r2, r2, #4
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	440b      	add	r3, r1
 8003df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dfc:	e00a      	b.n	8003e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4908      	ldr	r1, [pc, #32]	; (8003e24 <__NVIC_SetPriority+0x50>)
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	0112      	lsls	r2, r2, #4
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	440b      	add	r3, r1
 8003e12:	761a      	strb	r2, [r3, #24]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000e100 	.word	0xe000e100
 8003e24:	e000ed00 	.word	0xe000ed00

08003e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f1c3 0307 	rsb	r3, r3, #7
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	bf28      	it	cs
 8003e46:	2304      	movcs	r3, #4
 8003e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d902      	bls.n	8003e58 <NVIC_EncodePriority+0x30>
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3b03      	subs	r3, #3
 8003e56:	e000      	b.n	8003e5a <NVIC_EncodePriority+0x32>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43da      	mvns	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e70:	f04f 31ff 	mov.w	r1, #4294967295
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	43d9      	mvns	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e80:	4313      	orrs	r3, r2
         );
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3724      	adds	r7, #36	; 0x24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea0:	d301      	bcc.n	8003ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00f      	b.n	8003ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <SysTick_Config+0x40>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eae:	210f      	movs	r1, #15
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	f7ff ff8e 	bl	8003dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <SysTick_Config+0x40>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <SysTick_Config+0x40>)
 8003ec0:	2207      	movs	r2, #7
 8003ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	e000e010 	.word	0xe000e010

08003ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fec9 	bl	8003c74 <__NVIC_SetPriorityGrouping>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b086      	sub	sp, #24
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef8:	f7ff fee0 	bl	8003cbc <__NVIC_GetPriorityGrouping>
 8003efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	f7ff ff90 	bl	8003e28 <NVIC_EncodePriority>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff5f 	bl	8003dd4 <__NVIC_SetPriority>
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fed3 	bl	8003cd8 <__NVIC_EnableIRQ>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	4603      	mov	r3, r0
 8003f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fee3 	bl	8003d14 <__NVIC_DisableIRQ>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff96 	bl	8003e90 <SysTick_Config>
 8003f64:	4603      	mov	r3, r0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff feed 	bl	8003d5c <__NVIC_SetPendingIRQ>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fefd 	bl	8003d98 <__NVIC_ClearPendingIRQ>
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e08e      	b.n	80040d8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <HAL_DMA_Init+0x138>)
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d80f      	bhi.n	8003fe6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b45      	ldr	r3, [pc, #276]	; (80040e4 <HAL_DMA_Init+0x13c>)
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a45      	ldr	r2, [pc, #276]	; (80040e8 <HAL_DMA_Init+0x140>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	009a      	lsls	r2, r3, #2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a42      	ldr	r2, [pc, #264]	; (80040ec <HAL_DMA_Init+0x144>)
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fe4:	e00e      	b.n	8004004 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b40      	ldr	r3, [pc, #256]	; (80040f0 <HAL_DMA_Init+0x148>)
 8003fee:	4413      	add	r3, r2
 8003ff0:	4a3d      	ldr	r2, [pc, #244]	; (80040e8 <HAL_DMA_Init+0x140>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	009a      	lsls	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a3c      	ldr	r2, [pc, #240]	; (80040f4 <HAL_DMA_Init+0x14c>)
 8004002:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa74 	bl	8004544 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004064:	d102      	bne.n	800406c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004074:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004078:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004082:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <HAL_DMA_Init+0x106>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b04      	cmp	r3, #4
 8004092:	d80c      	bhi.n	80040ae <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa93 	bl	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	e008      	b.n	80040c0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40020407 	.word	0x40020407
 80040e4:	bffdfff8 	.word	0xbffdfff8
 80040e8:	cccccccd 	.word	0xcccccccd
 80040ec:	40020000 	.word	0x40020000
 80040f0:	bffdfbf8 	.word	0xbffdfbf8
 80040f4:	40020400 	.word	0x40020400

080040f8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_DMA_Start_IT+0x20>
 8004114:	2302      	movs	r3, #2
 8004116:	e066      	b.n	80041e6 <HAL_DMA_Start_IT+0xee>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d155      	bne.n	80041d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f9b9 	bl	80044c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 020e 	orr.w	r2, r2, #14
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e00f      	b.n	8004190 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0204 	bic.w	r2, r2, #4
 800417e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 020a 	orr.w	r2, r2, #10
 800418e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e005      	b.n	80041e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
 80041e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e04f      	b.n	80042a0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d008      	beq.n	800421e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2204      	movs	r2, #4
 8004210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e040      	b.n	80042a0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 020e 	bic.w	r2, r2, #14
 800422c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800423c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f003 021c 	and.w	r2, r3, #28
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f202 	lsl.w	r2, r1, r2
 8004260:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800426a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00c      	beq.n	800428e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004282:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800428c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d005      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2204      	movs	r2, #4
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e047      	b.n	8004360 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 020e 	bic.w	r2, r2, #14
 80042de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	f003 021c 	and.w	r2, r3, #28
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2101      	movs	r1, #1
 800430e:	fa01 f202 	lsl.w	r2, r1, r2
 8004312:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800431c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00c      	beq.n	8004340 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004334:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800433e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
    }
  }
  return status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f003 031c 	and.w	r3, r3, #28
 800438a:	2204      	movs	r2, #4
 800438c:	409a      	lsls	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d026      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x7a>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d021      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0204 	bic.w	r2, r2, #4
 80043bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f003 021c 	and.w	r2, r3, #28
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2104      	movs	r1, #4
 80043cc:	fa01 f202 	lsl.w	r2, r1, r2
 80043d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d071      	beq.n	80044be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043e2:	e06c      	b.n	80044be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	f003 031c 	and.w	r3, r3, #28
 80043ec:	2202      	movs	r2, #2
 80043ee:	409a      	lsls	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d02e      	beq.n	8004456 <HAL_DMA_IRQHandler+0xec>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d029      	beq.n	8004456 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 020a 	bic.w	r2, r2, #10
 800441e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f003 021c 	and.w	r2, r3, #28
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	2102      	movs	r1, #2
 8004436:	fa01 f202 	lsl.w	r2, r1, r2
 800443a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d038      	beq.n	80044be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004454:	e033      	b.n	80044be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f003 031c 	and.w	r3, r3, #28
 800445e:	2208      	movs	r2, #8
 8004460:	409a      	lsls	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02a      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x156>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d025      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 020e 	bic.w	r2, r2, #14
 8004482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	f003 021c 	and.w	r2, r3, #28
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2101      	movs	r1, #1
 8004492:	fa01 f202 	lsl.w	r2, r1, r2
 8004496:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d004      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
}
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f003 021c 	and.w	r2, r3, #28
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2101      	movs	r1, #1
 8004500:	fa01 f202 	lsl.w	r2, r1, r2
 8004504:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b10      	cmp	r3, #16
 8004514:	d108      	bne.n	8004528 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004526:	e007      	b.n	8004538 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d80a      	bhi.n	800456e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004564:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6493      	str	r3, [r2, #72]	; 0x48
 800456c:	e007      	b.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	009a      	lsls	r2, r3, #2
 8004576:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004578:	4413      	add	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	3b08      	subs	r3, #8
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004594:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2201      	movs	r2, #1
 800459e:	409a      	lsls	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40020407 	.word	0x40020407
 80045b4:	4002081c 	.word	0x4002081c
 80045b8:	cccccccd 	.word	0xcccccccd
 80045bc:	40020880 	.word	0x40020880

080045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	461a      	mov	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80045e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2201      	movs	r2, #1
 80045f0:	409a      	lsls	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	1000823f 	.word	0x1000823f
 8004608:	40020940 	.word	0x40020940

0800460c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800461a:	e14c      	b.n	80048b6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	2101      	movs	r1, #1
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 813e 	beq.w	80048b0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d005      	beq.n	800464c <HAL_GPIO_Init+0x40>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d130      	bne.n	80046ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004682:	2201      	movs	r2, #1
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 0201 	and.w	r2, r3, #1
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d017      	beq.n	80046ea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d123      	bne.n	800473e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	08da      	lsrs	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3208      	adds	r2, #8
 80046fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	220f      	movs	r2, #15
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	08da      	lsrs	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3208      	adds	r2, #8
 8004738:	6939      	ldr	r1, [r7, #16]
 800473a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0203 	and.w	r2, r3, #3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8098 	beq.w	80048b0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004780:	4a54      	ldr	r2, [pc, #336]	; (80048d4 <HAL_GPIO_Init+0x2c8>)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	3302      	adds	r3, #2
 8004788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	220f      	movs	r2, #15
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047aa:	d019      	beq.n	80047e0 <HAL_GPIO_Init+0x1d4>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a4a      	ldr	r2, [pc, #296]	; (80048d8 <HAL_GPIO_Init+0x2cc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <HAL_GPIO_Init+0x1d0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a49      	ldr	r2, [pc, #292]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00d      	beq.n	80047d8 <HAL_GPIO_Init+0x1cc>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a48      	ldr	r2, [pc, #288]	; (80048e0 <HAL_GPIO_Init+0x2d4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <HAL_GPIO_Init+0x1c8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a47      	ldr	r2, [pc, #284]	; (80048e4 <HAL_GPIO_Init+0x2d8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_GPIO_Init+0x1c4>
 80047cc:	2304      	movs	r3, #4
 80047ce:	e008      	b.n	80047e2 <HAL_GPIO_Init+0x1d6>
 80047d0:	2307      	movs	r3, #7
 80047d2:	e006      	b.n	80047e2 <HAL_GPIO_Init+0x1d6>
 80047d4:	2303      	movs	r3, #3
 80047d6:	e004      	b.n	80047e2 <HAL_GPIO_Init+0x1d6>
 80047d8:	2302      	movs	r3, #2
 80047da:	e002      	b.n	80047e2 <HAL_GPIO_Init+0x1d6>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_GPIO_Init+0x1d6>
 80047e0:	2300      	movs	r3, #0
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	f002 0203 	and.w	r2, r2, #3
 80047e8:	0092      	lsls	r2, r2, #2
 80047ea:	4093      	lsls	r3, r2
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047f2:	4938      	ldr	r1, [pc, #224]	; (80048d4 <HAL_GPIO_Init+0x2c8>)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	3302      	adds	r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004800:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	43db      	mvns	r3, r3
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004824:	4a30      	ldr	r2, [pc, #192]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800482a:	4b2f      	ldr	r3, [pc, #188]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	43db      	mvns	r3, r3
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800484e:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 8004856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	43db      	mvns	r3, r3
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800487a:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004882:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 8004884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	43db      	mvns	r3, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048a8:	4a0f      	ldr	r2, [pc, #60]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3301      	adds	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f aeab 	bne.w	800461c <HAL_GPIO_Init+0x10>
  }
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	40010000 	.word	0x40010000
 80048d8:	48000400 	.word	0x48000400
 80048dc:	48000800 	.word	0x48000800
 80048e0:	48000c00 	.word	0x48000c00
 80048e4:	48001000 	.word	0x48001000
 80048e8:	58000800 	.word	0x58000800

080048ec <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	e001      	b.n	800490e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	807b      	strh	r3, [r7, #2]
 8004928:	4613      	mov	r3, r2
 800492a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800492c:	787b      	ldrb	r3, [r7, #1]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004938:	e002      	b.n	8004940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4013      	ands	r3, r2
 8004964:	041a      	lsls	r2, r3, #16
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	43d9      	mvns	r1, r3
 800496a:	887b      	ldrh	r3, [r7, #2]
 800496c:	400b      	ands	r3, r1
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <HAL_HSEM_IRQHandler+0x30>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <HAL_HSEM_IRQHandler+0x30>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	43db      	mvns	r3, r3
 8004994:	4906      	ldr	r1, [pc, #24]	; (80049b0 <HAL_HSEM_IRQHandler+0x30>)
 8004996:	4013      	ands	r3, r2
 8004998:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800499a:	4a05      	ldr	r2, [pc, #20]	; (80049b0 <HAL_HSEM_IRQHandler+0x30>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f807 	bl	80049b4 <HAL_HSEM_FreeCallback>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	58001500 	.word	0x58001500

080049b4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01e      	beq.n	8004a18 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <HAL_IPCC_Init+0x60>)
 80049dc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fe f824 	bl	8002a38 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80049f0:	68b8      	ldr	r0, [r7, #8]
 80049f2:	f000 f85b 	bl	8004aac <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f82c 	bl	8004a60 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004a16:	e001      	b.n	8004a1c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	58000c00 	.word	0x58000c00

08004a2c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	4613      	mov	r3, r2
 8004a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e00f      	b.n	8004a8e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	4a0b      	ldr	r2, [pc, #44]	; (8004aa4 <IPCC_SetDefaultCallbacks+0x44>)
 8004a78:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3306      	adds	r3, #6
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <IPCC_SetDefaultCallbacks+0x48>)
 8004a86:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b05      	cmp	r3, #5
 8004a92:	d9ec      	bls.n	8004a6e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	08004a2d 	.word	0x08004a2d
 8004aa8:	08004a47 	.word	0x08004a47

08004aac <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	223f      	movs	r2, #63	; 0x3f
 8004ac6:	609a      	str	r2, [r3, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a04      	ldr	r2, [pc, #16]	; (8004af0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae2:	6013      	str	r3, [r2, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	58000400 	.word	0x58000400

08004af4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <HAL_PWREx_GetVoltageRange+0x18>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	58000400 	.word	0x58000400

08004b10 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b22:	d101      	bne.n	8004b28 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_RCC_HSE_Enable>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <LL_RCC_HSE_Disable>:
{
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_RCC_HSE_IsReady>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b82:	d101      	bne.n	8004b88 <LL_RCC_HSE_IsReady+0x18>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <LL_RCC_HSE_IsReady+0x1a>
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <LL_RCC_HSI_Enable>:
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba6:	6013      	str	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <LL_RCC_HSI_Disable>:
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc4:	6013      	str	r3, [r2, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <LL_RCC_HSI_IsReady>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be2:	d101      	bne.n	8004be8 <LL_RCC_HSI_IsReady+0x18>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <LL_RCC_HSI_IsReady+0x1a>
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_RCC_HSI48_Enable>:
{
 8004c1e:	b480      	push	{r7}
 8004c20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c36:	bf00      	nop
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_RCC_HSI48_Disable>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <LL_RCC_HSI48_IsReady>:
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d101      	bne.n	8004c7a <LL_RCC_HSI48_IsReady+0x18>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <LL_RCC_HSI48_IsReady+0x1a>
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_RCC_LSE_Enable>:
{
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c9e:	bf00      	nop
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <LL_RCC_LSE_Disable>:
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_RCC_LSE_EnableBypass>:
{
 8004cca:	b480      	push	{r7}
 8004ccc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cda:	f043 0304 	orr.w	r3, r3, #4
 8004cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ce2:	bf00      	nop
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <LL_RCC_LSE_DisableBypass>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cfc:	f023 0304 	bic.w	r3, r3, #4
 8004d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <LL_RCC_LSE_IsReady>:
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d101      	bne.n	8004d26 <LL_RCC_LSE_IsReady+0x18>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <LL_RCC_LSE_IsReady+0x1a>
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_RCC_LSI1_Enable>:
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d4a:	bf00      	nop
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <LL_RCC_LSI1_Disable>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <LL_RCC_LSI1_IsReady>:
{
 8004d76:	b480      	push	{r7}
 8004d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d101      	bne.n	8004d8e <LL_RCC_LSI1_IsReady+0x18>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <LL_RCC_LSI1_IsReady+0x1a>
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <LL_RCC_LSI2_Enable>:
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004daa:	f043 0304 	orr.w	r3, r3, #4
 8004dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_RCC_LSI2_Disable>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_RCC_LSI2_IsReady>:
{
 8004dde:	b480      	push	{r7}
 8004de0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d101      	bne.n	8004df6 <LL_RCC_LSI2_IsReady+0x18>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <LL_RCC_LSI2_IsReady+0x1a>
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_LSI2_SetTrimming>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_RCC_MSI_Enable>:
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6013      	str	r3, [r2, #0]
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <LL_RCC_MSI_Disable>:
{
 8004e4e:	b480      	push	{r7}
 8004e50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	6013      	str	r3, [r2, #0]
}
 8004e62:	bf00      	nop
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <LL_RCC_MSI_IsReady>:
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d101      	bne.n	8004e82 <LL_RCC_MSI_IsReady+0x16>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <LL_RCC_MSI_IsReady+0x18>
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <LL_RCC_MSI_SetRange>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <LL_RCC_MSI_GetRange>:
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2bb0      	cmp	r3, #176	; 0xb0
 8004ecc:	d901      	bls.n	8004ed2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004ece:	23b0      	movs	r3, #176	; 0xb0
 8004ed0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004ed2:	687b      	ldr	r3, [r7, #4]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efa:	4313      	orrs	r3, r2
 8004efc:	604b      	str	r3, [r1, #4]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <LL_RCC_SetSysClkSource>:
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 0203 	bic.w	r2, r3, #3
 8004f1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <LL_RCC_GetSysClkSource>:
{
 8004f32:	b480      	push	{r7}
 8004f34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 030c 	and.w	r3, r3, #12
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_RCC_SetAHBPrescaler>:
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <LL_RCC_SetAHB4Prescaler>:
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004faa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fae:	f023 020f 	bic.w	r2, r3, #15
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <LL_RCC_SetAPB1Prescaler>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	608b      	str	r3, [r1, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <LL_RCC_SetAPB2Prescaler>:
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <LL_RCC_GetAHBPrescaler>:
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800502a:	4618      	mov	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <LL_RCC_GetAHB4Prescaler>:
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005046:	4618      	mov	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_RCC_GetAPB1Prescaler>:
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_RCC_GetAPB2Prescaler>:
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800506c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005076:	4618      	mov	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <LL_RCC_PLL_Enable>:
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800508e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005092:	6013      	str	r3, [r2, #0]
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <LL_RCC_PLL_Disable>:
{
 800509e:	b480      	push	{r7}
 80050a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b0:	6013      	str	r3, [r2, #0]
}
 80050b2:	bf00      	nop
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <LL_RCC_PLL_IsReady>:
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80050c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050ce:	d101      	bne.n	80050d4 <LL_RCC_PLL_IsReady+0x18>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <LL_RCC_PLL_IsReady+0x1a>
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <LL_RCC_PLL_GetN>:
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80050e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <LL_RCC_PLL_GetR>:
{
 80050fa:	b480      	push	{r7}
 80050fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80050fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005108:	4618      	mov	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <LL_RCC_PLL_GetDivider>:
{
 8005112:	b480      	push	{r7}
 8005114:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_RCC_PLL_GetMainSource>:
{
 800512a:	b480      	push	{r7}
 800512c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0303 	and.w	r3, r3, #3
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005142:	b480      	push	{r7}
 8005144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005154:	d101      	bne.n	800515a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800516a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800517a:	d101      	bne.n	8005180 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005194:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a0:	d101      	bne.n	80051a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80051b2:	b480      	push	{r7}
 80051b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80051b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c4:	d101      	bne.n	80051ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80051d6:	b480      	push	{r7}
 80051d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80051da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051e8:	d101      	bne.n	80051ee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b08d      	sub	sp, #52	; 0x34
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e363      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 808d 	beq.w	8005336 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800521c:	f7ff fe89 	bl	8004f32 <LL_RCC_GetSysClkSource>
 8005220:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005222:	f7ff ff82 	bl	800512a <LL_RCC_PLL_GetMainSource>
 8005226:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_RCC_OscConfig+0x3e>
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	2b0c      	cmp	r3, #12
 8005232:	d147      	bne.n	80052c4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	2b01      	cmp	r3, #1
 8005238:	d144      	bne.n	80052c4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e347      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800524a:	f7ff fe34 	bl	8004eb6 <LL_RCC_MSI_GetRange>
 800524e:	4603      	mov	r3, r0
 8005250:	429c      	cmp	r4, r3
 8005252:	d914      	bls.n	800527e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fd2f 	bl	8005cbc <RCC_SetFlashLatencyFromMSIRange>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e336      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fe0e 	bl	8004e8e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fe32 	bl	8004ee0 <LL_RCC_MSI_SetCalibTrimming>
 800527c:	e013      	b.n	80052a6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fe03 	bl	8004e8e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fe27 	bl	8004ee0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fd10 	bl	8005cbc <RCC_SetFlashLatencyFromMSIRange>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e317      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80052a6:	f000 fcc9 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4aa4      	ldr	r2, [pc, #656]	; (8005540 <HAL_RCC_OscConfig+0x344>)
 80052ae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052b0:	4ba4      	ldr	r3, [pc, #656]	; (8005544 <HAL_RCC_OscConfig+0x348>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fc5f 	bl	8003b78 <HAL_InitTick>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d039      	beq.n	8005334 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e308      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01e      	beq.n	800530a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052cc:	f7ff fdb0 	bl	8004e30 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052d0:	f7fe fca0 	bl	8003c14 <HAL_GetTick>
 80052d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052d8:	f7fe fc9c 	bl	8003c14 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e2f5      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80052ea:	f7ff fdbf 	bl	8004e6c <LL_RCC_MSI_IsReady>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f1      	beq.n	80052d8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fdc8 	bl	8004e8e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fdec 	bl	8004ee0 <LL_RCC_MSI_SetCalibTrimming>
 8005308:	e015      	b.n	8005336 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800530a:	f7ff fda0 	bl	8004e4e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800530e:	f7fe fc81 	bl	8003c14 <HAL_GetTick>
 8005312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005316:	f7fe fc7d 	bl	8003c14 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e2d6      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005328:	f7ff fda0 	bl	8004e6c <LL_RCC_MSI_IsReady>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f1      	bne.n	8005316 <HAL_RCC_OscConfig+0x11a>
 8005332:	e000      	b.n	8005336 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005334:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d047      	beq.n	80053d2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005342:	f7ff fdf6 	bl	8004f32 <LL_RCC_GetSysClkSource>
 8005346:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005348:	f7ff feef 	bl	800512a <LL_RCC_PLL_GetMainSource>
 800534c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d005      	beq.n	8005360 <HAL_RCC_OscConfig+0x164>
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	2b0c      	cmp	r3, #12
 8005358:	d108      	bne.n	800536c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d105      	bne.n	800536c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d134      	bne.n	80053d2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e2b4      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005374:	d102      	bne.n	800537c <HAL_RCC_OscConfig+0x180>
 8005376:	f7ff fbdd 	bl	8004b34 <LL_RCC_HSE_Enable>
 800537a:	e001      	b.n	8005380 <HAL_RCC_OscConfig+0x184>
 800537c:	f7ff fbe9 	bl	8004b52 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d012      	beq.n	80053ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fe fc44 	bl	8003c14 <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005390:	f7fe fc40 	bl	8003c14 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b64      	cmp	r3, #100	; 0x64
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e299      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80053a2:	f7ff fbe5 	bl	8004b70 <LL_RCC_HSE_IsReady>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f1      	beq.n	8005390 <HAL_RCC_OscConfig+0x194>
 80053ac:	e011      	b.n	80053d2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fe fc31 	bl	8003c14 <HAL_GetTick>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b6:	f7fe fc2d 	bl	8003c14 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b64      	cmp	r3, #100	; 0x64
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e286      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80053c8:	f7ff fbd2 	bl	8004b70 <LL_RCC_HSE_IsReady>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f1      	bne.n	80053b6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d04c      	beq.n	8005478 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053de:	f7ff fda8 	bl	8004f32 <LL_RCC_GetSysClkSource>
 80053e2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053e4:	f7ff fea1 	bl	800512a <LL_RCC_PLL_GetMainSource>
 80053e8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_OscConfig+0x200>
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	d10e      	bne.n	8005414 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d10b      	bne.n	8005414 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e266      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fbf1 	bl	8004bf4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005412:	e031      	b.n	8005478 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d019      	beq.n	8005450 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800541c:	f7ff fbba 	bl	8004b94 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fe fbf8 	bl	8003c14 <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005428:	f7fe fbf4 	bl	8003c14 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e24d      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800543a:	f7ff fbc9 	bl	8004bd0 <LL_RCC_HSI_IsReady>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f1      	beq.n	8005428 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fbd3 	bl	8004bf4 <LL_RCC_HSI_SetCalibTrimming>
 800544e:	e013      	b.n	8005478 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005450:	f7ff fbaf 	bl	8004bb2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fe fbde 	bl	8003c14 <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545c:	f7fe fbda 	bl	8003c14 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e233      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800546e:	f7ff fbaf 	bl	8004bd0 <LL_RCC_HSI_IsReady>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f1      	bne.n	800545c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80a3 	beq.w	80055d8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d076      	beq.n	8005588 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d046      	beq.n	8005534 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80054a6:	f7ff fc66 	bl	8004d76 <LL_RCC_LSI1_IsReady>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d113      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80054b0:	f7ff fc3f 	bl	8004d32 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054b4:	f7fe fbae 	bl	8003c14 <HAL_GetTick>
 80054b8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80054bc:	f7fe fbaa 	bl	8003c14 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e203      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80054ce:	f7ff fc52 	bl	8004d76 <LL_RCC_LSI1_IsReady>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f1      	beq.n	80054bc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80054d8:	f7ff fc5f 	bl	8004d9a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fe fb9a 	bl	8003c14 <HAL_GetTick>
 80054e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80054e4:	f7fe fb96 	bl	8003c14 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e1ef      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80054f6:	f7ff fc72 	bl	8004dde <LL_RCC_LSI2_IsReady>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f1      	beq.n	80054e4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fc7c 	bl	8004e02 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800550a:	f7ff fc23 	bl	8004d54 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fe fb81 	bl	8003c14 <HAL_GetTick>
 8005512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005516:	f7fe fb7d 	bl	8003c14 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1d6      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005528:	f7ff fc25 	bl	8004d76 <LL_RCC_LSI1_IsReady>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f1      	bne.n	8005516 <HAL_RCC_OscConfig+0x31a>
 8005532:	e051      	b.n	80055d8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005534:	f7ff fbfd 	bl	8004d32 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fe fb6c 	bl	8003c14 <HAL_GetTick>
 800553c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800553e:	e00c      	b.n	800555a <HAL_RCC_OscConfig+0x35e>
 8005540:	20000014 	.word	0x20000014
 8005544:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005548:	f7fe fb64 	bl	8003c14 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e1bd      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800555a:	f7ff fc0c 	bl	8004d76 <LL_RCC_LSI1_IsReady>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f1      	beq.n	8005548 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005564:	f7ff fc2a 	bl	8004dbc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800556a:	f7fe fb53 	bl	8003c14 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b03      	cmp	r3, #3
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e1ac      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800557c:	f7ff fc2f 	bl	8004dde <LL_RCC_LSI2_IsReady>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f1      	bne.n	800556a <HAL_RCC_OscConfig+0x36e>
 8005586:	e027      	b.n	80055d8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005588:	f7ff fc18 	bl	8004dbc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fe fb42 	bl	8003c14 <HAL_GetTick>
 8005590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005594:	f7fe fb3e 	bl	8003c14 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e197      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80055a6:	f7ff fc1a 	bl	8004dde <LL_RCC_LSI2_IsReady>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f1      	bne.n	8005594 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80055b0:	f7ff fbd0 	bl	8004d54 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fe fb2e 	bl	8003c14 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055bc:	f7fe fb2a 	bl	8003c14 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e183      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80055ce:	f7ff fbd2 	bl	8004d76 <LL_RCC_LSI1_IsReady>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f1      	bne.n	80055bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d05b      	beq.n	800569c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e4:	4ba7      	ldr	r3, [pc, #668]	; (8005884 <HAL_RCC_OscConfig+0x688>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d114      	bne.n	800561a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80055f0:	f7ff fa70 	bl	8004ad4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f4:	f7fe fb0e 	bl	8003c14 <HAL_GetTick>
 80055f8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fc:	f7fe fb0a 	bl	8003c14 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e163      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560e:	4b9d      	ldr	r3, [pc, #628]	; (8005884 <HAL_RCC_OscConfig+0x688>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d102      	bne.n	8005628 <HAL_RCC_OscConfig+0x42c>
 8005622:	f7ff fb30 	bl	8004c86 <LL_RCC_LSE_Enable>
 8005626:	e00c      	b.n	8005642 <HAL_RCC_OscConfig+0x446>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b05      	cmp	r3, #5
 800562e:	d104      	bne.n	800563a <HAL_RCC_OscConfig+0x43e>
 8005630:	f7ff fb4b 	bl	8004cca <LL_RCC_LSE_EnableBypass>
 8005634:	f7ff fb27 	bl	8004c86 <LL_RCC_LSE_Enable>
 8005638:	e003      	b.n	8005642 <HAL_RCC_OscConfig+0x446>
 800563a:	f7ff fb35 	bl	8004ca8 <LL_RCC_LSE_Disable>
 800563e:	f7ff fb55 	bl	8004cec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d014      	beq.n	8005674 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564a:	f7fe fae3 	bl	8003c14 <HAL_GetTick>
 800564e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005650:	e00a      	b.n	8005668 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005652:	f7fe fadf 	bl	8003c14 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e136      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005668:	f7ff fb51 	bl	8004d0e <LL_RCC_LSE_IsReady>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0ef      	beq.n	8005652 <HAL_RCC_OscConfig+0x456>
 8005672:	e013      	b.n	800569c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fe face 	bl	8003c14 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800567a:	e00a      	b.n	8005692 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567c:	f7fe faca 	bl	8003c14 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	; 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e121      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005692:	f7ff fb3c 	bl	8004d0e <LL_RCC_LSE_IsReady>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1ef      	bne.n	800567c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d02c      	beq.n	8005702 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d014      	beq.n	80056da <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056b0:	f7ff fab5 	bl	8004c1e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fe faae 	bl	8003c14 <HAL_GetTick>
 80056b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056bc:	f7fe faaa 	bl	8003c14 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e103      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80056ce:	f7ff fac8 	bl	8004c62 <LL_RCC_HSI48_IsReady>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f1      	beq.n	80056bc <HAL_RCC_OscConfig+0x4c0>
 80056d8:	e013      	b.n	8005702 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056da:	f7ff fab1 	bl	8004c40 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056de:	f7fe fa99 	bl	8003c14 <HAL_GetTick>
 80056e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056e6:	f7fe fa95 	bl	8003c14 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e0ee      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80056f8:	f7ff fab3 	bl	8004c62 <LL_RCC_HSI48_IsReady>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f1      	bne.n	80056e6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80e4 	beq.w	80058d4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800570c:	f7ff fc11 	bl	8004f32 <LL_RCC_GetSysClkSource>
 8005710:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	2b02      	cmp	r3, #2
 8005720:	f040 80b4 	bne.w	800588c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0203 	and.w	r2, r3, #3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	429a      	cmp	r2, r3
 8005730:	d123      	bne.n	800577a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d11c      	bne.n	800577a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d114      	bne.n	800577a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d10d      	bne.n	800577a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d106      	bne.n	800577a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d05d      	beq.n	8005836 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	d058      	beq.n	8005832 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0a1      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005792:	f7ff fc84 	bl	800509e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005796:	f7fe fa3d 	bl	8003c14 <HAL_GetTick>
 800579a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579e:	f7fe fa39 	bl	8003c14 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e092      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ef      	bne.n	800579e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	4b30      	ldr	r3, [pc, #192]	; (8005888 <HAL_RCC_OscConfig+0x68c>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057d0:	4311      	orrs	r1, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057d6:	0212      	lsls	r2, r2, #8
 80057d8:	4311      	orrs	r1, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057de:	4311      	orrs	r1, r2
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057e4:	4311      	orrs	r1, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057ea:	430a      	orrs	r2, r1
 80057ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057f4:	f7ff fc44 	bl	8005080 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005808:	f7fe fa04 	bl	8003c14 <HAL_GetTick>
 800580c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005810:	f7fe fa00 	bl	8003c14 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e059      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ef      	beq.n	8005810 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005830:	e050      	b.n	80058d4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e04f      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d147      	bne.n	80058d4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005844:	f7ff fc1c 	bl	8005080 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005858:	f7fe f9dc 	bl	8003c14 <HAL_GetTick>
 800585c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005860:	f7fe f9d8 	bl	8003c14 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e031      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0ef      	beq.n	8005860 <HAL_RCC_OscConfig+0x664>
 8005880:	e028      	b.n	80058d4 <HAL_RCC_OscConfig+0x6d8>
 8005882:	bf00      	nop
 8005884:	58000400 	.word	0x58000400
 8005888:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d01e      	beq.n	80058d0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005892:	f7ff fc04 	bl	800509e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fe f9bd 	bl	8003c14 <HAL_GetTick>
 800589a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800589e:	f7fe f9b9 	bl	8003c14 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e012      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1ef      	bne.n	800589e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80058be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_OscConfig+0x6e4>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	60cb      	str	r3, [r1, #12]
 80058ce:	e001      	b.n	80058d4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3734      	adds	r7, #52	; 0x34
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd90      	pop	{r4, r7, pc}
 80058de:	bf00      	nop
 80058e0:	eefefffc 	.word	0xeefefffc

080058e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e12d      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058f8:	4b98      	ldr	r3, [pc, #608]	; (8005b5c <HAL_RCC_ClockConfig+0x278>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d91b      	bls.n	800593e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005906:	4b95      	ldr	r3, [pc, #596]	; (8005b5c <HAL_RCC_ClockConfig+0x278>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 0207 	bic.w	r2, r3, #7
 800590e:	4993      	ldr	r1, [pc, #588]	; (8005b5c <HAL_RCC_ClockConfig+0x278>)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	4313      	orrs	r3, r2
 8005914:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005916:	f7fe f97d 	bl	8003c14 <HAL_GetTick>
 800591a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591c:	e008      	b.n	8005930 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800591e:	f7fe f979 	bl	8003c14 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e111      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005930:	4b8a      	ldr	r3, [pc, #552]	; (8005b5c <HAL_RCC_ClockConfig+0x278>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d1ef      	bne.n	800591e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d016      	beq.n	8005978 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fafb 	bl	8004f4a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005954:	f7fe f95e 	bl	8003c14 <HAL_GetTick>
 8005958:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800595a:	e008      	b.n	800596e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800595c:	f7fe f95a 	bl	8003c14 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e0f2      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800596e:	f7ff fbe8 	bl	8005142 <LL_RCC_IsActiveFlag_HPRE>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f1      	beq.n	800595c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d016      	beq.n	80059b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff faf2 	bl	8004f72 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800598e:	f7fe f941 	bl	8003c14 <HAL_GetTick>
 8005992:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005996:	f7fe f93d 	bl	8003c14 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e0d5      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80059a8:	f7ff fbdd 	bl	8005166 <LL_RCC_IsActiveFlag_C2HPRE>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f1      	beq.n	8005996 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d016      	beq.n	80059ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff faeb 	bl	8004f9e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059c8:	f7fe f924 	bl	8003c14 <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059d0:	f7fe f920 	bl	8003c14 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e0b8      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059e2:	f7ff fbd3 	bl	800518c <LL_RCC_IsActiveFlag_SHDHPRE>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0f1      	beq.n	80059d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d016      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff fae5 	bl	8004fcc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a02:	f7fe f907 	bl	8003c14 <HAL_GetTick>
 8005a06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a0a:	f7fe f903 	bl	8003c14 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e09b      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a1c:	f7ff fbc9 	bl	80051b2 <LL_RCC_IsActiveFlag_PPRE1>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f1      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d017      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fadb 	bl	8004ff4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a3e:	f7fe f8e9 	bl	8003c14 <HAL_GetTick>
 8005a42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a46:	f7fe f8e5 	bl	8003c14 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e07d      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a58:	f7ff fbbd 	bl	80051d6 <LL_RCC_IsActiveFlag_PPRE2>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f1      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d043      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d106      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005a76:	f7ff f87b 	bl	8004b70 <LL_RCC_HSE_IsReady>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11e      	bne.n	8005abe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e067      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d106      	bne.n	8005a9a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005a8c:	f7ff fb16 	bl	80050bc <LL_RCC_PLL_IsReady>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d113      	bne.n	8005abe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e05c      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005aa2:	f7ff f9e3 	bl	8004e6c <LL_RCC_MSI_IsReady>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d108      	bne.n	8005abe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e051      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005ab0:	f7ff f88e 	bl	8004bd0 <LL_RCC_HSI_IsReady>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e04a      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fa21 	bl	8004f0a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac8:	f7fe f8a4 	bl	8003c14 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	e00a      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad0:	f7fe f8a0 	bl	8003c14 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e036      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae6:	f7ff fa24 	bl	8004f32 <LL_RCC_GetSysClkSource>
 8005aea:	4602      	mov	r2, r0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d1ec      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005af6:	4b19      	ldr	r3, [pc, #100]	; (8005b5c <HAL_RCC_ClockConfig+0x278>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d21b      	bcs.n	8005b3c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b04:	4b15      	ldr	r3, [pc, #84]	; (8005b5c <HAL_RCC_ClockConfig+0x278>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f023 0207 	bic.w	r2, r3, #7
 8005b0c:	4913      	ldr	r1, [pc, #76]	; (8005b5c <HAL_RCC_ClockConfig+0x278>)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b14:	f7fe f87e 	bl	8003c14 <HAL_GetTick>
 8005b18:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b1c:	f7fe f87a 	bl	8003c14 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e012      	b.n	8005b54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <HAL_RCC_ClockConfig+0x278>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d1ef      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b3c:	f000 f87e 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8005b40:	4603      	mov	r3, r0
 8005b42:	4a07      	ldr	r2, [pc, #28]	; (8005b60 <HAL_RCC_ClockConfig+0x27c>)
 8005b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005b46:	f7fe f871 	bl	8003c2c <HAL_GetTickPrio>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe f813 	bl	8003b78 <HAL_InitTick>
 8005b52:	4603      	mov	r3, r0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	58004000 	.word	0x58004000
 8005b60:	20000014 	.word	0x20000014

08005b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b6a:	f7ff f9e2 	bl	8004f32 <LL_RCC_GetSysClkSource>
 8005b6e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b76:	f7ff f99e 	bl	8004eb6 <LL_RCC_MSI_GetRange>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	e04b      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d102      	bne.n	8005b98 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b92:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	e045      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d10a      	bne.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b9e:	f7fe ffb7 	bl	8004b10 <LL_RCC_HSE_IsEnabledDiv2>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d102      	bne.n	8005bae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005ba8:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e03a      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005bae:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e037      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005bb4:	f7ff fab9 	bl	800512a <LL_RCC_PLL_GetMainSource>
 8005bb8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d003      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x64>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d003      	beq.n	8005bce <HAL_RCC_GetSysClockFreq+0x6a>
 8005bc6:	e00d      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	; (8005c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bca:	60bb      	str	r3, [r7, #8]
        break;
 8005bcc:	e015      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005bce:	f7fe ff9f 	bl	8004b10 <LL_RCC_HSE_IsEnabledDiv2>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d102      	bne.n	8005bde <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005bd8:	4b16      	ldr	r3, [pc, #88]	; (8005c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bda:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005bdc:	e00d      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005bde:	4b16      	ldr	r3, [pc, #88]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005be0:	60bb      	str	r3, [r7, #8]
        break;
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005be4:	f7ff f967 	bl	8004eb6 <LL_RCC_MSI_GetRange>
 8005be8:	4603      	mov	r3, r0
 8005bea:	091b      	lsrs	r3, r3, #4
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	4a0f      	ldr	r2, [pc, #60]	; (8005c30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf6:	60bb      	str	r3, [r7, #8]
        break;
 8005bf8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005bfa:	f7ff fa71 	bl	80050e0 <LL_RCC_PLL_GetN>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	fb03 f402 	mul.w	r4, r3, r2
 8005c06:	f7ff fa84 	bl	8005112 <LL_RCC_PLL_GetDivider>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	3301      	adds	r3, #1
 8005c10:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c14:	f7ff fa71 	bl	80050fa <LL_RCC_PLL_GetR>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	0f5b      	lsrs	r3, r3, #29
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c22:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005c24:	68fb      	ldr	r3, [r7, #12]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	0800f6a4 	.word	0x0800f6a4
 8005c34:	00f42400 	.word	0x00f42400
 8005c38:	01e84800 	.word	0x01e84800

08005c3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c3c:	b598      	push	{r3, r4, r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005c40:	f7ff ff90 	bl	8005b64 <HAL_RCC_GetSysClockFreq>
 8005c44:	4604      	mov	r4, r0
 8005c46:	f7ff f9e9 	bl	800501c <LL_RCC_GetAHBPrescaler>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	4a03      	ldr	r2, [pc, #12]	; (8005c60 <HAL_RCC_GetHCLKFreq+0x24>)
 8005c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	bd98      	pop	{r3, r4, r7, pc}
 8005c60:	0800f644 	.word	0x0800f644

08005c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c64:	b598      	push	{r3, r4, r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c68:	f7ff ffe8 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	f7ff f9ef 	bl	8005050 <LL_RCC_GetAPB1Prescaler>
 8005c72:	4603      	mov	r3, r0
 8005c74:	0a1b      	lsrs	r3, r3, #8
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd98      	pop	{r3, r4, r7, pc}
 8005c8c:	0800f684 	.word	0x0800f684

08005c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c90:	b598      	push	{r3, r4, r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005c94:	f7ff ffd2 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8005c98:	4604      	mov	r4, r0
 8005c9a:	f7ff f9e5 	bl	8005068 <LL_RCC_GetAPB2Prescaler>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	0adb      	lsrs	r3, r3, #11
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	4a04      	ldr	r2, [pc, #16]	; (8005cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bd98      	pop	{r3, r4, r7, pc}
 8005cb8:	0800f684 	.word	0x0800f684

08005cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005cbc:	b590      	push	{r4, r7, lr}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2bb0      	cmp	r3, #176	; 0xb0
 8005cc8:	d903      	bls.n	8005cd2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e007      	b.n	8005ce2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	4a11      	ldr	r2, [pc, #68]	; (8005d20 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005ce2:	f7ff f9a7 	bl	8005034 <LL_RCC_GetAHB4Prescaler>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005d00:	fba2 2303 	umull	r2, r3, r2, r3
 8005d04:	0c9c      	lsrs	r4, r3, #18
 8005d06:	f7fe fef5 	bl	8004af4 <HAL_PWREx_GetVoltageRange>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 f80c 	bl	8005d2c <RCC_SetFlashLatency>
 8005d14:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd90      	pop	{r4, r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	0800f6a4 	.word	0x0800f6a4
 8005d24:	0800f644 	.word	0x0800f644
 8005d28:	431bde83 	.word	0x431bde83

08005d2c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b093      	sub	sp, #76	; 0x4c
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005d36:	4b37      	ldr	r3, [pc, #220]	; (8005e14 <RCC_SetFlashLatency+0xe8>)
 8005d38:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005d3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005d42:	4a35      	ldr	r2, [pc, #212]	; (8005e18 <RCC_SetFlashLatency+0xec>)
 8005d44:	f107 031c 	add.w	r3, r7, #28
 8005d48:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005d4e:	4b33      	ldr	r3, [pc, #204]	; (8005e1c <RCC_SetFlashLatency+0xf0>)
 8005d50:	f107 040c 	add.w	r4, r7, #12
 8005d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d64:	d11a      	bne.n	8005d9c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005d66:	2300      	movs	r3, #0
 8005d68:	643b      	str	r3, [r7, #64]	; 0x40
 8005d6a:	e013      	b.n	8005d94 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	3348      	adds	r3, #72	; 0x48
 8005d72:	443b      	add	r3, r7
 8005d74:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d807      	bhi.n	8005d8e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	3348      	adds	r3, #72	; 0x48
 8005d84:	443b      	add	r3, r7
 8005d86:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005d8a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005d8c:	e020      	b.n	8005dd0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d90:	3301      	adds	r3, #1
 8005d92:	643b      	str	r3, [r7, #64]	; 0x40
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d9e8      	bls.n	8005d6c <RCC_SetFlashLatency+0x40>
 8005d9a:	e019      	b.n	8005dd0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005da0:	e013      	b.n	8005dca <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	3348      	adds	r3, #72	; 0x48
 8005da8:	443b      	add	r3, r7
 8005daa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d807      	bhi.n	8005dc4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	3348      	adds	r3, #72	; 0x48
 8005dba:	443b      	add	r3, r7
 8005dbc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005dc0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005dc2:	e005      	b.n	8005dd0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d9e8      	bls.n	8005da2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <RCC_SetFlashLatency+0xf4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f023 0207 	bic.w	r2, r3, #7
 8005dd8:	4911      	ldr	r1, [pc, #68]	; (8005e20 <RCC_SetFlashLatency+0xf4>)
 8005dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005de0:	f7fd ff18 	bl	8003c14 <HAL_GetTick>
 8005de4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005de6:	e008      	b.n	8005dfa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005de8:	f7fd ff14 	bl	8003c14 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e007      	b.n	8005e0a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <RCC_SetFlashLatency+0xf4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d1ef      	bne.n	8005de8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	374c      	adds	r7, #76	; 0x4c
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd90      	pop	{r4, r7, pc}
 8005e12:	bf00      	nop
 8005e14:	0800e65c 	.word	0x0800e65c
 8005e18:	0800e66c 	.word	0x0800e66c
 8005e1c:	0800e678 	.word	0x0800e678
 8005e20:	58004000 	.word	0x58004000

08005e24 <LL_RCC_LSE_IsEnabled>:
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <LL_RCC_LSE_IsEnabled+0x18>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <LL_RCC_LSE_IsEnabled+0x1a>
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_RCC_LSE_IsReady>:
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d101      	bne.n	8005e60 <LL_RCC_LSE_IsReady+0x18>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <LL_RCC_LSE_IsReady+0x1a>
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <LL_RCC_SetRFWKPClockSource>:
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <LL_RCC_SetSMPSClockSource>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	f023 0203 	bic.w	r2, r3, #3
 8005eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <LL_RCC_SetSMPSPrescaler>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <LL_RCC_SetUSARTClockSource>:
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	f023 0203 	bic.w	r2, r3, #3
 8005efc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <LL_RCC_SetLPUARTClockSource>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_RCC_SetI2CClockSource>:
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f58:	43db      	mvns	r3, r3
 8005f5a:	401a      	ands	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <LL_RCC_SetLPTIMClockSource>:
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	041b      	lsls	r3, r3, #16
 8005f90:	43db      	mvns	r3, r3
 8005f92:	401a      	ands	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <LL_RCC_SetSAIClockSource>:
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_SetRNGClockSource>:
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <LL_RCC_SetCLK48ClockSource>:
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800601a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <LL_RCC_SetUSBClockSource>:
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ffe3 	bl	8006006 <LL_RCC_SetCLK48ClockSource>
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <LL_RCC_SetADCClockSource>:
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006058:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800605c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <LL_RCC_SetRTCClockSource>:
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800607c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <LL_RCC_GetRTCClockSource>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80060a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <LL_RCC_ForceBackupDomainReset>:
{
 80060ba:	b480      	push	{r7}
 80060bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80060be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80060d2:	bf00      	nop
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_ReleaseBackupDomainReset>:
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80060e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <LL_RCC_PLLSAI1_Enable>:
{
 80060fe:	b480      	push	{r7}
 8006100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800610c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006110:	6013      	str	r3, [r2, #0]
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LL_RCC_PLLSAI1_Disable>:
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800612a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800612e:	6013      	str	r3, [r2, #0]
}
 8006130:	bf00      	nop
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <LL_RCC_PLLSAI1_IsReady>:
{
 800613a:	b480      	push	{r7}
 800613c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800613e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800614c:	d101      	bne.n	8006152 <LL_RCC_PLLSAI1_IsReady+0x18>
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b088      	sub	sp, #32
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006166:	2300      	movs	r3, #0
 8006168:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800616a:	2300      	movs	r3, #0
 800616c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d034      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006182:	d021      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006184:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006188:	d81b      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800618a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800618e:	d01d      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006190:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006194:	d815      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00b      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800619a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800619e:	d110      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80061a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ae:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80061b0:	e00d      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 f947 	bl	800644a <RCCEx_PLLSAI1_ConfigNP>
 80061bc:	4603      	mov	r3, r0
 80061be:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061c0:	e005      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	77fb      	strb	r3, [r7, #31]
        break;
 80061c6:	e002      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80061c8:	bf00      	nop
 80061ca:	e000      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80061cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ce:	7ffb      	ldrb	r3, [r7, #31]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d105      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fee8 	bl	8005fae <LL_RCC_SetSAIClockSource>
 80061de:	e001      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e0:	7ffb      	ldrb	r3, [r7, #31]
 80061e2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d046      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80061f0:	f7ff ff56 	bl	80060a0 <LL_RCC_GetRTCClockSource>
 80061f4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d03c      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006200:	f7fe fc68 	bl	8004ad4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff ff30 	bl	8006074 <LL_RCC_SetRTCClockSource>
 8006214:	e02e      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006220:	f7ff ff4b 	bl	80060ba <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006224:	f7ff ff5a 	bl	80060dc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006240:	f7ff fdf0 	bl	8005e24 <LL_RCC_LSE_IsEnabled>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d114      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800624a:	f7fd fce3 	bl	8003c14 <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006250:	e00b      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006252:	f7fd fcdf 	bl	8003c14 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006260:	4293      	cmp	r3, r2
 8006262:	d902      	bls.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	77fb      	strb	r3, [r7, #31]
              break;
 8006268:	e004      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800626a:	f7ff fded 	bl	8005e48 <LL_RCC_LSE_IsReady>
 800626e:	4603      	mov	r3, r0
 8006270:	2b01      	cmp	r3, #1
 8006272:	d1ee      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006274:	7ffb      	ldrb	r3, [r7, #31]
 8006276:	77bb      	strb	r3, [r7, #30]
 8006278:	e001      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	7ffb      	ldrb	r3, [r7, #31]
 800627c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d004      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fe2a 	bl	8005ee8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fe35 	bl	8005f14 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fe5d 	bl	8005f7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fe52 	bl	8005f7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fe2a 	bl	8005f40 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d004      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fe1f 	bl	8005f40 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d022      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fe8d 	bl	8006032 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006320:	d107      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006330:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800633a:	d10b      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3304      	adds	r3, #4
 8006340:	4618      	mov	r0, r3
 8006342:	f000 f8dd 	bl	8006500 <RCCEx_PLLSAI1_ConfigNQ>
 8006346:	4603      	mov	r3, r0
 8006348:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800634a:	7ffb      	ldrb	r3, [r7, #31]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006350:	7ffb      	ldrb	r3, [r7, #31]
 8006352:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800635c:	2b00      	cmp	r3, #0
 800635e:	d02b      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d008      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006372:	d003      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fe2a 	bl	8005fda <LL_RCC_SetRNGClockSource>
 8006386:	e00a      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	2000      	movs	r0, #0
 8006394:	f7ff fe21 	bl	8005fda <LL_RCC_SetRNGClockSource>
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff fe34 	bl	8006006 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80063a6:	d107      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80063a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d022      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fe3d 	bl	8006048 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d6:	d107      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063f0:	d10b      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f8dd 	bl	80065b6 <RCCEx_PLLSAI1_ConfigNR>
 80063fc:	4603      	mov	r3, r0
 80063fe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006400:	7ffb      	ldrb	r3, [r7, #31]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006406:	7ffb      	ldrb	r3, [r7, #31]
 8006408:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff fd26 	bl	8005e6c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fd45 	bl	8005ec0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff fd2c 	bl	8005e98 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006440:	7fbb      	ldrb	r3, [r7, #30]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3720      	adds	r7, #32
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006456:	f7ff fe61 	bl	800611c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800645a:	f7fd fbdb 	bl	8003c14 <HAL_GetTick>
 800645e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006460:	e009      	b.n	8006476 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006462:	f7fd fbd7 	bl	8003c14 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d902      	bls.n	8006476 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e004      	b.n	8006480 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006476:	f7ff fe60 	bl	800613a <LL_RCC_PLLSAI1_IsReady>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1f0      	bne.n	8006462 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d137      	bne.n	80064f6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800649a:	4313      	orrs	r3, r2
 800649c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800649e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064b0:	4313      	orrs	r3, r2
 80064b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80064b4:	f7ff fe23 	bl	80060fe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b8:	f7fd fbac 	bl	8003c14 <HAL_GetTick>
 80064bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064be:	e009      	b.n	80064d4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064c0:	f7fd fba8 	bl	8003c14 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d902      	bls.n	80064d4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	73fb      	strb	r3, [r7, #15]
        break;
 80064d2:	e004      	b.n	80064de <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064d4:	f7ff fe31 	bl	800613a <LL_RCC_PLLSAI1_IsReady>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d1f0      	bne.n	80064c0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d108      	bne.n	80064f6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80064e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064f2:	4313      	orrs	r3, r2
 80064f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800650c:	f7ff fe06 	bl	800611c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006510:	f7fd fb80 	bl	8003c14 <HAL_GetTick>
 8006514:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006516:	e009      	b.n	800652c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006518:	f7fd fb7c 	bl	8003c14 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d902      	bls.n	800652c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	73fb      	strb	r3, [r7, #15]
      break;
 800652a:	e004      	b.n	8006536 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800652c:	f7ff fe05 	bl	800613a <LL_RCC_PLLSAI1_IsReady>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d137      	bne.n	80065ac <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800653c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006550:	4313      	orrs	r3, r2
 8006552:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006566:	4313      	orrs	r3, r2
 8006568:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800656a:	f7ff fdc8 	bl	80060fe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656e:	f7fd fb51 	bl	8003c14 <HAL_GetTick>
 8006572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006574:	e009      	b.n	800658a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006576:	f7fd fb4d 	bl	8003c14 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d902      	bls.n	800658a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	73fb      	strb	r3, [r7, #15]
        break;
 8006588:	e004      	b.n	8006594 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800658a:	f7ff fdd6 	bl	800613a <LL_RCC_PLLSAI1_IsReady>
 800658e:	4603      	mov	r3, r0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d1f0      	bne.n	8006576 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800659a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065a8:	4313      	orrs	r3, r2
 80065aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80065c2:	f7ff fdab 	bl	800611c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065c6:	f7fd fb25 	bl	8003c14 <HAL_GetTick>
 80065ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065cc:	e009      	b.n	80065e2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065ce:	f7fd fb21 	bl	8003c14 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d902      	bls.n	80065e2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	73fb      	strb	r3, [r7, #15]
      break;
 80065e0:	e004      	b.n	80065ec <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065e2:	f7ff fdaa 	bl	800613a <LL_RCC_PLLSAI1_IsReady>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f0      	bne.n	80065ce <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d137      	bne.n	8006662 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80065f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006606:	4313      	orrs	r3, r2
 8006608:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800660a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800661c:	4313      	orrs	r3, r2
 800661e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006620:	f7ff fd6d 	bl	80060fe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006624:	f7fd faf6 	bl	8003c14 <HAL_GetTick>
 8006628:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800662a:	e009      	b.n	8006640 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800662c:	f7fd faf2 	bl	8003c14 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d902      	bls.n	8006640 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	73fb      	strb	r3, [r7, #15]
        break;
 800663e:	e004      	b.n	800664a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006640:	f7ff fd7b 	bl	800613a <LL_RCC_PLLSAI1_IsReady>
 8006644:	4603      	mov	r3, r0
 8006646:	2b01      	cmp	r3, #1
 8006648:	d1f0      	bne.n	800662c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d108      	bne.n	8006662 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800665e:	4313      	orrs	r3, r2
 8006660:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e09f      	b.n	80067be <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fc f9f4 	bl	8002a80 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80066a0:	4b49      	ldr	r3, [pc, #292]	; (80067c8 <HAL_RTC_Init+0x15c>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d07e      	beq.n	80067aa <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	22ca      	movs	r2, #202	; 0xca
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2253      	movs	r2, #83	; 0x53
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f8ab 	bl	8006818 <RTC_EnterInitMode>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2204      	movs	r2, #4
 80066d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	e067      	b.n	80067ae <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6812      	ldr	r2, [r2, #0]
 80066e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6899      	ldr	r1, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	68d2      	ldr	r2, [r2, #12]
 8006718:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6919      	ldr	r1, [r3, #16]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	041a      	lsls	r2, r3, #16
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800673c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0203 	bic.w	r2, r2, #3
 800674c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d113      	bne.n	800679c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f829 	bl	80067cc <HAL_RTC_WaitForSynchro>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00d      	beq.n	800679c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	22ff      	movs	r2, #255	; 0xff
 8006786:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2204      	movs	r2, #4
 800678c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e010      	b.n	80067be <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	22ff      	movs	r2, #255	; 0xff
 80067a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	73fb      	strb	r3, [r7, #15]
 80067a8:	e001      	b.n	80067ae <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40002800 	.word	0x40002800

080067cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80067e4:	f7fd fa16 	bl	8003c14 <HAL_GetTick>
 80067e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067ea:	e009      	b.n	8006800 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ec:	f7fd fa12 	bl	8003c14 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067fa:	d901      	bls.n	8006800 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e007      	b.n	8006810 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0ee      	beq.n	80067ec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d119      	bne.n	8006862 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f04f 32ff 	mov.w	r2, #4294967295
 8006836:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006838:	f7fd f9ec 	bl	8003c14 <HAL_GetTick>
 800683c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800683e:	e009      	b.n	8006854 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006840:	f7fd f9e8 	bl	8003c14 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800684e:	d901      	bls.n	8006854 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e007      	b.n	8006864 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0ee      	beq.n	8006840 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006882:	2302      	movs	r3, #2
 8006884:	e0a8      	b.n	80069d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2202      	movs	r2, #2
 8006892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	22ca      	movs	r2, #202	; 0xca
 800689c:	625a      	str	r2, [r3, #36]	; 0x24
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2253      	movs	r2, #83	; 0x53
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d020      	beq.n	80068f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80068b4:	f7fd f9ae 	bl	8003c14 <HAL_GetTick>
 80068b8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80068ba:	e015      	b.n	80068e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068bc:	f7fd f9aa 	bl	8003c14 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ca:	d90d      	bls.n	80068e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	22ff      	movs	r2, #255	; 0xff
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2203      	movs	r2, #3
 80068d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e077      	b.n	80069d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e2      	bne.n	80068bc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006904:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006916:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006918:	f7fd f97c 	bl	8003c14 <HAL_GetTick>
 800691c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800691e:	e015      	b.n	800694c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006920:	f7fd f978 	bl	8003c14 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800692e:	d90d      	bls.n	800694c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	22ff      	movs	r2, #255	; 0xff
 8006936:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2203      	movs	r2, #3
 800693c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e045      	b.n	80069d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0e2      	beq.n	8006920 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0207 	bic.w	r2, r2, #7
 8006970:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6899      	ldr	r1, [r3, #8]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	430a      	orrs	r2, r1
 8006980:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006982:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006988:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800698a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800698e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006992:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a12      	ldr	r2, [pc, #72]	; (80069e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800699c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ac:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069bc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	22ff      	movs	r2, #255	; 0xff
 80069c4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	58000800 	.word	0x58000800

080069e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e095      	b.n	8006b22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d108      	bne.n	8006a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a06:	d009      	beq.n	8006a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	61da      	str	r2, [r3, #28]
 8006a0e:	e005      	b.n	8006a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fc f856 	bl	8002ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a5c:	d902      	bls.n	8006a64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	e002      	b.n	8006a6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a72:	d007      	beq.n	8006a84 <HAL_SPI_Init+0xa0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a7c:	d002      	beq.n	8006a84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a94:	431a      	orrs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac6:	ea42 0103 	orr.w	r1, r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	0c1b      	lsrs	r3, r3, #16
 8006ae0:	f003 0204 	and.w	r2, r3, #4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b00:	ea42 0103 	orr.w	r1, r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b088      	sub	sp, #32
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_SPI_Transmit+0x22>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e158      	b.n	8006dfe <HAL_SPI_Transmit+0x2d4>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b54:	f7fd f85e 	bl	8003c14 <HAL_GetTick>
 8006b58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d002      	beq.n	8006b70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b6e:	e13d      	b.n	8006dec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <HAL_SPI_Transmit+0x52>
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b80:	e134      	b.n	8006dec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2203      	movs	r2, #3
 8006b86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	88fa      	ldrh	r2, [r7, #6]
 8006b9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bcc:	d10f      	bne.n	8006bee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d007      	beq.n	8006c0c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c14:	d94b      	bls.n	8006cae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_SPI_Transmit+0xfa>
 8006c1e:	8afb      	ldrh	r3, [r7, #22]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d13e      	bne.n	8006ca2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	881a      	ldrh	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	1c9a      	adds	r2, r3, #2
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c48:	e02b      	b.n	8006ca2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d112      	bne.n	8006c7e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	881a      	ldrh	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	1c9a      	adds	r2, r3, #2
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c7c:	e011      	b.n	8006ca2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c7e:	f7fc ffc9 	bl	8003c14 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d803      	bhi.n	8006c96 <HAL_SPI_Transmit+0x16c>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c94:	d102      	bne.n	8006c9c <HAL_SPI_Transmit+0x172>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d102      	bne.n	8006ca2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ca0:	e0a4      	b.n	8006dec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1ce      	bne.n	8006c4a <HAL_SPI_Transmit+0x120>
 8006cac:	e07c      	b.n	8006da8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_SPI_Transmit+0x192>
 8006cb6:	8afb      	ldrh	r3, [r7, #22]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d170      	bne.n	8006d9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d912      	bls.n	8006cec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	881a      	ldrh	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	1c9a      	adds	r2, r3, #2
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b02      	subs	r3, #2
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cea:	e058      	b.n	8006d9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	7812      	ldrb	r2, [r2, #0]
 8006cf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006d12:	e044      	b.n	8006d9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d12b      	bne.n	8006d7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d912      	bls.n	8006d52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	881a      	ldrh	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	1c9a      	adds	r2, r3, #2
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b02      	subs	r3, #2
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d50:	e025      	b.n	8006d9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	7812      	ldrb	r2, [r2, #0]
 8006d5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d78:	e011      	b.n	8006d9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d7a:	f7fc ff4b 	bl	8003c14 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d803      	bhi.n	8006d92 <HAL_SPI_Transmit+0x268>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d102      	bne.n	8006d98 <HAL_SPI_Transmit+0x26e>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d9c:	e026      	b.n	8006dec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1b5      	bne.n	8006d14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fdf7 	bl	80079a0 <SPI_EndRxTxTransaction>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e000      	b.n	8006dec <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006dea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b088      	sub	sp, #32
 8006e0a:	af02      	add	r7, sp, #8
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	603b      	str	r3, [r7, #0]
 8006e12:	4613      	mov	r3, r2
 8006e14:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e22:	d112      	bne.n	8006e4a <HAL_SPI_Receive+0x44>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10e      	bne.n	8006e4a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e34:	88fa      	ldrh	r2, [r7, #6]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f910 	bl	8007066 <HAL_SPI_TransmitReceive>
 8006e46:	4603      	mov	r3, r0
 8006e48:	e109      	b.n	800705e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_SPI_Receive+0x52>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e102      	b.n	800705e <HAL_SPI_Receive+0x258>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e60:	f7fc fed8 	bl	8003c14 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d002      	beq.n	8006e78 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e72:	2302      	movs	r3, #2
 8006e74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e76:	e0e9      	b.n	800704c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <HAL_SPI_Receive+0x7e>
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e88:	e0e0      	b.n	800704c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	88fa      	ldrh	r2, [r7, #6]
 8006ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	88fa      	ldrh	r2, [r7, #6]
 8006eaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ed4:	d908      	bls.n	8006ee8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ee4:	605a      	str	r2, [r3, #4]
 8006ee6:	e007      	b.n	8006ef8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ef6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f00:	d10f      	bne.n	8006f22 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d007      	beq.n	8006f40 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f48:	d867      	bhi.n	800701a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f4a:	e030      	b.n	8006fae <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d117      	bne.n	8006f8a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f103 020c 	add.w	r2, r3, #12
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	7812      	ldrb	r2, [r2, #0]
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006f88:	e011      	b.n	8006fae <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f8a:	f7fc fe43 	bl	8003c14 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d803      	bhi.n	8006fa2 <HAL_SPI_Receive+0x19c>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d102      	bne.n	8006fa8 <HAL_SPI_Receive+0x1a2>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d102      	bne.n	8006fae <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fac:	e04e      	b.n	800704c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1c8      	bne.n	8006f4c <HAL_SPI_Receive+0x146>
 8006fba:	e034      	b.n	8007026 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d115      	bne.n	8006ff6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	b292      	uxth	r2, r2
 8006fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	1c9a      	adds	r2, r3, #2
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006ff4:	e011      	b.n	800701a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ff6:	f7fc fe0d 	bl	8003c14 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d803      	bhi.n	800700e <HAL_SPI_Receive+0x208>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d102      	bne.n	8007014 <HAL_SPI_Receive+0x20e>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007018:	e018      	b.n	800704c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1ca      	bne.n	8006fbc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 fc60 	bl	80078f0 <SPI_EndRxTransaction>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2220      	movs	r2, #32
 800703a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	75fb      	strb	r3, [r7, #23]
 8007048:	e000      	b.n	800704c <HAL_SPI_Receive+0x246>
  }

error :
 800704a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b08a      	sub	sp, #40	; 0x28
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007074:	2301      	movs	r3, #1
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_SPI_TransmitReceive+0x26>
 8007088:	2302      	movs	r3, #2
 800708a:	e1fb      	b.n	8007484 <HAL_SPI_TransmitReceive+0x41e>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007094:	f7fc fdbe 	bl	8003c14 <HAL_GetTick>
 8007098:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070a0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80070a8:	887b      	ldrh	r3, [r7, #2]
 80070aa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80070ac:	887b      	ldrh	r3, [r7, #2]
 80070ae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070b0:	7efb      	ldrb	r3, [r7, #27]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d00e      	beq.n	80070d4 <HAL_SPI_TransmitReceive+0x6e>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070bc:	d106      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x66>
 80070c6:	7efb      	ldrb	r3, [r7, #27]
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d003      	beq.n	80070d4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80070cc:	2302      	movs	r3, #2
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070d2:	e1cd      	b.n	8007470 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_SPI_TransmitReceive+0x80>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <HAL_SPI_TransmitReceive+0x80>
 80070e0:	887b      	ldrh	r3, [r7, #2]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d103      	bne.n	80070ee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070ec:	e1c0      	b.n	8007470 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d003      	beq.n	8007102 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2205      	movs	r2, #5
 80070fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	887a      	ldrh	r2, [r7, #2]
 8007112:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	887a      	ldrh	r2, [r7, #2]
 800711a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	887a      	ldrh	r2, [r7, #2]
 8007128:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	887a      	ldrh	r2, [r7, #2]
 800712e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007144:	d802      	bhi.n	800714c <HAL_SPI_TransmitReceive+0xe6>
 8007146:	8a3b      	ldrh	r3, [r7, #16]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d908      	bls.n	800715e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800715a:	605a      	str	r2, [r3, #4]
 800715c:	e007      	b.n	800716e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800716c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d007      	beq.n	800718c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800718a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007194:	d97c      	bls.n	8007290 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_SPI_TransmitReceive+0x13e>
 800719e:	8a7b      	ldrh	r3, [r7, #18]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d169      	bne.n	8007278 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	1c9a      	adds	r2, r3, #2
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071c8:	e056      	b.n	8007278 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d11b      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x1aa>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d016      	beq.n	8007210 <HAL_SPI_TransmitReceive+0x1aa>
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d113      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	881a      	ldrh	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f8:	1c9a      	adds	r2, r3, #2
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b01      	cmp	r3, #1
 800721c:	d11c      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x1f2>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d016      	beq.n	8007258 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	b292      	uxth	r2, r2
 8007236:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	1c9a      	adds	r2, r3, #2
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	b29a      	uxth	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007254:	2301      	movs	r3, #1
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007258:	f7fc fcdc 	bl	8003c14 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007264:	429a      	cmp	r2, r3
 8007266:	d807      	bhi.n	8007278 <HAL_SPI_TransmitReceive+0x212>
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d003      	beq.n	8007278 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007276:	e0fb      	b.n	8007470 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1a3      	bne.n	80071ca <HAL_SPI_TransmitReceive+0x164>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007288:	b29b      	uxth	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d19d      	bne.n	80071ca <HAL_SPI_TransmitReceive+0x164>
 800728e:	e0df      	b.n	8007450 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_SPI_TransmitReceive+0x23a>
 8007298:	8a7b      	ldrh	r3, [r7, #18]
 800729a:	2b01      	cmp	r3, #1
 800729c:	f040 80cb 	bne.w	8007436 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d912      	bls.n	80072d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	1c9a      	adds	r2, r3, #2
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b02      	subs	r3, #2
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072ce:	e0b2      	b.n	8007436 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072f6:	e09e      	b.n	8007436 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b02      	cmp	r3, #2
 8007304:	d134      	bne.n	8007370 <HAL_SPI_TransmitReceive+0x30a>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730a:	b29b      	uxth	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d02f      	beq.n	8007370 <HAL_SPI_TransmitReceive+0x30a>
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	2b01      	cmp	r3, #1
 8007314:	d12c      	bne.n	8007370 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b01      	cmp	r3, #1
 800731e:	d912      	bls.n	8007346 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	881a      	ldrh	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	1c9a      	adds	r2, r3, #2
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b02      	subs	r3, #2
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007344:	e012      	b.n	800736c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	330c      	adds	r3, #12
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b01      	cmp	r3, #1
 800737c:	d148      	bne.n	8007410 <HAL_SPI_TransmitReceive+0x3aa>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d042      	beq.n	8007410 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b01      	cmp	r3, #1
 8007394:	d923      	bls.n	80073de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	b292      	uxth	r2, r2
 80073a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	1c9a      	adds	r2, r3, #2
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b02      	subs	r3, #2
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d81f      	bhi.n	800740c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073da:	605a      	str	r2, [r3, #4]
 80073dc:	e016      	b.n	800740c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f103 020c 	add.w	r2, r3, #12
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	7812      	ldrb	r2, [r2, #0]
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800740c:	2301      	movs	r3, #1
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007410:	f7fc fc00 	bl	8003c14 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741c:	429a      	cmp	r2, r3
 800741e:	d803      	bhi.n	8007428 <HAL_SPI_TransmitReceive+0x3c2>
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007426:	d102      	bne.n	800742e <HAL_SPI_TransmitReceive+0x3c8>
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	2b00      	cmp	r3, #0
 800742c:	d103      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007434:	e01c      	b.n	8007470 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	f47f af5b 	bne.w	80072f8 <HAL_SPI_TransmitReceive+0x292>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007448:	b29b      	uxth	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	f47f af54 	bne.w	80072f8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 faa3 	bl	80079a0 <SPI_EndRxTxTransaction>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	661a      	str	r2, [r3, #96]	; 0x60
 800746c:	e000      	b.n	8007470 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800746e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007484:	4618      	mov	r0, r3
 8007486:	3728      	adds	r7, #40	; 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10e      	bne.n	80074cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d009      	beq.n	80074cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
    return;
 80074ca:	e0ce      	b.n	800766a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <HAL_SPI_IRQHandler+0x5e>
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	4798      	blx	r3
    return;
 80074e8:	e0bf      	b.n	800766a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <HAL_SPI_IRQHandler+0x7e>
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d105      	bne.n	800750a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 80b0 	beq.w	800766a <HAL_SPI_IRQHandler+0x1de>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80aa 	beq.w	800766a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d023      	beq.n	8007568 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b03      	cmp	r3, #3
 800752a:	d011      	beq.n	8007550 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007530:	f043 0204 	orr.w	r2, r3, #4
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	e00b      	b.n	8007568 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007550:	2300      	movs	r3, #0
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	613b      	str	r3, [r7, #16]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	693b      	ldr	r3, [r7, #16]
        return;
 8007566:	e080      	b.n	800766a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f003 0320 	and.w	r3, r3, #32
 800756e:	2b00      	cmp	r3, #0
 8007570:	d014      	beq.n	800759c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007576:	f043 0201 	orr.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00c      	beq.n	80075c0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075aa:	f043 0208 	orr.w	r2, r3, #8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075b2:	2300      	movs	r3, #0
 80075b4:	60bb      	str	r3, [r7, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	60bb      	str	r3, [r7, #8]
 80075be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d04f      	beq.n	8007668 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d104      	bne.n	80075f4 <HAL_SPI_IRQHandler+0x168>
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d034      	beq.n	800765e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0203 	bic.w	r2, r2, #3
 8007602:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007608:	2b00      	cmp	r3, #0
 800760a:	d011      	beq.n	8007630 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007610:	4a17      	ldr	r2, [pc, #92]	; (8007670 <HAL_SPI_IRQHandler+0x1e4>)
 8007612:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007618:	4618      	mov	r0, r3
 800761a:	f7fc fe47 	bl	80042ac <HAL_DMA_Abort_IT>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d005      	beq.n	8007630 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007628:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007634:	2b00      	cmp	r3, #0
 8007636:	d016      	beq.n	8007666 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763c:	4a0c      	ldr	r2, [pc, #48]	; (8007670 <HAL_SPI_IRQHandler+0x1e4>)
 800763e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	4618      	mov	r0, r3
 8007646:	f7fc fe31 	bl	80042ac <HAL_DMA_Abort_IT>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800765c:	e003      	b.n	8007666 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f808 	bl	8007674 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007664:	e000      	b.n	8007668 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007666:	bf00      	nop
    return;
 8007668:	bf00      	nop
  }
}
 800766a:	3720      	adds	r7, #32
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	08007689 	.word	0x08007689

08007674 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff ffe5 	bl	8007674 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076c4:	f7fc faa6 	bl	8003c14 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	4413      	add	r3, r2
 80076d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076d4:	f7fc fa9e 	bl	8003c14 <HAL_GetTick>
 80076d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076da:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	015b      	lsls	r3, r3, #5
 80076e0:	0d1b      	lsrs	r3, r3, #20
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	fb02 f303 	mul.w	r3, r2, r3
 80076e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ea:	e054      	b.n	8007796 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f2:	d050      	beq.n	8007796 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076f4:	f7fc fa8e 	bl	8003c14 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	429a      	cmp	r2, r3
 8007702:	d902      	bls.n	800770a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d13d      	bne.n	8007786 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007722:	d111      	bne.n	8007748 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800772c:	d004      	beq.n	8007738 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007736:	d107      	bne.n	8007748 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007750:	d10f      	bne.n	8007772 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e017      	b.n	80077b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	3b01      	subs	r3, #1
 8007794:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4013      	ands	r3, r2
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	bf0c      	ite	eq
 80077a6:	2301      	moveq	r3, #1
 80077a8:	2300      	movne	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	461a      	mov	r2, r3
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d19b      	bne.n	80076ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000014 	.word	0x20000014

080077c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80077d6:	f7fc fa1d 	bl	8003c14 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	4413      	add	r3, r2
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80077e6:	f7fc fa15 	bl	8003c14 <HAL_GetTick>
 80077ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	330c      	adds	r3, #12
 80077f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077f4:	4b3d      	ldr	r3, [pc, #244]	; (80078ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	00da      	lsls	r2, r3, #3
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	0d1b      	lsrs	r3, r3, #20
 8007804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007806:	fb02 f303 	mul.w	r3, r2, r3
 800780a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800780c:	e060      	b.n	80078d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007814:	d107      	bne.n	8007826 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d104      	bne.n	8007826 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007824:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d050      	beq.n	80078d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800782e:	f7fc f9f1 	bl	8003c14 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783a:	429a      	cmp	r2, r3
 800783c:	d902      	bls.n	8007844 <SPI_WaitFifoStateUntilTimeout+0x80>
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	2b00      	cmp	r3, #0
 8007842:	d13d      	bne.n	80078c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007852:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800785c:	d111      	bne.n	8007882 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007866:	d004      	beq.n	8007872 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007870:	d107      	bne.n	8007882 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007880:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800788a:	d10f      	bne.n	80078ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e010      	b.n	80078e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4013      	ands	r3, r2
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d196      	bne.n	800780e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3728      	adds	r7, #40	; 0x28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000014 	.word	0x20000014

080078f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007904:	d111      	bne.n	800792a <SPI_EndRxTransaction+0x3a>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800790e:	d004      	beq.n	800791a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007918:	d107      	bne.n	800792a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007928:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2200      	movs	r2, #0
 8007932:	2180      	movs	r1, #128	; 0x80
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff febd 	bl	80076b4 <SPI_WaitFlagStateUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007944:	f043 0220 	orr.w	r2, r3, #32
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e023      	b.n	8007998 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007958:	d11d      	bne.n	8007996 <SPI_EndRxTransaction+0xa6>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007962:	d004      	beq.n	800796e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796c:	d113      	bne.n	8007996 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7ff ff22 	bl	80077c4 <SPI_WaitFifoStateUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d007      	beq.n	8007996 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800798a:	f043 0220 	orr.w	r2, r3, #32
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e000      	b.n	8007998 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7ff ff03 	bl	80077c4 <SPI_WaitFifoStateUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d007      	beq.n	80079d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c8:	f043 0220 	orr.w	r2, r3, #32
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e027      	b.n	8007a24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2200      	movs	r2, #0
 80079dc:	2180      	movs	r1, #128	; 0x80
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f7ff fe68 	bl	80076b4 <SPI_WaitFlagStateUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ee:	f043 0220 	orr.w	r2, r3, #32
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e014      	b.n	8007a24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f7ff fedc 	bl	80077c4 <SPI_WaitFifoStateUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d007      	beq.n	8007a22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a16:	f043 0220 	orr.w	r2, r3, #32
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e000      	b.n	8007a24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <LL_RCC_GetUSARTClockSource>:
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4013      	ands	r3, r2
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <LL_RCC_GetLPUARTClockSource>:
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4013      	ands	r3, r2
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e042      	b.n	8007b04 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fb f88b 	bl	8002bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2224      	movs	r2, #36	; 0x24
 8007a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0201 	bic.w	r2, r2, #1
 8007aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fbf0 	bl	8008294 <UART_SetConfig>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e022      	b.n	8007b04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fe0c 	bl	80086e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689a      	ldr	r2, [r3, #8]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0201 	orr.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fe93 	bl	8008828 <UART_CheckIdleState>
 8007b02:	4603      	mov	r3, r0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08a      	sub	sp, #40	; 0x28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d167      	bne.n	8007bf4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_UART_Transmit_DMA+0x24>
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e060      	b.n	8007bf6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	88fa      	ldrh	r2, [r7, #6]
 8007b3e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	88fa      	ldrh	r2, [r7, #6]
 8007b46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2221      	movs	r2, #33	; 0x21
 8007b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d028      	beq.n	8007bb4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b66:	4a26      	ldr	r2, [pc, #152]	; (8007c00 <HAL_UART_Transmit_DMA+0xf4>)
 8007b68:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b6e:	4a25      	ldr	r2, [pc, #148]	; (8007c04 <HAL_UART_Transmit_DMA+0xf8>)
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b76:	4a24      	ldr	r2, [pc, #144]	; (8007c08 <HAL_UART_Transmit_DMA+0xfc>)
 8007b78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7e:	2200      	movs	r2, #0
 8007b80:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3328      	adds	r3, #40	; 0x28
 8007b92:	461a      	mov	r2, r3
 8007b94:	88fb      	ldrh	r3, [r7, #6]
 8007b96:	f7fc faaf 	bl	80040f8 <HAL_DMA_Start_IT>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2210      	movs	r2, #16
 8007ba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e020      	b.n	8007bf6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2240      	movs	r2, #64	; 0x40
 8007bba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	613b      	str	r3, [r7, #16]
   return(result);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bdc:	623a      	str	r2, [r7, #32]
 8007bde:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	69f9      	ldr	r1, [r7, #28]
 8007be2:	6a3a      	ldr	r2, [r7, #32]
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e5      	bne.n	8007bbc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e000      	b.n	8007bf6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007bf4:	2302      	movs	r3, #2
  }
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3728      	adds	r7, #40	; 0x28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	08008b99 	.word	0x08008b99
 8007c04:	08008c33 	.word	0x08008c33
 8007c08:	08008c4f 	.word	0x08008c4f

08007c0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b0ba      	sub	sp, #232	; 0xe8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c36:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11b      	bne.n	8007c80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d015      	beq.n	8007c80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d105      	bne.n	8007c6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d009      	beq.n	8007c80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 82e3 	beq.w	800823c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
      }
      return;
 8007c7e:	e2dd      	b.n	800823c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 8123 	beq.w	8007ed0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c8e:	4b8d      	ldr	r3, [pc, #564]	; (8007ec4 <HAL_UART_IRQHandler+0x2b8>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c9a:	4b8b      	ldr	r3, [pc, #556]	; (8007ec8 <HAL_UART_IRQHandler+0x2bc>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 8116 	beq.w	8007ed0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d011      	beq.n	8007cd4 <HAL_UART_IRQHandler+0xc8>
 8007cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cca:	f043 0201 	orr.w	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d011      	beq.n	8007d04 <HAL_UART_IRQHandler+0xf8>
 8007ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f043 0204 	orr.w	r2, r3, #4
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d011      	beq.n	8007d34 <HAL_UART_IRQHandler+0x128>
 8007d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00b      	beq.n	8007d34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2204      	movs	r2, #4
 8007d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f043 0202 	orr.w	r2, r3, #2
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d017      	beq.n	8007d70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d105      	bne.n	8007d58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d50:	4b5c      	ldr	r3, [pc, #368]	; (8007ec4 <HAL_UART_IRQHandler+0x2b8>)
 8007d52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2208      	movs	r2, #8
 8007d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d66:	f043 0208 	orr.w	r2, r3, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d012      	beq.n	8007da2 <HAL_UART_IRQHandler+0x196>
 8007d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00c      	beq.n	8007da2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d98:	f043 0220 	orr.w	r2, r3, #32
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 8249 	beq.w	8008240 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d013      	beq.n	8007de2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d105      	bne.n	8007dd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df6:	2b40      	cmp	r3, #64	; 0x40
 8007df8:	d005      	beq.n	8007e06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d054      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fe60 	bl	8008acc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d146      	bne.n	8007ea8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3308      	adds	r3, #8
 8007e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1d9      	bne.n	8007e1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d017      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e76:	4a15      	ldr	r2, [pc, #84]	; (8007ecc <HAL_UART_IRQHandler+0x2c0>)
 8007e78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fc fa13 	bl	80042ac <HAL_DMA_Abort_IT>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d019      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9e:	e00f      	b.n	8007ec0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f9e1 	bl	8008268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea6:	e00b      	b.n	8007ec0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f9dd 	bl	8008268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eae:	e007      	b.n	8007ec0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f9d9 	bl	8008268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007ebe:	e1bf      	b.n	8008240 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec0:	bf00      	nop
    return;
 8007ec2:	e1bd      	b.n	8008240 <HAL_UART_IRQHandler+0x634>
 8007ec4:	10000001 	.word	0x10000001
 8007ec8:	04000120 	.word	0x04000120
 8007ecc:	08008ccf 	.word	0x08008ccf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	f040 8153 	bne.w	8008180 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f003 0310 	and.w	r3, r3, #16
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 814c 	beq.w	8008180 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eec:	f003 0310 	and.w	r3, r3, #16
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8145 	beq.w	8008180 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2210      	movs	r2, #16
 8007efc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f08:	2b40      	cmp	r3, #64	; 0x40
 8007f0a:	f040 80bb 	bne.w	8008084 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 818f 	beq.w	8008244 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f30:	429a      	cmp	r2, r3
 8007f32:	f080 8187 	bcs.w	8008244 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f040 8087 	bne.w	8008062 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1da      	bne.n	8007f54 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e1      	bne.n	8007f9e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ffe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008000:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008004:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800800c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e3      	bne.n	8007fda <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800802e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008030:	f023 0310 	bic.w	r3, r3, #16
 8008034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	461a      	mov	r2, r3
 800803e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008042:	65bb      	str	r3, [r7, #88]	; 0x58
 8008044:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e4      	bne.n	8008020 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800805c:	4618      	mov	r0, r3
 800805e:	f7fc f8c6 	bl	80041ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008074:	b29b      	uxth	r3, r3
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	b29b      	uxth	r3, r3
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f8fd 	bl	800827c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008082:	e0df      	b.n	8008244 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008090:	b29b      	uxth	r3, r3
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800809e:	b29b      	uxth	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80d1 	beq.w	8008248 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80080a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80cc 	beq.w	8008248 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080d2:	647b      	str	r3, [r7, #68]	; 0x44
 80080d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e4      	bne.n	80080b0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3308      	adds	r3, #8
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	623b      	str	r3, [r7, #32]
   return(result);
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080fc:	f023 0301 	bic.w	r3, r3, #1
 8008100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800810e:	633a      	str	r2, [r7, #48]	; 0x30
 8008110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800811c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e1      	bne.n	80080e6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	60fb      	str	r3, [r7, #12]
   return(result);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 0310 	bic.w	r3, r3, #16
 800814a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008158:	61fb      	str	r3, [r7, #28]
 800815a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	69b9      	ldr	r1, [r7, #24]
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	617b      	str	r3, [r7, #20]
   return(result);
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e4      	bne.n	8008136 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f87f 	bl	800827c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800817e:	e063      	b.n	8008248 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00e      	beq.n	80081aa <HAL_UART_IRQHandler+0x59e>
 800818c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fdd4 	bl	8008d50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081a8:	e051      	b.n	800824e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d014      	beq.n	80081e0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d105      	bne.n	80081ce <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d03a      	beq.n	800824c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4798      	blx	r3
    }
    return;
 80081de:	e035      	b.n	800824c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <HAL_UART_IRQHandler+0x5f4>
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fd7e 	bl	8008cfa <UART_EndTransmit_IT>
    return;
 80081fe:	e026      	b.n	800824e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <HAL_UART_IRQHandler+0x614>
 800820c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008210:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fdad 	bl	8008d78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800821e:	e016      	b.n	800824e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d010      	beq.n	800824e <HAL_UART_IRQHandler+0x642>
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008230:	2b00      	cmp	r3, #0
 8008232:	da0c      	bge.n	800824e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fd95 	bl	8008d64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800823a:	e008      	b.n	800824e <HAL_UART_IRQHandler+0x642>
      return;
 800823c:	bf00      	nop
 800823e:	e006      	b.n	800824e <HAL_UART_IRQHandler+0x642>
    return;
 8008240:	bf00      	nop
 8008242:	e004      	b.n	800824e <HAL_UART_IRQHandler+0x642>
      return;
 8008244:	bf00      	nop
 8008246:	e002      	b.n	800824e <HAL_UART_IRQHandler+0x642>
      return;
 8008248:	bf00      	nop
 800824a:	e000      	b.n	800824e <HAL_UART_IRQHandler+0x642>
    return;
 800824c:	bf00      	nop
  }
}
 800824e:	37e8      	adds	r7, #232	; 0xe8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008298:	b08c      	sub	sp, #48	; 0x30
 800829a:	af00      	add	r7, sp, #0
 800829c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	431a      	orrs	r2, r3
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	431a      	orrs	r2, r3
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4baf      	ldr	r3, [pc, #700]	; (8008580 <UART_SetConfig+0x2ec>)
 80082c4:	4013      	ands	r3, r2
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	6812      	ldr	r2, [r2, #0]
 80082ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082cc:	430b      	orrs	r3, r1
 80082ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4aa4      	ldr	r2, [pc, #656]	; (8008584 <UART_SetConfig+0x2f0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d004      	beq.n	8008300 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082fc:	4313      	orrs	r3, r2
 80082fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800830a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008314:	430b      	orrs	r3, r1
 8008316:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	f023 010f 	bic.w	r1, r3, #15
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a95      	ldr	r2, [pc, #596]	; (8008588 <UART_SetConfig+0x2f4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d125      	bne.n	8008384 <UART_SetConfig+0xf0>
 8008338:	2003      	movs	r0, #3
 800833a:	f7ff fb77 	bl	8007a2c <LL_RCC_GetUSARTClockSource>
 800833e:	4603      	mov	r3, r0
 8008340:	2b03      	cmp	r3, #3
 8008342:	d81b      	bhi.n	800837c <UART_SetConfig+0xe8>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <UART_SetConfig+0xb8>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	0800835d 	.word	0x0800835d
 8008350:	0800836d 	.word	0x0800836d
 8008354:	08008365 	.word	0x08008365
 8008358:	08008375 	.word	0x08008375
 800835c:	2301      	movs	r3, #1
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008362:	e042      	b.n	80083ea <UART_SetConfig+0x156>
 8008364:	2302      	movs	r3, #2
 8008366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836a:	e03e      	b.n	80083ea <UART_SetConfig+0x156>
 800836c:	2304      	movs	r3, #4
 800836e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008372:	e03a      	b.n	80083ea <UART_SetConfig+0x156>
 8008374:	2308      	movs	r3, #8
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837a:	e036      	b.n	80083ea <UART_SetConfig+0x156>
 800837c:	2310      	movs	r3, #16
 800837e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008382:	e032      	b.n	80083ea <UART_SetConfig+0x156>
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a7e      	ldr	r2, [pc, #504]	; (8008584 <UART_SetConfig+0x2f0>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d12a      	bne.n	80083e4 <UART_SetConfig+0x150>
 800838e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008392:	f7ff fb5b 	bl	8007a4c <LL_RCC_GetLPUARTClockSource>
 8008396:	4603      	mov	r3, r0
 8008398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800839c:	d01a      	beq.n	80083d4 <UART_SetConfig+0x140>
 800839e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083a2:	d81b      	bhi.n	80083dc <UART_SetConfig+0x148>
 80083a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a8:	d00c      	beq.n	80083c4 <UART_SetConfig+0x130>
 80083aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ae:	d815      	bhi.n	80083dc <UART_SetConfig+0x148>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <UART_SetConfig+0x128>
 80083b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b8:	d008      	beq.n	80083cc <UART_SetConfig+0x138>
 80083ba:	e00f      	b.n	80083dc <UART_SetConfig+0x148>
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c2:	e012      	b.n	80083ea <UART_SetConfig+0x156>
 80083c4:	2302      	movs	r3, #2
 80083c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ca:	e00e      	b.n	80083ea <UART_SetConfig+0x156>
 80083cc:	2304      	movs	r3, #4
 80083ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d2:	e00a      	b.n	80083ea <UART_SetConfig+0x156>
 80083d4:	2308      	movs	r3, #8
 80083d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083da:	e006      	b.n	80083ea <UART_SetConfig+0x156>
 80083dc:	2310      	movs	r3, #16
 80083de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e2:	e002      	b.n	80083ea <UART_SetConfig+0x156>
 80083e4:	2310      	movs	r3, #16
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a65      	ldr	r2, [pc, #404]	; (8008584 <UART_SetConfig+0x2f0>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	f040 8097 	bne.w	8008524 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d823      	bhi.n	8008446 <UART_SetConfig+0x1b2>
 80083fe:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <UART_SetConfig+0x170>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	08008429 	.word	0x08008429
 8008408:	08008447 	.word	0x08008447
 800840c:	08008431 	.word	0x08008431
 8008410:	08008447 	.word	0x08008447
 8008414:	08008437 	.word	0x08008437
 8008418:	08008447 	.word	0x08008447
 800841c:	08008447 	.word	0x08008447
 8008420:	08008447 	.word	0x08008447
 8008424:	0800843f 	.word	0x0800843f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008428:	f7fd fc1c 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 800842c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800842e:	e010      	b.n	8008452 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008430:	4b56      	ldr	r3, [pc, #344]	; (800858c <UART_SetConfig+0x2f8>)
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008434:	e00d      	b.n	8008452 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008436:	f7fd fb95 	bl	8005b64 <HAL_RCC_GetSysClockFreq>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800843c:	e009      	b.n	8008452 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800843e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008444:	e005      	b.n	8008452 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008450:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 812b 	beq.w	80086b0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	4a4c      	ldr	r2, [pc, #304]	; (8008590 <UART_SetConfig+0x2fc>)
 8008460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008464:	461a      	mov	r2, r3
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	fbb3 f3f2 	udiv	r3, r3, r2
 800846c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	4613      	mov	r3, r2
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	4413      	add	r3, r2
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	429a      	cmp	r2, r3
 800847c:	d305      	bcc.n	800848a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	429a      	cmp	r2, r3
 8008488:	d903      	bls.n	8008492 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008490:	e10e      	b.n	80086b0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	2200      	movs	r2, #0
 8008496:	60bb      	str	r3, [r7, #8]
 8008498:	60fa      	str	r2, [r7, #12]
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	4a3c      	ldr	r2, [pc, #240]	; (8008590 <UART_SetConfig+0x2fc>)
 80084a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2200      	movs	r2, #0
 80084a8:	603b      	str	r3, [r7, #0]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084b4:	f7f8 f9a2 	bl	80007fc <__aeabi_uldivmod>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4610      	mov	r0, r2
 80084be:	4619      	mov	r1, r3
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	020b      	lsls	r3, r1, #8
 80084ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084ce:	0202      	lsls	r2, r0, #8
 80084d0:	6979      	ldr	r1, [r7, #20]
 80084d2:	6849      	ldr	r1, [r1, #4]
 80084d4:	0849      	lsrs	r1, r1, #1
 80084d6:	2000      	movs	r0, #0
 80084d8:	460c      	mov	r4, r1
 80084da:	4605      	mov	r5, r0
 80084dc:	eb12 0804 	adds.w	r8, r2, r4
 80084e0:	eb43 0905 	adc.w	r9, r3, r5
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	469a      	mov	sl, r3
 80084ec:	4693      	mov	fp, r2
 80084ee:	4652      	mov	r2, sl
 80084f0:	465b      	mov	r3, fp
 80084f2:	4640      	mov	r0, r8
 80084f4:	4649      	mov	r1, r9
 80084f6:	f7f8 f981 	bl	80007fc <__aeabi_uldivmod>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4613      	mov	r3, r2
 8008500:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008508:	d308      	bcc.n	800851c <UART_SetConfig+0x288>
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008510:	d204      	bcs.n	800851c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6a3a      	ldr	r2, [r7, #32]
 8008518:	60da      	str	r2, [r3, #12]
 800851a:	e0c9      	b.n	80086b0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008522:	e0c5      	b.n	80086b0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800852c:	d16d      	bne.n	800860a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800852e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008532:	3b01      	subs	r3, #1
 8008534:	2b07      	cmp	r3, #7
 8008536:	d82d      	bhi.n	8008594 <UART_SetConfig+0x300>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0x2ac>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008561 	.word	0x08008561
 8008544:	08008569 	.word	0x08008569
 8008548:	08008595 	.word	0x08008595
 800854c:	0800856f 	.word	0x0800856f
 8008550:	08008595 	.word	0x08008595
 8008554:	08008595 	.word	0x08008595
 8008558:	08008595 	.word	0x08008595
 800855c:	08008577 	.word	0x08008577
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008560:	f7fd fb96 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 8008564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008566:	e01b      	b.n	80085a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008568:	4b08      	ldr	r3, [pc, #32]	; (800858c <UART_SetConfig+0x2f8>)
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800856c:	e018      	b.n	80085a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800856e:	f7fd faf9 	bl	8005b64 <HAL_RCC_GetSysClockFreq>
 8008572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008574:	e014      	b.n	80085a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800857c:	e010      	b.n	80085a0 <UART_SetConfig+0x30c>
 800857e:	bf00      	nop
 8008580:	cfff69f3 	.word	0xcfff69f3
 8008584:	40008000 	.word	0x40008000
 8008588:	40013800 	.word	0x40013800
 800858c:	00f42400 	.word	0x00f42400
 8008590:	0800f724 	.word	0x0800f724
      default:
        pclk = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800859e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 8084 	beq.w	80086b0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	4a4b      	ldr	r2, [pc, #300]	; (80086dc <UART_SetConfig+0x448>)
 80085ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b2:	461a      	mov	r2, r3
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80085ba:	005a      	lsls	r2, r3, #1
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	085b      	lsrs	r3, r3, #1
 80085c2:	441a      	add	r2, r3
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085cc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	2b0f      	cmp	r3, #15
 80085d2:	d916      	bls.n	8008602 <UART_SetConfig+0x36e>
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085da:	d212      	bcs.n	8008602 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	f023 030f 	bic.w	r3, r3, #15
 80085e4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	085b      	lsrs	r3, r3, #1
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	8bfb      	ldrh	r3, [r7, #30]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	8bfa      	ldrh	r2, [r7, #30]
 80085fe:	60da      	str	r2, [r3, #12]
 8008600:	e056      	b.n	80086b0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008608:	e052      	b.n	80086b0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800860a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800860e:	3b01      	subs	r3, #1
 8008610:	2b07      	cmp	r3, #7
 8008612:	d822      	bhi.n	800865a <UART_SetConfig+0x3c6>
 8008614:	a201      	add	r2, pc, #4	; (adr r2, 800861c <UART_SetConfig+0x388>)
 8008616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861a:	bf00      	nop
 800861c:	0800863d 	.word	0x0800863d
 8008620:	08008645 	.word	0x08008645
 8008624:	0800865b 	.word	0x0800865b
 8008628:	0800864b 	.word	0x0800864b
 800862c:	0800865b 	.word	0x0800865b
 8008630:	0800865b 	.word	0x0800865b
 8008634:	0800865b 	.word	0x0800865b
 8008638:	08008653 	.word	0x08008653
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800863c:	f7fd fb28 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 8008640:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008642:	e010      	b.n	8008666 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008644:	4b26      	ldr	r3, [pc, #152]	; (80086e0 <UART_SetConfig+0x44c>)
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008648:	e00d      	b.n	8008666 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800864a:	f7fd fa8b 	bl	8005b64 <HAL_RCC_GetSysClockFreq>
 800864e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008650:	e009      	b.n	8008666 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008658:	e005      	b.n	8008666 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008664:	bf00      	nop
    }

    if (pclk != 0U)
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	2b00      	cmp	r3, #0
 800866a:	d021      	beq.n	80086b0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	4a1a      	ldr	r2, [pc, #104]	; (80086dc <UART_SetConfig+0x448>)
 8008672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008676:	461a      	mov	r2, r3
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	fbb3 f2f2 	udiv	r2, r3, r2
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	441a      	add	r2, r3
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	fbb2 f3f3 	udiv	r3, r2, r3
 800868e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	2b0f      	cmp	r3, #15
 8008694:	d909      	bls.n	80086aa <UART_SetConfig+0x416>
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800869c:	d205      	bcs.n	80086aa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60da      	str	r2, [r3, #12]
 80086a8:	e002      	b.n	80086b0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2200      	movs	r2, #0
 80086c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2200      	movs	r2, #0
 80086ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3730      	adds	r7, #48	; 0x30
 80086d4:	46bd      	mov	sp, r7
 80086d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086da:	bf00      	nop
 80086dc:	0800f724 	.word	0x0800f724
 80086e0:	00f42400 	.word	0x00f42400

080086e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00a      	beq.n	800870e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	f003 0308 	and.w	r3, r3, #8
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	f003 0310 	and.w	r3, r3, #16
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00a      	beq.n	8008796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01a      	beq.n	80087fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087e2:	d10a      	bne.n	80087fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
  }
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b098      	sub	sp, #96	; 0x60
 800882c:	af02      	add	r7, sp, #8
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008838:	f7fb f9ec 	bl	8003c14 <HAL_GetTick>
 800883c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0308 	and.w	r3, r3, #8
 8008848:	2b08      	cmp	r3, #8
 800884a:	d12f      	bne.n	80088ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800884c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008854:	2200      	movs	r2, #0
 8008856:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f88e 	bl	800897c <UART_WaitOnFlagUntilTimeout>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d022      	beq.n	80088ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	e853 3f00 	ldrex	r3, [r3]
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800887a:	653b      	str	r3, [r7, #80]	; 0x50
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	461a      	mov	r2, r3
 8008882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008884:	647b      	str	r3, [r7, #68]	; 0x44
 8008886:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800888a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e6      	bne.n	8008866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e063      	b.n	8008974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0304 	and.w	r3, r3, #4
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d149      	bne.n	800894e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088c2:	2200      	movs	r2, #0
 80088c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f857 	bl	800897c <UART_WaitOnFlagUntilTimeout>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d03c      	beq.n	800894e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	623b      	str	r3, [r7, #32]
   return(result);
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f2:	633b      	str	r3, [r7, #48]	; 0x30
 80088f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e6      	bne.n	80088d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	60fb      	str	r3, [r7, #12]
   return(result);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f023 0301 	bic.w	r3, r3, #1
 800891c:	64bb      	str	r3, [r7, #72]	; 0x48
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3308      	adds	r3, #8
 8008924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008926:	61fa      	str	r2, [r7, #28]
 8008928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	69b9      	ldr	r1, [r7, #24]
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	617b      	str	r3, [r7, #20]
   return(result);
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e5      	bne.n	8008906 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2220      	movs	r2, #32
 800893e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e012      	b.n	8008974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3758      	adds	r7, #88	; 0x58
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	4613      	mov	r3, r2
 800898a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898c:	e049      	b.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d045      	beq.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008996:	f7fb f93d 	bl	8003c14 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d302      	bcc.n	80089ac <UART_WaitOnFlagUntilTimeout+0x30>
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e048      	b.n	8008a42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0304 	and.w	r3, r3, #4
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d031      	beq.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b08      	cmp	r3, #8
 80089ca:	d110      	bne.n	80089ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2208      	movs	r2, #8
 80089d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f879 	bl	8008acc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2208      	movs	r2, #8
 80089de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e029      	b.n	8008a42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089fc:	d111      	bne.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 f85f 	bl	8008acc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e00f      	b.n	8008a42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69da      	ldr	r2, [r3, #28]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	bf0c      	ite	eq
 8008a32:	2301      	moveq	r3, #1
 8008a34:	2300      	movne	r3, #0
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	461a      	mov	r2, r3
 8008a3a:	79fb      	ldrb	r3, [r7, #7]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d0a6      	beq.n	800898e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b08f      	sub	sp, #60	; 0x3c
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa4:	61ba      	str	r2, [r7, #24]
 8008aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	6979      	ldr	r1, [r7, #20]
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e5      	bne.n	8008a84 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008ac0:	bf00      	nop
 8008ac2:	373c      	adds	r7, #60	; 0x3c
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b095      	sub	sp, #84	; 0x54
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af2:	643b      	str	r3, [r7, #64]	; 0x40
 8008af4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e6      	bne.n	8008ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b1c:	f023 0301 	bic.w	r3, r3, #1
 8008b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3308      	adds	r3, #8
 8008b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e3      	bne.n	8008b06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d118      	bne.n	8008b78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f023 0310 	bic.w	r3, r3, #16
 8008b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b64:	61bb      	str	r3, [r7, #24]
 8008b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6979      	ldr	r1, [r7, #20]
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	613b      	str	r3, [r7, #16]
   return(result);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e6      	bne.n	8008b46 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b8c:	bf00      	nop
 8008b8e:	3754      	adds	r7, #84	; 0x54
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b090      	sub	sp, #64	; 0x40
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0320 	and.w	r3, r3, #32
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d137      	bne.n	8008c24 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	623b      	str	r3, [r7, #32]
   return(result);
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bdc:	633a      	str	r2, [r7, #48]	; 0x30
 8008bde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e5      	bne.n	8008bbc <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	e853 3f00 	ldrex	r3, [r3]
 8008bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c04:	637b      	str	r3, [r7, #52]	; 0x34
 8008c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	69b9      	ldr	r1, [r7, #24]
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e6      	bne.n	8008bf0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c22:	e002      	b.n	8008c2a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c26:	f7f9 fac3 	bl	80021b0 <HAL_UART_TxCpltCallback>
}
 8008c2a:	bf00      	nop
 8008c2c:	3740      	adds	r7, #64	; 0x40
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f7ff fb07 	bl	8008254 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b086      	sub	sp, #24
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c62:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c76:	2b80      	cmp	r3, #128	; 0x80
 8008c78:	d109      	bne.n	8008c8e <UART_DMAError+0x40>
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2b21      	cmp	r3, #33	; 0x21
 8008c7e:	d106      	bne.n	8008c8e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008c88:	6978      	ldr	r0, [r7, #20]
 8008c8a:	f7ff fede 	bl	8008a4a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c98:	2b40      	cmp	r3, #64	; 0x40
 8008c9a:	d109      	bne.n	8008cb0 <UART_DMAError+0x62>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b22      	cmp	r3, #34	; 0x22
 8008ca0:	d106      	bne.n	8008cb0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008caa:	6978      	ldr	r0, [r7, #20]
 8008cac:	f7ff ff0e 	bl	8008acc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb6:	f043 0210 	orr.w	r2, r3, #16
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cc0:	6978      	ldr	r0, [r7, #20]
 8008cc2:	f7ff fad1 	bl	8008268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cc6:	bf00      	nop
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff fabb 	bl	8008268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cf2:	bf00      	nop
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b088      	sub	sp, #32
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d16:	61fb      	str	r3, [r7, #28]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6979      	ldr	r1, [r7, #20]
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e6      	bne.n	8008d02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2220      	movs	r2, #32
 8008d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7f9 fa34 	bl	80021b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d48:	bf00      	nop
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d101      	bne.n	8008da2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e027      	b.n	8008df2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2224      	movs	r2, #36	; 0x24
 8008dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0201 	bic.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d101      	bne.n	8008e16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e12:	2302      	movs	r3, #2
 8008e14:	e02d      	b.n	8008e72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2224      	movs	r2, #36	; 0x24
 8008e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 0201 	bic.w	r2, r2, #1
 8008e3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f850 	bl	8008ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2220      	movs	r2, #32
 8008e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e02d      	b.n	8008eee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2224      	movs	r2, #36	; 0x24
 8008e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0201 	bic.w	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f812 	bl	8008ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d108      	bne.n	8008f1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f18:	e031      	b.n	8008f7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f1e:	2308      	movs	r3, #8
 8008f20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	0e5b      	lsrs	r3, r3, #25
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	0f5b      	lsrs	r3, r3, #29
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 0307 	and.w	r3, r3, #7
 8008f40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	7b3a      	ldrb	r2, [r7, #12]
 8008f46:	4911      	ldr	r1, [pc, #68]	; (8008f8c <UARTEx_SetNbDataToProcess+0x94>)
 8008f48:	5c8a      	ldrb	r2, [r1, r2]
 8008f4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f4e:	7b3a      	ldrb	r2, [r7, #12]
 8008f50:	490f      	ldr	r1, [pc, #60]	; (8008f90 <UARTEx_SetNbDataToProcess+0x98>)
 8008f52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f54:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	7b7a      	ldrb	r2, [r7, #13]
 8008f64:	4909      	ldr	r1, [pc, #36]	; (8008f8c <UARTEx_SetNbDataToProcess+0x94>)
 8008f66:	5c8a      	ldrb	r2, [r1, r2]
 8008f68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f6c:	7b7a      	ldrb	r2, [r7, #13]
 8008f6e:	4908      	ldr	r1, [pc, #32]	; (8008f90 <UARTEx_SetNbDataToProcess+0x98>)
 8008f70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f72:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f7e:	bf00      	nop
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	0800f73c 	.word	0x0800f73c
 8008f90:	0800f744 	.word	0x0800f744

08008f94 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f9e:	f107 0308 	add.w	r3, r7, #8
 8008fa2:	2218      	movs	r2, #24
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 f8d8 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008fac:	233f      	movs	r3, #63	; 0x3f
 8008fae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008fb0:	2381      	movs	r3, #129	; 0x81
 8008fb2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008fb4:	1dfb      	adds	r3, r7, #7
 8008fb6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008fbc:	f107 0308 	add.w	r3, r7, #8
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f001 fb54 	bl	800a670 <hci_send_req>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da01      	bge.n	8008fd2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008fce:	23ff      	movs	r3, #255	; 0xff
 8008fd0:	e000      	b.n	8008fd4 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3720      	adds	r7, #32
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008fdc:	b5b0      	push	{r4, r5, r7, lr}
 8008fde:	b0ce      	sub	sp, #312	; 0x138
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	4619      	mov	r1, r3
 8008fea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fee:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ff2:	462a      	mov	r2, r5
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ffa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008ffe:	4622      	mov	r2, r4
 8009000:	801a      	strh	r2, [r3, #0]
 8009002:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009006:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800900a:	4602      	mov	r2, r0
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009012:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009016:	460a      	mov	r2, r1
 8009018:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800901a:	f107 0310 	add.w	r3, r7, #16
 800901e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009022:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009026:	3308      	adds	r3, #8
 8009028:	f107 0210 	add.w	r2, r7, #16
 800902c:	4413      	add	r3, r2
 800902e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009032:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009036:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800903a:	4413      	add	r3, r2
 800903c:	3309      	adds	r3, #9
 800903e:	f107 0210 	add.w	r2, r7, #16
 8009042:	4413      	add	r3, r2
 8009044:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009048:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800904c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009050:	2200      	movs	r2, #0
 8009052:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800905a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800905e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009062:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009066:	7812      	ldrb	r2, [r2, #0]
 8009068:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800906a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800906e:	3301      	adds	r3, #1
 8009070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009074:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009078:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800907c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009080:	8812      	ldrh	r2, [r2, #0]
 8009082:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009086:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800908a:	3302      	adds	r3, #2
 800908c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009090:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009094:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009098:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800909c:	8812      	ldrh	r2, [r2, #0]
 800909e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80090a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090a6:	3302      	adds	r3, #2
 80090a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80090ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090b0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80090b4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80090b8:	7812      	ldrb	r2, [r2, #0]
 80090ba:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80090bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090c0:	3301      	adds	r3, #1
 80090c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80090c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090ca:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80090ce:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80090d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090d4:	3301      	adds	r3, #1
 80090d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80090da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090de:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80090e2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80090e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090e8:	3301      	adds	r3, #1
 80090ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80090ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090f2:	3308      	adds	r3, #8
 80090f4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80090f8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 f81d 	bl	800a13c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009102:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009106:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800910a:	4413      	add	r3, r2
 800910c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009110:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009114:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009118:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800911a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800911e:	3301      	adds	r3, #1
 8009120:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009124:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009128:	3301      	adds	r3, #1
 800912a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800912e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8009132:	4618      	mov	r0, r3
 8009134:	f001 f802 	bl	800a13c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009138:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800913c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009140:	4413      	add	r3, r2
 8009142:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8009146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800914a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800914e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009150:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009154:	3302      	adds	r3, #2
 8009156:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800915a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8009162:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009164:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009168:	3302      	adds	r3, #2
 800916a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800916e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009172:	2218      	movs	r2, #24
 8009174:	2100      	movs	r1, #0
 8009176:	4618      	mov	r0, r3
 8009178:	f000 fff0 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 800917c:	233f      	movs	r3, #63	; 0x3f
 800917e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8009182:	2383      	movs	r3, #131	; 0x83
 8009184:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009188:	f107 0310 	add.w	r3, r7, #16
 800918c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009190:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009194:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009198:	f107 030f 	add.w	r3, r7, #15
 800919c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091a0:	2301      	movs	r3, #1
 80091a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091aa:	2100      	movs	r1, #0
 80091ac:	4618      	mov	r0, r3
 80091ae:	f001 fa5f 	bl	800a670 <hci_send_req>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	da01      	bge.n	80091bc <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80091b8:	23ff      	movs	r3, #255	; 0xff
 80091ba:	e004      	b.n	80091c6 <aci_gap_set_discoverable+0x1ea>
  return status;
 80091bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80091c0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80091c4:	781b      	ldrb	r3, [r3, #0]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bdb0      	pop	{r4, r5, r7, pc}

080091d0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b0cc      	sub	sp, #304	; 0x130
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4602      	mov	r2, r0
 80091d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091dc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80091e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80091e2:	f107 0310 	add.w	r3, r7, #16
 80091e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80091ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80091fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009200:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009204:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009208:	7812      	ldrb	r2, [r2, #0]
 800920a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800920c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009210:	3301      	adds	r3, #1
 8009212:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009216:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800921a:	2218      	movs	r2, #24
 800921c:	2100      	movs	r1, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f000 ff9c 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009224:	233f      	movs	r3, #63	; 0x3f
 8009226:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800922a:	2385      	movs	r3, #133	; 0x85
 800922c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009230:	f107 0310 	add.w	r3, r7, #16
 8009234:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009238:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800923c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009240:	f107 030f 	add.w	r3, r7, #15
 8009244:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009248:	2301      	movs	r3, #1
 800924a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800924e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009252:	2100      	movs	r1, #0
 8009254:	4618      	mov	r0, r3
 8009256:	f001 fa0b 	bl	800a670 <hci_send_req>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	da01      	bge.n	8009264 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009260:	23ff      	movs	r3, #255	; 0xff
 8009262:	e004      	b.n	800926e <aci_gap_set_io_capability+0x9e>
  return status;
 8009264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009268:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800926c:	781b      	ldrb	r3, [r3, #0]
}
 800926e:	4618      	mov	r0, r3
 8009270:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009278:	b5b0      	push	{r4, r5, r7, lr}
 800927a:	b0cc      	sub	sp, #304	; 0x130
 800927c:	af00      	add	r7, sp, #0
 800927e:	4605      	mov	r5, r0
 8009280:	460c      	mov	r4, r1
 8009282:	4610      	mov	r0, r2
 8009284:	4619      	mov	r1, r3
 8009286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800928e:	462a      	mov	r2, r5
 8009290:	701a      	strb	r2, [r3, #0]
 8009292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009296:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800929a:	4622      	mov	r2, r4
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80092a6:	4602      	mov	r2, r0
 80092a8:	701a      	strb	r2, [r3, #0]
 80092aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092b2:	460a      	mov	r2, r1
 80092b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80092b6:	f107 0310 	add.w	r3, r7, #16
 80092ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80092d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092d8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80092dc:	7812      	ldrb	r2, [r2, #0]
 80092de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092e4:	3301      	adds	r3, #1
 80092e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80092ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092f2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80092f6:	7812      	ldrb	r2, [r2, #0]
 80092f8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80092fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092fe:	3301      	adds	r3, #1
 8009300:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8009304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009308:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800930c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009310:	7812      	ldrb	r2, [r2, #0]
 8009312:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009318:	3301      	adds	r3, #1
 800931a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800931e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009322:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009326:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800932a:	7812      	ldrb	r2, [r2, #0]
 800932c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800932e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009332:	3301      	adds	r3, #1
 8009334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800933c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009340:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009342:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009346:	3301      	adds	r3, #1
 8009348:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800934c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009350:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009354:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009356:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800935a:	3301      	adds	r3, #1
 800935c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009364:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009368:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800936a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800936e:	3301      	adds	r3, #1
 8009370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009378:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800937c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009380:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009384:	3304      	adds	r3, #4
 8009386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800938a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009392:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009398:	3301      	adds	r3, #1
 800939a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800939e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093a2:	2218      	movs	r2, #24
 80093a4:	2100      	movs	r1, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fed8 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 80093ac:	233f      	movs	r3, #63	; 0x3f
 80093ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80093b2:	2386      	movs	r3, #134	; 0x86
 80093b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093b8:	f107 0310 	add.w	r3, r7, #16
 80093bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80093c8:	f107 030f 	add.w	r3, r7, #15
 80093cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80093d0:	2301      	movs	r3, #1
 80093d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093da:	2100      	movs	r1, #0
 80093dc:	4618      	mov	r0, r3
 80093de:	f001 f947 	bl	800a670 <hci_send_req>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	da01      	bge.n	80093ec <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80093e8:	23ff      	movs	r3, #255	; 0xff
 80093ea:	e004      	b.n	80093f6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80093ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80093f4:	781b      	ldrb	r3, [r3, #0]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bdb0      	pop	{r4, r5, r7, pc}

08009400 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b0cc      	sub	sp, #304	; 0x130
 8009404:	af00      	add	r7, sp, #0
 8009406:	4602      	mov	r2, r0
 8009408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009410:	6019      	str	r1, [r3, #0]
 8009412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009416:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800941a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800941c:	f107 0310 	add.w	r3, r7, #16
 8009420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009428:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800943a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800943e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009442:	8812      	ldrh	r2, [r2, #0]
 8009444:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800944a:	3302      	adds	r3, #2
 800944c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8009450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009454:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009458:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800945c:	6812      	ldr	r2, [r2, #0]
 800945e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009462:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009466:	3304      	adds	r3, #4
 8009468:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800946c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009470:	2218      	movs	r2, #24
 8009472:	2100      	movs	r1, #0
 8009474:	4618      	mov	r0, r3
 8009476:	f000 fe71 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 800947a:	233f      	movs	r3, #63	; 0x3f
 800947c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8009480:	2388      	movs	r3, #136	; 0x88
 8009482:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009486:	f107 0310 	add.w	r3, r7, #16
 800948a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800948e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009492:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009496:	f107 030f 	add.w	r3, r7, #15
 800949a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800949e:	2301      	movs	r3, #1
 80094a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094a8:	2100      	movs	r1, #0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f001 f8e0 	bl	800a670 <hci_send_req>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	da01      	bge.n	80094ba <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80094b6:	23ff      	movs	r3, #255	; 0xff
 80094b8:	e004      	b.n	80094c4 <aci_gap_pass_key_resp+0xc4>
  return status;
 80094ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094c2:	781b      	ldrb	r3, [r3, #0]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80094ce:	b590      	push	{r4, r7, lr}
 80094d0:	b0cd      	sub	sp, #308	; 0x134
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	4604      	mov	r4, r0
 80094d6:	4608      	mov	r0, r1
 80094d8:	4611      	mov	r1, r2
 80094da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094de:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80094e2:	6013      	str	r3, [r2, #0]
 80094e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80094ec:	4622      	mov	r2, r4
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80094f8:	4602      	mov	r2, r0
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009500:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009504:	460a      	mov	r2, r1
 8009506:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009508:	f107 0310 	add.w	r3, r7, #16
 800950c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009510:	f107 0308 	add.w	r3, r7, #8
 8009514:	2207      	movs	r2, #7
 8009516:	2100      	movs	r1, #0
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fe1f 	bl	800a15c <Osal_MemSet>
  int index_input = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8009524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009528:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800952c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009530:	7812      	ldrb	r2, [r2, #0]
 8009532:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009538:	3301      	adds	r3, #1
 800953a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800953e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009542:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009546:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800954e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009552:	3301      	adds	r3, #1
 8009554:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800955c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009560:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009568:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800956c:	3301      	adds	r3, #1
 800956e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009572:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009576:	2218      	movs	r2, #24
 8009578:	2100      	movs	r1, #0
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fdee 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009580:	233f      	movs	r3, #63	; 0x3f
 8009582:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009586:	238a      	movs	r3, #138	; 0x8a
 8009588:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800958c:	f107 0310 	add.w	r3, r7, #16
 8009590:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009594:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009598:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800959c:	f107 0308 	add.w	r3, r7, #8
 80095a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80095a4:	2307      	movs	r3, #7
 80095a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095ae:	2100      	movs	r1, #0
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 f85d 	bl	800a670 <hci_send_req>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	da01      	bge.n	80095c0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80095bc:	23ff      	movs	r3, #255	; 0xff
 80095be:	e02e      	b.n	800961e <aci_gap_init+0x150>
  if ( resp.Status )
 80095c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <aci_gap_init+0x10c>
    return resp.Status;
 80095ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	e021      	b.n	800961e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80095da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80095e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80095f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80095fc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009600:	b29a      	uxth	r2, r3
 8009602:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009606:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009610:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009614:	b29a      	uxth	r2, r3
 8009616:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800961a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009624:	46bd      	mov	sp, r7
 8009626:	bd90      	pop	{r4, r7, pc}

08009628 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b0cc      	sub	sp, #304	; 0x130
 800962c:	af00      	add	r7, sp, #0
 800962e:	4602      	mov	r2, r0
 8009630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009638:	6019      	str	r1, [r3, #0]
 800963a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009642:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009644:	f107 0310 	add.w	r3, r7, #16
 8009648:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800964c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009650:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800965e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009662:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009666:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800966e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009672:	3301      	adds	r3, #1
 8009674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800967c:	1c58      	adds	r0, r3, #1
 800967e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009682:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009686:	781a      	ldrb	r2, [r3, #0]
 8009688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800968c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009690:	6819      	ldr	r1, [r3, #0]
 8009692:	f000 fd53 	bl	800a13c <Osal_MemCpy>
  index_input += AdvDataLen;
 8009696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800969a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80096a4:	4413      	add	r3, r2
 80096a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096ae:	2218      	movs	r2, #24
 80096b0:	2100      	movs	r1, #0
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 fd52 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 80096b8:	233f      	movs	r3, #63	; 0x3f
 80096ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80096be:	238e      	movs	r3, #142	; 0x8e
 80096c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80096c4:	f107 0310 	add.w	r3, r7, #16
 80096c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096d4:	f107 030f 	add.w	r3, r7, #15
 80096d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096dc:	2301      	movs	r3, #1
 80096de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096e6:	2100      	movs	r1, #0
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 ffc1 	bl	800a670 <hci_send_req>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	da01      	bge.n	80096f8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80096f4:	23ff      	movs	r3, #255	; 0xff
 80096f6:	e004      	b.n	8009702 <aci_gap_update_adv_data+0xda>
  return status;
 80096f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009700:	781b      	ldrb	r3, [r3, #0]
}
 8009702:	4618      	mov	r0, r3
 8009704:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b088      	sub	sp, #32
 8009710:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009716:	f107 0308 	add.w	r3, r7, #8
 800971a:	2218      	movs	r2, #24
 800971c:	2100      	movs	r1, #0
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fd1c 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009724:	233f      	movs	r3, #63	; 0x3f
 8009726:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009728:	2392      	movs	r3, #146	; 0x92
 800972a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800972c:	1dfb      	adds	r3, r7, #7
 800972e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009730:	2301      	movs	r3, #1
 8009732:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009734:	f107 0308 	add.w	r3, r7, #8
 8009738:	2100      	movs	r1, #0
 800973a:	4618      	mov	r0, r3
 800973c:	f000 ff98 	bl	800a670 <hci_send_req>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	da01      	bge.n	800974a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009746:	23ff      	movs	r3, #255	; 0xff
 8009748:	e000      	b.n	800974c <aci_gap_configure_whitelist+0x40>
  return status;
 800974a:	79fb      	ldrb	r3, [r7, #7]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b0cc      	sub	sp, #304	; 0x130
 8009758:	af00      	add	r7, sp, #0
 800975a:	4602      	mov	r2, r0
 800975c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009760:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009764:	801a      	strh	r2, [r3, #0]
 8009766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800976a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800976e:	460a      	mov	r2, r1
 8009770:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009772:	f107 0310 	add.w	r3, r7, #16
 8009776:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800977a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800977e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009782:	2200      	movs	r2, #0
 8009784:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800978c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009790:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009794:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009798:	8812      	ldrh	r2, [r2, #0]
 800979a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800979c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097a0:	3302      	adds	r3, #2
 80097a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80097a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097ae:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80097b2:	7812      	ldrb	r2, [r2, #0]
 80097b4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097ba:	3301      	adds	r3, #1
 80097bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097c4:	2218      	movs	r2, #24
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 fcc7 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 80097ce:	233f      	movs	r3, #63	; 0x3f
 80097d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80097d4:	23a5      	movs	r3, #165	; 0xa5
 80097d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80097da:	f107 0310 	add.w	r3, r7, #16
 80097de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80097e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80097ea:	f107 030f 	add.w	r3, r7, #15
 80097ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80097f2:	2301      	movs	r3, #1
 80097f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097fc:	2100      	movs	r1, #0
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 ff36 	bl	800a670 <hci_send_req>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	da01      	bge.n	800980e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800980a:	23ff      	movs	r3, #255	; 0xff
 800980c:	e004      	b.n	8009818 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800980e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009812:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009816:	781b      	ldrb	r3, [r3, #0]
}
 8009818:	4618      	mov	r0, r3
 800981a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b088      	sub	sp, #32
 8009826:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800982c:	f107 0308 	add.w	r3, r7, #8
 8009830:	2218      	movs	r2, #24
 8009832:	2100      	movs	r1, #0
 8009834:	4618      	mov	r0, r3
 8009836:	f000 fc91 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 800983a:	233f      	movs	r3, #63	; 0x3f
 800983c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800983e:	f240 1301 	movw	r3, #257	; 0x101
 8009842:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009844:	1dfb      	adds	r3, r7, #7
 8009846:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009848:	2301      	movs	r3, #1
 800984a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800984c:	f107 0308 	add.w	r3, r7, #8
 8009850:	2100      	movs	r1, #0
 8009852:	4618      	mov	r0, r3
 8009854:	f000 ff0c 	bl	800a670 <hci_send_req>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	da01      	bge.n	8009862 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800985e:	23ff      	movs	r3, #255	; 0xff
 8009860:	e000      	b.n	8009864 <aci_gatt_init+0x42>
  return status;
 8009862:	79fb      	ldrb	r3, [r7, #7]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800986c:	b590      	push	{r4, r7, lr}
 800986e:	b0cf      	sub	sp, #316	; 0x13c
 8009870:	af00      	add	r7, sp, #0
 8009872:	4604      	mov	r4, r0
 8009874:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009878:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800987c:	6001      	str	r1, [r0, #0]
 800987e:	4610      	mov	r0, r2
 8009880:	4619      	mov	r1, r3
 8009882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009886:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800988a:	4622      	mov	r2, r4
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009892:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009896:	4602      	mov	r2, r0
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800989e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80098a2:	460a      	mov	r2, r1
 80098a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80098a6:	f107 0310 	add.w	r3, r7, #16
 80098aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80098ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098b2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d00a      	beq.n	80098d2 <aci_gatt_add_service+0x66>
 80098bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098c0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d101      	bne.n	80098ce <aci_gatt_add_service+0x62>
 80098ca:	2311      	movs	r3, #17
 80098cc:	e002      	b.n	80098d4 <aci_gatt_add_service+0x68>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <aci_gatt_add_service+0x68>
 80098d2:	2303      	movs	r3, #3
 80098d4:	f107 0210 	add.w	r2, r7, #16
 80098d8:	4413      	add	r3, r2
 80098da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80098de:	f107 030c 	add.w	r3, r7, #12
 80098e2:	2203      	movs	r2, #3
 80098e4:	2100      	movs	r1, #0
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fc38 	bl	800a15c <Osal_MemSet>
  int index_input = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80098f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098f6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80098fa:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80098fe:	7812      	ldrb	r2, [r2, #0]
 8009900:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009902:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009906:	3301      	adds	r3, #1
 8009908:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800990c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009910:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d002      	beq.n	8009920 <aci_gatt_add_service+0xb4>
 800991a:	2b02      	cmp	r3, #2
 800991c:	d004      	beq.n	8009928 <aci_gatt_add_service+0xbc>
 800991e:	e007      	b.n	8009930 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009920:	2302      	movs	r3, #2
 8009922:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009926:	e005      	b.n	8009934 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009928:	2310      	movs	r3, #16
 800992a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800992e:	e001      	b.n	8009934 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009930:	2397      	movs	r3, #151	; 0x97
 8009932:	e06c      	b.n	8009a0e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009934:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009938:	1c58      	adds	r0, r3, #1
 800993a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800993e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009942:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009946:	6819      	ldr	r1, [r3, #0]
 8009948:	f000 fbf8 	bl	800a13c <Osal_MemCpy>
    index_input += size;
 800994c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009950:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009954:	4413      	add	r3, r2
 8009956:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800995a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800995e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009962:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009966:	7812      	ldrb	r2, [r2, #0]
 8009968:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800996a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800996e:	3301      	adds	r3, #1
 8009970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009978:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800997c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009980:	7812      	ldrb	r2, [r2, #0]
 8009982:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009988:	3301      	adds	r3, #1
 800998a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800998e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009992:	2218      	movs	r2, #24
 8009994:	2100      	movs	r1, #0
 8009996:	4618      	mov	r0, r3
 8009998:	f000 fbe0 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 800999c:	233f      	movs	r3, #63	; 0x3f
 800999e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80099a2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80099a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80099aa:	f107 0310 	add.w	r3, r7, #16
 80099ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80099b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80099ba:	f107 030c 	add.w	r3, r7, #12
 80099be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80099c2:	2303      	movs	r3, #3
 80099c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fe4e 	bl	800a670 <hci_send_req>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	da01      	bge.n	80099de <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80099da:	23ff      	movs	r3, #255	; 0xff
 80099dc:	e017      	b.n	8009a0e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80099de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80099e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d005      	beq.n	80099f8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80099ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80099f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	e00a      	b.n	8009a0e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80099f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80099fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009a0a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd90      	pop	{r4, r7, pc}

08009a18 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009a18:	b590      	push	{r4, r7, lr}
 8009a1a:	b0d1      	sub	sp, #324	; 0x144
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009a26:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009a2a:	600a      	str	r2, [r1, #0]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009a32:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009a36:	4622      	mov	r2, r4
 8009a38:	801a      	strh	r2, [r3, #0]
 8009a3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009a3e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009a42:	4602      	mov	r2, r0
 8009a44:	701a      	strb	r2, [r3, #0]
 8009a46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009a4a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009a4e:	460a      	mov	r2, r1
 8009a50:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009a52:	f107 0318 	add.w	r3, r7, #24
 8009a56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009a5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009a5e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d00a      	beq.n	8009a7e <aci_gatt_add_char+0x66>
 8009a68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009a6c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d101      	bne.n	8009a7a <aci_gatt_add_char+0x62>
 8009a76:	2313      	movs	r3, #19
 8009a78:	e002      	b.n	8009a80 <aci_gatt_add_char+0x68>
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e000      	b.n	8009a80 <aci_gatt_add_char+0x68>
 8009a7e:	2305      	movs	r3, #5
 8009a80:	f107 0218 	add.w	r2, r7, #24
 8009a84:	4413      	add	r3, r2
 8009a86:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009a8a:	f107 0314 	add.w	r3, r7, #20
 8009a8e:	2203      	movs	r2, #3
 8009a90:	2100      	movs	r1, #0
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 fb62 	bl	800a15c <Osal_MemSet>
  int index_input = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009a9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009aa2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009aa6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009aaa:	8812      	ldrh	r2, [r2, #0]
 8009aac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009aae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ab2:	3302      	adds	r3, #2
 8009ab4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009ab8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009abc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009ac0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009ac4:	7812      	ldrb	r2, [r2, #0]
 8009ac6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009ac8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009acc:	3301      	adds	r3, #1
 8009ace:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009ad2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009ad6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d002      	beq.n	8009ae6 <aci_gatt_add_char+0xce>
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d004      	beq.n	8009aee <aci_gatt_add_char+0xd6>
 8009ae4:	e007      	b.n	8009af6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009aec:	e005      	b.n	8009afa <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009aee:	2310      	movs	r3, #16
 8009af0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009af4:	e001      	b.n	8009afa <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009af6:	2397      	movs	r3, #151	; 0x97
 8009af8:	e091      	b.n	8009c1e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009afa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009afe:	1cd8      	adds	r0, r3, #3
 8009b00:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009b04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009b08:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009b0c:	6819      	ldr	r1, [r3, #0]
 8009b0e:	f000 fb15 	bl	800a13c <Osal_MemCpy>
    index_input += size;
 8009b12:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009b16:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009b20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009b24:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009b28:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009b2c:	8812      	ldrh	r2, [r2, #0]
 8009b2e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009b30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b34:	3302      	adds	r3, #2
 8009b36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009b3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009b3e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009b42:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009b44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b48:	3301      	adds	r3, #1
 8009b4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009b4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009b52:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009b56:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009b58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009b62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009b66:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009b6a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009b6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b70:	3301      	adds	r3, #1
 8009b72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009b76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009b7a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009b7e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009b80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b84:	3301      	adds	r3, #1
 8009b86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009b8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009b8e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009b92:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009b94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b98:	3301      	adds	r3, #1
 8009b9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ba2:	2218      	movs	r2, #24
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fad8 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bac:	233f      	movs	r3, #63	; 0x3f
 8009bae:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009bb2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009bb6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009bba:	f107 0318 	add.w	r3, r7, #24
 8009bbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009bc2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009bc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009bca:	f107 0314 	add.w	r3, r7, #20
 8009bce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 fd46 	bl	800a670 <hci_send_req>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	da01      	bge.n	8009bee <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009bea:	23ff      	movs	r3, #255	; 0xff
 8009bec:	e017      	b.n	8009c1e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009bee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009bfc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	e00a      	b.n	8009c1e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009c08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c10:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009c1a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd90      	pop	{r4, r7, pc}

08009c28 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009c28:	b5b0      	push	{r4, r5, r7, lr}
 8009c2a:	b0cc      	sub	sp, #304	; 0x130
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4605      	mov	r5, r0
 8009c30:	460c      	mov	r4, r1
 8009c32:	4610      	mov	r0, r2
 8009c34:	4619      	mov	r1, r3
 8009c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c3e:	462a      	mov	r2, r5
 8009c40:	801a      	strh	r2, [r3, #0]
 8009c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	801a      	strh	r2, [r3, #0]
 8009c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c52:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009c56:	4602      	mov	r2, r0
 8009c58:	701a      	strb	r2, [r3, #0]
 8009c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c5e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009c62:	460a      	mov	r2, r1
 8009c64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009c66:	f107 0310 	add.w	r3, r7, #16
 8009c6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c72:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c76:	2200      	movs	r2, #0
 8009c78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c88:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009c8c:	8812      	ldrh	r2, [r2, #0]
 8009c8e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c94:	3302      	adds	r3, #2
 8009c96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ca2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009ca6:	8812      	ldrh	r2, [r2, #0]
 8009ca8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009caa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cae:	3302      	adds	r3, #2
 8009cb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009cbc:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009cc0:	7812      	ldrb	r2, [r2, #0]
 8009cc2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cc8:	3301      	adds	r3, #1
 8009cca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009cd6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009cda:	7812      	ldrb	r2, [r2, #0]
 8009cdc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009cde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cec:	1d98      	adds	r0, r3, #6
 8009cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cf2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009cfe:	f000 fa1d 	bl	800a13c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d06:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009d10:	4413      	add	r3, r2
 8009d12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d1a:	2218      	movs	r2, #24
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fa1c 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d24:	233f      	movs	r3, #63	; 0x3f
 8009d26:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009d2a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009d2e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009d32:	f107 0310 	add.w	r3, r7, #16
 8009d36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d42:	f107 030f 	add.w	r3, r7, #15
 8009d46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fc8a 	bl	800a670 <hci_send_req>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	da01      	bge.n	8009d66 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009d62:	23ff      	movs	r3, #255	; 0xff
 8009d64:	e004      	b.n	8009d70 <aci_gatt_update_char_value+0x148>
  return status;
 8009d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d6a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d6e:	781b      	ldrb	r3, [r3, #0]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bdb0      	pop	{r4, r5, r7, pc}

08009d7a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b0cc      	sub	sp, #304	; 0x130
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d8e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009d92:	4602      	mov	r2, r0
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d9a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009d9e:	460a      	mov	r2, r1
 8009da0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009da2:	f107 0310 	add.w	r3, r7, #16
 8009da6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dc4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009dc8:	7812      	ldrb	r2, [r2, #0]
 8009dca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dde:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dea:	3301      	adds	r3, #1
 8009dec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009df4:	1c98      	adds	r0, r3, #2
 8009df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dfa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009dfe:	781a      	ldrb	r2, [r3, #0]
 8009e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e08:	6819      	ldr	r1, [r3, #0]
 8009e0a:	f000 f997 	bl	800a13c <Osal_MemCpy>
  index_input += Length;
 8009e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e26:	2218      	movs	r2, #24
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 f996 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e30:	233f      	movs	r3, #63	; 0x3f
 8009e32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009e36:	230c      	movs	r3, #12
 8009e38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009e3c:	f107 0310 	add.w	r3, r7, #16
 8009e40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009e4c:	f107 030f 	add.w	r3, r7, #15
 8009e50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e5e:	2100      	movs	r1, #0
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fc05 	bl	800a670 <hci_send_req>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	da01      	bge.n	8009e70 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009e6c:	23ff      	movs	r3, #255	; 0xff
 8009e6e:	e004      	b.n	8009e7a <aci_hal_write_config_data+0x100>
  return status;
 8009e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e74:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e78:	781b      	ldrb	r3, [r3, #0]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b0cc      	sub	sp, #304	; 0x130
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e90:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e9a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009e9e:	460a      	mov	r2, r1
 8009ea0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009ea2:	f107 0310 	add.w	r3, r7, #16
 8009ea6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ec0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ec4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009ec8:	7812      	ldrb	r2, [r2, #0]
 8009eca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ede:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ee2:	7812      	ldrb	r2, [r2, #0]
 8009ee4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009eea:	3301      	adds	r3, #1
 8009eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ef0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ef4:	2218      	movs	r2, #24
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 f92f 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009efe:	233f      	movs	r3, #63	; 0x3f
 8009f00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009f04:	230f      	movs	r3, #15
 8009f06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009f0a:	f107 0310 	add.w	r3, r7, #16
 8009f0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009f1a:	f107 030f 	add.w	r3, r7, #15
 8009f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009f22:	2301      	movs	r3, #1
 8009f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 fb9e 	bl	800a670 <hci_send_req>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	da01      	bge.n	8009f3e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009f3a:	23ff      	movs	r3, #255	; 0xff
 8009f3c:	e004      	b.n	8009f48 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009f46:	781b      	ldrb	r3, [r3, #0]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b0cc      	sub	sp, #304	; 0x130
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	4602      	mov	r2, r0
 8009f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f5e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009f62:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009f64:	f107 0310 	add.w	r3, r7, #16
 8009f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f70:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009f74:	2200      	movs	r2, #0
 8009f76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f86:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009f8a:	8812      	ldrh	r2, [r2, #0]
 8009f8c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f92:	3302      	adds	r3, #2
 8009f94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f9c:	2218      	movs	r2, #24
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 f8db 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009fa6:	233f      	movs	r3, #63	; 0x3f
 8009fa8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009fac:	2318      	movs	r3, #24
 8009fae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009fb2:	f107 0310 	add.w	r3, r7, #16
 8009fb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009fc2:	f107 030f 	add.w	r3, r7, #15
 8009fc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 fb4a 	bl	800a670 <hci_send_req>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da01      	bge.n	8009fe6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009fe2:	23ff      	movs	r3, #255	; 0xff
 8009fe4:	e004      	b.n	8009ff0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009fee:	781b      	ldrb	r3, [r3, #0]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b088      	sub	sp, #32
 8009ffe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	2218      	movs	r2, #24
 800a00a:	2100      	movs	r1, #0
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 f8a5 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x03;
 800a012:	2303      	movs	r3, #3
 800a014:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a016:	2303      	movs	r3, #3
 800a018:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a01a:	1dfb      	adds	r3, r7, #7
 800a01c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a01e:	2301      	movs	r3, #1
 800a020:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a022:	f107 0308 	add.w	r3, r7, #8
 800a026:	2100      	movs	r1, #0
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fb21 	bl	800a670 <hci_send_req>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	da01      	bge.n	800a038 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a034:	23ff      	movs	r3, #255	; 0xff
 800a036:	e000      	b.n	800a03a <hci_reset+0x40>
  return status;
 800a038:	79fb      	ldrb	r3, [r7, #7]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3720      	adds	r7, #32
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a042:	b590      	push	{r4, r7, lr}
 800a044:	b0cd      	sub	sp, #308	; 0x134
 800a046:	af00      	add	r7, sp, #0
 800a048:	4604      	mov	r4, r0
 800a04a:	4608      	mov	r0, r1
 800a04c:	4611      	mov	r1, r2
 800a04e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a052:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a056:	4622      	mov	r2, r4
 800a058:	701a      	strb	r2, [r3, #0]
 800a05a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a05e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a062:	4602      	mov	r2, r0
 800a064:	701a      	strb	r2, [r3, #0]
 800a066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a06a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a06e:	460a      	mov	r2, r1
 800a070:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a072:	f107 0310 	add.w	r3, r7, #16
 800a076:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a07a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a07e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a08c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a090:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a094:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a098:	7812      	ldrb	r2, [r2, #0]
 800a09a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a09c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a0a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a0ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a0b2:	7812      	ldrb	r2, [r2, #0]
 800a0b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a0b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a0c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a0c8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a0cc:	7812      	ldrb	r2, [r2, #0]
 800a0ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a0d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0de:	2218      	movs	r2, #24
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 f83a 	bl	800a15c <Osal_MemSet>
  rq.ogf = 0x08;
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a0ee:	2331      	movs	r3, #49	; 0x31
 800a0f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a0f4:	f107 0310 	add.w	r3, r7, #16
 800a0f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a0fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a100:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a104:	f107 030f 	add.w	r3, r7, #15
 800a108:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a10c:	2301      	movs	r3, #1
 800a10e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a116:	2100      	movs	r1, #0
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 faa9 	bl	800a670 <hci_send_req>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	da01      	bge.n	800a128 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a124:	23ff      	movs	r3, #255	; 0xff
 800a126:	e004      	b.n	800a132 <hci_le_set_default_phy+0xf0>
  return status;
 800a128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a12c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a130:	781b      	ldrb	r3, [r3, #0]
}
 800a132:	4618      	mov	r0, r3
 800a134:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd90      	pop	{r4, r7, pc}

0800a13c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f003 fb7b 	bl	800d848 <memcpy>
 800a152:	4603      	mov	r3, r0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	68b9      	ldr	r1, [r7, #8]
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f003 faf1 	bl	800d754 <memset>
 800a172:	4603      	mov	r3, r0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
  return;
 800a180:	bf00      	nop
}
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a18a:	b480      	push	{r7}
 800a18c:	af00      	add	r7, sp, #0
  return;
 800a18e:	bf00      	nop
}
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a198:	b480      	push	{r7}
 800a19a:	af00      	add	r7, sp, #0
  return;
 800a19c:	bf00      	nop
}
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	af00      	add	r7, sp, #0
  return;
 800a1aa:	bf00      	nop
}
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	af00      	add	r7, sp, #0
  return;
 800a1b8:	bf00      	nop
}
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	af00      	add	r7, sp, #0
  return;
 800a1c6:	bf00      	nop
}
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  return;
 800a1d4:	bf00      	nop
}
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a1de:	b480      	push	{r7}
 800a1e0:	af00      	add	r7, sp, #0
  return;
 800a1e2:	bf00      	nop
}
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0
  return;
 800a1f0:	bf00      	nop
}
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	af00      	add	r7, sp, #0
  return;
 800a1fe:	bf00      	nop
}
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
  return;
 800a20c:	bf00      	nop
}
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a216:	b480      	push	{r7}
 800a218:	af00      	add	r7, sp, #0
  return;
 800a21a:	bf00      	nop
}
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
  return;
 800a228:	bf00      	nop
}
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a232:	b480      	push	{r7}
 800a234:	af00      	add	r7, sp, #0
  return;
 800a236:	bf00      	nop
}
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
  return;
 800a244:	bf00      	nop
}
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a24e:	b480      	push	{r7}
 800a250:	af00      	add	r7, sp, #0
  return;
 800a252:	bf00      	nop
}
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0
  return;
 800a260:	bf00      	nop
}
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
	...

0800a26c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a270:	4b04      	ldr	r3, [pc, #16]	; (800a284 <SVCCTL_Init+0x18>)
 800a272:	2200      	movs	r2, #0
 800a274:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a276:	4b04      	ldr	r3, [pc, #16]	; (800a288 <SVCCTL_Init+0x1c>)
 800a278:	2200      	movs	r2, #0
 800a27a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a27c:	f000 f806 	bl	800a28c <SVCCTL_SvcInit>

  return;
 800a280:	bf00      	nop
}
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20000914 	.word	0x20000914
 800a288:	20000934 	.word	0x20000934

0800a28c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	af00      	add	r7, sp, #0
  BAS_Init();
 800a290:	f7ff ff74 	bl	800a17c <BAS_Init>

  BLS_Init();
 800a294:	f7ff ff79 	bl	800a18a <BLS_Init>

  CRS_STM_Init();
 800a298:	f7ff ff7e 	bl	800a198 <CRS_STM_Init>

  DIS_Init();
 800a29c:	f7ff ff83 	bl	800a1a6 <DIS_Init>

  EDS_STM_Init();
 800a2a0:	f7ff ff88 	bl	800a1b4 <EDS_STM_Init>

  HIDS_Init();
 800a2a4:	f7ff ff8d 	bl	800a1c2 <HIDS_Init>

  HRS_Init();
 800a2a8:	f7ff ff92 	bl	800a1d0 <HRS_Init>

  HTS_Init();
 800a2ac:	f7ff ff97 	bl	800a1de <HTS_Init>

  IAS_Init();
 800a2b0:	f7ff ff9c 	bl	800a1ec <IAS_Init>

  LLS_Init();
 800a2b4:	f7ff ffa1 	bl	800a1fa <LLS_Init>

  TPS_Init();
 800a2b8:	f7ff ffa6 	bl	800a208 <TPS_Init>

  MOTENV_STM_Init();
 800a2bc:	f7ff ffab 	bl	800a216 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a2c0:	f7ff ffb0 	bl	800a224 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a2c4:	f7ff ffb5 	bl	800a232 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a2c8:	f7ff ffba 	bl	800a240 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a2cc:	f7ff ffc6 	bl	800a25c <BVOPUS_STM_Init>

  MESH_Init();
 800a2d0:	f7ff ffbd 	bl	800a24e <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a2d4:	f002 fa40 	bl	800c758 <SVCCTL_InitCustomSvc>
  
  return;
 800a2d8:	bf00      	nop
}
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a2e4:	4b09      	ldr	r3, [pc, #36]	; (800a30c <SVCCTL_RegisterSvcHandler+0x30>)
 800a2e6:	7f1b      	ldrb	r3, [r3, #28]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4a08      	ldr	r2, [pc, #32]	; (800a30c <SVCCTL_RegisterSvcHandler+0x30>)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a2f2:	4b06      	ldr	r3, [pc, #24]	; (800a30c <SVCCTL_RegisterSvcHandler+0x30>)
 800a2f4:	7f1b      	ldrb	r3, [r3, #28]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	4b04      	ldr	r3, [pc, #16]	; (800a30c <SVCCTL_RegisterSvcHandler+0x30>)
 800a2fc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a2fe:	bf00      	nop
}
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	20000914 	.word	0x20000914

0800a310 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3301      	adds	r3, #1
 800a31c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	2bff      	cmp	r3, #255	; 0xff
 800a328:	d125      	bne.n	800a376 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	3302      	adds	r3, #2
 800a32e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	b29b      	uxth	r3, r3
 800a336:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a33a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a33e:	d118      	bne.n	800a372 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a340:	2300      	movs	r3, #0
 800a342:	757b      	strb	r3, [r7, #21]
 800a344:	e00d      	b.n	800a362 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a346:	7d7b      	ldrb	r3, [r7, #21]
 800a348:	4a1a      	ldr	r2, [pc, #104]	; (800a3b4 <SVCCTL_UserEvtRx+0xa4>)
 800a34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	4798      	blx	r3
 800a352:	4603      	mov	r3, r0
 800a354:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a356:	7dfb      	ldrb	r3, [r7, #23]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d108      	bne.n	800a36e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a35c:	7d7b      	ldrb	r3, [r7, #21]
 800a35e:	3301      	adds	r3, #1
 800a360:	757b      	strb	r3, [r7, #21]
 800a362:	4b14      	ldr	r3, [pc, #80]	; (800a3b4 <SVCCTL_UserEvtRx+0xa4>)
 800a364:	7f1b      	ldrb	r3, [r3, #28]
 800a366:	7d7a      	ldrb	r2, [r7, #21]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d3ec      	bcc.n	800a346 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a36c:	e002      	b.n	800a374 <SVCCTL_UserEvtRx+0x64>
              break;
 800a36e:	bf00      	nop
          break;
 800a370:	e000      	b.n	800a374 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a372:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a374:	e000      	b.n	800a378 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a376:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d00f      	beq.n	800a39e <SVCCTL_UserEvtRx+0x8e>
 800a37e:	2b02      	cmp	r3, #2
 800a380:	dc10      	bgt.n	800a3a4 <SVCCTL_UserEvtRx+0x94>
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <SVCCTL_UserEvtRx+0x7c>
 800a386:	2b01      	cmp	r3, #1
 800a388:	d006      	beq.n	800a398 <SVCCTL_UserEvtRx+0x88>
 800a38a:	e00b      	b.n	800a3a4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 fc5d 	bl	800bc4c <SVCCTL_App_Notification>
 800a392:	4603      	mov	r3, r0
 800a394:	75bb      	strb	r3, [r7, #22]
      break;
 800a396:	e008      	b.n	800a3aa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a398:	2301      	movs	r3, #1
 800a39a:	75bb      	strb	r3, [r7, #22]
      break;
 800a39c:	e005      	b.n	800a3aa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	75bb      	strb	r3, [r7, #22]
      break;
 800a3a2:	e002      	b.n	800a3aa <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	75bb      	strb	r3, [r7, #22]
      break;
 800a3a8:	bf00      	nop
  }

  return (return_status);
 800a3aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20000914 	.word	0x20000914

0800a3b8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a3c0:	f107 030c 	add.w	r3, r7, #12
 800a3c4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	212e      	movs	r1, #46	; 0x2e
 800a3d0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a3d4:	f000 fae2 	bl	800a99c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	330b      	adds	r3, #11
 800a3dc:	78db      	ldrb	r3, [r3, #3]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3720      	adds	r7, #32
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b088      	sub	sp, #32
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a3ee:	f107 030c 	add.w	r3, r7, #12
 800a3f2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	210f      	movs	r1, #15
 800a3fe:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a402:	f000 facb 	bl	800a99c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	330b      	adds	r3, #11
 800a40a:	78db      	ldrb	r3, [r3, #3]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3720      	adds	r7, #32
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a41c:	f107 030c 	add.w	r3, r7, #12
 800a420:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	2110      	movs	r1, #16
 800a428:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a42c:	f000 fab6 	bl	800a99c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	330b      	adds	r3, #11
 800a434:	78db      	ldrb	r3, [r3, #3]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3720      	adds	r7, #32
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a440:	b480      	push	{r7}
 800a442:	b08b      	sub	sp, #44	; 0x2c
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a468:	4b4a      	ldr	r3, [pc, #296]	; (800a594 <SHCI_GetWirelessFwInfo+0x154>)
 800a46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a470:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a47a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a44      	ldr	r2, [pc, #272]	; (800a598 <SHCI_GetWirelessFwInfo+0x158>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d10f      	bne.n	800a4ac <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	617b      	str	r3, [r7, #20]
 800a4aa:	e01a      	b.n	800a4e2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a4b4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a4b8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	0e1b      	lsrs	r3, r3, #24
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	0c1b      	lsrs	r3, r3, #16
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	0a1b      	lsrs	r3, r3, #8
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	091b      	lsrs	r3, r3, #4
 800a504:	b2db      	uxtb	r3, r3
 800a506:	f003 030f 	and.w	r3, r3, #15
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	b2db      	uxtb	r3, r3
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	0e1b      	lsrs	r3, r3, #24
 800a522:	b2da      	uxtb	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	0c1b      	lsrs	r3, r3, #16
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	0a1b      	lsrs	r3, r3, #8
 800a536:	b2da      	uxtb	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	b2da      	uxtb	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	0e1b      	lsrs	r3, r3, #24
 800a550:	b2da      	uxtb	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	0c1b      	lsrs	r3, r3, #16
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	0a1b      	lsrs	r3, r3, #8
 800a564:	b2da      	uxtb	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	0e1b      	lsrs	r3, r3, #24
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	0c1b      	lsrs	r3, r3, #16
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	b2da      	uxtb	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	372c      	adds	r7, #44	; 0x2c
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	58004000 	.word	0x58004000
 800a598:	a94656b9 	.word	0xa94656b9

0800a59c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	4a08      	ldr	r2, [pc, #32]	; (800a5cc <hci_init+0x30>)
 800a5ac:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a5ae:	4a08      	ldr	r2, [pc, #32]	; (800a5d0 <hci_init+0x34>)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a5b4:	4806      	ldr	r0, [pc, #24]	; (800a5d0 <hci_init+0x34>)
 800a5b6:	f000 f973 	bl	800a8a0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 f8d4 	bl	800a76c <TlInit>

  return;
 800a5c4:	bf00      	nop
}
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	20000a78 	.word	0x20000a78
 800a5d0:	20000a50 	.word	0x20000a50

0800a5d4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a5da:	4822      	ldr	r0, [pc, #136]	; (800a664 <hci_user_evt_proc+0x90>)
 800a5dc:	f000 fdde 	bl	800b19c <LST_is_empty>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d12b      	bne.n	800a63e <hci_user_evt_proc+0x6a>
 800a5e6:	4b20      	ldr	r3, [pc, #128]	; (800a668 <hci_user_evt_proc+0x94>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d027      	beq.n	800a63e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a5ee:	f107 030c 	add.w	r3, r7, #12
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	481b      	ldr	r0, [pc, #108]	; (800a664 <hci_user_evt_proc+0x90>)
 800a5f6:	f000 fe60 	bl	800b2ba <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a5fa:	4b1c      	ldr	r3, [pc, #112]	; (800a66c <hci_user_evt_proc+0x98>)
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00c      	beq.n	800a61c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a606:	2301      	movs	r3, #1
 800a608:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a60a:	4b18      	ldr	r3, [pc, #96]	; (800a66c <hci_user_evt_proc+0x98>)
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	1d3a      	adds	r2, r7, #4
 800a610:	4610      	mov	r0, r2
 800a612:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a614:	793a      	ldrb	r2, [r7, #4]
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <hci_user_evt_proc+0x94>)
 800a618:	701a      	strb	r2, [r3, #0]
 800a61a:	e002      	b.n	800a622 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a61c:	4b12      	ldr	r3, [pc, #72]	; (800a668 <hci_user_evt_proc+0x94>)
 800a61e:	2201      	movs	r2, #1
 800a620:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a622:	4b11      	ldr	r3, [pc, #68]	; (800a668 <hci_user_evt_proc+0x94>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d004      	beq.n	800a634 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fc03 	bl	800ae38 <TL_MM_EvtDone>
 800a632:	e004      	b.n	800a63e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4619      	mov	r1, r3
 800a638:	480a      	ldr	r0, [pc, #40]	; (800a664 <hci_user_evt_proc+0x90>)
 800a63a:	f000 fdd1 	bl	800b1e0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a63e:	4809      	ldr	r0, [pc, #36]	; (800a664 <hci_user_evt_proc+0x90>)
 800a640:	f000 fdac 	bl	800b19c <LST_is_empty>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d107      	bne.n	800a65a <hci_user_evt_proc+0x86>
 800a64a:	4b07      	ldr	r3, [pc, #28]	; (800a668 <hci_user_evt_proc+0x94>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a652:	4804      	ldr	r0, [pc, #16]	; (800a664 <hci_user_evt_proc+0x90>)
 800a654:	f001 ff22 	bl	800c49c <hci_notify_asynch_evt>
  }


  return;
 800a658:	bf00      	nop
 800a65a:	bf00      	nop
}
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	2000093c 	.word	0x2000093c
 800a668:	20000948 	.word	0x20000948
 800a66c:	20000a50 	.word	0x20000a50

0800a670 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b088      	sub	sp, #32
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a67c:	2000      	movs	r0, #0
 800a67e:	f000 f8cb 	bl	800a818 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a682:	2300      	movs	r3, #0
 800a684:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	885b      	ldrh	r3, [r3, #2]
 800a68a:	b21b      	sxth	r3, r3
 800a68c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a690:	b21a      	sxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	029b      	lsls	r3, r3, #10
 800a698:	b21b      	sxth	r3, r3
 800a69a:	4313      	orrs	r3, r2
 800a69c:	b21b      	sxth	r3, r3
 800a69e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	b2d9      	uxtb	r1, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	8bbb      	ldrh	r3, [r7, #28]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 f88d 	bl	800a7cc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a6b2:	e04e      	b.n	800a752 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a6b4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a6b8:	f001 ff07 	bl	800c4ca <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a6bc:	e043      	b.n	800a746 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a6be:	f107 030c 	add.w	r3, r7, #12
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4828      	ldr	r0, [pc, #160]	; (800a768 <hci_send_req+0xf8>)
 800a6c6:	f000 fdf8 	bl	800b2ba <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	7a5b      	ldrb	r3, [r3, #9]
 800a6ce:	2b0f      	cmp	r3, #15
 800a6d0:	d114      	bne.n	800a6fc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	330b      	adds	r3, #11
 800a6d6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	885b      	ldrh	r3, [r3, #2]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	8bba      	ldrh	r2, [r7, #28]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d104      	bne.n	800a6ee <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	7812      	ldrb	r2, [r2, #0]
 800a6ec:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	785b      	ldrb	r3, [r3, #1]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d027      	beq.n	800a746 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	77fb      	strb	r3, [r7, #31]
 800a6fa:	e024      	b.n	800a746 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	330b      	adds	r3, #11
 800a700:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	8bba      	ldrh	r2, [r7, #28]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d114      	bne.n	800a73a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	7a9b      	ldrb	r3, [r3, #10]
 800a714:	3b03      	subs	r3, #3
 800a716:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	695a      	ldr	r2, [r3, #20]
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
 800a71e:	429a      	cmp	r2, r3
 800a720:	bfa8      	it	ge
 800a722:	461a      	movge	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6918      	ldr	r0, [r3, #16]
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	1cd9      	adds	r1, r3, #3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	461a      	mov	r2, r3
 800a736:	f003 f887 	bl	800d848 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a742:	2301      	movs	r3, #1
 800a744:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a746:	4808      	ldr	r0, [pc, #32]	; (800a768 <hci_send_req+0xf8>)
 800a748:	f000 fd28 	bl	800b19c <LST_is_empty>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0b5      	beq.n	800a6be <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a752:	7ffb      	ldrb	r3, [r7, #31]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d0ad      	beq.n	800a6b4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a758:	2001      	movs	r0, #1
 800a75a:	f000 f85d 	bl	800a818 <NotifyCmdStatus>

  return 0;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3720      	adds	r7, #32
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	20000a70 	.word	0x20000a70

0800a76c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a774:	480f      	ldr	r0, [pc, #60]	; (800a7b4 <TlInit+0x48>)
 800a776:	f000 fd01 	bl	800b17c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a77a:	4a0f      	ldr	r2, [pc, #60]	; (800a7b8 <TlInit+0x4c>)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a780:	480e      	ldr	r0, [pc, #56]	; (800a7bc <TlInit+0x50>)
 800a782:	f000 fcfb 	bl	800b17c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a786:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <TlInit+0x54>)
 800a788:	2201      	movs	r2, #1
 800a78a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a78c:	4b0d      	ldr	r3, [pc, #52]	; (800a7c4 <TlInit+0x58>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00a      	beq.n	800a7aa <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a798:	4b0b      	ldr	r3, [pc, #44]	; (800a7c8 <TlInit+0x5c>)
 800a79a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a79c:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <TlInit+0x58>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f107 0208 	add.w	r2, r7, #8
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	4798      	blx	r3
  }

  return;
 800a7a8:	bf00      	nop
 800a7aa:	bf00      	nop
}
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000a70 	.word	0x20000a70
 800a7b8:	20000944 	.word	0x20000944
 800a7bc:	2000093c 	.word	0x2000093c
 800a7c0:	20000948 	.word	0x20000948
 800a7c4:	20000a50 	.word	0x20000a50
 800a7c8:	0800a859 	.word	0x0800a859

0800a7cc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	603a      	str	r2, [r7, #0]
 800a7d6:	80fb      	strh	r3, [r7, #6]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a7dc:	4b0c      	ldr	r3, [pc, #48]	; (800a810 <SendCmd+0x44>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	88fa      	ldrh	r2, [r7, #6]
 800a7e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a7e6:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <SendCmd+0x44>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	797a      	ldrb	r2, [r7, #5]
 800a7ec:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a7ee:	4b08      	ldr	r3, [pc, #32]	; (800a810 <SendCmd+0x44>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	330c      	adds	r3, #12
 800a7f4:	797a      	ldrb	r2, [r7, #5]
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f003 f825 	bl	800d848 <memcpy>

  hciContext.io.Send(0,0);
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <SendCmd+0x48>)
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2100      	movs	r1, #0
 800a804:	2000      	movs	r0, #0
 800a806:	4798      	blx	r3

  return;
 800a808:	bf00      	nop
}
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20000944 	.word	0x20000944
 800a814:	20000a50 	.word	0x20000a50

0800a818 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4603      	mov	r3, r0
 800a820:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d108      	bne.n	800a83a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <NotifyCmdStatus+0x3c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00d      	beq.n	800a84c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a830:	4b08      	ldr	r3, [pc, #32]	; (800a854 <NotifyCmdStatus+0x3c>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2000      	movs	r0, #0
 800a836:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a838:	e008      	b.n	800a84c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a83a:	4b06      	ldr	r3, [pc, #24]	; (800a854 <NotifyCmdStatus+0x3c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d004      	beq.n	800a84c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a842:	4b04      	ldr	r3, [pc, #16]	; (800a854 <NotifyCmdStatus+0x3c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2001      	movs	r0, #1
 800a848:	4798      	blx	r3
  return;
 800a84a:	bf00      	nop
 800a84c:	bf00      	nop
}
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	20000a78 	.word	0x20000a78

0800a858 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	7a5b      	ldrb	r3, [r3, #9]
 800a864:	2b0f      	cmp	r3, #15
 800a866:	d003      	beq.n	800a870 <TlEvtReceived+0x18>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	7a5b      	ldrb	r3, [r3, #9]
 800a86c:	2b0e      	cmp	r3, #14
 800a86e:	d107      	bne.n	800a880 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	4809      	ldr	r0, [pc, #36]	; (800a898 <TlEvtReceived+0x40>)
 800a874:	f000 fcda 	bl	800b22c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a878:	2000      	movs	r0, #0
 800a87a:	f001 fe1b 	bl	800c4b4 <hci_cmd_resp_release>
 800a87e:	e006      	b.n	800a88e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a880:	6879      	ldr	r1, [r7, #4]
 800a882:	4806      	ldr	r0, [pc, #24]	; (800a89c <TlEvtReceived+0x44>)
 800a884:	f000 fcd2 	bl	800b22c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a888:	4804      	ldr	r0, [pc, #16]	; (800a89c <TlEvtReceived+0x44>)
 800a88a:	f001 fe07 	bl	800c49c <hci_notify_asynch_evt>
  }

  return;
 800a88e:	bf00      	nop
}
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20000a70 	.word	0x20000a70
 800a89c:	2000093c 	.word	0x2000093c

0800a8a0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a05      	ldr	r2, [pc, #20]	; (800a8c0 <hci_register_io_bus+0x20>)
 800a8ac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a04      	ldr	r2, [pc, #16]	; (800a8c4 <hci_register_io_bus+0x24>)
 800a8b2:	611a      	str	r2, [r3, #16]

  return;
 800a8b4:	bf00      	nop
}
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	0800abb1 	.word	0x0800abb1
 800a8c4:	0800ac19 	.word	0x0800ac19

0800a8c8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	4a08      	ldr	r2, [pc, #32]	; (800a8f8 <shci_init+0x30>)
 800a8d8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a8da:	4a08      	ldr	r2, [pc, #32]	; (800a8fc <shci_init+0x34>)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a8e0:	4806      	ldr	r0, [pc, #24]	; (800a8fc <shci_init+0x34>)
 800a8e2:	f000 f911 	bl	800ab08 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 f894 	bl	800aa18 <TlInit>

  return;
 800a8f0:	bf00      	nop
}
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	20000a9c 	.word	0x20000a9c
 800a8fc:	20000a7c 	.word	0x20000a7c

0800a900 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a906:	4822      	ldr	r0, [pc, #136]	; (800a990 <shci_user_evt_proc+0x90>)
 800a908:	f000 fc48 	bl	800b19c <LST_is_empty>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d12b      	bne.n	800a96a <shci_user_evt_proc+0x6a>
 800a912:	4b20      	ldr	r3, [pc, #128]	; (800a994 <shci_user_evt_proc+0x94>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d027      	beq.n	800a96a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a91a:	f107 030c 	add.w	r3, r7, #12
 800a91e:	4619      	mov	r1, r3
 800a920:	481b      	ldr	r0, [pc, #108]	; (800a990 <shci_user_evt_proc+0x90>)
 800a922:	f000 fcca 	bl	800b2ba <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a926:	4b1c      	ldr	r3, [pc, #112]	; (800a998 <shci_user_evt_proc+0x98>)
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00c      	beq.n	800a948 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a932:	2301      	movs	r3, #1
 800a934:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a936:	4b18      	ldr	r3, [pc, #96]	; (800a998 <shci_user_evt_proc+0x98>)
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	1d3a      	adds	r2, r7, #4
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a940:	793a      	ldrb	r2, [r7, #4]
 800a942:	4b14      	ldr	r3, [pc, #80]	; (800a994 <shci_user_evt_proc+0x94>)
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	e002      	b.n	800a94e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a948:	4b12      	ldr	r3, [pc, #72]	; (800a994 <shci_user_evt_proc+0x94>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a94e:	4b11      	ldr	r3, [pc, #68]	; (800a994 <shci_user_evt_proc+0x94>)
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fa6d 	bl	800ae38 <TL_MM_EvtDone>
 800a95e:	e004      	b.n	800a96a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4619      	mov	r1, r3
 800a964:	480a      	ldr	r0, [pc, #40]	; (800a990 <shci_user_evt_proc+0x90>)
 800a966:	f000 fc3b 	bl	800b1e0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a96a:	4809      	ldr	r0, [pc, #36]	; (800a990 <shci_user_evt_proc+0x90>)
 800a96c:	f000 fc16 	bl	800b19c <LST_is_empty>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d107      	bne.n	800a986 <shci_user_evt_proc+0x86>
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <shci_user_evt_proc+0x94>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a97e:	4804      	ldr	r0, [pc, #16]	; (800a990 <shci_user_evt_proc+0x90>)
 800a980:	f7f6 fda7 	bl	80014d2 <shci_notify_asynch_evt>
  }


  return;
 800a984:	bf00      	nop
 800a986:	bf00      	nop
}
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	2000094c 	.word	0x2000094c
 800a994:	2000095c 	.word	0x2000095c
 800a998:	20000a7c 	.word	0x20000a7c

0800a99c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60ba      	str	r2, [r7, #8]
 800a9a4:	607b      	str	r3, [r7, #4]
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	81fb      	strh	r3, [r7, #14]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	f000 f864 	bl	800aa7c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a9b4:	4b16      	ldr	r3, [pc, #88]	; (800aa10 <shci_send+0x74>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	89fa      	ldrh	r2, [r7, #14]
 800a9ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a9be:	4b14      	ldr	r3, [pc, #80]	; (800aa10 <shci_send+0x74>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	7b7a      	ldrb	r2, [r7, #13]
 800a9c4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a9c6:	4b12      	ldr	r3, [pc, #72]	; (800aa10 <shci_send+0x74>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	330c      	adds	r3, #12
 800a9cc:	7b7a      	ldrb	r2, [r7, #13]
 800a9ce:	68b9      	ldr	r1, [r7, #8]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f002 ff39 	bl	800d848 <memcpy>

  shciContext.io.Send(0,0);
 800a9d6:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <shci_send+0x78>)
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	2100      	movs	r1, #0
 800a9dc:	2000      	movs	r0, #0
 800a9de:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a9e0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a9e4:	f7f6 fd8c 	bl	8001500 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f103 0008 	add.w	r0, r3, #8
 800a9ee:	4b08      	ldr	r3, [pc, #32]	; (800aa10 <shci_send+0x74>)
 800a9f0:	6819      	ldr	r1, [r3, #0]
 800a9f2:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <shci_send+0x74>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	789b      	ldrb	r3, [r3, #2]
 800a9f8:	3303      	adds	r3, #3
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	f002 ff24 	bl	800d848 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800aa00:	2001      	movs	r0, #1
 800aa02:	f000 f83b 	bl	800aa7c <Cmd_SetStatus>

  return;
 800aa06:	bf00      	nop
}
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20000958 	.word	0x20000958
 800aa14:	20000a7c 	.word	0x20000a7c

0800aa18 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800aa20:	4a10      	ldr	r2, [pc, #64]	; (800aa64 <TlInit+0x4c>)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800aa26:	4810      	ldr	r0, [pc, #64]	; (800aa68 <TlInit+0x50>)
 800aa28:	f000 fba8 	bl	800b17c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800aa2c:	2001      	movs	r0, #1
 800aa2e:	f000 f825 	bl	800aa7c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800aa32:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <TlInit+0x54>)
 800aa34:	2201      	movs	r2, #1
 800aa36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800aa38:	4b0d      	ldr	r3, [pc, #52]	; (800aa70 <TlInit+0x58>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00c      	beq.n	800aa5a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800aa44:	4b0b      	ldr	r3, [pc, #44]	; (800aa74 <TlInit+0x5c>)
 800aa46:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800aa48:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <TlInit+0x60>)
 800aa4a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800aa4c:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <TlInit+0x58>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f107 020c 	add.w	r2, r7, #12
 800aa54:	4610      	mov	r0, r2
 800aa56:	4798      	blx	r3
  }

  return;
 800aa58:	bf00      	nop
 800aa5a:	bf00      	nop
}
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20000958 	.word	0x20000958
 800aa68:	2000094c 	.word	0x2000094c
 800aa6c:	2000095c 	.word	0x2000095c
 800aa70:	20000a7c 	.word	0x20000a7c
 800aa74:	0800aacd 	.word	0x0800aacd
 800aa78:	0800aae5 	.word	0x0800aae5

0800aa7c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10b      	bne.n	800aaa4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <Cmd_SetStatus+0x48>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800aa94:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <Cmd_SetStatus+0x48>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2000      	movs	r0, #0
 800aa9a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <Cmd_SetStatus+0x4c>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800aaa2:	e00b      	b.n	800aabc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800aaa4:	4b08      	ldr	r3, [pc, #32]	; (800aac8 <Cmd_SetStatus+0x4c>)
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800aaaa:	4b06      	ldr	r3, [pc, #24]	; (800aac4 <Cmd_SetStatus+0x48>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d004      	beq.n	800aabc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800aab2:	4b04      	ldr	r3, [pc, #16]	; (800aac4 <Cmd_SetStatus+0x48>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2001      	movs	r0, #1
 800aab8:	4798      	blx	r3
  return;
 800aaba:	bf00      	nop
 800aabc:	bf00      	nop
}
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	20000a9c 	.word	0x20000a9c
 800aac8:	20000954 	.word	0x20000954

0800aacc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800aad4:	2000      	movs	r0, #0
 800aad6:	f7f6 fd08 	bl	80014ea <shci_cmd_resp_release>

  return;
 800aada:	bf00      	nop
}
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	4805      	ldr	r0, [pc, #20]	; (800ab04 <TlUserEvtReceived+0x20>)
 800aaf0:	f000 fb9c 	bl	800b22c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800aaf4:	4803      	ldr	r0, [pc, #12]	; (800ab04 <TlUserEvtReceived+0x20>)
 800aaf6:	f7f6 fcec 	bl	80014d2 <shci_notify_asynch_evt>

  return;
 800aafa:	bf00      	nop
}
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	2000094c 	.word	0x2000094c

0800ab08 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a05      	ldr	r2, [pc, #20]	; (800ab28 <shci_register_io_bus+0x20>)
 800ab14:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a04      	ldr	r2, [pc, #16]	; (800ab2c <shci_register_io_bus+0x24>)
 800ab1a:	611a      	str	r2, [r3, #16]

  return;
 800ab1c:	bf00      	nop
}
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	0800acc5 	.word	0x0800acc5
 800ab2c:	0800ad19 	.word	0x0800ad19

0800ab30 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ab34:	f002 f8be 	bl	800ccb4 <HW_IPCC_Enable>

  return;
 800ab38:	bf00      	nop
}
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <TL_Init>:


void TL_Init( void )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ab40:	4b10      	ldr	r3, [pc, #64]	; (800ab84 <TL_Init+0x48>)
 800ab42:	4a11      	ldr	r2, [pc, #68]	; (800ab88 <TL_Init+0x4c>)
 800ab44:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <TL_Init+0x48>)
 800ab48:	4a10      	ldr	r2, [pc, #64]	; (800ab8c <TL_Init+0x50>)
 800ab4a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <TL_Init+0x48>)
 800ab4e:	4a10      	ldr	r2, [pc, #64]	; (800ab90 <TL_Init+0x54>)
 800ab50:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ab52:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <TL_Init+0x48>)
 800ab54:	4a0f      	ldr	r2, [pc, #60]	; (800ab94 <TL_Init+0x58>)
 800ab56:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ab58:	4b0a      	ldr	r3, [pc, #40]	; (800ab84 <TL_Init+0x48>)
 800ab5a:	4a0f      	ldr	r2, [pc, #60]	; (800ab98 <TL_Init+0x5c>)
 800ab5c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ab5e:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <TL_Init+0x48>)
 800ab60:	4a0e      	ldr	r2, [pc, #56]	; (800ab9c <TL_Init+0x60>)
 800ab62:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ab64:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <TL_Init+0x48>)
 800ab66:	4a0e      	ldr	r2, [pc, #56]	; (800aba0 <TL_Init+0x64>)
 800ab68:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <TL_Init+0x48>)
 800ab6c:	4a0d      	ldr	r2, [pc, #52]	; (800aba4 <TL_Init+0x68>)
 800ab6e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ab70:	4b04      	ldr	r3, [pc, #16]	; (800ab84 <TL_Init+0x48>)
 800ab72:	4a0d      	ldr	r2, [pc, #52]	; (800aba8 <TL_Init+0x6c>)
 800ab74:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ab76:	4b03      	ldr	r3, [pc, #12]	; (800ab84 <TL_Init+0x48>)
 800ab78:	4a0c      	ldr	r2, [pc, #48]	; (800abac <TL_Init+0x70>)
 800ab7a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ab7c:	f002 f8ae 	bl	800ccdc <HW_IPCC_Init>

  return;
 800ab80:	bf00      	nop
}
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	20030000 	.word	0x20030000
 800ab88:	20030028 	.word	0x20030028
 800ab8c:	20030048 	.word	0x20030048
 800ab90:	20030058 	.word	0x20030058
 800ab94:	20030068 	.word	0x20030068
 800ab98:	20030070 	.word	0x20030070
 800ab9c:	20030078 	.word	0x20030078
 800aba0:	20030080 	.word	0x20030080
 800aba4:	2003009c 	.word	0x2003009c
 800aba8:	200300a0 	.word	0x200300a0
 800abac:	200300ac 	.word	0x200300ac

0800abb0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800abbc:	4811      	ldr	r0, [pc, #68]	; (800ac04 <TL_BLE_Init+0x54>)
 800abbe:	f000 fadd 	bl	800b17c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800abc2:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <TL_BLE_Init+0x58>)
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	4a0c      	ldr	r2, [pc, #48]	; (800ac0c <TL_BLE_Init+0x5c>)
 800abdc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4a08      	ldr	r2, [pc, #32]	; (800ac04 <TL_BLE_Init+0x54>)
 800abe2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800abe4:	f002 f890 	bl	800cd08 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a08      	ldr	r2, [pc, #32]	; (800ac10 <TL_BLE_Init+0x60>)
 800abee:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	4a07      	ldr	r2, [pc, #28]	; (800ac14 <TL_BLE_Init+0x64>)
 800abf6:	6013      	str	r3, [r2, #0]

  return 0;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	200300c8 	.word	0x200300c8
 800ac08:	20030000 	.word	0x20030000
 800ac0c:	20000904 	.word	0x20000904
 800ac10:	20000aa8 	.word	0x20000aa8
 800ac14:	20000aac 	.word	0x20000aac

0800ac18 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800ac24:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <TL_BLE_SendCmd+0x34>)
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800ac2e:	4b07      	ldr	r3, [pc, #28]	; (800ac4c <TL_BLE_SendCmd+0x34>)
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4619      	mov	r1, r3
 800ac36:	2001      	movs	r0, #1
 800ac38:	f000 f96c 	bl	800af14 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800ac3c:	f002 f86e 	bl	800cd1c <HW_IPCC_BLE_SendCmd>

  return 0;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20030000 	.word	0x20030000

0800ac50 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ac56:	e01c      	b.n	800ac92 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ac58:	1d3b      	adds	r3, r7, #4
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4812      	ldr	r0, [pc, #72]	; (800aca8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ac5e:	f000 fb2c 	bl	800b2ba <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	7a5b      	ldrb	r3, [r3, #9]
 800ac66:	2b0f      	cmp	r3, #15
 800ac68:	d003      	beq.n	800ac72 <HW_IPCC_BLE_RxEvtNot+0x22>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	7a5b      	ldrb	r3, [r3, #9]
 800ac6e:	2b0e      	cmp	r3, #14
 800ac70:	d105      	bne.n	800ac7e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4619      	mov	r1, r3
 800ac76:	2002      	movs	r0, #2
 800ac78:	f000 f94c 	bl	800af14 <OutputDbgTrace>
 800ac7c:	e004      	b.n	800ac88 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4619      	mov	r1, r3
 800ac82:	2003      	movs	r0, #3
 800ac84:	f000 f946 	bl	800af14 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ac88:	4b08      	ldr	r3, [pc, #32]	; (800acac <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ac92:	4805      	ldr	r0, [pc, #20]	; (800aca8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ac94:	f000 fa82 	bl	800b19c <LST_is_empty>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0dc      	beq.n	800ac58 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ac9e:	bf00      	nop
}
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	200300c8 	.word	0x200300c8
 800acac:	20000aa8 	.word	0x20000aa8

0800acb0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800acb4:	4b02      	ldr	r3, [pc, #8]	; (800acc0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4798      	blx	r3

  return;
 800acba:	bf00      	nop
}
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20000aac 	.word	0x20000aac

0800acc4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800acd0:	480d      	ldr	r0, [pc, #52]	; (800ad08 <TL_SYS_Init+0x44>)
 800acd2:	f000 fa53 	bl	800b17c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800acd6:	4b0d      	ldr	r3, [pc, #52]	; (800ad0c <TL_SYS_Init+0x48>)
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	689a      	ldr	r2, [r3, #8]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4a08      	ldr	r2, [pc, #32]	; (800ad08 <TL_SYS_Init+0x44>)
 800ace8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800acea:	f002 f839 	bl	800cd60 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a07      	ldr	r2, [pc, #28]	; (800ad10 <TL_SYS_Init+0x4c>)
 800acf4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	4a06      	ldr	r2, [pc, #24]	; (800ad14 <TL_SYS_Init+0x50>)
 800acfc:	6013      	str	r3, [r2, #0]

  return 0;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	200300d0 	.word	0x200300d0
 800ad0c:	20030000 	.word	0x20030000
 800ad10:	20000ab0 	.word	0x20000ab0
 800ad14:	20000ab4 	.word	0x20000ab4

0800ad18 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ad24:	4b09      	ldr	r3, [pc, #36]	; (800ad4c <TL_SYS_SendCmd+0x34>)
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2210      	movs	r2, #16
 800ad2c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ad2e:	4b07      	ldr	r3, [pc, #28]	; (800ad4c <TL_SYS_SendCmd+0x34>)
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	2004      	movs	r0, #4
 800ad38:	f000 f8ec 	bl	800af14 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ad3c:	f002 f81a 	bl	800cd74 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20030000 	.word	0x20030000

0800ad50 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	2005      	movs	r0, #5
 800ad5e:	f000 f8d9 	bl	800af14 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a03      	ldr	r2, [pc, #12]	; (800ad74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ad68:	68d2      	ldr	r2, [r2, #12]
 800ad6a:	6812      	ldr	r2, [r2, #0]
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3

  return;
 800ad70:	bf00      	nop
}
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20030000 	.word	0x20030000
 800ad78:	20000ab0 	.word	0x20000ab0

0800ad7c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ad82:	e00e      	b.n	800ada2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ad84:	1d3b      	adds	r3, r7, #4
 800ad86:	4619      	mov	r1, r3
 800ad88:	480b      	ldr	r0, [pc, #44]	; (800adb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ad8a:	f000 fa96 	bl	800b2ba <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4619      	mov	r1, r3
 800ad92:	2006      	movs	r0, #6
 800ad94:	f000 f8be 	bl	800af14 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ad98:	4b08      	ldr	r3, [pc, #32]	; (800adbc <HW_IPCC_SYS_EvtNot+0x40>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	4610      	mov	r0, r2
 800ada0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ada2:	4805      	ldr	r0, [pc, #20]	; (800adb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ada4:	f000 f9fa 	bl	800b19c <LST_is_empty>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0ea      	beq.n	800ad84 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800adae:	bf00      	nop
}
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	200300d0 	.word	0x200300d0
 800adbc:	20000ab4 	.word	0x20000ab4

0800adc0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800adc8:	4817      	ldr	r0, [pc, #92]	; (800ae28 <TL_MM_Init+0x68>)
 800adca:	f000 f9d7 	bl	800b17c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800adce:	4817      	ldr	r0, [pc, #92]	; (800ae2c <TL_MM_Init+0x6c>)
 800add0:	f000 f9d4 	bl	800b17c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800add4:	4b16      	ldr	r3, [pc, #88]	; (800ae30 <TL_MM_Init+0x70>)
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	4a16      	ldr	r2, [pc, #88]	; (800ae34 <TL_MM_Init+0x74>)
 800adda:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800addc:	4b15      	ldr	r3, [pc, #84]	; (800ae34 <TL_MM_Init+0x74>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	6892      	ldr	r2, [r2, #8]
 800ade4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ade6:	4b13      	ldr	r3, [pc, #76]	; (800ae34 <TL_MM_Init+0x74>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	68d2      	ldr	r2, [r2, #12]
 800adee:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800adf0:	4b10      	ldr	r3, [pc, #64]	; (800ae34 <TL_MM_Init+0x74>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a0c      	ldr	r2, [pc, #48]	; (800ae28 <TL_MM_Init+0x68>)
 800adf6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800adf8:	4b0e      	ldr	r3, [pc, #56]	; (800ae34 <TL_MM_Init+0x74>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6812      	ldr	r2, [r2, #0]
 800ae00:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ae02:	4b0c      	ldr	r3, [pc, #48]	; (800ae34 <TL_MM_Init+0x74>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	6852      	ldr	r2, [r2, #4]
 800ae0a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ae0c:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <TL_MM_Init+0x74>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	6912      	ldr	r2, [r2, #16]
 800ae14:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ae16:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <TL_MM_Init+0x74>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6952      	ldr	r2, [r2, #20]
 800ae1e:	619a      	str	r2, [r3, #24]

  return;
 800ae20:	bf00      	nop
}
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	200300b8 	.word	0x200300b8
 800ae2c:	20000aa0 	.word	0x20000aa0
 800ae30:	20030000 	.word	0x20030000
 800ae34:	20000ab8 	.word	0x20000ab8

0800ae38 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ae40:	6879      	ldr	r1, [r7, #4]
 800ae42:	4807      	ldr	r0, [pc, #28]	; (800ae60 <TL_MM_EvtDone+0x28>)
 800ae44:	f000 f9f2 	bl	800b22c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	f000 f862 	bl	800af14 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ae50:	4804      	ldr	r0, [pc, #16]	; (800ae64 <TL_MM_EvtDone+0x2c>)
 800ae52:	f001 ffb5 	bl	800cdc0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ae56:	bf00      	nop
}
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000aa0 	.word	0x20000aa0
 800ae64:	0800ae69 	.word	0x0800ae69

0800ae68 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ae6e:	e00c      	b.n	800ae8a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ae70:	1d3b      	adds	r3, r7, #4
 800ae72:	4619      	mov	r1, r3
 800ae74:	480a      	ldr	r0, [pc, #40]	; (800aea0 <SendFreeBuf+0x38>)
 800ae76:	f000 fa20 	bl	800b2ba <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ae7a:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <SendFreeBuf+0x3c>)
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	4611      	mov	r1, r2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 f9d1 	bl	800b22c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ae8a:	4805      	ldr	r0, [pc, #20]	; (800aea0 <SendFreeBuf+0x38>)
 800ae8c:	f000 f986 	bl	800b19c <LST_is_empty>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0ec      	beq.n	800ae70 <SendFreeBuf+0x8>
  }

  return;
 800ae96:	bf00      	nop
}
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20000aa0 	.word	0x20000aa0
 800aea4:	20030000 	.word	0x20030000

0800aea8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800aeac:	4805      	ldr	r0, [pc, #20]	; (800aec4 <TL_TRACES_Init+0x1c>)
 800aeae:	f000 f965 	bl	800b17c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800aeb2:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <TL_TRACES_Init+0x20>)
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	4a03      	ldr	r2, [pc, #12]	; (800aec4 <TL_TRACES_Init+0x1c>)
 800aeb8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800aeba:	f001 ffb7 	bl	800ce2c <HW_IPCC_TRACES_Init>

  return;
 800aebe:	bf00      	nop
}
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	200300c0 	.word	0x200300c0
 800aec8:	20030000 	.word	0x20030000

0800aecc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800aed2:	e008      	b.n	800aee6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800aed4:	1d3b      	adds	r3, r7, #4
 800aed6:	4619      	mov	r1, r3
 800aed8:	4808      	ldr	r0, [pc, #32]	; (800aefc <HW_IPCC_TRACES_EvtNot+0x30>)
 800aeda:	f000 f9ee 	bl	800b2ba <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 f80d 	bl	800af00 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800aee6:	4805      	ldr	r0, [pc, #20]	; (800aefc <HW_IPCC_TRACES_EvtNot+0x30>)
 800aee8:	f000 f958 	bl	800b19c <LST_is_empty>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0f0      	beq.n	800aed4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800aef2:	bf00      	nop
}
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	200300c0 	.word	0x200300c0

0800af00 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	2b06      	cmp	r3, #6
 800af24:	d845      	bhi.n	800afb2 <OutputDbgTrace+0x9e>
 800af26:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <OutputDbgTrace+0x18>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800af49 	.word	0x0800af49
 800af30:	0800af6d 	.word	0x0800af6d
 800af34:	0800af73 	.word	0x0800af73
 800af38:	0800af87 	.word	0x0800af87
 800af3c:	0800af93 	.word	0x0800af93
 800af40:	0800af99 	.word	0x0800af99
 800af44:	0800afa7 	.word	0x0800afa7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	7a5b      	ldrb	r3, [r3, #9]
 800af50:	2bff      	cmp	r3, #255	; 0xff
 800af52:	d005      	beq.n	800af60 <OutputDbgTrace+0x4c>
 800af54:	2bff      	cmp	r3, #255	; 0xff
 800af56:	dc05      	bgt.n	800af64 <OutputDbgTrace+0x50>
 800af58:	2b0e      	cmp	r3, #14
 800af5a:	d005      	beq.n	800af68 <OutputDbgTrace+0x54>
 800af5c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800af5e:	e001      	b.n	800af64 <OutputDbgTrace+0x50>
          break;
 800af60:	bf00      	nop
 800af62:	e027      	b.n	800afb4 <OutputDbgTrace+0xa0>
          break;
 800af64:	bf00      	nop
 800af66:	e025      	b.n	800afb4 <OutputDbgTrace+0xa0>
          break;
 800af68:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800af6a:	e023      	b.n	800afb4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800af70:	e020      	b.n	800afb4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	7a5b      	ldrb	r3, [r3, #9]
 800af7a:	2b0e      	cmp	r3, #14
 800af7c:	d001      	beq.n	800af82 <OutputDbgTrace+0x6e>
 800af7e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800af80:	e000      	b.n	800af84 <OutputDbgTrace+0x70>
          break;
 800af82:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800af84:	e016      	b.n	800afb4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	7a5b      	ldrb	r3, [r3, #9]
 800af8e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800af90:	e010      	b.n	800afb4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800af96:	e00d      	b.n	800afb4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	7a5b      	ldrb	r3, [r3, #9]
 800afa0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800afa2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800afa4:	e006      	b.n	800afb4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	7a5b      	ldrb	r3, [r3, #9]
 800afae:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800afb0:	e000      	b.n	800afb4 <OutputDbgTrace+0xa0>

    default:
      break;
 800afb2:	bf00      	nop
  }

  return;
 800afb4:	bf00      	nop
}
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afc6:	f3ef 8310 	mrs	r3, PRIMASK
 800afca:	60fb      	str	r3, [r7, #12]
  return(result);
 800afcc:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800afce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afd0:	b672      	cpsid	i
}
 800afd2:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800afd4:	1cbb      	adds	r3, r7, #2
 800afd6:	4619      	mov	r1, r3
 800afd8:	4812      	ldr	r0, [pc, #72]	; (800b024 <DbgTrace_TxCpltCallback+0x64>)
 800afda:	f000 fbe6 	bl	800b7aa <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800afde:	1cbb      	adds	r3, r7, #2
 800afe0:	4619      	mov	r1, r3
 800afe2:	4810      	ldr	r0, [pc, #64]	; (800b024 <DbgTrace_TxCpltCallback+0x64>)
 800afe4:	f000 fcd2 	bl	800b98c <CircularQueue_Sense>
 800afe8:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00c      	beq.n	800b00a <DbgTrace_TxCpltCallback+0x4a>
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f383 8810 	msr	PRIMASK, r3
}
 800affa:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800affc:	887b      	ldrh	r3, [r7, #2]
 800affe:	4a0a      	ldr	r2, [pc, #40]	; (800b028 <DbgTrace_TxCpltCallback+0x68>)
 800b000:	4619      	mov	r1, r3
 800b002:	6938      	ldr	r0, [r7, #16]
 800b004:	f7f5 fe9f 	bl	8000d46 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b008:	e008      	b.n	800b01c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b00a:	4b08      	ldr	r3, [pc, #32]	; (800b02c <DbgTrace_TxCpltCallback+0x6c>)
 800b00c:	2201      	movs	r2, #1
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f383 8810 	msr	PRIMASK, r3
}
 800b01a:	bf00      	nop
}
 800b01c:	bf00      	nop
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20000abc 	.word	0x20000abc
 800b028:	0800afc1 	.word	0x0800afc1
 800b02c:	2000001d 	.word	0x2000001d

0800b030 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b036:	f7f5 fe80 	bl	8000d3a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b03a:	2302      	movs	r3, #2
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	2300      	movs	r3, #0
 800b040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b044:	4903      	ldr	r1, [pc, #12]	; (800b054 <DbgTraceInit+0x24>)
 800b046:	4804      	ldr	r0, [pc, #16]	; (800b058 <DbgTraceInit+0x28>)
 800b048:	f000 f956 	bl	800b2f8 <CircularQueue_Init>
#endif 
#endif
  return;
 800b04c:	bf00      	nop
}
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20000adc 	.word	0x20000adc
 800b058:	20000abc 	.word	0x20000abc

0800b05c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 f805 	bl	800b07c <DbgTraceWrite>
 800b072:	4603      	mov	r3, r0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08a      	sub	sp, #40	; 0x28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b08c:	f3ef 8310 	mrs	r3, PRIMASK
 800b090:	61bb      	str	r3, [r7, #24]
  return(result);
 800b092:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b094:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09c:	d102      	bne.n	800b0a4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0a2:	e037      	b.n	800b114 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d006      	beq.n	800b0b8 <DbgTraceWrite+0x3c>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d003      	beq.n	800b0b8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0b6:	e02d      	b.n	800b114 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d02a      	beq.n	800b114 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b0c2:	b672      	cpsid	i
}
 800b0c4:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	68b9      	ldr	r1, [r7, #8]
 800b0ce:	4814      	ldr	r0, [pc, #80]	; (800b120 <DbgTraceWrite+0xa4>)
 800b0d0:	f000 f944 	bl	800b35c <CircularQueue_Add>
 800b0d4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d015      	beq.n	800b108 <DbgTraceWrite+0x8c>
 800b0dc:	4b11      	ldr	r3, [pc, #68]	; (800b124 <DbgTraceWrite+0xa8>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d010      	beq.n	800b108 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b0e6:	4b0f      	ldr	r3, [pc, #60]	; (800b124 <DbgTraceWrite+0xa8>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
 800b0ec:	6a3b      	ldr	r3, [r7, #32]
 800b0ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f383 8810 	msr	PRIMASK, r3
}
 800b0f6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	4a0a      	ldr	r2, [pc, #40]	; (800b128 <DbgTraceWrite+0xac>)
 800b0fe:	4619      	mov	r1, r3
 800b100:	69f8      	ldr	r0, [r7, #28]
 800b102:	f7f5 fe20 	bl	8000d46 <DbgOutputTraces>
 800b106:	e005      	b.n	800b114 <DbgTraceWrite+0x98>
 800b108:	6a3b      	ldr	r3, [r7, #32]
 800b10a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	f383 8810 	msr	PRIMASK, r3
}
 800b112:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b116:	4618      	mov	r0, r3
 800b118:	3728      	adds	r7, #40	; 0x28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000abc 	.word	0x20000abc
 800b124:	2000001d 	.word	0x2000001d
 800b128:	0800afc1 	.word	0x0800afc1

0800b12c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b136:	4b0f      	ldr	r3, [pc, #60]	; (800b174 <OTP_Read+0x48>)
 800b138:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b13a:	e002      	b.n	800b142 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	3b08      	subs	r3, #8
 800b140:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3307      	adds	r3, #7
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	79fa      	ldrb	r2, [r7, #7]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d003      	beq.n	800b156 <OTP_Read+0x2a>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4a09      	ldr	r2, [pc, #36]	; (800b178 <OTP_Read+0x4c>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d1f2      	bne.n	800b13c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3307      	adds	r3, #7
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	79fa      	ldrb	r2, [r7, #7]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d001      	beq.n	800b166 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b166:	68fb      	ldr	r3, [r7, #12]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	1fff73f8 	.word	0x1fff73f8
 800b178:	1fff7000 	.word	0x1fff7000

0800b17c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	605a      	str	r2, [r3, #4]
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b1a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b1ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1ae:	b672      	cpsid	i
}
 800b1b0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d102      	bne.n	800b1c2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	75fb      	strb	r3, [r7, #23]
 800b1c0:	e001      	b.n	800b1c6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	75fb      	strb	r3, [r7, #23]
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	f383 8810 	msr	PRIMASK, r3
}
 800b1d0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	371c      	adds	r7, #28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b1f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1f4:	b672      	cpsid	i
}
 800b1f6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	605a      	str	r2, [r3, #4]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f383 8810 	msr	PRIMASK, r3
}
 800b21e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b220:	bf00      	nop
 800b222:	371c      	adds	r7, #28
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b236:	f3ef 8310 	mrs	r3, PRIMASK
 800b23a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b23c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b23e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b240:	b672      	cpsid	i
}
 800b242:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	601a      	str	r2, [r3, #0]
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	f383 8810 	msr	PRIMASK, r3
}
 800b26a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b26c:	bf00      	nop
 800b26e:	371c      	adds	r7, #28
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b278:	b480      	push	{r7}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b280:	f3ef 8310 	mrs	r3, PRIMASK
 800b284:	60fb      	str	r3, [r7, #12]
  return(result);
 800b286:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b28a:	b672      	cpsid	i
}
 800b28c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	6812      	ldr	r2, [r2, #0]
 800b296:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	6852      	ldr	r2, [r2, #4]
 800b2a0:	605a      	str	r2, [r3, #4]
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f383 8810 	msr	PRIMASK, r3
}
 800b2ac:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b2ae:	bf00      	nop
 800b2b0:	371c      	adds	r7, #28
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b086      	sub	sp, #24
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b2cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2ce:	b672      	cpsid	i
}
 800b2d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7ff ffca 	bl	800b278 <LST_remove_node>
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f383 8810 	msr	PRIMASK, r3
}
 800b2ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b2f0:	bf00      	nop
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
 800b304:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	887a      	ldrh	r2, [r7, #2]
 800b32e:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	7e3a      	ldrb	r2, [r7, #24]
 800b334:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800b336:	7e3b      	ldrb	r3, [r7, #24]
 800b338:	f003 0302 	and.w	r3, r3, #2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d006      	beq.n	800b34e <CircularQueue_Init+0x56>
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	891b      	ldrh	r3, [r3, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800b348:	f04f 33ff 	mov.w	r3, #4294967295
 800b34c:	e000      	b.n	800b350 <CircularQueue_Init+0x58>
  }
  return 0;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08e      	sub	sp, #56	; 0x38
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	4613      	mov	r3, r2
 800b36a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b36c:	2300      	movs	r3, #0
 800b36e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b370:	2300      	movs	r3, #0
 800b372:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800b374:	2300      	movs	r3, #0
 800b376:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b378:	2300      	movs	r3, #0
 800b37a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b37c:	2300      	movs	r3, #0
 800b37e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b380:	2300      	movs	r3, #0
 800b382:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b384:	2300      	movs	r3, #0
 800b386:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	891b      	ldrh	r3, [r3, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <CircularQueue_Add+0x38>
 800b390:	2302      	movs	r3, #2
 800b392:	e000      	b.n	800b396 <CircularQueue_Add+0x3a>
 800b394:	2300      	movs	r3, #0
 800b396:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d02a      	beq.n	800b3f6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	891b      	ldrh	r3, [r3, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d123      	bne.n	800b3f0 <CircularQueue_Add+0x94>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6819      	ldr	r1, [r3, #0]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	1c58      	adds	r0, r3, #1
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	4298      	cmp	r0, r3
 800b3c6:	d306      	bcc.n	800b3d6 <CircularQueue_Add+0x7a>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6918      	ldr	r0, [r3, #16]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	1ac3      	subs	r3, r0, r3
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	e002      	b.n	800b3dc <CircularQueue_Add+0x80>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	440b      	add	r3, r1
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	021b      	lsls	r3, r3, #8
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	3302      	adds	r3, #2
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	e001      	b.n	800b3f4 <CircularQueue_Add+0x98>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	891b      	ldrh	r3, [r3, #8]
 800b3f4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	891b      	ldrh	r3, [r3, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	891b      	ldrh	r3, [r3, #8]
 800b402:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	691a      	ldr	r2, [r3, #16]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d307      	bcc.n	800b420 <CircularQueue_Add+0xc4>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6919      	ldr	r1, [r3, #16]
 800b418:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b41a:	440b      	add	r3, r1
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	e000      	b.n	800b422 <CircularQueue_Add+0xc6>
 800b420:	2300      	movs	r3, #0
 800b422:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b424:	88fa      	ldrh	r2, [r7, #6]
 800b426:	7ffb      	ldrb	r3, [r7, #31]
 800b428:	4413      	add	r3, r2
 800b42a:	461a      	mov	r2, r3
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	fb02 f303 	mul.w	r3, r2, r3
 800b432:	69ba      	ldr	r2, [r7, #24]
 800b434:	429a      	cmp	r2, r3
 800b436:	d80b      	bhi.n	800b450 <CircularQueue_Add+0xf4>
 800b438:	88fa      	ldrh	r2, [r7, #6]
 800b43a:	7ffb      	ldrb	r3, [r7, #31]
 800b43c:	4413      	add	r3, r2
 800b43e:	461a      	mov	r2, r3
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	fbb3 f1f2 	udiv	r1, r3, r2
 800b446:	fb01 f202 	mul.w	r2, r1, r2
 800b44a:	1a9b      	subs	r3, r3, r2
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	e000      	b.n	800b452 <CircularQueue_Add+0xf6>
 800b450:	2300      	movs	r3, #0
 800b452:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b454:	7dfa      	ldrb	r2, [r7, #23]
 800b456:	7ffb      	ldrb	r3, [r7, #31]
 800b458:	429a      	cmp	r2, r3
 800b45a:	bf8c      	ite	hi
 800b45c:	2301      	movhi	r3, #1
 800b45e:	2300      	movls	r3, #0
 800b460:	b2db      	uxtb	r3, r3
 800b462:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b464:	7fbb      	ldrb	r3, [r7, #30]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d008      	beq.n	800b47c <CircularQueue_Add+0x120>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	7f1b      	ldrb	r3, [r3, #28]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d002      	beq.n	800b47c <CircularQueue_Add+0x120>
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	b29b      	uxth	r3, r3
 800b47a:	e000      	b.n	800b47e <CircularQueue_Add+0x122>
 800b47c:	8bbb      	ldrh	r3, [r7, #28]
 800b47e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b480:	7fbb      	ldrb	r3, [r7, #30]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d008      	beq.n	800b498 <CircularQueue_Add+0x13c>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	7f1b      	ldrb	r3, [r3, #28]
 800b48a:	f003 0302 	and.w	r3, r3, #2
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d002      	beq.n	800b498 <CircularQueue_Add+0x13c>
 800b492:	7ffb      	ldrb	r3, [r7, #31]
 800b494:	b29b      	uxth	r3, r3
 800b496:	e000      	b.n	800b49a <CircularQueue_Add+0x13e>
 800b498:	8bbb      	ldrh	r3, [r7, #28]
 800b49a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b49c:	88fb      	ldrh	r3, [r7, #6]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 817e 	beq.w	800b7a0 <CircularQueue_Add+0x444>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	695a      	ldr	r2, [r3, #20]
 800b4a8:	88f9      	ldrh	r1, [r7, #6]
 800b4aa:	7ffb      	ldrb	r3, [r7, #31]
 800b4ac:	440b      	add	r3, r1
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	fb01 f303 	mul.w	r3, r1, r3
 800b4b6:	441a      	add	r2, r3
 800b4b8:	8bbb      	ldrh	r3, [r7, #28]
 800b4ba:	441a      	add	r2, r3
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	f200 816d 	bhi.w	800b7a0 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4ca:	e14a      	b.n	800b762 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	691a      	ldr	r2, [r3, #16]
 800b4d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b4d2:	441a      	add	r2, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d307      	bcc.n	800b4ec <CircularQueue_Add+0x190>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	691a      	ldr	r2, [r3, #16]
 800b4e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b4e2:	441a      	add	r2, r3
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	e003      	b.n	800b4f4 <CircularQueue_Add+0x198>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	691a      	ldr	r2, [r3, #16]
 800b4f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b4f2:	4413      	add	r3, r2
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	891b      	ldrh	r3, [r3, #8]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d130      	bne.n	800b568 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50c:	1c59      	adds	r1, r3, #1
 800b50e:	6339      	str	r1, [r7, #48]	; 0x30
 800b510:	4413      	add	r3, r2
 800b512:	88fa      	ldrh	r2, [r7, #6]
 800b514:	b2d2      	uxtb	r2, r2
 800b516:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b51e:	429a      	cmp	r2, r3
 800b520:	d304      	bcc.n	800b52c <CircularQueue_Add+0x1d0>
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b528:	1ad3      	subs	r3, r2, r3
 800b52a:	e000      	b.n	800b52e <CircularQueue_Add+0x1d2>
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b530:	88fb      	ldrh	r3, [r7, #6]
 800b532:	0a1b      	lsrs	r3, r3, #8
 800b534:	b298      	uxth	r0, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	1c59      	adds	r1, r3, #1
 800b53e:	6339      	str	r1, [r7, #48]	; 0x30
 800b540:	4413      	add	r3, r2
 800b542:	b2c2      	uxtb	r2, r0
 800b544:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d304      	bcc.n	800b55a <CircularQueue_Add+0x1fe>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	e000      	b.n	800b55c <CircularQueue_Add+0x200>
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	1c9a      	adds	r2, r3, #2
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b568:	88fa      	ldrh	r2, [r7, #6]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6859      	ldr	r1, [r3, #4]
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	1acb      	subs	r3, r1, r3
 800b572:	4293      	cmp	r3, r2
 800b574:	bf28      	it	cs
 800b576:	4613      	movcs	r3, r2
 800b578:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b57e:	429a      	cmp	r2, r3
 800b580:	d007      	beq.n	800b592 <CircularQueue_Add+0x236>
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b586:	429a      	cmp	r2, r3
 800b588:	d225      	bcs.n	800b5d6 <CircularQueue_Add+0x27a>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	7f1b      	ldrb	r3, [r3, #28]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d121      	bne.n	800b5d6 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	18d0      	adds	r0, r2, r3
 800b59a:	88fb      	ldrh	r3, [r7, #6]
 800b59c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b59e:	fb02 f303 	mul.w	r3, r2, r3
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f002 f94d 	bl	800d848 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	695a      	ldr	r2, [r3, #20]
 800b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b4:	441a      	add	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c0:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b5c2:	88fa      	ldrh	r2, [r7, #6]
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b5ca:	7ffb      	ldrb	r3, [r7, #31]
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	88fb      	ldrh	r3, [r7, #6]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b5d4:	e0a4      	b.n	800b720 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 80a1 	beq.w	800b720 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	7f1b      	ldrb	r3, [r3, #28]
 800b5e2:	f003 0301 	and.w	r3, r3, #1
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d03a      	beq.n	800b660 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	891b      	ldrh	r3, [r3, #8]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10d      	bne.n	800b60e <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	3b02      	subs	r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	22ff      	movs	r2, #255	; 0xff
 800b5fe:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b606:	3b01      	subs	r3, #1
 800b608:	4413      	add	r3, r2
 800b60a:	22ff      	movs	r2, #255	; 0xff
 800b60c:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	695a      	ldr	r2, [r3, #20]
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	441a      	add	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b61e:	88fb      	ldrh	r3, [r7, #6]
 800b620:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b622:	2300      	movs	r3, #0
 800b624:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	891b      	ldrh	r3, [r3, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d16f      	bne.n	800b70e <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	1c59      	adds	r1, r3, #1
 800b636:	6339      	str	r1, [r7, #48]	; 0x30
 800b638:	4413      	add	r3, r2
 800b63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b63c:	b2d2      	uxtb	r2, r2
 800b63e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	0a18      	lsrs	r0, r3, #8
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64a:	1c59      	adds	r1, r3, #1
 800b64c:	6339      	str	r1, [r7, #48]	; 0x30
 800b64e:	4413      	add	r3, r2
 800b650:	b2c2      	uxtb	r2, r0
 800b652:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	1c9a      	adds	r2, r3, #2
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	615a      	str	r2, [r3, #20]
 800b65e:	e056      	b.n	800b70e <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	7f1b      	ldrb	r3, [r3, #28]
 800b664:	f003 0302 	and.w	r3, r3, #2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d050      	beq.n	800b70e <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	891b      	ldrh	r3, [r3, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d14a      	bne.n	800b70a <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	3b02      	subs	r3, #2
 800b67c:	4413      	add	r3, r2
 800b67e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b680:	b2d2      	uxtb	r2, r2
 800b682:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b686:	0a19      	lsrs	r1, r3, #8
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	3b01      	subs	r3, #1
 800b690:	4413      	add	r3, r2
 800b692:	b2ca      	uxtb	r2, r1
 800b694:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	18d0      	adds	r0, r2, r3
 800b69e:	88fb      	ldrh	r3, [r7, #6]
 800b6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f002 f8cb 	bl	800d848 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	695a      	ldr	r2, [r3, #20]
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	441a      	add	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b6c2:	88fa      	ldrh	r2, [r7, #6]
 800b6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6de:	1c59      	adds	r1, r3, #1
 800b6e0:	6339      	str	r1, [r7, #48]	; 0x30
 800b6e2:	4413      	add	r3, r2
 800b6e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e6:	b2d2      	uxtb	r2, r2
 800b6e8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ec:	0a18      	lsrs	r0, r3, #8
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	1c59      	adds	r1, r3, #1
 800b6f6:	6339      	str	r1, [r7, #48]	; 0x30
 800b6f8:	4413      	add	r3, r2
 800b6fa:	b2c2      	uxtb	r2, r0
 800b6fc:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	1c9a      	adds	r2, r3, #2
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	615a      	str	r2, [r3, #20]
 800b708:	e001      	b.n	800b70e <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	e049      	b.n	800b7a2 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b70e:	7ffb      	ldrb	r3, [r7, #31]
 800b710:	b29a      	uxth	r2, r3
 800b712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b714:	b29b      	uxth	r3, r3
 800b716:	4413      	add	r3, r2
 800b718:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800b720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b722:	2b00      	cmp	r3, #0
 800b724:	d015      	beq.n	800b752 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	18d0      	adds	r0, r2, r3
 800b72e:	88fb      	ldrh	r3, [r7, #6]
 800b730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b732:	fb03 f202 	mul.w	r2, r3, r2
 800b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b738:	4413      	add	r3, r2
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	4413      	add	r3, r2
 800b73e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b740:	4619      	mov	r1, r3
 800b742:	f002 f881 	bl	800d848 <memcpy>
        q->byteCount += NbBytesToCopy;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	695a      	ldr	r2, [r3, #20]
 800b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74c:	441a      	add	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	3301      	adds	r3, #1
 800b760:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	f4ff aeb0 	bcc.w	800b4cc <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6919      	ldr	r1, [r3, #16]
 800b774:	7ffb      	ldrb	r3, [r7, #31]
 800b776:	4419      	add	r1, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	4299      	cmp	r1, r3
 800b77e:	d307      	bcc.n	800b790 <CircularQueue_Add+0x434>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6919      	ldr	r1, [r3, #16]
 800b784:	7ffb      	ldrb	r3, [r7, #31]
 800b786:	4419      	add	r1, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	1acb      	subs	r3, r1, r3
 800b78e:	e003      	b.n	800b798 <CircularQueue_Add+0x43c>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6919      	ldr	r1, [r3, #16]
 800b794:	7ffb      	ldrb	r3, [r7, #31]
 800b796:	440b      	add	r3, r1
 800b798:	4413      	add	r3, r2
 800b79a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	e000      	b.n	800b7a2 <CircularQueue_Add+0x446>
    return NULL;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3738      	adds	r7, #56	; 0x38
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b085      	sub	sp, #20
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	891b      	ldrh	r3, [r3, #8]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <CircularQueue_Remove+0x1e>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e000      	b.n	800b7ca <CircularQueue_Remove+0x20>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 80cc 	beq.w	800b972 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	891b      	ldrh	r3, [r3, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d121      	bne.n	800b826 <CircularQueue_Remove+0x7c>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6819      	ldr	r1, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	1c58      	adds	r0, r3, #1
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	4298      	cmp	r0, r3
 800b800:	d306      	bcc.n	800b810 <CircularQueue_Remove+0x66>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68d8      	ldr	r0, [r3, #12]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	1ac3      	subs	r3, r0, r3
 800b80c:	3301      	adds	r3, #1
 800b80e:	e002      	b.n	800b816 <CircularQueue_Remove+0x6c>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	3301      	adds	r3, #1
 800b816:	440b      	add	r3, r1
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	021b      	lsls	r3, r3, #8
 800b81e:	b29b      	uxth	r3, r3
 800b820:	4413      	add	r3, r2
 800b822:	b29b      	uxth	r3, r3
 800b824:	e001      	b.n	800b82a <CircularQueue_Remove+0x80>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	891b      	ldrh	r3, [r3, #8]
 800b82a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	7f1b      	ldrb	r3, [r3, #28]
 800b830:	f003 0301 	and.w	r3, r3, #1
 800b834:	2b00      	cmp	r3, #0
 800b836:	d057      	beq.n	800b8e8 <CircularQueue_Remove+0x13e>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	7f1b      	ldrb	r3, [r3, #28]
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d151      	bne.n	800b8e8 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b844:	897b      	ldrh	r3, [r7, #10]
 800b846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d103      	bne.n	800b856 <CircularQueue_Remove+0xac>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	891b      	ldrh	r3, [r3, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d012      	beq.n	800b87c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68da      	ldr	r2, [r3, #12]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b85e:	429a      	cmp	r2, r3
 800b860:	d942      	bls.n	800b8e8 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	891b      	ldrh	r3, [r3, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d03e      	beq.n	800b8e8 <CircularQueue_Remove+0x13e>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	8912      	ldrh	r2, [r2, #8]
 800b878:	4293      	cmp	r3, r2
 800b87a:	d235      	bcs.n	800b8e8 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	695a      	ldr	r2, [r3, #20]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68d9      	ldr	r1, [r3, #12]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	1acb      	subs	r3, r1, r3
 800b88a:	441a      	add	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	891b      	ldrh	r3, [r3, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d121      	bne.n	800b8e2 <CircularQueue_Remove+0x138>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6819      	ldr	r1, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	1c58      	adds	r0, r3, #1
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	4298      	cmp	r0, r3
 800b8bc:	d306      	bcc.n	800b8cc <CircularQueue_Remove+0x122>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68d8      	ldr	r0, [r3, #12]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	1ac3      	subs	r3, r0, r3
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	e002      	b.n	800b8d2 <CircularQueue_Remove+0x128>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	440b      	add	r3, r1
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	021b      	lsls	r3, r3, #8
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	4413      	add	r3, r2
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	e001      	b.n	800b8e6 <CircularQueue_Remove+0x13c>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	891b      	ldrh	r3, [r3, #8]
 800b8e6:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68d9      	ldr	r1, [r3, #12]
 800b8f0:	7a7b      	ldrb	r3, [r7, #9]
 800b8f2:	4419      	add	r1, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4299      	cmp	r1, r3
 800b8fa:	d307      	bcc.n	800b90c <CircularQueue_Remove+0x162>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68d9      	ldr	r1, [r3, #12]
 800b900:	7a7b      	ldrb	r3, [r7, #9]
 800b902:	4419      	add	r1, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	1acb      	subs	r3, r1, r3
 800b90a:	e003      	b.n	800b914 <CircularQueue_Remove+0x16a>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	68d9      	ldr	r1, [r3, #12]
 800b910:	7a7b      	ldrb	r3, [r7, #9]
 800b912:	440b      	add	r3, r1
 800b914:	4413      	add	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	695b      	ldr	r3, [r3, #20]
 800b91c:	8979      	ldrh	r1, [r7, #10]
 800b91e:	7a7a      	ldrb	r2, [r7, #9]
 800b920:	440a      	add	r2, r1
 800b922:	1a9a      	subs	r2, r3, r2
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d01b      	beq.n	800b968 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	68da      	ldr	r2, [r3, #12]
 800b934:	897b      	ldrh	r3, [r7, #10]
 800b936:	441a      	add	r2, r3
 800b938:	7a7b      	ldrb	r3, [r7, #9]
 800b93a:	441a      	add	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d309      	bcc.n	800b958 <CircularQueue_Remove+0x1ae>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68da      	ldr	r2, [r3, #12]
 800b948:	897b      	ldrh	r3, [r7, #10]
 800b94a:	441a      	add	r2, r3
 800b94c:	7a7b      	ldrb	r3, [r7, #9]
 800b94e:	441a      	add	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	e005      	b.n	800b964 <CircularQueue_Remove+0x1ba>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	68da      	ldr	r2, [r3, #12]
 800b95c:	897b      	ldrh	r3, [r7, #10]
 800b95e:	441a      	add	r2, r3
 800b960:	7a7b      	ldrb	r3, [r7, #9]
 800b962:	4413      	add	r3, r2
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	1e5a      	subs	r2, r3, #1
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	897a      	ldrh	r2, [r7, #10]
 800b97c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b97e:	68fb      	ldr	r3, [r7, #12]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b087      	sub	sp, #28
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	891b      	ldrh	r3, [r3, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <CircularQueue_Sense+0x1e>
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	e000      	b.n	800b9ac <CircularQueue_Sense+0x20>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 8090 	beq.w	800bae0 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	891b      	ldrh	r3, [r3, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d121      	bne.n	800ba12 <CircularQueue_Sense+0x86>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6819      	ldr	r1, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	1c58      	adds	r0, r3, #1
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	4298      	cmp	r0, r3
 800b9ec:	d306      	bcc.n	800b9fc <CircularQueue_Sense+0x70>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68d8      	ldr	r0, [r3, #12]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	1ac3      	subs	r3, r0, r3
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	e002      	b.n	800ba02 <CircularQueue_Sense+0x76>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	3301      	adds	r3, #1
 800ba02:	440b      	add	r3, r1
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	021b      	lsls	r3, r3, #8
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	4413      	add	r3, r2
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	e001      	b.n	800ba16 <CircularQueue_Sense+0x8a>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	891b      	ldrh	r3, [r3, #8]
 800ba16:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	7f1b      	ldrb	r3, [r3, #28]
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d048      	beq.n	800bab6 <CircularQueue_Sense+0x12a>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	7f1b      	ldrb	r3, [r3, #28]
 800ba28:	f003 0302 	and.w	r3, r3, #2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d142      	bne.n	800bab6 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ba30:	8a7b      	ldrh	r3, [r7, #18]
 800ba32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d103      	bne.n	800ba42 <CircularQueue_Sense+0xb6>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	891b      	ldrh	r3, [r3, #8]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d012      	beq.n	800ba68 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68da      	ldr	r2, [r3, #12]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d933      	bls.n	800bab6 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	891b      	ldrh	r3, [r3, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d02f      	beq.n	800bab6 <CircularQueue_Sense+0x12a>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	8912      	ldrh	r2, [r2, #8]
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d226      	bcs.n	800bab6 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800ba68:	2300      	movs	r3, #0
 800ba6a:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	891b      	ldrh	r3, [r3, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d11d      	bne.n	800bab0 <CircularQueue_Sense+0x124>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6819      	ldr	r1, [r3, #0]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	1c58      	adds	r0, r3, #1
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	4298      	cmp	r0, r3
 800ba8e:	d305      	bcc.n	800ba9c <CircularQueue_Sense+0x110>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	1ac3      	subs	r3, r0, r3
 800ba98:	3301      	adds	r3, #1
 800ba9a:	e001      	b.n	800baa0 <CircularQueue_Sense+0x114>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	440b      	add	r3, r1
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	021b      	lsls	r3, r3, #8
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	4413      	add	r3, r2
 800baac:	b29b      	uxth	r3, r3
 800baae:	e001      	b.n	800bab4 <CircularQueue_Sense+0x128>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	891b      	ldrh	r3, [r3, #8]
 800bab4:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	7af9      	ldrb	r1, [r7, #11]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	4419      	add	r1, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	4299      	cmp	r1, r3
 800bac6:	d306      	bcc.n	800bad6 <CircularQueue_Sense+0x14a>
 800bac8:	7af9      	ldrb	r1, [r7, #11]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	4419      	add	r1, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	1acb      	subs	r3, r1, r3
 800bad4:	e002      	b.n	800badc <CircularQueue_Sense+0x150>
 800bad6:	7af9      	ldrb	r1, [r7, #11]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	440b      	add	r3, r1
 800badc:	4413      	add	r3, r2
 800bade:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	8a7a      	ldrh	r2, [r7, #18]
 800baea:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800baec:	697b      	ldr	r3, [r7, #20]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	371c      	adds	r7, #28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
	...

0800bafc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800bafc:	b480      	push	{r7}
 800bafe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800bb00:	4b03      	ldr	r3, [pc, #12]	; (800bb10 <LL_FLASH_GetUDN+0x14>)
 800bb02:	681b      	ldr	r3, [r3, #0]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	1fff7580 	.word	0x1fff7580

0800bb14 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800bb14:	b480      	push	{r7}
 800bb16:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800bb18:	4b03      	ldr	r3, [pc, #12]	; (800bb28 <LL_FLASH_GetDeviceID+0x14>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	b2db      	uxtb	r3, r3
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	1fff7584 	.word	0x1fff7584

0800bb2c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800bb30:	4b03      	ldr	r3, [pc, #12]	; (800bb40 <LL_FLASH_GetSTCompanyID+0x14>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	0a1b      	lsrs	r3, r3, #8
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	1fff7584 	.word	0x1fff7584

0800bb44 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800bb44:	b5b0      	push	{r4, r5, r7, lr}
 800bb46:	b090      	sub	sp, #64	; 0x40
 800bb48:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bb4a:	2392      	movs	r3, #146	; 0x92
 800bb4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  // Yang Junyoung
  // Register the task.
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 800bb50:	4a35      	ldr	r2, [pc, #212]	; (800bc28 <APP_BLE_Init+0xe4>)
 800bb52:	2100      	movs	r1, #0
 800bb54:	2004      	movs	r0, #4
 800bb56:	f001 fabd 	bl	800d0d4 <UTIL_SEQ_RegTask>
  // Scheduler will run it exactly once.
  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	2004      	movs	r0, #4
 800bb5e:	f001 fadb 	bl	800d118 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800bb62:	4b32      	ldr	r3, [pc, #200]	; (800bc2c <APP_BLE_Init+0xe8>)
 800bb64:	1d3c      	adds	r4, r7, #4
 800bb66:	461d      	mov	r5, r3
 800bb68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bb78:	c403      	stmia	r4!, {r0, r1}
 800bb7a:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800bb7c:	f000 fa2a 	bl	800bfd4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800bb80:	2101      	movs	r1, #1
 800bb82:	2002      	movs	r0, #2
 800bb84:	f001 f97a 	bl	800ce7c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800bb88:	4a29      	ldr	r2, [pc, #164]	; (800bc30 <APP_BLE_Init+0xec>)
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	2002      	movs	r0, #2
 800bb8e:	f001 faa1 	bl	800d0d4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800bb92:	1d3b      	adds	r3, r7, #4
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe fc0f 	bl	800a3b8 <SHCI_C2_BLE_Init>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800bba0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d008      	beq.n	800bbba <APP_BLE_Init+0x76>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800bba8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bbac:	4619      	mov	r1, r3
 800bbae:	4821      	ldr	r0, [pc, #132]	; (800bc34 <APP_BLE_Init+0xf0>)
 800bbb0:	f001 fc82 	bl	800d4b8 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800bbb4:	f7f6 feb6 	bl	8002924 <Error_Handler>
 800bbb8:	e002      	b.n	800bbc0 <APP_BLE_Init+0x7c>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800bbba:	481f      	ldr	r0, [pc, #124]	; (800bc38 <APP_BLE_Init+0xf4>)
 800bbbc:	f001 fc7c 	bl	800d4b8 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800bbc0:	f000 fa1e 	bl	800c000 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800bbc4:	f7fe fb52 	bl	800a26c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bbc8:	4b1c      	ldr	r3, [pc, #112]	; (800bc3c <APP_BLE_Init+0xf8>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800bbd0:	4b1a      	ldr	r3, [pc, #104]	; (800bc3c <APP_BLE_Init+0xf8>)
 800bbd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbd6:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800bbd8:	4a19      	ldr	r2, [pc, #100]	; (800bc40 <APP_BLE_Init+0xfc>)
 800bbda:	2100      	movs	r1, #0
 800bbdc:	2001      	movs	r0, #1
 800bbde:	f001 fa79 	bl	800d0d4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800bbe2:	2006      	movs	r0, #6
 800bbe4:	f7fe f9b5 	bl	8009f52 <aci_hal_set_radio_activity_mask>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800bbee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d006      	beq.n	800bc04 <APP_BLE_Init+0xc0>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800bbf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4811      	ldr	r0, [pc, #68]	; (800bc44 <APP_BLE_Init+0x100>)
 800bbfe:	f001 fc5b 	bl	800d4b8 <iprintf>
 800bc02:	e002      	b.n	800bc0a <APP_BLE_Init+0xc6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800bc04:	4810      	ldr	r0, [pc, #64]	; (800bc48 <APP_BLE_Init+0x104>)
 800bc06:	f001 fc57 	bl	800d4b8 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800bc0a:	f000 fce9 	bl	800c5e0 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800bc0e:	4b0b      	ldr	r3, [pc, #44]	; (800bc3c <APP_BLE_Init+0xf8>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800bc14:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <APP_BLE_Init+0xf8>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800bc1a:	2001      	movs	r0, #1
 800bc1c:	f000 fb7e 	bl	800c31c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800bc20:	bf00      	nop
}
 800bc22:	3740      	adds	r7, #64	; 0x40
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bdb0      	pop	{r4, r5, r7, pc}
 800bc28:	0800c551 	.word	0x0800c551
 800bc2c:	0800e764 	.word	0x0800e764
 800bc30:	0800a5d5 	.word	0x0800a5d5
 800bc34:	0800e688 	.word	0x0800e688
 800bc38:	0800e6c0 	.word	0x0800e6c0
 800bc3c:	20001ae4 	.word	0x20001ae4
 800bc40:	0800c445 	.word	0x0800c445
 800bc44:	0800e6e8 	.word	0x0800e6e8
 800bc48:	0800e72c 	.word	0x0800e72c

0800bc4c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800bc4c:	b5b0      	push	{r4, r5, r7, lr}
 800bc4e:	b08e      	sub	sp, #56	; 0x38
 800bc50:	af04      	add	r7, sp, #16
 800bc52:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800bc54:	2392      	movs	r3, #146	; 0x92
 800bc56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	2bff      	cmp	r3, #255	; 0xff
 800bc66:	f000 80d7 	beq.w	800be18 <SVCCTL_App_Notification+0x1cc>
 800bc6a:	2bff      	cmp	r3, #255	; 0xff
 800bc6c:	f300 81aa 	bgt.w	800bfc4 <SVCCTL_App_Notification+0x378>
 800bc70:	2b05      	cmp	r3, #5
 800bc72:	d002      	beq.n	800bc7a <SVCCTL_App_Notification+0x2e>
 800bc74:	2b3e      	cmp	r3, #62	; 0x3e
 800bc76:	d02e      	beq.n	800bcd6 <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800bc78:	e1a4      	b.n	800bfc4 <SVCCTL_App_Notification+0x378>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	3302      	adds	r3, #2
 800bc7e:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	4bb5      	ldr	r3, [pc, #724]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800bc8a:	8adb      	ldrh	r3, [r3, #22]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d114      	bne.n	800bcba <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800bc90:	4bb3      	ldr	r3, [pc, #716]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bc96:	4bb2      	ldr	r3, [pc, #712]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800bc9e:	48b1      	ldr	r0, [pc, #708]	; (800bf64 <SVCCTL_App_Notification+0x318>)
 800bca0:	f001 fc78 	bl	800d594 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bcaa:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800bcac:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	48ac      	ldr	r0, [pc, #688]	; (800bf68 <SVCCTL_App_Notification+0x31c>)
 800bcb6:	f001 fbff 	bl	800d4b8 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800bcba:	2001      	movs	r0, #1
 800bcbc:	f000 fb2e 	bl	800c31c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800bcc0:	4baa      	ldr	r3, [pc, #680]	; (800bf6c <SVCCTL_App_Notification+0x320>)
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bcc6:	4ba6      	ldr	r3, [pc, #664]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800bcc8:	8ada      	ldrh	r2, [r3, #22]
 800bcca:	4ba8      	ldr	r3, [pc, #672]	; (800bf6c <SVCCTL_App_Notification+0x320>)
 800bccc:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800bcce:	48a7      	ldr	r0, [pc, #668]	; (800bf6c <SVCCTL_App_Notification+0x320>)
 800bcd0:	f000 fc72 	bl	800c5b8 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800bcd4:	e179      	b.n	800bfca <SVCCTL_App_Notification+0x37e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	3302      	adds	r3, #2
 800bcda:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d02e      	beq.n	800bd42 <SVCCTL_App_Notification+0xf6>
 800bce4:	2b03      	cmp	r3, #3
 800bce6:	f040 8095 	bne.w	800be14 <SVCCTL_App_Notification+0x1c8>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	3301      	adds	r3, #1
 800bcee:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800bcf0:	489f      	ldr	r0, [pc, #636]	; (800bf70 <SVCCTL_App_Notification+0x324>)
 800bcf2:	f001 fc4f 	bl	800d594 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800bcfc:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7f4 fd12 	bl	8000728 <__aeabi_i2d>
 800bd04:	f04f 0200 	mov.w	r2, #0
 800bd08:	4b9a      	ldr	r3, [pc, #616]	; (800bf74 <SVCCTL_App_Notification+0x328>)
 800bd0a:	f7f4 fa91 	bl	8000230 <__aeabi_dmul>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4610      	mov	r0, r2
 800bd14:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800bd1c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bd1e:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	005b      	lsls	r3, r3, #1
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	9400      	str	r4, [sp, #0]
 800bd36:	4602      	mov	r2, r0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	488f      	ldr	r0, [pc, #572]	; (800bf78 <SVCCTL_App_Notification+0x32c>)
 800bd3c:	f001 fbbc 	bl	800d4b8 <iprintf>
          break;
 800bd40:	e069      	b.n	800be16 <SVCCTL_App_Notification+0x1ca>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	3301      	adds	r3, #1
 800bd46:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	4619      	mov	r1, r3
 800bd52:	488a      	ldr	r0, [pc, #552]	; (800bf7c <SVCCTL_App_Notification+0x330>)
 800bd54:	f001 fbb0 	bl	800d4b8 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800bd5c:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800bd62:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800bd68:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800bd6e:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800bd74:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800bd7a:	9302      	str	r3, [sp, #8]
 800bd7c:	9101      	str	r1, [sp, #4]
 800bd7e:	9200      	str	r2, [sp, #0]
 800bd80:	462b      	mov	r3, r5
 800bd82:	4622      	mov	r2, r4
 800bd84:	4601      	mov	r1, r0
 800bd86:	487e      	ldr	r0, [pc, #504]	; (800bf80 <SVCCTL_App_Notification+0x334>)
 800bd88:	f001 fb96 	bl	800d4b8 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800bd92:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7f4 fcc7 	bl	8000728 <__aeabi_i2d>
 800bd9a:	f04f 0200 	mov.w	r2, #0
 800bd9e:	4b75      	ldr	r3, [pc, #468]	; (800bf74 <SVCCTL_App_Notification+0x328>)
 800bda0:	f7f4 fa46 	bl	8000230 <__aeabi_dmul>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	4610      	mov	r0, r2
 800bdaa:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800bdb2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bdb4:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	9400      	str	r4, [sp, #0]
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4869      	ldr	r0, [pc, #420]	; (800bf78 <SVCCTL_App_Notification+0x32c>)
 800bdd2:	f001 fb71 	bl	800d4b8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800bdd6:	4b62      	ldr	r3, [pc, #392]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800bdd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bddc:	2b04      	cmp	r3, #4
 800bdde:	d104      	bne.n	800bdea <SVCCTL_App_Notification+0x19e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800bde0:	4b5f      	ldr	r3, [pc, #380]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800bde2:	2206      	movs	r2, #6
 800bde4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800bde8:	e003      	b.n	800bdf2 <SVCCTL_App_Notification+0x1a6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800bdea:	4b5d      	ldr	r3, [pc, #372]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800bdec:	2205      	movs	r2, #5
 800bdee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	4b59      	ldr	r3, [pc, #356]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800bdfc:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800bdfe:	4b5b      	ldr	r3, [pc, #364]	; (800bf6c <SVCCTL_App_Notification+0x320>)
 800be00:	2200      	movs	r2, #0
 800be02:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800be04:	4b56      	ldr	r3, [pc, #344]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800be06:	8ada      	ldrh	r2, [r3, #22]
 800be08:	4b58      	ldr	r3, [pc, #352]	; (800bf6c <SVCCTL_App_Notification+0x320>)
 800be0a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800be0c:	4857      	ldr	r0, [pc, #348]	; (800bf6c <SVCCTL_App_Notification+0x320>)
 800be0e:	f000 fbd3 	bl	800c5b8 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800be12:	e000      	b.n	800be16 <SVCCTL_App_Notification+0x1ca>
          break;
 800be14:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800be16:	e0d8      	b.n	800bfca <SVCCTL_App_Notification+0x37e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800be18:	6a3b      	ldr	r3, [r7, #32]
 800be1a:	3302      	adds	r3, #2
 800be1c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	b29b      	uxth	r3, r3
 800be24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be28:	f000 80c8 	beq.w	800bfbc <SVCCTL_App_Notification+0x370>
 800be2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be30:	f300 80ca 	bgt.w	800bfc8 <SVCCTL_App_Notification+0x37c>
 800be34:	2b04      	cmp	r3, #4
 800be36:	f000 80c3 	beq.w	800bfc0 <SVCCTL_App_Notification+0x374>
 800be3a:	2b04      	cmp	r3, #4
 800be3c:	f2c0 80c4 	blt.w	800bfc8 <SVCCTL_App_Notification+0x37c>
 800be40:	f240 420a 	movw	r2, #1034	; 0x40a
 800be44:	4293      	cmp	r3, r2
 800be46:	f300 80bf 	bgt.w	800bfc8 <SVCCTL_App_Notification+0x37c>
 800be4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be4e:	f340 80bb 	ble.w	800bfc8 <SVCCTL_App_Notification+0x37c>
 800be52:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800be56:	2b09      	cmp	r3, #9
 800be58:	f200 80b6 	bhi.w	800bfc8 <SVCCTL_App_Notification+0x37c>
 800be5c:	a201      	add	r2, pc, #4	; (adr r2, 800be64 <SVCCTL_App_Notification+0x218>)
 800be5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be62:	bf00      	nop
 800be64:	0800bf29 	.word	0x0800bf29
 800be68:	0800be9d 	.word	0x0800be9d
 800be6c:	0800bfc9 	.word	0x0800bfc9
 800be70:	0800bfc9 	.word	0x0800bfc9
 800be74:	0800bfc9 	.word	0x0800bfc9
 800be78:	0800bfc9 	.word	0x0800bfc9
 800be7c:	0800be8d 	.word	0x0800be8d
 800be80:	0800bfc9 	.word	0x0800bfc9
 800be84:	0800bed3 	.word	0x0800bed3
 800be88:	0800be95 	.word	0x0800be95
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800be8c:	483d      	ldr	r0, [pc, #244]	; (800bf84 <SVCCTL_App_Notification+0x338>)
 800be8e:	f001 fb13 	bl	800d4b8 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800be92:	e096      	b.n	800bfc2 <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800be94:	483c      	ldr	r0, [pc, #240]	; (800bf88 <SVCCTL_App_Notification+0x33c>)
 800be96:	f001 fb7d 	bl	800d594 <puts>
          break;
 800be9a:	e092      	b.n	800bfc2 <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800be9c:	483b      	ldr	r0, [pc, #236]	; (800bf8c <SVCCTL_App_Notification+0x340>)
 800be9e:	f001 fb79 	bl	800d594 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800bea2:	4b2f      	ldr	r3, [pc, #188]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800bea4:	8adb      	ldrh	r3, [r3, #22]
 800bea6:	493a      	ldr	r1, [pc, #232]	; (800bf90 <SVCCTL_App_Notification+0x344>)
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fd faa9 	bl	8009400 <aci_gap_pass_key_resp>
 800beae:	4603      	mov	r3, r0
 800beb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800beb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d006      	beq.n	800beca <SVCCTL_App_Notification+0x27e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800bebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bec0:	4619      	mov	r1, r3
 800bec2:	4834      	ldr	r0, [pc, #208]	; (800bf94 <SVCCTL_App_Notification+0x348>)
 800bec4:	f001 faf8 	bl	800d4b8 <iprintf>
          break;
 800bec8:	e07b      	b.n	800bfc2 <SVCCTL_App_Notification+0x376>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800beca:	4833      	ldr	r0, [pc, #204]	; (800bf98 <SVCCTL_App_Notification+0x34c>)
 800becc:	f001 fb62 	bl	800d594 <puts>
          break;
 800bed0:	e077      	b.n	800bfc2 <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800bed2:	4832      	ldr	r0, [pc, #200]	; (800bf9c <SVCCTL_App_Notification+0x350>)
 800bed4:	f001 fb5e 	bl	800d594 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %d\n",
 800bedc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bee0:	4619      	mov	r1, r3
 800bee2:	482f      	ldr	r0, [pc, #188]	; (800bfa0 <SVCCTL_App_Notification+0x354>)
 800bee4:	f001 fae8 	bl	800d4b8 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800beec:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bef0:	4619      	mov	r1, r3
 800bef2:	482c      	ldr	r0, [pc, #176]	; (800bfa4 <SVCCTL_App_Notification+0x358>)
 800bef4:	f001 fae0 	bl	800d4b8 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800bef8:	4b19      	ldr	r3, [pc, #100]	; (800bf60 <SVCCTL_App_Notification+0x314>)
 800befa:	8adb      	ldrh	r3, [r3, #22]
 800befc:	2101      	movs	r1, #1
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fd fc28 	bl	8009754 <aci_gap_numeric_comparison_value_confirm_yesno>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800bf0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d006      	beq.n	800bf20 <SVCCTL_App_Notification+0x2d4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800bf12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf16:	4619      	mov	r1, r3
 800bf18:	4823      	ldr	r0, [pc, #140]	; (800bfa8 <SVCCTL_App_Notification+0x35c>)
 800bf1a:	f001 facd 	bl	800d4b8 <iprintf>
          break;
 800bf1e:	e050      	b.n	800bfc2 <SVCCTL_App_Notification+0x376>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800bf20:	4822      	ldr	r0, [pc, #136]	; (800bfac <SVCCTL_App_Notification+0x360>)
 800bf22:	f001 fb37 	bl	800d594 <puts>
          break;
 800bf26:	e04c      	b.n	800bfc2 <SVCCTL_App_Notification+0x376>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	3302      	adds	r3, #2
 800bf2c:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800bf2e:	4820      	ldr	r0, [pc, #128]	; (800bfb0 <SVCCTL_App_Notification+0x364>)
 800bf30:	f001 fb30 	bl	800d594 <puts>
          if (p_pairing_complete->Status != 0)
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	789b      	ldrb	r3, [r3, #2]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d009      	beq.n	800bf50 <SVCCTL_App_Notification+0x304>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	789b      	ldrb	r3, [r3, #2]
 800bf40:	4619      	mov	r1, r3
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	78db      	ldrb	r3, [r3, #3]
 800bf46:	461a      	mov	r2, r3
 800bf48:	481a      	ldr	r0, [pc, #104]	; (800bfb4 <SVCCTL_App_Notification+0x368>)
 800bf4a:	f001 fab5 	bl	800d4b8 <iprintf>
 800bf4e:	e002      	b.n	800bf56 <SVCCTL_App_Notification+0x30a>
            APP_DBG_MSG("     - Pairing Success\n");
 800bf50:	4819      	ldr	r0, [pc, #100]	; (800bfb8 <SVCCTL_App_Notification+0x36c>)
 800bf52:	f001 fb1f 	bl	800d594 <puts>
          APP_DBG_MSG("\n");
 800bf56:	200a      	movs	r0, #10
 800bf58:	f001 fac0 	bl	800d4dc <putchar>
          break;
 800bf5c:	e031      	b.n	800bfc2 <SVCCTL_App_Notification+0x376>
 800bf5e:	bf00      	nop
 800bf60:	20001ae4 	.word	0x20001ae4
 800bf64:	0800e7a0 	.word	0x0800e7a0
 800bf68:	0800e7cc 	.word	0x0800e7cc
 800bf6c:	20002154 	.word	0x20002154
 800bf70:	0800e808 	.word	0x0800e808
 800bf74:	3ff40000 	.word	0x3ff40000
 800bf78:	0800e83c 	.word	0x0800e83c
 800bf7c:	0800e8a8 	.word	0x0800e8a8
 800bf80:	0800e8f0 	.word	0x0800e8f0
 800bf84:	0800e940 	.word	0x0800e940
 800bf88:	0800e968 	.word	0x0800e968
 800bf8c:	0800e998 	.word	0x0800e998
 800bf90:	0001b207 	.word	0x0001b207
 800bf94:	0800e9c0 	.word	0x0800e9c0
 800bf98:	0800e9f4 	.word	0x0800e9f4
 800bf9c:	0800ea1c 	.word	0x0800ea1c
 800bfa0:	0800ea50 	.word	0x0800ea50
 800bfa4:	0800ea6c 	.word	0x0800ea6c
 800bfa8:	0800ea84 	.word	0x0800ea84
 800bfac:	0800ead4 	.word	0x0800ead4
 800bfb0:	0800eb1c 	.word	0x0800eb1c
 800bfb4:	0800eb48 	.word	0x0800eb48
 800bfb8:	0800eb84 	.word	0x0800eb84
          break;
 800bfbc:	bf00      	nop
 800bfbe:	e003      	b.n	800bfc8 <SVCCTL_App_Notification+0x37c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800bfc0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bfc2:	e001      	b.n	800bfc8 <SVCCTL_App_Notification+0x37c>
      break;
 800bfc4:	bf00      	nop
 800bfc6:	e000      	b.n	800bfca <SVCCTL_App_Notification+0x37e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bfc8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800bfca:	2301      	movs	r3, #1
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3728      	adds	r7, #40	; 0x28
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bdb0      	pop	{r4, r5, r7, pc}

0800bfd4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800bfda:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <Ble_Tl_Init+0x20>)
 800bfdc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800bfde:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <Ble_Tl_Init+0x24>)
 800bfe0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800bfe2:	463b      	mov	r3, r7
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4805      	ldr	r0, [pc, #20]	; (800bffc <Ble_Tl_Init+0x28>)
 800bfe8:	f7fe fad8 	bl	800a59c <hci_init>

  return;
 800bfec:	bf00      	nop
}
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	200300d8 	.word	0x200300d8
 800bff8:	0800c519 	.word	0x0800c519
 800bffc:	0800c4e1 	.word	0x0800c4e1

0800c000 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800c000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c002:	b08d      	sub	sp, #52	; 0x34
 800c004:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800c006:	2300      	movs	r3, #0
 800c008:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c00a:	2392      	movs	r3, #146	; 0x92
 800c00c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800c00e:	48a5      	ldr	r0, [pc, #660]	; (800c2a4 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c010:	f001 fac0 	bl	800d594 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800c014:	f7fd fff1 	bl	8009ffa <hci_reset>
 800c018:	4603      	mov	r3, r0
 800c01a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c01c:	7dfb      	ldrb	r3, [r7, #23]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d005      	beq.n	800c02e <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	4619      	mov	r1, r3
 800c026:	48a0      	ldr	r0, [pc, #640]	; (800c2a8 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800c028:	f001 fa46 	bl	800d4b8 <iprintf>
 800c02c:	e002      	b.n	800c034 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800c02e:	489f      	ldr	r0, [pc, #636]	; (800c2ac <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800c030:	f001 fab0 	bl	800d594 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800c034:	f000 f9c2 	bl	800c3bc <BleGetBdAddress>
 800c038:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800c03a:	693a      	ldr	r2, [r7, #16]
 800c03c:	2106      	movs	r1, #6
 800c03e:	2000      	movs	r0, #0
 800c040:	f7fd fe9b 	bl	8009d7a <aci_hal_write_config_data>
 800c044:	4603      	mov	r3, r0
 800c046:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c048:	7dfb      	ldrb	r3, [r7, #23]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d005      	beq.n	800c05a <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800c04e:	7dfb      	ldrb	r3, [r7, #23]
 800c050:	4619      	mov	r1, r3
 800c052:	4897      	ldr	r0, [pc, #604]	; (800c2b0 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800c054:	f001 fa30 	bl	800d4b8 <iprintf>
 800c058:	e021      	b.n	800c09e <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800c05a:	4896      	ldr	r0, [pc, #600]	; (800c2b4 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800c05c:	f001 fa9a 	bl	800d594 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	3305      	adds	r3, #5
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	4618      	mov	r0, r3
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	3304      	adds	r3, #4
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	461c      	mov	r4, r3
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	3303      	adds	r3, #3
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	461d      	mov	r5, r3
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	3302      	adds	r3, #2
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	461a      	mov	r2, r3
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	3301      	adds	r3, #1
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	4619      	mov	r1, r3
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	9302      	str	r3, [sp, #8]
 800c08e:	9101      	str	r1, [sp, #4]
 800c090:	9200      	str	r2, [sp, #0]
 800c092:	462b      	mov	r3, r5
 800c094:	4622      	mov	r2, r4
 800c096:	4601      	mov	r1, r0
 800c098:	4887      	ldr	r0, [pc, #540]	; (800c2b8 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800c09a:	f001 fa0d 	bl	800d4b8 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800c09e:	4a87      	ldr	r2, [pc, #540]	; (800c2bc <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800c0a0:	2110      	movs	r1, #16
 800c0a2:	2018      	movs	r0, #24
 800c0a4:	f7fd fe69 	bl	8009d7a <aci_hal_write_config_data>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c0ac:	7dfb      	ldrb	r3, [r7, #23]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d005      	beq.n	800c0be <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4882      	ldr	r0, [pc, #520]	; (800c2c0 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800c0b8:	f001 f9fe 	bl	800d4b8 <iprintf>
 800c0bc:	e002      	b.n	800c0c4 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800c0be:	4881      	ldr	r0, [pc, #516]	; (800c2c4 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800c0c0:	f001 fa68 	bl	800d594 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800c0c4:	4a80      	ldr	r2, [pc, #512]	; (800c2c8 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800c0c6:	2110      	movs	r1, #16
 800c0c8:	2008      	movs	r0, #8
 800c0ca:	f7fd fe56 	bl	8009d7a <aci_hal_write_config_data>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d005      	beq.n	800c0e4 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800c0d8:	7dfb      	ldrb	r3, [r7, #23]
 800c0da:	4619      	mov	r1, r3
 800c0dc:	487b      	ldr	r0, [pc, #492]	; (800c2cc <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800c0de:	f001 f9eb 	bl	800d4b8 <iprintf>
 800c0e2:	e002      	b.n	800c0ea <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800c0e4:	487a      	ldr	r0, [pc, #488]	; (800c2d0 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800c0e6:	f001 fa55 	bl	800d594 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c0ea:	2118      	movs	r1, #24
 800c0ec:	2001      	movs	r0, #1
 800c0ee:	f7fd fec9 	bl	8009e84 <aci_hal_set_tx_power_level>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d005      	beq.n	800c108 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800c0fc:	7dfb      	ldrb	r3, [r7, #23]
 800c0fe:	4619      	mov	r1, r3
 800c100:	4874      	ldr	r0, [pc, #464]	; (800c2d4 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800c102:	f001 f9d9 	bl	800d4b8 <iprintf>
 800c106:	e002      	b.n	800c10e <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800c108:	4873      	ldr	r0, [pc, #460]	; (800c2d8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800c10a:	f001 fa43 	bl	800d594 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800c10e:	f7fd fb88 	bl	8009822 <aci_gatt_init>
 800c112:	4603      	mov	r3, r0
 800c114:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c116:	7dfb      	ldrb	r3, [r7, #23]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d005      	beq.n	800c128 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800c11c:	7dfb      	ldrb	r3, [r7, #23]
 800c11e:	4619      	mov	r1, r3
 800c120:	486e      	ldr	r0, [pc, #440]	; (800c2dc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800c122:	f001 f9c9 	bl	800d4b8 <iprintf>
 800c126:	e002      	b.n	800c12e <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800c128:	486d      	ldr	r0, [pc, #436]	; (800c2e0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800c12a:	f001 fa33 	bl	800d594 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c12e:	2300      	movs	r3, #0
 800c130:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800c132:	7bfb      	ldrb	r3, [r7, #15]
 800c134:	f043 0301 	orr.w	r3, r3, #1
 800c138:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d02b      	beq.n	800c198 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800c140:	4b68      	ldr	r3, [pc, #416]	; (800c2e4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800c142:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800c144:	1dba      	adds	r2, r7, #6
 800c146:	7bf8      	ldrb	r0, [r7, #15]
 800c148:	1cbb      	adds	r3, r7, #2
 800c14a:	9301      	str	r3, [sp, #4]
 800c14c:	1d3b      	adds	r3, r7, #4
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	4613      	mov	r3, r2
 800c152:	2208      	movs	r2, #8
 800c154:	2100      	movs	r1, #0
 800c156:	f7fd f9ba 	bl	80094ce <aci_gap_init>
 800c15a:	4603      	mov	r3, r0
 800c15c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800c15e:	7dfb      	ldrb	r3, [r7, #23]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d005      	beq.n	800c170 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800c164:	7dfb      	ldrb	r3, [r7, #23]
 800c166:	4619      	mov	r1, r3
 800c168:	485f      	ldr	r0, [pc, #380]	; (800c2e8 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c16a:	f001 f9a5 	bl	800d4b8 <iprintf>
 800c16e:	e002      	b.n	800c176 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800c170:	485e      	ldr	r0, [pc, #376]	; (800c2ec <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c172:	f001 fa0f 	bl	800d594 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800c176:	88fc      	ldrh	r4, [r7, #6]
 800c178:	88bd      	ldrh	r5, [r7, #4]
 800c17a:	68b8      	ldr	r0, [r7, #8]
 800c17c:	f7f4 f800 	bl	8000180 <strlen>
 800c180:	4603      	mov	r3, r0
 800c182:	b2da      	uxtb	r2, r3
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	4613      	mov	r3, r2
 800c18a:	2200      	movs	r2, #0
 800c18c:	4629      	mov	r1, r5
 800c18e:	4620      	mov	r0, r4
 800c190:	f7fd fd4a 	bl	8009c28 <aci_gatt_update_char_value>
 800c194:	4603      	mov	r3, r0
 800c196:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800c198:	88f8      	ldrh	r0, [r7, #6]
 800c19a:	8879      	ldrh	r1, [r7, #2]
 800c19c:	463b      	mov	r3, r7
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f7fd fd40 	bl	8009c28 <aci_gatt_update_char_value>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	2102      	movs	r1, #2
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	f7fd ff46 	bl	800a042 <hci_le_set_default_phy>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c1ba:	7dfb      	ldrb	r3, [r7, #23]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d005      	beq.n	800c1cc <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	484a      	ldr	r0, [pc, #296]	; (800c2f0 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c1c6:	f001 f977 	bl	800d4b8 <iprintf>
 800c1ca:	e002      	b.n	800c1d2 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800c1cc:	4849      	ldr	r0, [pc, #292]	; (800c2f4 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800c1ce:	f001 f9e1 	bl	800d594 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c1d2:	4b49      	ldr	r3, [pc, #292]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c1d8:	4b47      	ldr	r3, [pc, #284]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fc fff7 	bl	80091d0 <aci_gap_set_io_capability>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c1e6:	7dfb      	ldrb	r3, [r7, #23]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d005      	beq.n	800c1f8 <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800c1ec:	7dfb      	ldrb	r3, [r7, #23]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4842      	ldr	r0, [pc, #264]	; (800c2fc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800c1f2:	f001 f961 	bl	800d4b8 <iprintf>
 800c1f6:	e002      	b.n	800c1fe <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800c1f8:	4841      	ldr	r0, [pc, #260]	; (800c300 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800c1fa:	f001 f9cb 	bl	800d594 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c1fe:	4b3e      	ldr	r3, [pc, #248]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c200:	2201      	movs	r2, #1
 800c202:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c204:	4b3c      	ldr	r3, [pc, #240]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c206:	2208      	movs	r2, #8
 800c208:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c20a:	4b3b      	ldr	r3, [pc, #236]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c20c:	2210      	movs	r2, #16
 800c20e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c210:	4b39      	ldr	r3, [pc, #228]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c212:	2201      	movs	r2, #1
 800c214:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c216:	4b38      	ldr	r3, [pc, #224]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c218:	4a3a      	ldr	r2, [pc, #232]	; (800c304 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800c21a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c21c:	4b36      	ldr	r3, [pc, #216]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c21e:	2200      	movs	r2, #0
 800c220:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c222:	4b35      	ldr	r3, [pc, #212]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c224:	789c      	ldrb	r4, [r3, #2]
 800c226:	4b34      	ldr	r3, [pc, #208]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c228:	785d      	ldrb	r5, [r3, #1]
 800c22a:	4b33      	ldr	r3, [pc, #204]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c22c:	791b      	ldrb	r3, [r3, #4]
 800c22e:	4a32      	ldr	r2, [pc, #200]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c230:	7952      	ldrb	r2, [r2, #5]
 800c232:	4931      	ldr	r1, [pc, #196]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c234:	78c9      	ldrb	r1, [r1, #3]
 800c236:	4830      	ldr	r0, [pc, #192]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c238:	6880      	ldr	r0, [r0, #8]
 800c23a:	2600      	movs	r6, #0
 800c23c:	9604      	str	r6, [sp, #16]
 800c23e:	9003      	str	r0, [sp, #12]
 800c240:	9102      	str	r1, [sp, #8]
 800c242:	9201      	str	r2, [sp, #4]
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	2300      	movs	r3, #0
 800c248:	2201      	movs	r2, #1
 800c24a:	4629      	mov	r1, r5
 800c24c:	4620      	mov	r0, r4
 800c24e:	f7fd f813 	bl	8009278 <aci_gap_set_authentication_requirement>
 800c252:	4603      	mov	r3, r0
 800c254:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800c256:	7dfb      	ldrb	r3, [r7, #23]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d005      	beq.n	800c268 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	4619      	mov	r1, r3
 800c260:	4829      	ldr	r0, [pc, #164]	; (800c308 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800c262:	f001 f929 	bl	800d4b8 <iprintf>
 800c266:	e002      	b.n	800c26e <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800c268:	4828      	ldr	r0, [pc, #160]	; (800c30c <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800c26a:	f001 f993 	bl	800d594 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c26e:	4b22      	ldr	r3, [pc, #136]	; (800c2f8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c270:	789b      	ldrb	r3, [r3, #2]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00f      	beq.n	800c296 <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 800c276:	f7fd fa49 	bl	800970c <aci_gap_configure_whitelist>
 800c27a:	4603      	mov	r3, r0
 800c27c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800c27e:	7dfb      	ldrb	r3, [r7, #23]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d005      	beq.n	800c290 <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800c284:	7dfb      	ldrb	r3, [r7, #23]
 800c286:	4619      	mov	r1, r3
 800c288:	4821      	ldr	r0, [pc, #132]	; (800c310 <Ble_Hci_Gap_Gatt_Init+0x310>)
 800c28a:	f001 f915 	bl	800d4b8 <iprintf>
 800c28e:	e002      	b.n	800c296 <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800c290:	4820      	ldr	r0, [pc, #128]	; (800c314 <Ble_Hci_Gap_Gatt_Init+0x314>)
 800c292:	f001 f97f 	bl	800d594 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800c296:	4820      	ldr	r0, [pc, #128]	; (800c318 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800c298:	f001 f90e 	bl	800d4b8 <iprintf>
}
 800c29c:	bf00      	nop
 800c29e:	371c      	adds	r7, #28
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a4:	0800eb9c 	.word	0x0800eb9c
 800c2a8:	0800ebc8 	.word	0x0800ebc8
 800c2ac:	0800ebf8 	.word	0x0800ebf8
 800c2b0:	0800ec18 	.word	0x0800ec18
 800c2b4:	0800ec74 	.word	0x0800ec74
 800c2b8:	0800ecc0 	.word	0x0800ecc0
 800c2bc:	0800f754 	.word	0x0800f754
 800c2c0:	0800ecfc 	.word	0x0800ecfc
 800c2c4:	0800ed54 	.word	0x0800ed54
 800c2c8:	0800f764 	.word	0x0800f764
 800c2cc:	0800ed9c 	.word	0x0800ed9c
 800c2d0:	0800edf4 	.word	0x0800edf4
 800c2d4:	0800ee3c 	.word	0x0800ee3c
 800c2d8:	0800ee7c 	.word	0x0800ee7c
 800c2dc:	0800eeac 	.word	0x0800eeac
 800c2e0:	0800eee0 	.word	0x0800eee0
 800c2e4:	0800ef04 	.word	0x0800ef04
 800c2e8:	0800ef10 	.word	0x0800ef10
 800c2ec:	0800ef40 	.word	0x0800ef40
 800c2f0:	0800ef60 	.word	0x0800ef60
 800c2f4:	0800ef9c 	.word	0x0800ef9c
 800c2f8:	20001ae4 	.word	0x20001ae4
 800c2fc:	0800efc8 	.word	0x0800efc8
 800c300:	0800f008 	.word	0x0800f008
 800c304:	0001b207 	.word	0x0001b207
 800c308:	0800f038 	.word	0x0800f038
 800c30c:	0800f084 	.word	0x0800f084
 800c310:	0800f0c0 	.word	0x0800f0c0
 800c314:	0800f100 	.word	0x0800f100
 800c318:	0800f130 	.word	0x0800f130

0800c31c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08c      	sub	sp, #48	; 0x30
 800c320:	af08      	add	r7, sp, #32
 800c322:	4603      	mov	r3, r0
 800c324:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c326:	2392      	movs	r3, #146	; 0x92
 800c328:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800c32a:	4a1e      	ldr	r2, [pc, #120]	; (800c3a4 <Adv_Request+0x88>)
 800c32c:	79fb      	ldrb	r3, [r7, #7]
 800c32e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800c332:	2300      	movs	r3, #0
 800c334:	9306      	str	r3, [sp, #24]
 800c336:	2300      	movs	r3, #0
 800c338:	9305      	str	r3, [sp, #20]
 800c33a:	2300      	movs	r3, #0
 800c33c:	9304      	str	r3, [sp, #16]
 800c33e:	2300      	movs	r3, #0
 800c340:	9303      	str	r3, [sp, #12]
 800c342:	2300      	movs	r3, #0
 800c344:	9302      	str	r3, [sp, #8]
 800c346:	2300      	movs	r3, #0
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	2300      	movs	r3, #0
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	2300      	movs	r3, #0
 800c350:	22a0      	movs	r2, #160	; 0xa0
 800c352:	2180      	movs	r1, #128	; 0x80
 800c354:	2000      	movs	r0, #0
 800c356:	f7fc fe41 	bl	8008fdc <aci_gap_set_discoverable>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d005      	beq.n	800c370 <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800c364:	7bfb      	ldrb	r3, [r7, #15]
 800c366:	4619      	mov	r1, r3
 800c368:	480f      	ldr	r0, [pc, #60]	; (800c3a8 <Adv_Request+0x8c>)
 800c36a:	f001 f8a5 	bl	800d4b8 <iprintf>
 800c36e:	e002      	b.n	800c376 <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800c370:	480e      	ldr	r0, [pc, #56]	; (800c3ac <Adv_Request+0x90>)
 800c372:	f001 f90f 	bl	800d594 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800c376:	490e      	ldr	r1, [pc, #56]	; (800c3b0 <Adv_Request+0x94>)
 800c378:	200a      	movs	r0, #10
 800c37a:	f7fd f955 	bl	8009628 <aci_gap_update_adv_data>
 800c37e:	4603      	mov	r3, r0
 800c380:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800c382:	7bfb      	ldrb	r3, [r7, #15]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d005      	beq.n	800c394 <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800c388:	7bfb      	ldrb	r3, [r7, #15]
 800c38a:	4619      	mov	r1, r3
 800c38c:	4809      	ldr	r0, [pc, #36]	; (800c3b4 <Adv_Request+0x98>)
 800c38e:	f001 f893 	bl	800d4b8 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800c392:	e003      	b.n	800c39c <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800c394:	4808      	ldr	r0, [pc, #32]	; (800c3b8 <Adv_Request+0x9c>)
 800c396:	f001 f88f 	bl	800d4b8 <iprintf>
  return;
 800c39a:	bf00      	nop
}
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20001ae4 	.word	0x20001ae4
 800c3a8:	0800f15c 	.word	0x0800f15c
 800c3ac:	0800f194 	.word	0x0800f194
 800c3b0:	20000020 	.word	0x20000020
 800c3b4:	0800f1bc 	.word	0x0800f1bc
 800c3b8:	0800f1f0 	.word	0x0800f1f0

0800c3bc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c3c2:	f7ff fb9b 	bl	800bafc <LL_FLASH_GetUDN>
 800c3c6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ce:	d023      	beq.n	800c418 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c3d0:	f7ff fbac 	bl	800bb2c <LL_FLASH_GetSTCompanyID>
 800c3d4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c3d6:	f7ff fb9d 	bl	800bb14 <LL_FLASH_GetDeviceID>
 800c3da:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	4b16      	ldr	r3, [pc, #88]	; (800c43c <BleGetBdAddress+0x80>)
 800c3e2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	0a1b      	lsrs	r3, r3, #8
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	4b14      	ldr	r3, [pc, #80]	; (800c43c <BleGetBdAddress+0x80>)
 800c3ec:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	4b12      	ldr	r3, [pc, #72]	; (800c43c <BleGetBdAddress+0x80>)
 800c3f4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	4b10      	ldr	r3, [pc, #64]	; (800c43c <BleGetBdAddress+0x80>)
 800c3fc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	0a1b      	lsrs	r3, r3, #8
 800c402:	b2da      	uxtb	r2, r3
 800c404:	4b0d      	ldr	r3, [pc, #52]	; (800c43c <BleGetBdAddress+0x80>)
 800c406:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	0c1b      	lsrs	r3, r3, #16
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	4b0b      	ldr	r3, [pc, #44]	; (800c43c <BleGetBdAddress+0x80>)
 800c410:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800c412:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <BleGetBdAddress+0x80>)
 800c414:	617b      	str	r3, [r7, #20]
 800c416:	e00b      	b.n	800c430 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800c418:	2000      	movs	r0, #0
 800c41a:	f7fe fe87 	bl	800b12c <OTP_Read>
 800c41e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d002      	beq.n	800c42c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	617b      	str	r3, [r7, #20]
 800c42a:	e001      	b.n	800c430 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800c42c:	4b04      	ldr	r3, [pc, #16]	; (800c440 <BleGetBdAddress+0x84>)
 800c42e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800c430:	697b      	ldr	r3, [r7, #20]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3718      	adds	r7, #24
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20001adc 	.word	0x20001adc
 800c440:	0800f74c 	.word	0x0800f74c

0800c444 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c44a:	4b10      	ldr	r3, [pc, #64]	; (800c48c <Adv_Cancel+0x48>)
 800c44c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c450:	2b05      	cmp	r3, #5
 800c452:	d017      	beq.n	800c484 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c454:	2392      	movs	r3, #146	; 0x92
 800c456:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800c458:	f7fc fd9c 	bl	8008f94 <aci_gap_set_non_discoverable>
 800c45c:	4603      	mov	r3, r0
 800c45e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c460:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <Adv_Cancel+0x48>)
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800c468:	79fb      	ldrb	r3, [r7, #7]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800c46e:	4808      	ldr	r0, [pc, #32]	; (800c490 <Adv_Cancel+0x4c>)
 800c470:	f001 f822 	bl	800d4b8 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800c474:	e006      	b.n	800c484 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800c476:	4807      	ldr	r0, [pc, #28]	; (800c494 <Adv_Cancel+0x50>)
 800c478:	f001 f81e 	bl	800d4b8 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800c47c:	4806      	ldr	r0, [pc, #24]	; (800c498 <Adv_Cancel+0x54>)
 800c47e:	f001 f81b 	bl	800d4b8 <iprintf>
  return;
 800c482:	bf00      	nop
 800c484:	bf00      	nop
}
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	20001ae4 	.word	0x20001ae4
 800c490:	0800f218 	.word	0x0800f218
 800c494:	0800f23c 	.word	0x0800f23c
 800c498:	0800f244 	.word	0x0800f244

0800c49c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	2002      	movs	r0, #2
 800c4a8:	f000 fe36 	bl	800d118 <UTIL_SEQ_SetTask>

  return;
 800c4ac:	bf00      	nop
}
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c4bc:	2001      	movs	r0, #1
 800c4be:	f000 fe97 	bl	800d1f0 <UTIL_SEQ_SetEvt>

  return;
 800c4c2:	bf00      	nop
}
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b082      	sub	sp, #8
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c4d2:	2001      	movs	r0, #1
 800c4d4:	f000 feac 	bl	800d230 <UTIL_SEQ_WaitEvt>

  return;
 800c4d8:	bf00      	nop
}
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	3308      	adds	r3, #8
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fd ff0c 	bl	800a310 <SVCCTL_UserEvtRx>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c4fc:	7afb      	ldrb	r3, [r7, #11]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2201      	movs	r2, #1
 800c506:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c508:	e003      	b.n	800c512 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	701a      	strb	r2, [r3, #0]
  return;
 800c510:	bf00      	nop
}
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800c522:	79fb      	ldrb	r3, [r7, #7]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <BLE_StatusNot+0x16>
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d006      	beq.n	800c53a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800c52c:	e00b      	b.n	800c546 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c52e:	2307      	movs	r3, #7
 800c530:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 fe1c 	bl	800d170 <UTIL_SEQ_PauseTask>
      break;
 800c538:	e005      	b.n	800c546 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c53a:	2307      	movs	r3, #7
 800c53c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f000 fe36 	bl	800d1b0 <UTIL_SEQ_ResumeTask>
      break;
 800c544:	bf00      	nop
  }

  return;
 800c546:	bf00      	nop
}
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
	...

0800c550 <myTask>:
static void Custom_Vgsizeitread_Send_Notification(void);

/* USER CODE BEGIN PFP */
// Yang Junyoung
void myTask(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	af00      	add	r7, sp, #0
	// Check the state of the button if it is pressed.
	if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 800c554:	2110      	movs	r1, #16
 800c556:	4808      	ldr	r0, [pc, #32]	; (800c578 <myTask+0x28>)
 800c558:	f7f8 f9c8 	bl	80048ec <HAL_GPIO_ReadPin>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d108      	bne.n	800c574 <myTask+0x24>
	{
		// Modify the data.
		UpdateCharData[0] ^= 0x1;
 800c562:	4b06      	ldr	r3, [pc, #24]	; (800c57c <myTask+0x2c>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	f083 0301 	eor.w	r3, r3, #1
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	4b03      	ldr	r3, [pc, #12]	; (800c57c <myTask+0x2c>)
 800c56e:	701a      	strb	r2, [r3, #0]
		// Update the characteristic.
		Custom_Vgsizeitread_Update_Char();
 800c570:	f000 f83e 	bl	800c5f0 <Custom_Vgsizeitread_Update_Char>
	}
	// At the end of the task, set it again.
	//UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
}
 800c574:	bf00      	nop
 800c576:	bd80      	pop	{r7, pc}
 800c578:	48000800 	.word	0x48000800
 800c57c:	20002250 	.word	0x20002250

0800c580 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d80b      	bhi.n	800c5a8 <Custom_STM_App_Notification+0x28>
 800c590:	a201      	add	r2, pc, #4	; (adr r2, 800c598 <Custom_STM_App_Notification+0x18>)
 800c592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c596:	bf00      	nop
 800c598:	0800c5a9 	.word	0x0800c5a9
 800c59c:	0800c5a9 	.word	0x0800c5a9
 800c5a0:	0800c5a9 	.word	0x0800c5a9
 800c5a4:	0800c5a9 	.word	0x0800c5a9

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800c5a8:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800c5aa:	bf00      	nop
}
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop

0800c5b8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <Custom_APP_Notification+0x16>
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d002      	beq.n	800c5d2 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800c5cc:	e002      	b.n	800c5d4 <Custom_APP_Notification+0x1c>
      break;
 800c5ce:	bf00      	nop
 800c5d0:	e000      	b.n	800c5d4 <Custom_APP_Notification+0x1c>
      break;
 800c5d2:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800c5d4:	bf00      	nop
}
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800c5e4:	bf00      	nop
}
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
	...

0800c5f0 <Custom_Vgsizeitread_Update_Char>:
 *
 *************************************************************/

/* VGSIZEITEMS */
void Custom_Vgsizeitread_Update_Char(void) /* Property Read */
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Vgsizeitread_UC_1*/

  /* USER CODE END Vgsizeitread_UC_1*/

  if (updateflag != 0)
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d004      	beq.n	800c60a <Custom_Vgsizeitread_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_VGSIZEITREAD, (uint8_t *)UpdateCharData);
 800c600:	4904      	ldr	r1, [pc, #16]	; (800c614 <Custom_Vgsizeitread_Update_Char+0x24>)
 800c602:	2001      	movs	r0, #1
 800c604:	f000 f988 	bl	800c918 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Vgsizeitread_UC_Last*/

  /* USER CODE END Vgsizeitread_UC_Last*/
  return;
 800c608:	bf00      	nop
 800c60a:	bf00      	nop
}
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20002250 	.word	0x20002250

0800c618 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08a      	sub	sp, #40	; 0x28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800c620:	2300      	movs	r3, #0
 800c622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	3301      	adds	r3, #1
 800c62a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	2bff      	cmp	r3, #255	; 0xff
 800c632:	f040 8086 	bne.w	800c742 <Custom_STM_Event_Handler+0x12a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800c636:	6a3b      	ldr	r3, [r7, #32]
 800c638:	3302      	adds	r3, #2
 800c63a:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	881b      	ldrh	r3, [r3, #0]
 800c640:	b29b      	uxth	r3, r3
 800c642:	f640 4214 	movw	r2, #3092	; 0xc14
 800c646:	4293      	cmp	r3, r2
 800c648:	d075      	beq.n	800c736 <Custom_STM_Event_Handler+0x11e>
 800c64a:	f640 4214 	movw	r2, #3092	; 0xc14
 800c64e:	4293      	cmp	r3, r2
 800c650:	dc73      	bgt.n	800c73a <Custom_STM_Event_Handler+0x122>
 800c652:	f640 4201 	movw	r2, #3073	; 0xc01
 800c656:	4293      	cmp	r3, r2
 800c658:	d003      	beq.n	800c662 <Custom_STM_Event_Handler+0x4a>
 800c65a:	f640 4213 	movw	r2, #3091	; 0xc13
 800c65e:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800c660:	e06e      	b.n	800c740 <Custom_STM_Event_Handler+0x128>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	3302      	adds	r3, #2
 800c666:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomVgsizeitreadHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	885b      	ldrh	r3, [r3, #2]
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	461a      	mov	r2, r3
 800c670:	4b37      	ldr	r3, [pc, #220]	; (800c750 <Custom_STM_Event_Handler+0x138>)
 800c672:	889b      	ldrh	r3, [r3, #4]
 800c674:	3302      	adds	r3, #2
 800c676:	429a      	cmp	r2, r3
 800c678:	d119      	bne.n	800c6ae <Custom_STM_Event_Handler+0x96>
            return_value = SVCCTL_EvtAckFlowEnable;
 800c67a:	2301      	movs	r3, #1
 800c67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	7a1b      	ldrb	r3, [r3, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <Custom_STM_Event_Handler+0x76>
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d008      	beq.n	800c69e <Custom_STM_Event_Handler+0x86>
              break;
 800c68c:	e052      	b.n	800c734 <Custom_STM_Event_Handler+0x11c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSIZEITREAD_NOTIFY_DISABLED_EVT;
 800c68e:	2303      	movs	r3, #3
 800c690:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c692:	f107 0308 	add.w	r3, r7, #8
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff ff72 	bl	800c580 <Custom_STM_App_Notification>
                break;
 800c69c:	e04a      	b.n	800c734 <Custom_STM_Event_Handler+0x11c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VGSIZEITREAD_NOTIFY_ENABLED_EVT;
 800c69e:	2302      	movs	r3, #2
 800c6a0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c6a2:	f107 0308 	add.w	r3, r7, #8
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff ff6a 	bl	800c580 <Custom_STM_App_Notification>
                break;
 800c6ac:	e042      	b.n	800c734 <Custom_STM_Event_Handler+0x11c>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomVgsicharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	885b      	ldrh	r3, [r3, #2]
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	4b26      	ldr	r3, [pc, #152]	; (800c750 <Custom_STM_Event_Handler+0x138>)
 800c6b8:	885b      	ldrh	r3, [r3, #2]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d13e      	bne.n	800c73e <Custom_STM_Event_Handler+0x126>
            return_value = SVCCTL_EvtAckFlowEnable;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800c6c6:	2102      	movs	r1, #2
 800c6c8:	4822      	ldr	r0, [pc, #136]	; (800c754 <Custom_STM_Event_Handler+0x13c>)
 800c6ca:	f7f8 f93f 	bl	800494c <HAL_GPIO_TogglePin>
           MCP2515_SPI1_RegModify(MCP_TXB0CTRL, MCP_TXB_ABTF_M | MCP_TXB_MLOA_M \
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	2178      	movs	r1, #120	; 0x78
 800c6d2:	2030      	movs	r0, #48	; 0x30
 800c6d4:	f7f7 f81b 	bl	800370e <MCP2515_SPI1_RegModify>
           MCP2515_SPI1_RegModify(MCP_TXB0CTRL, 0x03, 0xFF);
 800c6d8:	22ff      	movs	r2, #255	; 0xff
 800c6da:	2103      	movs	r1, #3
 800c6dc:	2030      	movs	r0, #48	; 0x30
 800c6de:	f7f7 f816 	bl	800370e <MCP2515_SPI1_RegModify>
           MCP2515_SPI1_WriteReg(MCP_TXB0SIDH, 0x40, 1);  // 0x200 = 0010 0000 0000 -> 0100 0000    = 0x40
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	2140      	movs	r1, #64	; 0x40
 800c6e6:	2031      	movs	r0, #49	; 0x31
 800c6e8:	f7f6 ffe5 	bl	80036b6 <MCP2515_SPI1_WriteReg>
           MCP2515_SPI1_WriteReg(MCP_TXB0SIDL, 0x00, 1);   // 000 = 0x00
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	2032      	movs	r0, #50	; 0x32
 800c6f2:	f7f6 ffe0 	bl	80036b6 <MCP2515_SPI1_WriteReg>
           MCP2515_SPI1_WriteReg(MCP_TXB0DLC, 0x04, 1); // change to corespoind byte length
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	2104      	movs	r1, #4
 800c6fa:	2035      	movs	r0, #53	; 0x35
 800c6fc:	f7f6 ffdb 	bl	80036b6 <MCP2515_SPI1_WriteReg>
           MCP2515_SPI1_WriteReg(MCP_TXB0_DATA0, 0x00, 1);
 800c700:	2201      	movs	r2, #1
 800c702:	2100      	movs	r1, #0
 800c704:	2036      	movs	r0, #54	; 0x36
 800c706:	f7f6 ffd6 	bl	80036b6 <MCP2515_SPI1_WriteReg>
           MCP2515_SPI1_WriteReg(MCP_TXB0_DATA1, 0x30, 1);
 800c70a:	2201      	movs	r2, #1
 800c70c:	2130      	movs	r1, #48	; 0x30
 800c70e:	2037      	movs	r0, #55	; 0x37
 800c710:	f7f6 ffd1 	bl	80036b6 <MCP2515_SPI1_WriteReg>
           MCP2515_SPI1_WriteReg(MCP_TXB0_DATA2, 0x00, 1);
 800c714:	2201      	movs	r2, #1
 800c716:	2100      	movs	r1, #0
 800c718:	2038      	movs	r0, #56	; 0x38
 800c71a:	f7f6 ffcc 	bl	80036b6 <MCP2515_SPI1_WriteReg>
           MCP2515_SPI1_WriteReg(MCP_TXB0_DATA3, 0xF0, 1);
 800c71e:	2201      	movs	r2, #1
 800c720:	21f0      	movs	r1, #240	; 0xf0
 800c722:	2039      	movs	r0, #57	; 0x39
 800c724:	f7f6 ffc7 	bl	80036b6 <MCP2515_SPI1_WriteReg>
   	    MCP2515_SPI1_RegModify(MCP_TXB0CTRL, 0x08, 0x08);
 800c728:	2208      	movs	r2, #8
 800c72a:	2108      	movs	r1, #8
 800c72c:	2030      	movs	r0, #48	; 0x30
 800c72e:	f7f6 ffee 	bl	800370e <MCP2515_SPI1_RegModify>
          break;
 800c732:	e004      	b.n	800c73e <Custom_STM_Event_Handler+0x126>
 800c734:	e003      	b.n	800c73e <Custom_STM_Event_Handler+0x126>
          break;
 800c736:	bf00      	nop
 800c738:	e004      	b.n	800c744 <Custom_STM_Event_Handler+0x12c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800c73a:	bf00      	nop
 800c73c:	e002      	b.n	800c744 <Custom_STM_Event_Handler+0x12c>
          break;
 800c73e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c740:	e000      	b.n	800c744 <Custom_STM_Event_Handler+0x12c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800c742:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800c744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800c748:	4618      	mov	r0, r3
 800c74a:	3728      	adds	r7, #40	; 0x28
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	20001b68 	.word	0x20001b68
 800c754:	48000400 	.word	0x48000400

0800c758 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08c      	sub	sp, #48	; 0x30
 800c75c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c75e:	2392      	movs	r3, #146	; 0x92
 800c760:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800c762:	4861      	ldr	r0, [pc, #388]	; (800c8e8 <SVCCTL_InitCustomSvc+0x190>)
 800c764:	f7fd fdba 	bl	800a2dc <SVCCTL_RegisterSvcHandler>
   *                                2 for VGSIZEITREAD +
   *                                1 for VGSIZEITREAD configuration descriptor +
   *                              = 6
   */

  COPY_VGSIZEITEMS_UUID(uuid.Char_UUID_128);
 800c768:	238f      	movs	r3, #143	; 0x8f
 800c76a:	713b      	strb	r3, [r7, #4]
 800c76c:	23e5      	movs	r3, #229	; 0xe5
 800c76e:	717b      	strb	r3, [r7, #5]
 800c770:	23b3      	movs	r3, #179	; 0xb3
 800c772:	71bb      	strb	r3, [r7, #6]
 800c774:	23d5      	movs	r3, #213	; 0xd5
 800c776:	71fb      	strb	r3, [r7, #7]
 800c778:	232e      	movs	r3, #46	; 0x2e
 800c77a:	723b      	strb	r3, [r7, #8]
 800c77c:	237f      	movs	r3, #127	; 0x7f
 800c77e:	727b      	strb	r3, [r7, #9]
 800c780:	234a      	movs	r3, #74	; 0x4a
 800c782:	72bb      	strb	r3, [r7, #10]
 800c784:	2398      	movs	r3, #152	; 0x98
 800c786:	72fb      	strb	r3, [r7, #11]
 800c788:	232a      	movs	r3, #42	; 0x2a
 800c78a:	733b      	strb	r3, [r7, #12]
 800c78c:	2348      	movs	r3, #72	; 0x48
 800c78e:	737b      	strb	r3, [r7, #13]
 800c790:	237a      	movs	r3, #122	; 0x7a
 800c792:	73bb      	strb	r3, [r7, #14]
 800c794:	23cc      	movs	r3, #204	; 0xcc
 800c796:	73fb      	strb	r3, [r7, #15]
 800c798:	2300      	movs	r3, #0
 800c79a:	743b      	strb	r3, [r7, #16]
 800c79c:	2300      	movs	r3, #0
 800c79e:	747b      	strb	r3, [r7, #17]
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	74bb      	strb	r3, [r7, #18]
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800c7a8:	1d39      	adds	r1, r7, #4
 800c7aa:	4b50      	ldr	r3, [pc, #320]	; (800c8ec <SVCCTL_InitCustomSvc+0x194>)
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	2306      	movs	r3, #6
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	2002      	movs	r0, #2
 800c7b4:	f7fd f85a 	bl	800986c <aci_gatt_add_service>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             6,
                             &(CustomContext.CustomVgsizeitemsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c7bc:	7dfb      	ldrb	r3, [r7, #23]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d005      	beq.n	800c7ce <SVCCTL_InitCustomSvc+0x76>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: VGSIZEITEMS, error code: 0x%x \n\r", ret);
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	484a      	ldr	r0, [pc, #296]	; (800c8f0 <SVCCTL_InitCustomSvc+0x198>)
 800c7c8:	f000 fe76 	bl	800d4b8 <iprintf>
 800c7cc:	e002      	b.n	800c7d4 <SVCCTL_InitCustomSvc+0x7c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: VGSIZEITEMS \n\r");
 800c7ce:	4849      	ldr	r0, [pc, #292]	; (800c8f4 <SVCCTL_InitCustomSvc+0x19c>)
 800c7d0:	f000 fe72 	bl	800d4b8 <iprintf>
  }

  /**
   *  VGSICHARWRITE
   */
  COPY_VGSICHARWRITE_UUID(uuid.Char_UUID_128);
 800c7d4:	2319      	movs	r3, #25
 800c7d6:	713b      	strb	r3, [r7, #4]
 800c7d8:	23ed      	movs	r3, #237	; 0xed
 800c7da:	717b      	strb	r3, [r7, #5]
 800c7dc:	2382      	movs	r3, #130	; 0x82
 800c7de:	71bb      	strb	r3, [r7, #6]
 800c7e0:	23ae      	movs	r3, #174	; 0xae
 800c7e2:	71fb      	strb	r3, [r7, #7]
 800c7e4:	23ed      	movs	r3, #237	; 0xed
 800c7e6:	723b      	strb	r3, [r7, #8]
 800c7e8:	2321      	movs	r3, #33	; 0x21
 800c7ea:	727b      	strb	r3, [r7, #9]
 800c7ec:	234c      	movs	r3, #76	; 0x4c
 800c7ee:	72bb      	strb	r3, [r7, #10]
 800c7f0:	239d      	movs	r3, #157	; 0x9d
 800c7f2:	72fb      	strb	r3, [r7, #11]
 800c7f4:	2341      	movs	r3, #65	; 0x41
 800c7f6:	733b      	strb	r3, [r7, #12]
 800c7f8:	2345      	movs	r3, #69	; 0x45
 800c7fa:	737b      	strb	r3, [r7, #13]
 800c7fc:	2322      	movs	r3, #34	; 0x22
 800c7fe:	73bb      	strb	r3, [r7, #14]
 800c800:	238e      	movs	r3, #142	; 0x8e
 800c802:	73fb      	strb	r3, [r7, #15]
 800c804:	2300      	movs	r3, #0
 800c806:	743b      	strb	r3, [r7, #16]
 800c808:	2300      	movs	r3, #0
 800c80a:	747b      	strb	r3, [r7, #17]
 800c80c:	2300      	movs	r3, #0
 800c80e:	74bb      	strb	r3, [r7, #18]
 800c810:	2300      	movs	r3, #0
 800c812:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomVgsizeitemsHdle,
 800c814:	4b35      	ldr	r3, [pc, #212]	; (800c8ec <SVCCTL_InitCustomSvc+0x194>)
 800c816:	8818      	ldrh	r0, [r3, #0]
 800c818:	4b37      	ldr	r3, [pc, #220]	; (800c8f8 <SVCCTL_InitCustomSvc+0x1a0>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	1d3a      	adds	r2, r7, #4
 800c820:	4936      	ldr	r1, [pc, #216]	; (800c8fc <SVCCTL_InitCustomSvc+0x1a4>)
 800c822:	9105      	str	r1, [sp, #20]
 800c824:	2100      	movs	r1, #0
 800c826:	9104      	str	r1, [sp, #16]
 800c828:	2110      	movs	r1, #16
 800c82a:	9103      	str	r1, [sp, #12]
 800c82c:	2101      	movs	r1, #1
 800c82e:	9102      	str	r1, [sp, #8]
 800c830:	2101      	movs	r1, #1
 800c832:	9101      	str	r1, [sp, #4]
 800c834:	210a      	movs	r1, #10
 800c836:	9100      	str	r1, [sp, #0]
 800c838:	2102      	movs	r1, #2
 800c83a:	f7fd f8ed 	bl	8009a18 <aci_gatt_add_char>
 800c83e:	4603      	mov	r3, r0
 800c840:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomVgsicharwriteHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d005      	beq.n	800c854 <SVCCTL_InitCustomSvc+0xfc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : VGSICHARWRITE, error code: 0x%x \n\r", ret);
 800c848:	7dfb      	ldrb	r3, [r7, #23]
 800c84a:	4619      	mov	r1, r3
 800c84c:	482c      	ldr	r0, [pc, #176]	; (800c900 <SVCCTL_InitCustomSvc+0x1a8>)
 800c84e:	f000 fe33 	bl	800d4b8 <iprintf>
 800c852:	e002      	b.n	800c85a <SVCCTL_InitCustomSvc+0x102>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : VGSICHARWRITE \n\r");
 800c854:	482b      	ldr	r0, [pc, #172]	; (800c904 <SVCCTL_InitCustomSvc+0x1ac>)
 800c856:	f000 fe2f 	bl	800d4b8 <iprintf>
  }
  /**
   *  VGSIZEITREAD
   */
  COPY_VGSIZEITREAD_UUID(uuid.Char_UUID_128);
 800c85a:	2319      	movs	r3, #25
 800c85c:	713b      	strb	r3, [r7, #4]
 800c85e:	23ed      	movs	r3, #237	; 0xed
 800c860:	717b      	strb	r3, [r7, #5]
 800c862:	2382      	movs	r3, #130	; 0x82
 800c864:	71bb      	strb	r3, [r7, #6]
 800c866:	23ae      	movs	r3, #174	; 0xae
 800c868:	71fb      	strb	r3, [r7, #7]
 800c86a:	23ed      	movs	r3, #237	; 0xed
 800c86c:	723b      	strb	r3, [r7, #8]
 800c86e:	2321      	movs	r3, #33	; 0x21
 800c870:	727b      	strb	r3, [r7, #9]
 800c872:	234c      	movs	r3, #76	; 0x4c
 800c874:	72bb      	strb	r3, [r7, #10]
 800c876:	239d      	movs	r3, #157	; 0x9d
 800c878:	72fb      	strb	r3, [r7, #11]
 800c87a:	2341      	movs	r3, #65	; 0x41
 800c87c:	733b      	strb	r3, [r7, #12]
 800c87e:	2345      	movs	r3, #69	; 0x45
 800c880:	737b      	strb	r3, [r7, #13]
 800c882:	2322      	movs	r3, #34	; 0x22
 800c884:	73bb      	strb	r3, [r7, #14]
 800c886:	238e      	movs	r3, #142	; 0x8e
 800c888:	73fb      	strb	r3, [r7, #15]
 800c88a:	2301      	movs	r3, #1
 800c88c:	743b      	strb	r3, [r7, #16]
 800c88e:	2300      	movs	r3, #0
 800c890:	747b      	strb	r3, [r7, #17]
 800c892:	2300      	movs	r3, #0
 800c894:	74bb      	strb	r3, [r7, #18]
 800c896:	2300      	movs	r3, #0
 800c898:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomVgsizeitemsHdle,
 800c89a:	4b14      	ldr	r3, [pc, #80]	; (800c8ec <SVCCTL_InitCustomSvc+0x194>)
 800c89c:	8818      	ldrh	r0, [r3, #0]
 800c89e:	4b1a      	ldr	r3, [pc, #104]	; (800c908 <SVCCTL_InitCustomSvc+0x1b0>)
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	1d3a      	adds	r2, r7, #4
 800c8a6:	4919      	ldr	r1, [pc, #100]	; (800c90c <SVCCTL_InitCustomSvc+0x1b4>)
 800c8a8:	9105      	str	r1, [sp, #20]
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	9104      	str	r1, [sp, #16]
 800c8ae:	2110      	movs	r1, #16
 800c8b0:	9103      	str	r1, [sp, #12]
 800c8b2:	2107      	movs	r1, #7
 800c8b4:	9102      	str	r1, [sp, #8]
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	9101      	str	r1, [sp, #4]
 800c8ba:	2110      	movs	r1, #16
 800c8bc:	9100      	str	r1, [sp, #0]
 800c8be:	2102      	movs	r1, #2
 800c8c0:	f7fd f8aa 	bl	8009a18 <aci_gatt_add_char>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomVgsizeitreadHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c8c8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d005      	beq.n	800c8da <SVCCTL_InitCustomSvc+0x182>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : VGSIZEITREAD, error code: 0x%x \n\r", ret);
 800c8ce:	7dfb      	ldrb	r3, [r7, #23]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	480f      	ldr	r0, [pc, #60]	; (800c910 <SVCCTL_InitCustomSvc+0x1b8>)
 800c8d4:	f000 fdf0 	bl	800d4b8 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c8d8:	e003      	b.n	800c8e2 <SVCCTL_InitCustomSvc+0x18a>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : VGSIZEITREAD \n\r");
 800c8da:	480e      	ldr	r0, [pc, #56]	; (800c914 <SVCCTL_InitCustomSvc+0x1bc>)
 800c8dc:	f000 fdec 	bl	800d4b8 <iprintf>
  return;
 800c8e0:	bf00      	nop
}
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	0800c619 	.word	0x0800c619
 800c8ec:	20001b68 	.word	0x20001b68
 800c8f0:	0800f260 	.word	0x0800f260
 800c8f4:	0800f2ac 	.word	0x0800f2ac
 800c8f8:	2000002a 	.word	0x2000002a
 800c8fc:	20001b6a 	.word	0x20001b6a
 800c900:	0800f2e4 	.word	0x0800f2e4
 800c904:	0800f330 	.word	0x0800f330
 800c908:	2000002b 	.word	0x2000002b
 800c90c:	20001b6c 	.word	0x20001b6c
 800c910:	0800f36c 	.word	0x0800f36c
 800c914:	0800f3b8 	.word	0x0800f3b8

0800c918 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af02      	add	r7, sp, #8
 800c91e:	4603      	mov	r3, r0
 800c920:	6039      	str	r1, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c924:	2392      	movs	r3, #146	; 0x92
 800c926:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800c928:	79fb      	ldrb	r3, [r7, #7]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <Custom_STM_App_Update_Char+0x1c>
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d01b      	beq.n	800c96a <Custom_STM_App_Update_Char+0x52>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800c932:	e035      	b.n	800c9a0 <Custom_STM_App_Update_Char+0x88>
      ret = aci_gatt_update_char_value(CustomContext.CustomVgsizeitemsHdle,
 800c934:	4b1d      	ldr	r3, [pc, #116]	; (800c9ac <Custom_STM_App_Update_Char+0x94>)
 800c936:	8818      	ldrh	r0, [r3, #0]
 800c938:	4b1c      	ldr	r3, [pc, #112]	; (800c9ac <Custom_STM_App_Update_Char+0x94>)
 800c93a:	8859      	ldrh	r1, [r3, #2]
 800c93c:	4b1c      	ldr	r3, [pc, #112]	; (800c9b0 <Custom_STM_App_Update_Char+0x98>)
 800c93e:	781a      	ldrb	r2, [r3, #0]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	4613      	mov	r3, r2
 800c946:	2200      	movs	r2, #0
 800c948:	f7fd f96e 	bl	8009c28 <aci_gatt_update_char_value>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d005      	beq.n	800c962 <Custom_STM_App_Update_Char+0x4a>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value VGSICHARWRITE command, result : 0x%x \n\r", ret);
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	4619      	mov	r1, r3
 800c95a:	4816      	ldr	r0, [pc, #88]	; (800c9b4 <Custom_STM_App_Update_Char+0x9c>)
 800c95c:	f000 fdac 	bl	800d4b8 <iprintf>
      break;
 800c960:	e01e      	b.n	800c9a0 <Custom_STM_App_Update_Char+0x88>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value VGSICHARWRITE command\n\r");
 800c962:	4815      	ldr	r0, [pc, #84]	; (800c9b8 <Custom_STM_App_Update_Char+0xa0>)
 800c964:	f000 fda8 	bl	800d4b8 <iprintf>
      break;
 800c968:	e01a      	b.n	800c9a0 <Custom_STM_App_Update_Char+0x88>
      ret = aci_gatt_update_char_value(CustomContext.CustomVgsizeitemsHdle,
 800c96a:	4b10      	ldr	r3, [pc, #64]	; (800c9ac <Custom_STM_App_Update_Char+0x94>)
 800c96c:	8818      	ldrh	r0, [r3, #0]
 800c96e:	4b0f      	ldr	r3, [pc, #60]	; (800c9ac <Custom_STM_App_Update_Char+0x94>)
 800c970:	8899      	ldrh	r1, [r3, #4]
 800c972:	4b12      	ldr	r3, [pc, #72]	; (800c9bc <Custom_STM_App_Update_Char+0xa4>)
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	4613      	mov	r3, r2
 800c97c:	2200      	movs	r2, #0
 800c97e:	f7fd f953 	bl	8009c28 <aci_gatt_update_char_value>
 800c982:	4603      	mov	r3, r0
 800c984:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800c986:	7bfb      	ldrb	r3, [r7, #15]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d005      	beq.n	800c998 <Custom_STM_App_Update_Char+0x80>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value VGSIZEITREAD command, result : 0x%x \n\r", ret);
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	4619      	mov	r1, r3
 800c990:	480b      	ldr	r0, [pc, #44]	; (800c9c0 <Custom_STM_App_Update_Char+0xa8>)
 800c992:	f000 fd91 	bl	800d4b8 <iprintf>
      break;
 800c996:	e002      	b.n	800c99e <Custom_STM_App_Update_Char+0x86>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value VGSIZEITREAD command\n\r");
 800c998:	480a      	ldr	r0, [pc, #40]	; (800c9c4 <Custom_STM_App_Update_Char+0xac>)
 800c99a:	f000 fd8d 	bl	800d4b8 <iprintf>
      break;
 800c99e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	20001b68 	.word	0x20001b68
 800c9b0:	2000002a 	.word	0x2000002a
 800c9b4:	0800f3f4 	.word	0x0800f3f4
 800c9b8:	0800f444 	.word	0x0800f444
 800c9bc:	2000002b 	.word	0x2000002b
 800c9c0:	0800f484 	.word	0x0800f484
 800c9c4:	0800f4d4 	.word	0x0800f4d4

0800c9c8 <LL_PWR_EnableBootC2>:
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c9cc:	4b05      	ldr	r3, [pc, #20]	; (800c9e4 <LL_PWR_EnableBootC2+0x1c>)
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	4a04      	ldr	r2, [pc, #16]	; (800c9e4 <LL_PWR_EnableBootC2+0x1c>)
 800c9d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9d6:	60d3      	str	r3, [r2, #12]
}
 800c9d8:	bf00      	nop
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	58000400 	.word	0x58000400

0800c9e8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c9f0:	4b06      	ldr	r3, [pc, #24]	; (800ca0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c9f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c9f6:	4905      	ldr	r1, [pc, #20]	; (800ca0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	58000800 	.word	0x58000800

0800ca10 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800ca18:	4b05      	ldr	r3, [pc, #20]	; (800ca30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ca1a:	6a1a      	ldr	r2, [r3, #32]
 800ca1c:	4904      	ldr	r1, [pc, #16]	; (800ca30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	620b      	str	r3, [r1, #32]
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr
 800ca30:	58000800 	.word	0x58000800

0800ca34 <LL_AHB3_GRP1_EnableClock>:
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800ca3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800ca4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4013      	ands	r3, r2
 800ca56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ca58:	68fb      	ldr	r3, [r7, #12]
}
 800ca5a:	bf00      	nop
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800ca66:	b480      	push	{r7}
 800ca68:	b085      	sub	sp, #20
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800ca6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca72:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ca76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800ca82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca86:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ca90:	68fb      	ldr	r3, [r7, #12]
}
 800ca92:	bf00      	nop
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr

0800ca9e <LL_C1_IPCC_EnableIT_TXF>:
{
 800ca9e:	b480      	push	{r7}
 800caa0:	b083      	sub	sp, #12
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	601a      	str	r2, [r3, #0]
}
 800cab2:	bf00      	nop
 800cab4:	370c      	adds	r7, #12
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <LL_C1_IPCC_EnableIT_RXO>:
{
 800cabe:	b480      	push	{r7}
 800cac0:	b083      	sub	sp, #12
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f043 0201 	orr.w	r2, r3, #1
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	601a      	str	r2, [r3, #0]
}
 800cad2:	bf00      	nop
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <LL_C1_IPCC_EnableTransmitChannel>:
{
 800cade:	b480      	push	{r7}
 800cae0:	b083      	sub	sp, #12
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	041b      	lsls	r3, r3, #16
 800caf0:	43db      	mvns	r3, r3
 800caf2:	401a      	ands	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	605a      	str	r2, [r3, #4]
}
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685a      	ldr	r2, [r3, #4]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	041b      	lsls	r3, r3, #16
 800cb16:	431a      	orrs	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	605a      	str	r2, [r3, #4]
}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	685a      	ldr	r2, [r3, #4]
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	43db      	mvns	r3, r3
 800cb3a:	401a      	ands	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	605a      	str	r2, [r3, #4]
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	683a      	ldr	r2, [r7, #0]
 800cb5a:	609a      	str	r2, [r3, #8]
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <LL_C1_IPCC_SetFlag_CHx>:
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	041a      	lsls	r2, r3, #16
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	609a      	str	r2, [r3, #8]
}
 800cb7a:	bf00      	nop
 800cb7c:	370c      	adds	r7, #12
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr

0800cb86 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800cb86:	b480      	push	{r7}
 800cb88:	b083      	sub	sp, #12
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	68da      	ldr	r2, [r3, #12]
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	4013      	ands	r3, r2
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d101      	bne.n	800cba2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e000      	b.n	800cba4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	69da      	ldr	r2, [r3, #28]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d101      	bne.n	800cbcc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e000      	b.n	800cbce <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
	...

0800cbdc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800cbe0:	2102      	movs	r1, #2
 800cbe2:	4818      	ldr	r0, [pc, #96]	; (800cc44 <HW_IPCC_Rx_Handler+0x68>)
 800cbe4:	f7ff ffe4 	bl	800cbb0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d008      	beq.n	800cc00 <HW_IPCC_Rx_Handler+0x24>
 800cbee:	4b15      	ldr	r3, [pc, #84]	; (800cc44 <HW_IPCC_Rx_Handler+0x68>)
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	f003 0302 	and.w	r3, r3, #2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d102      	bne.n	800cc00 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800cbfa:	f000 f8d5 	bl	800cda8 <HW_IPCC_SYS_EvtHandler>
 800cbfe:	e01e      	b.n	800cc3e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800cc00:	2101      	movs	r1, #1
 800cc02:	4810      	ldr	r0, [pc, #64]	; (800cc44 <HW_IPCC_Rx_Handler+0x68>)
 800cc04:	f7ff ffd4 	bl	800cbb0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d008      	beq.n	800cc20 <HW_IPCC_Rx_Handler+0x44>
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	; (800cc44 <HW_IPCC_Rx_Handler+0x68>)
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d102      	bne.n	800cc20 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800cc1a:	f000 f889 	bl	800cd30 <HW_IPCC_BLE_EvtHandler>
 800cc1e:	e00e      	b.n	800cc3e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800cc20:	2108      	movs	r1, #8
 800cc22:	4808      	ldr	r0, [pc, #32]	; (800cc44 <HW_IPCC_Rx_Handler+0x68>)
 800cc24:	f7ff ffc4 	bl	800cbb0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d008      	beq.n	800cc40 <HW_IPCC_Rx_Handler+0x64>
 800cc2e:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <HW_IPCC_Rx_Handler+0x68>)
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	f003 0308 	and.w	r3, r3, #8
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d102      	bne.n	800cc40 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800cc3a:	f000 f901 	bl	800ce40 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800cc3e:	bf00      	nop
 800cc40:	bf00      	nop
}
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	58000c00 	.word	0x58000c00

0800cc48 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800cc4c:	2102      	movs	r1, #2
 800cc4e:	4818      	ldr	r0, [pc, #96]	; (800ccb0 <HW_IPCC_Tx_Handler+0x68>)
 800cc50:	f7ff ff99 	bl	800cb86 <LL_C1_IPCC_IsActiveFlag_CHx>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d108      	bne.n	800cc6c <HW_IPCC_Tx_Handler+0x24>
 800cc5a:	4b15      	ldr	r3, [pc, #84]	; (800ccb0 <HW_IPCC_Tx_Handler+0x68>)
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d102      	bne.n	800cc6c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800cc66:	f000 f893 	bl	800cd90 <HW_IPCC_SYS_CmdEvtHandler>
 800cc6a:	e01e      	b.n	800ccaa <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800cc6c:	2108      	movs	r1, #8
 800cc6e:	4810      	ldr	r0, [pc, #64]	; (800ccb0 <HW_IPCC_Tx_Handler+0x68>)
 800cc70:	f7ff ff89 	bl	800cb86 <LL_C1_IPCC_IsActiveFlag_CHx>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d108      	bne.n	800cc8c <HW_IPCC_Tx_Handler+0x44>
 800cc7a:	4b0d      	ldr	r3, [pc, #52]	; (800ccb0 <HW_IPCC_Tx_Handler+0x68>)
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d102      	bne.n	800cc8c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800cc86:	f000 f8bd 	bl	800ce04 <HW_IPCC_MM_FreeBufHandler>
 800cc8a:	e00e      	b.n	800ccaa <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800cc8c:	2120      	movs	r1, #32
 800cc8e:	4808      	ldr	r0, [pc, #32]	; (800ccb0 <HW_IPCC_Tx_Handler+0x68>)
 800cc90:	f7ff ff79 	bl	800cb86 <LL_C1_IPCC_IsActiveFlag_CHx>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d108      	bne.n	800ccac <HW_IPCC_Tx_Handler+0x64>
 800cc9a:	4b05      	ldr	r3, [pc, #20]	; (800ccb0 <HW_IPCC_Tx_Handler+0x68>)
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d102      	bne.n	800ccac <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800cca6:	f000 f84f 	bl	800cd48 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800ccaa:	bf00      	nop
 800ccac:	bf00      	nop
}
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	58000c00 	.word	0x58000c00

0800ccb4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800ccb8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ccbc:	f7ff fed3 	bl	800ca66 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800ccc0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ccc4:	f7ff fea4 	bl	800ca10 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800ccc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cccc:	f7ff fe8c 	bl	800c9e8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ccd0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ccd2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ccd4:	f7ff fe78 	bl	800c9c8 <LL_PWR_EnableBootC2>

  return;
 800ccd8:	bf00      	nop
}
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800cce0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cce4:	f7ff fea6 	bl	800ca34 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800cce8:	4806      	ldr	r0, [pc, #24]	; (800cd04 <HW_IPCC_Init+0x28>)
 800ccea:	f7ff fee8 	bl	800cabe <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800ccee:	4805      	ldr	r0, [pc, #20]	; (800cd04 <HW_IPCC_Init+0x28>)
 800ccf0:	f7ff fed5 	bl	800ca9e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800ccf4:	202c      	movs	r0, #44	; 0x2c
 800ccf6:	f7f7 f912 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800ccfa:	202d      	movs	r0, #45	; 0x2d
 800ccfc:	f7f7 f90f 	bl	8003f1e <HAL_NVIC_EnableIRQ>

  return;
 800cd00:	bf00      	nop
}
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	58000c00 	.word	0x58000c00

0800cd08 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800cd0c:	2101      	movs	r1, #1
 800cd0e:	4802      	ldr	r0, [pc, #8]	; (800cd18 <HW_IPCC_BLE_Init+0x10>)
 800cd10:	f7ff ff0a 	bl	800cb28 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cd14:	bf00      	nop
}
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	58000c00 	.word	0x58000c00

0800cd1c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800cd20:	2101      	movs	r1, #1
 800cd22:	4802      	ldr	r0, [pc, #8]	; (800cd2c <HW_IPCC_BLE_SendCmd+0x10>)
 800cd24:	f7ff ff20 	bl	800cb68 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800cd28:	bf00      	nop
}
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	58000c00 	.word	0x58000c00

0800cd30 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800cd34:	f7fd ff8c 	bl	800ac50 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800cd38:	2101      	movs	r1, #1
 800cd3a:	4802      	ldr	r0, [pc, #8]	; (800cd44 <HW_IPCC_BLE_EvtHandler+0x14>)
 800cd3c:	f7ff ff06 	bl	800cb4c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cd40:	bf00      	nop
}
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	58000c00 	.word	0x58000c00

0800cd48 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800cd4c:	2120      	movs	r1, #32
 800cd4e:	4803      	ldr	r0, [pc, #12]	; (800cd5c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800cd50:	f7ff fed8 	bl	800cb04 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800cd54:	f7fd ffac 	bl	800acb0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800cd58:	bf00      	nop
}
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	58000c00 	.word	0x58000c00

0800cd60 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cd64:	2102      	movs	r1, #2
 800cd66:	4802      	ldr	r0, [pc, #8]	; (800cd70 <HW_IPCC_SYS_Init+0x10>)
 800cd68:	f7ff fede 	bl	800cb28 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cd6c:	bf00      	nop
}
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	58000c00 	.word	0x58000c00

0800cd74 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cd78:	2102      	movs	r1, #2
 800cd7a:	4804      	ldr	r0, [pc, #16]	; (800cd8c <HW_IPCC_SYS_SendCmd+0x18>)
 800cd7c:	f7ff fef4 	bl	800cb68 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cd80:	2102      	movs	r1, #2
 800cd82:	4802      	ldr	r0, [pc, #8]	; (800cd8c <HW_IPCC_SYS_SendCmd+0x18>)
 800cd84:	f7ff feab 	bl	800cade <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800cd88:	bf00      	nop
}
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	58000c00 	.word	0x58000c00

0800cd90 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cd94:	2102      	movs	r1, #2
 800cd96:	4803      	ldr	r0, [pc, #12]	; (800cda4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800cd98:	f7ff feb4 	bl	800cb04 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800cd9c:	f7fd ffd8 	bl	800ad50 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800cda0:	bf00      	nop
}
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	58000c00 	.word	0x58000c00

0800cda8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800cdac:	f7fd ffe6 	bl	800ad7c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cdb0:	2102      	movs	r1, #2
 800cdb2:	4802      	ldr	r0, [pc, #8]	; (800cdbc <HW_IPCC_SYS_EvtHandler+0x14>)
 800cdb4:	f7ff feca 	bl	800cb4c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cdb8:	bf00      	nop
}
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	58000c00 	.word	0x58000c00

0800cdc0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800cdc8:	2108      	movs	r1, #8
 800cdca:	480c      	ldr	r0, [pc, #48]	; (800cdfc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cdcc:	f7ff fedb 	bl	800cb86 <LL_C1_IPCC_IsActiveFlag_CHx>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d007      	beq.n	800cde6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800cdd6:	4a0a      	ldr	r2, [pc, #40]	; (800ce00 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cddc:	2108      	movs	r1, #8
 800cdde:	4807      	ldr	r0, [pc, #28]	; (800cdfc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cde0:	f7ff fe7d 	bl	800cade <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800cde4:	e006      	b.n	800cdf4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cdea:	2108      	movs	r1, #8
 800cdec:	4803      	ldr	r0, [pc, #12]	; (800cdfc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cdee:	f7ff febb 	bl	800cb68 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800cdf2:	bf00      	nop
}
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	58000c00 	.word	0x58000c00
 800ce00:	20001b70 	.word	0x20001b70

0800ce04 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ce08:	2108      	movs	r1, #8
 800ce0a:	4806      	ldr	r0, [pc, #24]	; (800ce24 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ce0c:	f7ff fe7a 	bl	800cb04 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800ce10:	4b05      	ldr	r3, [pc, #20]	; (800ce28 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ce16:	2108      	movs	r1, #8
 800ce18:	4802      	ldr	r0, [pc, #8]	; (800ce24 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ce1a:	f7ff fea5 	bl	800cb68 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ce1e:	bf00      	nop
}
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	58000c00 	.word	0x58000c00
 800ce28:	20001b70 	.word	0x20001b70

0800ce2c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ce30:	2108      	movs	r1, #8
 800ce32:	4802      	ldr	r0, [pc, #8]	; (800ce3c <HW_IPCC_TRACES_Init+0x10>)
 800ce34:	f7ff fe78 	bl	800cb28 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ce38:	bf00      	nop
}
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	58000c00 	.word	0x58000c00

0800ce40 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800ce44:	f7fe f842 	bl	800aecc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ce48:	2108      	movs	r1, #8
 800ce4a:	4802      	ldr	r0, [pc, #8]	; (800ce54 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800ce4c:	f7ff fe7e 	bl	800cb4c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ce50:	bf00      	nop
}
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	58000c00 	.word	0x58000c00

0800ce58 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ce58:	b480      	push	{r7}
 800ce5a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ce5c:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <UTIL_LPM_Init+0x1c>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ce62:	4b05      	ldr	r3, [pc, #20]	; (800ce78 <UTIL_LPM_Init+0x20>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ce68:	bf00      	nop
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	20001b74 	.word	0x20001b74
 800ce78:	20001b78 	.word	0x20001b78

0800ce7c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b087      	sub	sp, #28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce88:	f3ef 8310 	mrs	r3, PRIMASK
 800ce8c:	613b      	str	r3, [r7, #16]
  return(result);
 800ce8e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ce90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce92:	b672      	cpsid	i
}
 800ce94:	bf00      	nop
  
  switch(state)
 800ce96:	78fb      	ldrb	r3, [r7, #3]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d008      	beq.n	800ceae <UTIL_LPM_SetOffMode+0x32>
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d10e      	bne.n	800cebe <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cea0:	4b0d      	ldr	r3, [pc, #52]	; (800ced8 <UTIL_LPM_SetOffMode+0x5c>)
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	4a0b      	ldr	r2, [pc, #44]	; (800ced8 <UTIL_LPM_SetOffMode+0x5c>)
 800ceaa:	6013      	str	r3, [r2, #0]
      break;
 800ceac:	e008      	b.n	800cec0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	43da      	mvns	r2, r3
 800ceb2:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <UTIL_LPM_SetOffMode+0x5c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4013      	ands	r3, r2
 800ceb8:	4a07      	ldr	r2, [pc, #28]	; (800ced8 <UTIL_LPM_SetOffMode+0x5c>)
 800ceba:	6013      	str	r3, [r2, #0]
      break;
 800cebc:	e000      	b.n	800cec0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800cebe:	bf00      	nop
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f383 8810 	msr	PRIMASK, r3
}
 800ceca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cecc:	bf00      	nop
 800cece:	371c      	adds	r7, #28
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr
 800ced8:	20001b78 	.word	0x20001b78

0800cedc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b090      	sub	sp, #64	; 0x40
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800cee4:	4b73      	ldr	r3, [pc, #460]	; (800d0b4 <UTIL_SEQ_Run+0x1d8>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800ceea:	4b72      	ldr	r3, [pc, #456]	; (800d0b4 <UTIL_SEQ_Run+0x1d8>)
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4013      	ands	r3, r2
 800cef2:	4a70      	ldr	r2, [pc, #448]	; (800d0b4 <UTIL_SEQ_Run+0x1d8>)
 800cef4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800cef6:	4b70      	ldr	r3, [pc, #448]	; (800d0b8 <UTIL_SEQ_Run+0x1dc>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cefc:	4b6f      	ldr	r3, [pc, #444]	; (800d0bc <UTIL_SEQ_Run+0x1e0>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cf02:	4b6f      	ldr	r3, [pc, #444]	; (800d0c0 <UTIL_SEQ_Run+0x1e4>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800cf08:	4b6e      	ldr	r3, [pc, #440]	; (800d0c4 <UTIL_SEQ_Run+0x1e8>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cf0e:	e08d      	b.n	800d02c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800cf10:	2300      	movs	r3, #0
 800cf12:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cf14:	e002      	b.n	800cf1c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800cf16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf18:	3301      	adds	r3, #1
 800cf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cf1c:	4a6a      	ldr	r2, [pc, #424]	; (800d0c8 <UTIL_SEQ_Run+0x1ec>)
 800cf1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf26:	401a      	ands	r2, r3
 800cf28:	4b62      	ldr	r3, [pc, #392]	; (800d0b4 <UTIL_SEQ_Run+0x1d8>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4013      	ands	r3, r2
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0f1      	beq.n	800cf16 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cf32:	4a65      	ldr	r2, [pc, #404]	; (800d0c8 <UTIL_SEQ_Run+0x1ec>)
 800cf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf36:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3c:	401a      	ands	r2, r3
 800cf3e:	4b5d      	ldr	r3, [pc, #372]	; (800d0b4 <UTIL_SEQ_Run+0x1d8>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4013      	ands	r3, r2
 800cf44:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cf46:	4a60      	ldr	r2, [pc, #384]	; (800d0c8 <UTIL_SEQ_Run+0x1ec>)
 800cf48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf4a:	00db      	lsls	r3, r3, #3
 800cf4c:	4413      	add	r3, r2
 800cf4e:	685a      	ldr	r2, [r3, #4]
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	4013      	ands	r3, r2
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d106      	bne.n	800cf66 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cf58:	4a5b      	ldr	r2, [pc, #364]	; (800d0c8 <UTIL_SEQ_Run+0x1ec>)
 800cf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	4413      	add	r3, r2
 800cf60:	f04f 32ff 	mov.w	r2, #4294967295
 800cf64:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cf66:	4a58      	ldr	r2, [pc, #352]	; (800d0c8 <UTIL_SEQ_Run+0x1ec>)
 800cf68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	4413      	add	r3, r2
 800cf6e:	685a      	ldr	r2, [r3, #4]
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	4013      	ands	r3, r2
 800cf74:	4618      	mov	r0, r3
 800cf76:	f000 f9b3 	bl	800d2e0 <SEQ_BitPosition>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	4b53      	ldr	r3, [pc, #332]	; (800d0cc <UTIL_SEQ_Run+0x1f0>)
 800cf80:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cf82:	4a51      	ldr	r2, [pc, #324]	; (800d0c8 <UTIL_SEQ_Run+0x1ec>)
 800cf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf86:	00db      	lsls	r3, r3, #3
 800cf88:	4413      	add	r3, r2
 800cf8a:	685a      	ldr	r2, [r3, #4]
 800cf8c:	4b4f      	ldr	r3, [pc, #316]	; (800d0cc <UTIL_SEQ_Run+0x1f0>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2101      	movs	r1, #1
 800cf92:	fa01 f303 	lsl.w	r3, r1, r3
 800cf96:	43db      	mvns	r3, r3
 800cf98:	401a      	ands	r2, r3
 800cf9a:	494b      	ldr	r1, [pc, #300]	; (800d0c8 <UTIL_SEQ_Run+0x1ec>)
 800cf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	440b      	add	r3, r1
 800cfa2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfa4:	f3ef 8310 	mrs	r3, PRIMASK
 800cfa8:	61bb      	str	r3, [r7, #24]
  return(result);
 800cfaa:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cfac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800cfae:	b672      	cpsid	i
}
 800cfb0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800cfb2:	4b46      	ldr	r3, [pc, #280]	; (800d0cc <UTIL_SEQ_Run+0x1f0>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfbc:	43da      	mvns	r2, r3
 800cfbe:	4b3e      	ldr	r3, [pc, #248]	; (800d0b8 <UTIL_SEQ_Run+0x1dc>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4013      	ands	r3, r2
 800cfc4:	4a3c      	ldr	r2, [pc, #240]	; (800d0b8 <UTIL_SEQ_Run+0x1dc>)
 800cfc6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cfc8:	2302      	movs	r3, #2
 800cfca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfcc:	e013      	b.n	800cff6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800cfce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	4a3d      	ldr	r2, [pc, #244]	; (800d0c8 <UTIL_SEQ_Run+0x1ec>)
 800cfd4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800cfd8:	4b3c      	ldr	r3, [pc, #240]	; (800d0cc <UTIL_SEQ_Run+0x1f0>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	fa02 f303 	lsl.w	r3, r2, r3
 800cfe2:	43da      	mvns	r2, r3
 800cfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	400a      	ands	r2, r1
 800cfea:	4937      	ldr	r1, [pc, #220]	; (800d0c8 <UTIL_SEQ_Run+0x1ec>)
 800cfec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff2:	3b01      	subs	r3, #1
 800cff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1e8      	bne.n	800cfce <UTIL_SEQ_Run+0xf2>
 800cffc:	6a3b      	ldr	r3, [r7, #32]
 800cffe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f383 8810 	msr	PRIMASK, r3
}
 800d006:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d008:	4b30      	ldr	r3, [pc, #192]	; (800d0cc <UTIL_SEQ_Run+0x1f0>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a30      	ldr	r2, [pc, #192]	; (800d0d0 <UTIL_SEQ_Run+0x1f4>)
 800d00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d012:	4798      	blx	r3

    local_taskset = TaskSet;
 800d014:	4b28      	ldr	r3, [pc, #160]	; (800d0b8 <UTIL_SEQ_Run+0x1dc>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800d01a:	4b28      	ldr	r3, [pc, #160]	; (800d0bc <UTIL_SEQ_Run+0x1e0>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800d020:	4b27      	ldr	r3, [pc, #156]	; (800d0c0 <UTIL_SEQ_Run+0x1e4>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800d026:	4b27      	ldr	r3, [pc, #156]	; (800d0c4 <UTIL_SEQ_Run+0x1e8>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d030:	401a      	ands	r2, r3
 800d032:	4b20      	ldr	r3, [pc, #128]	; (800d0b4 <UTIL_SEQ_Run+0x1d8>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4013      	ands	r3, r2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d005      	beq.n	800d048 <UTIL_SEQ_Run+0x16c>
 800d03c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	4013      	ands	r3, r2
 800d042:	2b00      	cmp	r3, #0
 800d044:	f43f af64 	beq.w	800cf10 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d048:	4b20      	ldr	r3, [pc, #128]	; (800d0cc <UTIL_SEQ_Run+0x1f0>)
 800d04a:	f04f 32ff 	mov.w	r2, #4294967295
 800d04e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d050:	f000 f938 	bl	800d2c4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d054:	f3ef 8310 	mrs	r3, PRIMASK
 800d058:	613b      	str	r3, [r7, #16]
  return(result);
 800d05a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d05c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d05e:	b672      	cpsid	i
}
 800d060:	bf00      	nop
  local_taskset = TaskSet;
 800d062:	4b15      	ldr	r3, [pc, #84]	; (800d0b8 <UTIL_SEQ_Run+0x1dc>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d068:	4b14      	ldr	r3, [pc, #80]	; (800d0bc <UTIL_SEQ_Run+0x1e0>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d06e:	4b14      	ldr	r3, [pc, #80]	; (800d0c0 <UTIL_SEQ_Run+0x1e4>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d078:	401a      	ands	r2, r3
 800d07a:	4b0e      	ldr	r3, [pc, #56]	; (800d0b4 <UTIL_SEQ_Run+0x1d8>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4013      	ands	r3, r2
 800d080:	2b00      	cmp	r3, #0
 800d082:	d107      	bne.n	800d094 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d084:	4b0f      	ldr	r3, [pc, #60]	; (800d0c4 <UTIL_SEQ_Run+0x1e8>)
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08a:	4013      	ands	r3, r2
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d101      	bne.n	800d094 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d090:	f7f4 fa0b 	bl	80014aa <UTIL_SEQ_Idle>
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f383 8810 	msr	PRIMASK, r3
}
 800d09e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d0a0:	f000 f917 	bl	800d2d2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d0a4:	4a03      	ldr	r2, [pc, #12]	; (800d0b4 <UTIL_SEQ_Run+0x1d8>)
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	6013      	str	r3, [r2, #0]

  return;
 800d0aa:	bf00      	nop
}
 800d0ac:	3740      	adds	r7, #64	; 0x40
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000030 	.word	0x20000030
 800d0b8:	20001b7c 	.word	0x20001b7c
 800d0bc:	20001b80 	.word	0x20001b80
 800d0c0:	2000002c 	.word	0x2000002c
 800d0c4:	20001b84 	.word	0x20001b84
 800d0c8:	20001c0c 	.word	0x20001c0c
 800d0cc:	20001b88 	.word	0x20001b88
 800d0d0:	20001b8c 	.word	0x20001b8c

0800d0d4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b088      	sub	sp, #32
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d0e4:	617b      	str	r3, [r7, #20]
  return(result);
 800d0e6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d0e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0ea:	b672      	cpsid	i
}
 800d0ec:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f000 f8f6 	bl	800d2e0 <SEQ_BitPosition>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	4a06      	ldr	r2, [pc, #24]	; (800d114 <UTIL_SEQ_RegTask+0x40>)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	f383 8810 	msr	PRIMASK, r3
}
 800d10a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d10c:	bf00      	nop
}
 800d10e:	3720      	adds	r7, #32
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	20001b8c 	.word	0x20001b8c

0800d118 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d118:	b480      	push	{r7}
 800d11a:	b087      	sub	sp, #28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d122:	f3ef 8310 	mrs	r3, PRIMASK
 800d126:	60fb      	str	r3, [r7, #12]
  return(result);
 800d128:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d12a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d12c:	b672      	cpsid	i
}
 800d12e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d130:	4b0d      	ldr	r3, [pc, #52]	; (800d168 <UTIL_SEQ_SetTask+0x50>)
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	4313      	orrs	r3, r2
 800d138:	4a0b      	ldr	r2, [pc, #44]	; (800d168 <UTIL_SEQ_SetTask+0x50>)
 800d13a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d13c:	4a0b      	ldr	r2, [pc, #44]	; (800d16c <UTIL_SEQ_SetTask+0x54>)
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	431a      	orrs	r2, r3
 800d148:	4908      	ldr	r1, [pc, #32]	; (800d16c <UTIL_SEQ_SetTask+0x54>)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	f383 8810 	msr	PRIMASK, r3
}
 800d15a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d15c:	bf00      	nop
}
 800d15e:	371c      	adds	r7, #28
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr
 800d168:	20001b7c 	.word	0x20001b7c
 800d16c:	20001c0c 	.word	0x20001c0c

0800d170 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d170:	b480      	push	{r7}
 800d172:	b087      	sub	sp, #28
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d178:	f3ef 8310 	mrs	r3, PRIMASK
 800d17c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d17e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d182:	b672      	cpsid	i
}
 800d184:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	43da      	mvns	r2, r3
 800d18a:	4b08      	ldr	r3, [pc, #32]	; (800d1ac <UTIL_SEQ_PauseTask+0x3c>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4013      	ands	r3, r2
 800d190:	4a06      	ldr	r2, [pc, #24]	; (800d1ac <UTIL_SEQ_PauseTask+0x3c>)
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	f383 8810 	msr	PRIMASK, r3
}
 800d19e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d1a0:	bf00      	nop
}
 800d1a2:	371c      	adds	r7, #28
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	2000002c 	.word	0x2000002c

0800d1b0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800d1bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d1c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d1c2:	b672      	cpsid	i
}
 800d1c4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d1c6:	4b09      	ldr	r3, [pc, #36]	; (800d1ec <UTIL_SEQ_ResumeTask+0x3c>)
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	4a07      	ldr	r2, [pc, #28]	; (800d1ec <UTIL_SEQ_ResumeTask+0x3c>)
 800d1d0:	6013      	str	r3, [r2, #0]
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	f383 8810 	msr	PRIMASK, r3
}
 800d1dc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d1de:	bf00      	nop
}
 800d1e0:	371c      	adds	r7, #28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	2000002c 	.word	0x2000002c

0800d1f0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d1fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d202:	b672      	cpsid	i
}
 800d204:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d206:	4b09      	ldr	r3, [pc, #36]	; (800d22c <UTIL_SEQ_SetEvt+0x3c>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	4a07      	ldr	r2, [pc, #28]	; (800d22c <UTIL_SEQ_SetEvt+0x3c>)
 800d210:	6013      	str	r3, [r2, #0]
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	f383 8810 	msr	PRIMASK, r3
}
 800d21c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d21e:	bf00      	nop
}
 800d220:	371c      	adds	r7, #28
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	20001b80 	.word	0x20001b80

0800d230 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d238:	4b1f      	ldr	r3, [pc, #124]	; (800d2b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d23e:	4b1e      	ldr	r3, [pc, #120]	; (800d2b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d246:	d102      	bne.n	800d24e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d248:	2300      	movs	r3, #0
 800d24a:	61fb      	str	r3, [r7, #28]
 800d24c:	e005      	b.n	800d25a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d24e:	4b1a      	ldr	r3, [pc, #104]	; (800d2b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2201      	movs	r2, #1
 800d254:	fa02 f303 	lsl.w	r3, r2, r3
 800d258:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d25a:	4b18      	ldr	r3, [pc, #96]	; (800d2bc <UTIL_SEQ_WaitEvt+0x8c>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d260:	4a16      	ldr	r2, [pc, #88]	; (800d2bc <UTIL_SEQ_WaitEvt+0x8c>)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d266:	e003      	b.n	800d270 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d268:	6879      	ldr	r1, [r7, #4]
 800d26a:	69f8      	ldr	r0, [r7, #28]
 800d26c:	f7f4 f924 	bl	80014b8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d270:	4b13      	ldr	r3, [pc, #76]	; (800d2c0 <UTIL_SEQ_WaitEvt+0x90>)
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4013      	ands	r3, r2
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d0f5      	beq.n	800d268 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d27c:	4a0e      	ldr	r2, [pc, #56]	; (800d2b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d282:	f3ef 8310 	mrs	r3, PRIMASK
 800d286:	60bb      	str	r3, [r7, #8]
  return(result);
 800d288:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d28a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d28c:	b672      	cpsid	i
}
 800d28e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	43da      	mvns	r2, r3
 800d294:	4b0a      	ldr	r3, [pc, #40]	; (800d2c0 <UTIL_SEQ_WaitEvt+0x90>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4013      	ands	r3, r2
 800d29a:	4a09      	ldr	r2, [pc, #36]	; (800d2c0 <UTIL_SEQ_WaitEvt+0x90>)
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f383 8810 	msr	PRIMASK, r3
}
 800d2a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d2aa:	4a04      	ldr	r2, [pc, #16]	; (800d2bc <UTIL_SEQ_WaitEvt+0x8c>)
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	6013      	str	r3, [r2, #0]
  return;
 800d2b0:	bf00      	nop
}
 800d2b2:	3720      	adds	r7, #32
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20001b88 	.word	0x20001b88
 800d2bc:	20001b84 	.word	0x20001b84
 800d2c0:	20001b80 	.word	0x20001b80

0800d2c4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d2c8:	bf00      	nop
}
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d2d2:	b480      	push	{r7}
 800d2d4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d2d6:	bf00      	nop
}
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	0c1b      	lsrs	r3, r3, #16
 800d2f4:	041b      	lsls	r3, r3, #16
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d104      	bne.n	800d304 <SEQ_BitPosition+0x24>
 800d2fa:	2310      	movs	r3, #16
 800d2fc:	73fb      	strb	r3, [r7, #15]
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	041b      	lsls	r3, r3, #16
 800d302:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d105      	bne.n	800d31a <SEQ_BitPosition+0x3a>
 800d30e:	7bfb      	ldrb	r3, [r7, #15]
 800d310:	3308      	adds	r3, #8
 800d312:	73fb      	strb	r3, [r7, #15]
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	021b      	lsls	r3, r3, #8
 800d318:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d320:	2b00      	cmp	r3, #0
 800d322:	d105      	bne.n	800d330 <SEQ_BitPosition+0x50>
 800d324:	7bfb      	ldrb	r3, [r7, #15]
 800d326:	3304      	adds	r3, #4
 800d328:	73fb      	strb	r3, [r7, #15]
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	011b      	lsls	r3, r3, #4
 800d32e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	0f1b      	lsrs	r3, r3, #28
 800d334:	4a07      	ldr	r2, [pc, #28]	; (800d354 <SEQ_BitPosition+0x74>)
 800d336:	5cd2      	ldrb	r2, [r2, r3]
 800d338:	7bfb      	ldrb	r3, [r7, #15]
 800d33a:	4413      	add	r3, r2
 800d33c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
 800d340:	f1c3 031f 	rsb	r3, r3, #31
 800d344:	b2db      	uxtb	r3, r3
}
 800d346:	4618      	mov	r0, r3
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	0800f774 	.word	0x0800f774

0800d358 <std>:
 800d358:	2300      	movs	r3, #0
 800d35a:	b510      	push	{r4, lr}
 800d35c:	4604      	mov	r4, r0
 800d35e:	e9c0 3300 	strd	r3, r3, [r0]
 800d362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d366:	6083      	str	r3, [r0, #8]
 800d368:	8181      	strh	r1, [r0, #12]
 800d36a:	6643      	str	r3, [r0, #100]	; 0x64
 800d36c:	81c2      	strh	r2, [r0, #14]
 800d36e:	6183      	str	r3, [r0, #24]
 800d370:	4619      	mov	r1, r3
 800d372:	2208      	movs	r2, #8
 800d374:	305c      	adds	r0, #92	; 0x5c
 800d376:	f000 f9ed 	bl	800d754 <memset>
 800d37a:	4b05      	ldr	r3, [pc, #20]	; (800d390 <std+0x38>)
 800d37c:	6263      	str	r3, [r4, #36]	; 0x24
 800d37e:	4b05      	ldr	r3, [pc, #20]	; (800d394 <std+0x3c>)
 800d380:	62a3      	str	r3, [r4, #40]	; 0x28
 800d382:	4b05      	ldr	r3, [pc, #20]	; (800d398 <std+0x40>)
 800d384:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d386:	4b05      	ldr	r3, [pc, #20]	; (800d39c <std+0x44>)
 800d388:	6224      	str	r4, [r4, #32]
 800d38a:	6323      	str	r3, [r4, #48]	; 0x30
 800d38c:	bd10      	pop	{r4, pc}
 800d38e:	bf00      	nop
 800d390:	0800d5a5 	.word	0x0800d5a5
 800d394:	0800d5c7 	.word	0x0800d5c7
 800d398:	0800d5ff 	.word	0x0800d5ff
 800d39c:	0800d623 	.word	0x0800d623

0800d3a0 <stdio_exit_handler>:
 800d3a0:	4a02      	ldr	r2, [pc, #8]	; (800d3ac <stdio_exit_handler+0xc>)
 800d3a2:	4903      	ldr	r1, [pc, #12]	; (800d3b0 <stdio_exit_handler+0x10>)
 800d3a4:	4803      	ldr	r0, [pc, #12]	; (800d3b4 <stdio_exit_handler+0x14>)
 800d3a6:	f000 b869 	b.w	800d47c <_fwalk_sglue>
 800d3aa:	bf00      	nop
 800d3ac:	20000034 	.word	0x20000034
 800d3b0:	0800e109 	.word	0x0800e109
 800d3b4:	20000040 	.word	0x20000040

0800d3b8 <cleanup_stdio>:
 800d3b8:	6841      	ldr	r1, [r0, #4]
 800d3ba:	4b0c      	ldr	r3, [pc, #48]	; (800d3ec <cleanup_stdio+0x34>)
 800d3bc:	4299      	cmp	r1, r3
 800d3be:	b510      	push	{r4, lr}
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	d001      	beq.n	800d3c8 <cleanup_stdio+0x10>
 800d3c4:	f000 fea0 	bl	800e108 <_fflush_r>
 800d3c8:	68a1      	ldr	r1, [r4, #8]
 800d3ca:	4b09      	ldr	r3, [pc, #36]	; (800d3f0 <cleanup_stdio+0x38>)
 800d3cc:	4299      	cmp	r1, r3
 800d3ce:	d002      	beq.n	800d3d6 <cleanup_stdio+0x1e>
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f000 fe99 	bl	800e108 <_fflush_r>
 800d3d6:	68e1      	ldr	r1, [r4, #12]
 800d3d8:	4b06      	ldr	r3, [pc, #24]	; (800d3f4 <cleanup_stdio+0x3c>)
 800d3da:	4299      	cmp	r1, r3
 800d3dc:	d004      	beq.n	800d3e8 <cleanup_stdio+0x30>
 800d3de:	4620      	mov	r0, r4
 800d3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3e4:	f000 be90 	b.w	800e108 <_fflush_r>
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	bf00      	nop
 800d3ec:	20001c1c 	.word	0x20001c1c
 800d3f0:	20001c84 	.word	0x20001c84
 800d3f4:	20001cec 	.word	0x20001cec

0800d3f8 <global_stdio_init.part.0>:
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <global_stdio_init.part.0+0x30>)
 800d3fc:	4c0b      	ldr	r4, [pc, #44]	; (800d42c <global_stdio_init.part.0+0x34>)
 800d3fe:	4a0c      	ldr	r2, [pc, #48]	; (800d430 <global_stdio_init.part.0+0x38>)
 800d400:	601a      	str	r2, [r3, #0]
 800d402:	4620      	mov	r0, r4
 800d404:	2200      	movs	r2, #0
 800d406:	2104      	movs	r1, #4
 800d408:	f7ff ffa6 	bl	800d358 <std>
 800d40c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d410:	2201      	movs	r2, #1
 800d412:	2109      	movs	r1, #9
 800d414:	f7ff ffa0 	bl	800d358 <std>
 800d418:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d41c:	2202      	movs	r2, #2
 800d41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d422:	2112      	movs	r1, #18
 800d424:	f7ff bf98 	b.w	800d358 <std>
 800d428:	20001d54 	.word	0x20001d54
 800d42c:	20001c1c 	.word	0x20001c1c
 800d430:	0800d3a1 	.word	0x0800d3a1

0800d434 <__sfp_lock_acquire>:
 800d434:	4801      	ldr	r0, [pc, #4]	; (800d43c <__sfp_lock_acquire+0x8>)
 800d436:	f000 ba05 	b.w	800d844 <__retarget_lock_acquire_recursive>
 800d43a:	bf00      	nop
 800d43c:	20001d5d 	.word	0x20001d5d

0800d440 <__sfp_lock_release>:
 800d440:	4801      	ldr	r0, [pc, #4]	; (800d448 <__sfp_lock_release+0x8>)
 800d442:	f000 ba00 	b.w	800d846 <__retarget_lock_release_recursive>
 800d446:	bf00      	nop
 800d448:	20001d5d 	.word	0x20001d5d

0800d44c <__sinit>:
 800d44c:	b510      	push	{r4, lr}
 800d44e:	4604      	mov	r4, r0
 800d450:	f7ff fff0 	bl	800d434 <__sfp_lock_acquire>
 800d454:	6a23      	ldr	r3, [r4, #32]
 800d456:	b11b      	cbz	r3, 800d460 <__sinit+0x14>
 800d458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d45c:	f7ff bff0 	b.w	800d440 <__sfp_lock_release>
 800d460:	4b04      	ldr	r3, [pc, #16]	; (800d474 <__sinit+0x28>)
 800d462:	6223      	str	r3, [r4, #32]
 800d464:	4b04      	ldr	r3, [pc, #16]	; (800d478 <__sinit+0x2c>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1f5      	bne.n	800d458 <__sinit+0xc>
 800d46c:	f7ff ffc4 	bl	800d3f8 <global_stdio_init.part.0>
 800d470:	e7f2      	b.n	800d458 <__sinit+0xc>
 800d472:	bf00      	nop
 800d474:	0800d3b9 	.word	0x0800d3b9
 800d478:	20001d54 	.word	0x20001d54

0800d47c <_fwalk_sglue>:
 800d47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d480:	4607      	mov	r7, r0
 800d482:	4688      	mov	r8, r1
 800d484:	4614      	mov	r4, r2
 800d486:	2600      	movs	r6, #0
 800d488:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d48c:	f1b9 0901 	subs.w	r9, r9, #1
 800d490:	d505      	bpl.n	800d49e <_fwalk_sglue+0x22>
 800d492:	6824      	ldr	r4, [r4, #0]
 800d494:	2c00      	cmp	r4, #0
 800d496:	d1f7      	bne.n	800d488 <_fwalk_sglue+0xc>
 800d498:	4630      	mov	r0, r6
 800d49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d49e:	89ab      	ldrh	r3, [r5, #12]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d907      	bls.n	800d4b4 <_fwalk_sglue+0x38>
 800d4a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	d003      	beq.n	800d4b4 <_fwalk_sglue+0x38>
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	47c0      	blx	r8
 800d4b2:	4306      	orrs	r6, r0
 800d4b4:	3568      	adds	r5, #104	; 0x68
 800d4b6:	e7e9      	b.n	800d48c <_fwalk_sglue+0x10>

0800d4b8 <iprintf>:
 800d4b8:	b40f      	push	{r0, r1, r2, r3}
 800d4ba:	b507      	push	{r0, r1, r2, lr}
 800d4bc:	4906      	ldr	r1, [pc, #24]	; (800d4d8 <iprintf+0x20>)
 800d4be:	ab04      	add	r3, sp, #16
 800d4c0:	6808      	ldr	r0, [r1, #0]
 800d4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4c6:	6881      	ldr	r1, [r0, #8]
 800d4c8:	9301      	str	r3, [sp, #4]
 800d4ca:	f000 faed 	bl	800daa8 <_vfiprintf_r>
 800d4ce:	b003      	add	sp, #12
 800d4d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4d4:	b004      	add	sp, #16
 800d4d6:	4770      	bx	lr
 800d4d8:	2000008c 	.word	0x2000008c

0800d4dc <putchar>:
 800d4dc:	4b02      	ldr	r3, [pc, #8]	; (800d4e8 <putchar+0xc>)
 800d4de:	4601      	mov	r1, r0
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	6882      	ldr	r2, [r0, #8]
 800d4e4:	f000 be9a 	b.w	800e21c <_putc_r>
 800d4e8:	2000008c 	.word	0x2000008c

0800d4ec <_puts_r>:
 800d4ec:	6a03      	ldr	r3, [r0, #32]
 800d4ee:	b570      	push	{r4, r5, r6, lr}
 800d4f0:	6884      	ldr	r4, [r0, #8]
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	460e      	mov	r6, r1
 800d4f6:	b90b      	cbnz	r3, 800d4fc <_puts_r+0x10>
 800d4f8:	f7ff ffa8 	bl	800d44c <__sinit>
 800d4fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4fe:	07db      	lsls	r3, r3, #31
 800d500:	d405      	bmi.n	800d50e <_puts_r+0x22>
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	0598      	lsls	r0, r3, #22
 800d506:	d402      	bmi.n	800d50e <_puts_r+0x22>
 800d508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d50a:	f000 f99b 	bl	800d844 <__retarget_lock_acquire_recursive>
 800d50e:	89a3      	ldrh	r3, [r4, #12]
 800d510:	0719      	lsls	r1, r3, #28
 800d512:	d513      	bpl.n	800d53c <_puts_r+0x50>
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	b18b      	cbz	r3, 800d53c <_puts_r+0x50>
 800d518:	3e01      	subs	r6, #1
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d520:	3b01      	subs	r3, #1
 800d522:	60a3      	str	r3, [r4, #8]
 800d524:	b9e9      	cbnz	r1, 800d562 <_puts_r+0x76>
 800d526:	2b00      	cmp	r3, #0
 800d528:	da2e      	bge.n	800d588 <_puts_r+0x9c>
 800d52a:	4622      	mov	r2, r4
 800d52c:	210a      	movs	r1, #10
 800d52e:	4628      	mov	r0, r5
 800d530:	f000 f87b 	bl	800d62a <__swbuf_r>
 800d534:	3001      	adds	r0, #1
 800d536:	d007      	beq.n	800d548 <_puts_r+0x5c>
 800d538:	250a      	movs	r5, #10
 800d53a:	e007      	b.n	800d54c <_puts_r+0x60>
 800d53c:	4621      	mov	r1, r4
 800d53e:	4628      	mov	r0, r5
 800d540:	f000 f8b0 	bl	800d6a4 <__swsetup_r>
 800d544:	2800      	cmp	r0, #0
 800d546:	d0e7      	beq.n	800d518 <_puts_r+0x2c>
 800d548:	f04f 35ff 	mov.w	r5, #4294967295
 800d54c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d54e:	07da      	lsls	r2, r3, #31
 800d550:	d405      	bmi.n	800d55e <_puts_r+0x72>
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	059b      	lsls	r3, r3, #22
 800d556:	d402      	bmi.n	800d55e <_puts_r+0x72>
 800d558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d55a:	f000 f974 	bl	800d846 <__retarget_lock_release_recursive>
 800d55e:	4628      	mov	r0, r5
 800d560:	bd70      	pop	{r4, r5, r6, pc}
 800d562:	2b00      	cmp	r3, #0
 800d564:	da04      	bge.n	800d570 <_puts_r+0x84>
 800d566:	69a2      	ldr	r2, [r4, #24]
 800d568:	429a      	cmp	r2, r3
 800d56a:	dc06      	bgt.n	800d57a <_puts_r+0x8e>
 800d56c:	290a      	cmp	r1, #10
 800d56e:	d004      	beq.n	800d57a <_puts_r+0x8e>
 800d570:	6823      	ldr	r3, [r4, #0]
 800d572:	1c5a      	adds	r2, r3, #1
 800d574:	6022      	str	r2, [r4, #0]
 800d576:	7019      	strb	r1, [r3, #0]
 800d578:	e7cf      	b.n	800d51a <_puts_r+0x2e>
 800d57a:	4622      	mov	r2, r4
 800d57c:	4628      	mov	r0, r5
 800d57e:	f000 f854 	bl	800d62a <__swbuf_r>
 800d582:	3001      	adds	r0, #1
 800d584:	d1c9      	bne.n	800d51a <_puts_r+0x2e>
 800d586:	e7df      	b.n	800d548 <_puts_r+0x5c>
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	250a      	movs	r5, #10
 800d58c:	1c5a      	adds	r2, r3, #1
 800d58e:	6022      	str	r2, [r4, #0]
 800d590:	701d      	strb	r5, [r3, #0]
 800d592:	e7db      	b.n	800d54c <_puts_r+0x60>

0800d594 <puts>:
 800d594:	4b02      	ldr	r3, [pc, #8]	; (800d5a0 <puts+0xc>)
 800d596:	4601      	mov	r1, r0
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f7ff bfa7 	b.w	800d4ec <_puts_r>
 800d59e:	bf00      	nop
 800d5a0:	2000008c 	.word	0x2000008c

0800d5a4 <__sread>:
 800d5a4:	b510      	push	{r4, lr}
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ac:	f000 f8fc 	bl	800d7a8 <_read_r>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	bfab      	itete	ge
 800d5b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800d5b8:	181b      	addge	r3, r3, r0
 800d5ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5be:	bfac      	ite	ge
 800d5c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5c2:	81a3      	strhlt	r3, [r4, #12]
 800d5c4:	bd10      	pop	{r4, pc}

0800d5c6 <__swrite>:
 800d5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ca:	461f      	mov	r7, r3
 800d5cc:	898b      	ldrh	r3, [r1, #12]
 800d5ce:	05db      	lsls	r3, r3, #23
 800d5d0:	4605      	mov	r5, r0
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	4616      	mov	r6, r2
 800d5d6:	d505      	bpl.n	800d5e4 <__swrite+0x1e>
 800d5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5dc:	2302      	movs	r3, #2
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f000 f8d0 	bl	800d784 <_lseek_r>
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5ee:	81a3      	strh	r3, [r4, #12]
 800d5f0:	4632      	mov	r2, r6
 800d5f2:	463b      	mov	r3, r7
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fa:	f000 b8e7 	b.w	800d7cc <_write_r>

0800d5fe <__sseek>:
 800d5fe:	b510      	push	{r4, lr}
 800d600:	460c      	mov	r4, r1
 800d602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d606:	f000 f8bd 	bl	800d784 <_lseek_r>
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	89a3      	ldrh	r3, [r4, #12]
 800d60e:	bf15      	itete	ne
 800d610:	6560      	strne	r0, [r4, #84]	; 0x54
 800d612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d61a:	81a3      	strheq	r3, [r4, #12]
 800d61c:	bf18      	it	ne
 800d61e:	81a3      	strhne	r3, [r4, #12]
 800d620:	bd10      	pop	{r4, pc}

0800d622 <__sclose>:
 800d622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d626:	f000 b89d 	b.w	800d764 <_close_r>

0800d62a <__swbuf_r>:
 800d62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62c:	460e      	mov	r6, r1
 800d62e:	4614      	mov	r4, r2
 800d630:	4605      	mov	r5, r0
 800d632:	b118      	cbz	r0, 800d63c <__swbuf_r+0x12>
 800d634:	6a03      	ldr	r3, [r0, #32]
 800d636:	b90b      	cbnz	r3, 800d63c <__swbuf_r+0x12>
 800d638:	f7ff ff08 	bl	800d44c <__sinit>
 800d63c:	69a3      	ldr	r3, [r4, #24]
 800d63e:	60a3      	str	r3, [r4, #8]
 800d640:	89a3      	ldrh	r3, [r4, #12]
 800d642:	071a      	lsls	r2, r3, #28
 800d644:	d525      	bpl.n	800d692 <__swbuf_r+0x68>
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	b31b      	cbz	r3, 800d692 <__swbuf_r+0x68>
 800d64a:	6823      	ldr	r3, [r4, #0]
 800d64c:	6922      	ldr	r2, [r4, #16]
 800d64e:	1a98      	subs	r0, r3, r2
 800d650:	6963      	ldr	r3, [r4, #20]
 800d652:	b2f6      	uxtb	r6, r6
 800d654:	4283      	cmp	r3, r0
 800d656:	4637      	mov	r7, r6
 800d658:	dc04      	bgt.n	800d664 <__swbuf_r+0x3a>
 800d65a:	4621      	mov	r1, r4
 800d65c:	4628      	mov	r0, r5
 800d65e:	f000 fd53 	bl	800e108 <_fflush_r>
 800d662:	b9e0      	cbnz	r0, 800d69e <__swbuf_r+0x74>
 800d664:	68a3      	ldr	r3, [r4, #8]
 800d666:	3b01      	subs	r3, #1
 800d668:	60a3      	str	r3, [r4, #8]
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	1c5a      	adds	r2, r3, #1
 800d66e:	6022      	str	r2, [r4, #0]
 800d670:	701e      	strb	r6, [r3, #0]
 800d672:	6962      	ldr	r2, [r4, #20]
 800d674:	1c43      	adds	r3, r0, #1
 800d676:	429a      	cmp	r2, r3
 800d678:	d004      	beq.n	800d684 <__swbuf_r+0x5a>
 800d67a:	89a3      	ldrh	r3, [r4, #12]
 800d67c:	07db      	lsls	r3, r3, #31
 800d67e:	d506      	bpl.n	800d68e <__swbuf_r+0x64>
 800d680:	2e0a      	cmp	r6, #10
 800d682:	d104      	bne.n	800d68e <__swbuf_r+0x64>
 800d684:	4621      	mov	r1, r4
 800d686:	4628      	mov	r0, r5
 800d688:	f000 fd3e 	bl	800e108 <_fflush_r>
 800d68c:	b938      	cbnz	r0, 800d69e <__swbuf_r+0x74>
 800d68e:	4638      	mov	r0, r7
 800d690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d692:	4621      	mov	r1, r4
 800d694:	4628      	mov	r0, r5
 800d696:	f000 f805 	bl	800d6a4 <__swsetup_r>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d0d5      	beq.n	800d64a <__swbuf_r+0x20>
 800d69e:	f04f 37ff 	mov.w	r7, #4294967295
 800d6a2:	e7f4      	b.n	800d68e <__swbuf_r+0x64>

0800d6a4 <__swsetup_r>:
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	4b2a      	ldr	r3, [pc, #168]	; (800d750 <__swsetup_r+0xac>)
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	6818      	ldr	r0, [r3, #0]
 800d6ac:	460c      	mov	r4, r1
 800d6ae:	b118      	cbz	r0, 800d6b8 <__swsetup_r+0x14>
 800d6b0:	6a03      	ldr	r3, [r0, #32]
 800d6b2:	b90b      	cbnz	r3, 800d6b8 <__swsetup_r+0x14>
 800d6b4:	f7ff feca 	bl	800d44c <__sinit>
 800d6b8:	89a3      	ldrh	r3, [r4, #12]
 800d6ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6be:	0718      	lsls	r0, r3, #28
 800d6c0:	d422      	bmi.n	800d708 <__swsetup_r+0x64>
 800d6c2:	06d9      	lsls	r1, r3, #27
 800d6c4:	d407      	bmi.n	800d6d6 <__swsetup_r+0x32>
 800d6c6:	2309      	movs	r3, #9
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6ce:	81a3      	strh	r3, [r4, #12]
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	e034      	b.n	800d740 <__swsetup_r+0x9c>
 800d6d6:	0758      	lsls	r0, r3, #29
 800d6d8:	d512      	bpl.n	800d700 <__swsetup_r+0x5c>
 800d6da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6dc:	b141      	cbz	r1, 800d6f0 <__swsetup_r+0x4c>
 800d6de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6e2:	4299      	cmp	r1, r3
 800d6e4:	d002      	beq.n	800d6ec <__swsetup_r+0x48>
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	f000 f8bc 	bl	800d864 <_free_r>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	6363      	str	r3, [r4, #52]	; 0x34
 800d6f0:	89a3      	ldrh	r3, [r4, #12]
 800d6f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6f6:	81a3      	strh	r3, [r4, #12]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	6063      	str	r3, [r4, #4]
 800d6fc:	6923      	ldr	r3, [r4, #16]
 800d6fe:	6023      	str	r3, [r4, #0]
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f043 0308 	orr.w	r3, r3, #8
 800d706:	81a3      	strh	r3, [r4, #12]
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	b94b      	cbnz	r3, 800d720 <__swsetup_r+0x7c>
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d716:	d003      	beq.n	800d720 <__swsetup_r+0x7c>
 800d718:	4621      	mov	r1, r4
 800d71a:	4628      	mov	r0, r5
 800d71c:	f000 fd42 	bl	800e1a4 <__smakebuf_r>
 800d720:	89a0      	ldrh	r0, [r4, #12]
 800d722:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d726:	f010 0301 	ands.w	r3, r0, #1
 800d72a:	d00a      	beq.n	800d742 <__swsetup_r+0x9e>
 800d72c:	2300      	movs	r3, #0
 800d72e:	60a3      	str	r3, [r4, #8]
 800d730:	6963      	ldr	r3, [r4, #20]
 800d732:	425b      	negs	r3, r3
 800d734:	61a3      	str	r3, [r4, #24]
 800d736:	6923      	ldr	r3, [r4, #16]
 800d738:	b943      	cbnz	r3, 800d74c <__swsetup_r+0xa8>
 800d73a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d73e:	d1c4      	bne.n	800d6ca <__swsetup_r+0x26>
 800d740:	bd38      	pop	{r3, r4, r5, pc}
 800d742:	0781      	lsls	r1, r0, #30
 800d744:	bf58      	it	pl
 800d746:	6963      	ldrpl	r3, [r4, #20]
 800d748:	60a3      	str	r3, [r4, #8]
 800d74a:	e7f4      	b.n	800d736 <__swsetup_r+0x92>
 800d74c:	2000      	movs	r0, #0
 800d74e:	e7f7      	b.n	800d740 <__swsetup_r+0x9c>
 800d750:	2000008c 	.word	0x2000008c

0800d754 <memset>:
 800d754:	4402      	add	r2, r0
 800d756:	4603      	mov	r3, r0
 800d758:	4293      	cmp	r3, r2
 800d75a:	d100      	bne.n	800d75e <memset+0xa>
 800d75c:	4770      	bx	lr
 800d75e:	f803 1b01 	strb.w	r1, [r3], #1
 800d762:	e7f9      	b.n	800d758 <memset+0x4>

0800d764 <_close_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4d06      	ldr	r5, [pc, #24]	; (800d780 <_close_r+0x1c>)
 800d768:	2300      	movs	r3, #0
 800d76a:	4604      	mov	r4, r0
 800d76c:	4608      	mov	r0, r1
 800d76e:	602b      	str	r3, [r5, #0]
 800d770:	f7f5 fb6b 	bl	8002e4a <_close>
 800d774:	1c43      	adds	r3, r0, #1
 800d776:	d102      	bne.n	800d77e <_close_r+0x1a>
 800d778:	682b      	ldr	r3, [r5, #0]
 800d77a:	b103      	cbz	r3, 800d77e <_close_r+0x1a>
 800d77c:	6023      	str	r3, [r4, #0]
 800d77e:	bd38      	pop	{r3, r4, r5, pc}
 800d780:	20001d58 	.word	0x20001d58

0800d784 <_lseek_r>:
 800d784:	b538      	push	{r3, r4, r5, lr}
 800d786:	4d07      	ldr	r5, [pc, #28]	; (800d7a4 <_lseek_r+0x20>)
 800d788:	4604      	mov	r4, r0
 800d78a:	4608      	mov	r0, r1
 800d78c:	4611      	mov	r1, r2
 800d78e:	2200      	movs	r2, #0
 800d790:	602a      	str	r2, [r5, #0]
 800d792:	461a      	mov	r2, r3
 800d794:	f7f5 fb80 	bl	8002e98 <_lseek>
 800d798:	1c43      	adds	r3, r0, #1
 800d79a:	d102      	bne.n	800d7a2 <_lseek_r+0x1e>
 800d79c:	682b      	ldr	r3, [r5, #0]
 800d79e:	b103      	cbz	r3, 800d7a2 <_lseek_r+0x1e>
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	bd38      	pop	{r3, r4, r5, pc}
 800d7a4:	20001d58 	.word	0x20001d58

0800d7a8 <_read_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	4d07      	ldr	r5, [pc, #28]	; (800d7c8 <_read_r+0x20>)
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	4608      	mov	r0, r1
 800d7b0:	4611      	mov	r1, r2
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	602a      	str	r2, [r5, #0]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	f7f5 fb2a 	bl	8002e10 <_read>
 800d7bc:	1c43      	adds	r3, r0, #1
 800d7be:	d102      	bne.n	800d7c6 <_read_r+0x1e>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	b103      	cbz	r3, 800d7c6 <_read_r+0x1e>
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	bd38      	pop	{r3, r4, r5, pc}
 800d7c8:	20001d58 	.word	0x20001d58

0800d7cc <_write_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	4d07      	ldr	r5, [pc, #28]	; (800d7ec <_write_r+0x20>)
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	4608      	mov	r0, r1
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	602a      	str	r2, [r5, #0]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f7fd fc3e 	bl	800b05c <_write>
 800d7e0:	1c43      	adds	r3, r0, #1
 800d7e2:	d102      	bne.n	800d7ea <_write_r+0x1e>
 800d7e4:	682b      	ldr	r3, [r5, #0]
 800d7e6:	b103      	cbz	r3, 800d7ea <_write_r+0x1e>
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	bd38      	pop	{r3, r4, r5, pc}
 800d7ec:	20001d58 	.word	0x20001d58

0800d7f0 <__errno>:
 800d7f0:	4b01      	ldr	r3, [pc, #4]	; (800d7f8 <__errno+0x8>)
 800d7f2:	6818      	ldr	r0, [r3, #0]
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	2000008c 	.word	0x2000008c

0800d7fc <__libc_init_array>:
 800d7fc:	b570      	push	{r4, r5, r6, lr}
 800d7fe:	4d0d      	ldr	r5, [pc, #52]	; (800d834 <__libc_init_array+0x38>)
 800d800:	4c0d      	ldr	r4, [pc, #52]	; (800d838 <__libc_init_array+0x3c>)
 800d802:	1b64      	subs	r4, r4, r5
 800d804:	10a4      	asrs	r4, r4, #2
 800d806:	2600      	movs	r6, #0
 800d808:	42a6      	cmp	r6, r4
 800d80a:	d109      	bne.n	800d820 <__libc_init_array+0x24>
 800d80c:	4d0b      	ldr	r5, [pc, #44]	; (800d83c <__libc_init_array+0x40>)
 800d80e:	4c0c      	ldr	r4, [pc, #48]	; (800d840 <__libc_init_array+0x44>)
 800d810:	f000 fd6a 	bl	800e2e8 <_init>
 800d814:	1b64      	subs	r4, r4, r5
 800d816:	10a4      	asrs	r4, r4, #2
 800d818:	2600      	movs	r6, #0
 800d81a:	42a6      	cmp	r6, r4
 800d81c:	d105      	bne.n	800d82a <__libc_init_array+0x2e>
 800d81e:	bd70      	pop	{r4, r5, r6, pc}
 800d820:	f855 3b04 	ldr.w	r3, [r5], #4
 800d824:	4798      	blx	r3
 800d826:	3601      	adds	r6, #1
 800d828:	e7ee      	b.n	800d808 <__libc_init_array+0xc>
 800d82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d82e:	4798      	blx	r3
 800d830:	3601      	adds	r6, #1
 800d832:	e7f2      	b.n	800d81a <__libc_init_array+0x1e>
 800d834:	0800f7c0 	.word	0x0800f7c0
 800d838:	0800f7c0 	.word	0x0800f7c0
 800d83c:	0800f7c0 	.word	0x0800f7c0
 800d840:	0800f7c4 	.word	0x0800f7c4

0800d844 <__retarget_lock_acquire_recursive>:
 800d844:	4770      	bx	lr

0800d846 <__retarget_lock_release_recursive>:
 800d846:	4770      	bx	lr

0800d848 <memcpy>:
 800d848:	440a      	add	r2, r1
 800d84a:	4291      	cmp	r1, r2
 800d84c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d850:	d100      	bne.n	800d854 <memcpy+0xc>
 800d852:	4770      	bx	lr
 800d854:	b510      	push	{r4, lr}
 800d856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d85e:	4291      	cmp	r1, r2
 800d860:	d1f9      	bne.n	800d856 <memcpy+0xe>
 800d862:	bd10      	pop	{r4, pc}

0800d864 <_free_r>:
 800d864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d866:	2900      	cmp	r1, #0
 800d868:	d044      	beq.n	800d8f4 <_free_r+0x90>
 800d86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d86e:	9001      	str	r0, [sp, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	f1a1 0404 	sub.w	r4, r1, #4
 800d876:	bfb8      	it	lt
 800d878:	18e4      	addlt	r4, r4, r3
 800d87a:	f000 f8df 	bl	800da3c <__malloc_lock>
 800d87e:	4a1e      	ldr	r2, [pc, #120]	; (800d8f8 <_free_r+0x94>)
 800d880:	9801      	ldr	r0, [sp, #4]
 800d882:	6813      	ldr	r3, [r2, #0]
 800d884:	b933      	cbnz	r3, 800d894 <_free_r+0x30>
 800d886:	6063      	str	r3, [r4, #4]
 800d888:	6014      	str	r4, [r2, #0]
 800d88a:	b003      	add	sp, #12
 800d88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d890:	f000 b8da 	b.w	800da48 <__malloc_unlock>
 800d894:	42a3      	cmp	r3, r4
 800d896:	d908      	bls.n	800d8aa <_free_r+0x46>
 800d898:	6825      	ldr	r5, [r4, #0]
 800d89a:	1961      	adds	r1, r4, r5
 800d89c:	428b      	cmp	r3, r1
 800d89e:	bf01      	itttt	eq
 800d8a0:	6819      	ldreq	r1, [r3, #0]
 800d8a2:	685b      	ldreq	r3, [r3, #4]
 800d8a4:	1949      	addeq	r1, r1, r5
 800d8a6:	6021      	streq	r1, [r4, #0]
 800d8a8:	e7ed      	b.n	800d886 <_free_r+0x22>
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	b10b      	cbz	r3, 800d8b4 <_free_r+0x50>
 800d8b0:	42a3      	cmp	r3, r4
 800d8b2:	d9fa      	bls.n	800d8aa <_free_r+0x46>
 800d8b4:	6811      	ldr	r1, [r2, #0]
 800d8b6:	1855      	adds	r5, r2, r1
 800d8b8:	42a5      	cmp	r5, r4
 800d8ba:	d10b      	bne.n	800d8d4 <_free_r+0x70>
 800d8bc:	6824      	ldr	r4, [r4, #0]
 800d8be:	4421      	add	r1, r4
 800d8c0:	1854      	adds	r4, r2, r1
 800d8c2:	42a3      	cmp	r3, r4
 800d8c4:	6011      	str	r1, [r2, #0]
 800d8c6:	d1e0      	bne.n	800d88a <_free_r+0x26>
 800d8c8:	681c      	ldr	r4, [r3, #0]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	6053      	str	r3, [r2, #4]
 800d8ce:	440c      	add	r4, r1
 800d8d0:	6014      	str	r4, [r2, #0]
 800d8d2:	e7da      	b.n	800d88a <_free_r+0x26>
 800d8d4:	d902      	bls.n	800d8dc <_free_r+0x78>
 800d8d6:	230c      	movs	r3, #12
 800d8d8:	6003      	str	r3, [r0, #0]
 800d8da:	e7d6      	b.n	800d88a <_free_r+0x26>
 800d8dc:	6825      	ldr	r5, [r4, #0]
 800d8de:	1961      	adds	r1, r4, r5
 800d8e0:	428b      	cmp	r3, r1
 800d8e2:	bf04      	itt	eq
 800d8e4:	6819      	ldreq	r1, [r3, #0]
 800d8e6:	685b      	ldreq	r3, [r3, #4]
 800d8e8:	6063      	str	r3, [r4, #4]
 800d8ea:	bf04      	itt	eq
 800d8ec:	1949      	addeq	r1, r1, r5
 800d8ee:	6021      	streq	r1, [r4, #0]
 800d8f0:	6054      	str	r4, [r2, #4]
 800d8f2:	e7ca      	b.n	800d88a <_free_r+0x26>
 800d8f4:	b003      	add	sp, #12
 800d8f6:	bd30      	pop	{r4, r5, pc}
 800d8f8:	20001d60 	.word	0x20001d60

0800d8fc <sbrk_aligned>:
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	4e0e      	ldr	r6, [pc, #56]	; (800d938 <sbrk_aligned+0x3c>)
 800d900:	460c      	mov	r4, r1
 800d902:	6831      	ldr	r1, [r6, #0]
 800d904:	4605      	mov	r5, r0
 800d906:	b911      	cbnz	r1, 800d90e <sbrk_aligned+0x12>
 800d908:	f000 fcde 	bl	800e2c8 <_sbrk_r>
 800d90c:	6030      	str	r0, [r6, #0]
 800d90e:	4621      	mov	r1, r4
 800d910:	4628      	mov	r0, r5
 800d912:	f000 fcd9 	bl	800e2c8 <_sbrk_r>
 800d916:	1c43      	adds	r3, r0, #1
 800d918:	d00a      	beq.n	800d930 <sbrk_aligned+0x34>
 800d91a:	1cc4      	adds	r4, r0, #3
 800d91c:	f024 0403 	bic.w	r4, r4, #3
 800d920:	42a0      	cmp	r0, r4
 800d922:	d007      	beq.n	800d934 <sbrk_aligned+0x38>
 800d924:	1a21      	subs	r1, r4, r0
 800d926:	4628      	mov	r0, r5
 800d928:	f000 fcce 	bl	800e2c8 <_sbrk_r>
 800d92c:	3001      	adds	r0, #1
 800d92e:	d101      	bne.n	800d934 <sbrk_aligned+0x38>
 800d930:	f04f 34ff 	mov.w	r4, #4294967295
 800d934:	4620      	mov	r0, r4
 800d936:	bd70      	pop	{r4, r5, r6, pc}
 800d938:	20001d64 	.word	0x20001d64

0800d93c <_malloc_r>:
 800d93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d940:	1ccd      	adds	r5, r1, #3
 800d942:	f025 0503 	bic.w	r5, r5, #3
 800d946:	3508      	adds	r5, #8
 800d948:	2d0c      	cmp	r5, #12
 800d94a:	bf38      	it	cc
 800d94c:	250c      	movcc	r5, #12
 800d94e:	2d00      	cmp	r5, #0
 800d950:	4607      	mov	r7, r0
 800d952:	db01      	blt.n	800d958 <_malloc_r+0x1c>
 800d954:	42a9      	cmp	r1, r5
 800d956:	d905      	bls.n	800d964 <_malloc_r+0x28>
 800d958:	230c      	movs	r3, #12
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	2600      	movs	r6, #0
 800d95e:	4630      	mov	r0, r6
 800d960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d964:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800da38 <_malloc_r+0xfc>
 800d968:	f000 f868 	bl	800da3c <__malloc_lock>
 800d96c:	f8d8 3000 	ldr.w	r3, [r8]
 800d970:	461c      	mov	r4, r3
 800d972:	bb5c      	cbnz	r4, 800d9cc <_malloc_r+0x90>
 800d974:	4629      	mov	r1, r5
 800d976:	4638      	mov	r0, r7
 800d978:	f7ff ffc0 	bl	800d8fc <sbrk_aligned>
 800d97c:	1c43      	adds	r3, r0, #1
 800d97e:	4604      	mov	r4, r0
 800d980:	d155      	bne.n	800da2e <_malloc_r+0xf2>
 800d982:	f8d8 4000 	ldr.w	r4, [r8]
 800d986:	4626      	mov	r6, r4
 800d988:	2e00      	cmp	r6, #0
 800d98a:	d145      	bne.n	800da18 <_malloc_r+0xdc>
 800d98c:	2c00      	cmp	r4, #0
 800d98e:	d048      	beq.n	800da22 <_malloc_r+0xe6>
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	4631      	mov	r1, r6
 800d994:	4638      	mov	r0, r7
 800d996:	eb04 0903 	add.w	r9, r4, r3
 800d99a:	f000 fc95 	bl	800e2c8 <_sbrk_r>
 800d99e:	4581      	cmp	r9, r0
 800d9a0:	d13f      	bne.n	800da22 <_malloc_r+0xe6>
 800d9a2:	6821      	ldr	r1, [r4, #0]
 800d9a4:	1a6d      	subs	r5, r5, r1
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	4638      	mov	r0, r7
 800d9aa:	f7ff ffa7 	bl	800d8fc <sbrk_aligned>
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	d037      	beq.n	800da22 <_malloc_r+0xe6>
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	442b      	add	r3, r5
 800d9b6:	6023      	str	r3, [r4, #0]
 800d9b8:	f8d8 3000 	ldr.w	r3, [r8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d038      	beq.n	800da32 <_malloc_r+0xf6>
 800d9c0:	685a      	ldr	r2, [r3, #4]
 800d9c2:	42a2      	cmp	r2, r4
 800d9c4:	d12b      	bne.n	800da1e <_malloc_r+0xe2>
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	605a      	str	r2, [r3, #4]
 800d9ca:	e00f      	b.n	800d9ec <_malloc_r+0xb0>
 800d9cc:	6822      	ldr	r2, [r4, #0]
 800d9ce:	1b52      	subs	r2, r2, r5
 800d9d0:	d41f      	bmi.n	800da12 <_malloc_r+0xd6>
 800d9d2:	2a0b      	cmp	r2, #11
 800d9d4:	d917      	bls.n	800da06 <_malloc_r+0xca>
 800d9d6:	1961      	adds	r1, r4, r5
 800d9d8:	42a3      	cmp	r3, r4
 800d9da:	6025      	str	r5, [r4, #0]
 800d9dc:	bf18      	it	ne
 800d9de:	6059      	strne	r1, [r3, #4]
 800d9e0:	6863      	ldr	r3, [r4, #4]
 800d9e2:	bf08      	it	eq
 800d9e4:	f8c8 1000 	streq.w	r1, [r8]
 800d9e8:	5162      	str	r2, [r4, r5]
 800d9ea:	604b      	str	r3, [r1, #4]
 800d9ec:	4638      	mov	r0, r7
 800d9ee:	f104 060b 	add.w	r6, r4, #11
 800d9f2:	f000 f829 	bl	800da48 <__malloc_unlock>
 800d9f6:	f026 0607 	bic.w	r6, r6, #7
 800d9fa:	1d23      	adds	r3, r4, #4
 800d9fc:	1af2      	subs	r2, r6, r3
 800d9fe:	d0ae      	beq.n	800d95e <_malloc_r+0x22>
 800da00:	1b9b      	subs	r3, r3, r6
 800da02:	50a3      	str	r3, [r4, r2]
 800da04:	e7ab      	b.n	800d95e <_malloc_r+0x22>
 800da06:	42a3      	cmp	r3, r4
 800da08:	6862      	ldr	r2, [r4, #4]
 800da0a:	d1dd      	bne.n	800d9c8 <_malloc_r+0x8c>
 800da0c:	f8c8 2000 	str.w	r2, [r8]
 800da10:	e7ec      	b.n	800d9ec <_malloc_r+0xb0>
 800da12:	4623      	mov	r3, r4
 800da14:	6864      	ldr	r4, [r4, #4]
 800da16:	e7ac      	b.n	800d972 <_malloc_r+0x36>
 800da18:	4634      	mov	r4, r6
 800da1a:	6876      	ldr	r6, [r6, #4]
 800da1c:	e7b4      	b.n	800d988 <_malloc_r+0x4c>
 800da1e:	4613      	mov	r3, r2
 800da20:	e7cc      	b.n	800d9bc <_malloc_r+0x80>
 800da22:	230c      	movs	r3, #12
 800da24:	603b      	str	r3, [r7, #0]
 800da26:	4638      	mov	r0, r7
 800da28:	f000 f80e 	bl	800da48 <__malloc_unlock>
 800da2c:	e797      	b.n	800d95e <_malloc_r+0x22>
 800da2e:	6025      	str	r5, [r4, #0]
 800da30:	e7dc      	b.n	800d9ec <_malloc_r+0xb0>
 800da32:	605b      	str	r3, [r3, #4]
 800da34:	deff      	udf	#255	; 0xff
 800da36:	bf00      	nop
 800da38:	20001d60 	.word	0x20001d60

0800da3c <__malloc_lock>:
 800da3c:	4801      	ldr	r0, [pc, #4]	; (800da44 <__malloc_lock+0x8>)
 800da3e:	f7ff bf01 	b.w	800d844 <__retarget_lock_acquire_recursive>
 800da42:	bf00      	nop
 800da44:	20001d5c 	.word	0x20001d5c

0800da48 <__malloc_unlock>:
 800da48:	4801      	ldr	r0, [pc, #4]	; (800da50 <__malloc_unlock+0x8>)
 800da4a:	f7ff befc 	b.w	800d846 <__retarget_lock_release_recursive>
 800da4e:	bf00      	nop
 800da50:	20001d5c 	.word	0x20001d5c

0800da54 <__sfputc_r>:
 800da54:	6893      	ldr	r3, [r2, #8]
 800da56:	3b01      	subs	r3, #1
 800da58:	2b00      	cmp	r3, #0
 800da5a:	b410      	push	{r4}
 800da5c:	6093      	str	r3, [r2, #8]
 800da5e:	da08      	bge.n	800da72 <__sfputc_r+0x1e>
 800da60:	6994      	ldr	r4, [r2, #24]
 800da62:	42a3      	cmp	r3, r4
 800da64:	db01      	blt.n	800da6a <__sfputc_r+0x16>
 800da66:	290a      	cmp	r1, #10
 800da68:	d103      	bne.n	800da72 <__sfputc_r+0x1e>
 800da6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da6e:	f7ff bddc 	b.w	800d62a <__swbuf_r>
 800da72:	6813      	ldr	r3, [r2, #0]
 800da74:	1c58      	adds	r0, r3, #1
 800da76:	6010      	str	r0, [r2, #0]
 800da78:	7019      	strb	r1, [r3, #0]
 800da7a:	4608      	mov	r0, r1
 800da7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da80:	4770      	bx	lr

0800da82 <__sfputs_r>:
 800da82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da84:	4606      	mov	r6, r0
 800da86:	460f      	mov	r7, r1
 800da88:	4614      	mov	r4, r2
 800da8a:	18d5      	adds	r5, r2, r3
 800da8c:	42ac      	cmp	r4, r5
 800da8e:	d101      	bne.n	800da94 <__sfputs_r+0x12>
 800da90:	2000      	movs	r0, #0
 800da92:	e007      	b.n	800daa4 <__sfputs_r+0x22>
 800da94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da98:	463a      	mov	r2, r7
 800da9a:	4630      	mov	r0, r6
 800da9c:	f7ff ffda 	bl	800da54 <__sfputc_r>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	d1f3      	bne.n	800da8c <__sfputs_r+0xa>
 800daa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800daa8 <_vfiprintf_r>:
 800daa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daac:	460d      	mov	r5, r1
 800daae:	b09d      	sub	sp, #116	; 0x74
 800dab0:	4614      	mov	r4, r2
 800dab2:	4698      	mov	r8, r3
 800dab4:	4606      	mov	r6, r0
 800dab6:	b118      	cbz	r0, 800dac0 <_vfiprintf_r+0x18>
 800dab8:	6a03      	ldr	r3, [r0, #32]
 800daba:	b90b      	cbnz	r3, 800dac0 <_vfiprintf_r+0x18>
 800dabc:	f7ff fcc6 	bl	800d44c <__sinit>
 800dac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dac2:	07d9      	lsls	r1, r3, #31
 800dac4:	d405      	bmi.n	800dad2 <_vfiprintf_r+0x2a>
 800dac6:	89ab      	ldrh	r3, [r5, #12]
 800dac8:	059a      	lsls	r2, r3, #22
 800daca:	d402      	bmi.n	800dad2 <_vfiprintf_r+0x2a>
 800dacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dace:	f7ff feb9 	bl	800d844 <__retarget_lock_acquire_recursive>
 800dad2:	89ab      	ldrh	r3, [r5, #12]
 800dad4:	071b      	lsls	r3, r3, #28
 800dad6:	d501      	bpl.n	800dadc <_vfiprintf_r+0x34>
 800dad8:	692b      	ldr	r3, [r5, #16]
 800dada:	b99b      	cbnz	r3, 800db04 <_vfiprintf_r+0x5c>
 800dadc:	4629      	mov	r1, r5
 800dade:	4630      	mov	r0, r6
 800dae0:	f7ff fde0 	bl	800d6a4 <__swsetup_r>
 800dae4:	b170      	cbz	r0, 800db04 <_vfiprintf_r+0x5c>
 800dae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dae8:	07dc      	lsls	r4, r3, #31
 800daea:	d504      	bpl.n	800daf6 <_vfiprintf_r+0x4e>
 800daec:	f04f 30ff 	mov.w	r0, #4294967295
 800daf0:	b01d      	add	sp, #116	; 0x74
 800daf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf6:	89ab      	ldrh	r3, [r5, #12]
 800daf8:	0598      	lsls	r0, r3, #22
 800dafa:	d4f7      	bmi.n	800daec <_vfiprintf_r+0x44>
 800dafc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dafe:	f7ff fea2 	bl	800d846 <__retarget_lock_release_recursive>
 800db02:	e7f3      	b.n	800daec <_vfiprintf_r+0x44>
 800db04:	2300      	movs	r3, #0
 800db06:	9309      	str	r3, [sp, #36]	; 0x24
 800db08:	2320      	movs	r3, #32
 800db0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800db12:	2330      	movs	r3, #48	; 0x30
 800db14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dcc8 <_vfiprintf_r+0x220>
 800db18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db1c:	f04f 0901 	mov.w	r9, #1
 800db20:	4623      	mov	r3, r4
 800db22:	469a      	mov	sl, r3
 800db24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db28:	b10a      	cbz	r2, 800db2e <_vfiprintf_r+0x86>
 800db2a:	2a25      	cmp	r2, #37	; 0x25
 800db2c:	d1f9      	bne.n	800db22 <_vfiprintf_r+0x7a>
 800db2e:	ebba 0b04 	subs.w	fp, sl, r4
 800db32:	d00b      	beq.n	800db4c <_vfiprintf_r+0xa4>
 800db34:	465b      	mov	r3, fp
 800db36:	4622      	mov	r2, r4
 800db38:	4629      	mov	r1, r5
 800db3a:	4630      	mov	r0, r6
 800db3c:	f7ff ffa1 	bl	800da82 <__sfputs_r>
 800db40:	3001      	adds	r0, #1
 800db42:	f000 80a9 	beq.w	800dc98 <_vfiprintf_r+0x1f0>
 800db46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db48:	445a      	add	r2, fp
 800db4a:	9209      	str	r2, [sp, #36]	; 0x24
 800db4c:	f89a 3000 	ldrb.w	r3, [sl]
 800db50:	2b00      	cmp	r3, #0
 800db52:	f000 80a1 	beq.w	800dc98 <_vfiprintf_r+0x1f0>
 800db56:	2300      	movs	r3, #0
 800db58:	f04f 32ff 	mov.w	r2, #4294967295
 800db5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db60:	f10a 0a01 	add.w	sl, sl, #1
 800db64:	9304      	str	r3, [sp, #16]
 800db66:	9307      	str	r3, [sp, #28]
 800db68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db6c:	931a      	str	r3, [sp, #104]	; 0x68
 800db6e:	4654      	mov	r4, sl
 800db70:	2205      	movs	r2, #5
 800db72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db76:	4854      	ldr	r0, [pc, #336]	; (800dcc8 <_vfiprintf_r+0x220>)
 800db78:	f7f2 fb0a 	bl	8000190 <memchr>
 800db7c:	9a04      	ldr	r2, [sp, #16]
 800db7e:	b9d8      	cbnz	r0, 800dbb8 <_vfiprintf_r+0x110>
 800db80:	06d1      	lsls	r1, r2, #27
 800db82:	bf44      	itt	mi
 800db84:	2320      	movmi	r3, #32
 800db86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db8a:	0713      	lsls	r3, r2, #28
 800db8c:	bf44      	itt	mi
 800db8e:	232b      	movmi	r3, #43	; 0x2b
 800db90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db94:	f89a 3000 	ldrb.w	r3, [sl]
 800db98:	2b2a      	cmp	r3, #42	; 0x2a
 800db9a:	d015      	beq.n	800dbc8 <_vfiprintf_r+0x120>
 800db9c:	9a07      	ldr	r2, [sp, #28]
 800db9e:	4654      	mov	r4, sl
 800dba0:	2000      	movs	r0, #0
 800dba2:	f04f 0c0a 	mov.w	ip, #10
 800dba6:	4621      	mov	r1, r4
 800dba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbac:	3b30      	subs	r3, #48	; 0x30
 800dbae:	2b09      	cmp	r3, #9
 800dbb0:	d94d      	bls.n	800dc4e <_vfiprintf_r+0x1a6>
 800dbb2:	b1b0      	cbz	r0, 800dbe2 <_vfiprintf_r+0x13a>
 800dbb4:	9207      	str	r2, [sp, #28]
 800dbb6:	e014      	b.n	800dbe2 <_vfiprintf_r+0x13a>
 800dbb8:	eba0 0308 	sub.w	r3, r0, r8
 800dbbc:	fa09 f303 	lsl.w	r3, r9, r3
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	46a2      	mov	sl, r4
 800dbc6:	e7d2      	b.n	800db6e <_vfiprintf_r+0xc6>
 800dbc8:	9b03      	ldr	r3, [sp, #12]
 800dbca:	1d19      	adds	r1, r3, #4
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	9103      	str	r1, [sp, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	bfbb      	ittet	lt
 800dbd4:	425b      	neglt	r3, r3
 800dbd6:	f042 0202 	orrlt.w	r2, r2, #2
 800dbda:	9307      	strge	r3, [sp, #28]
 800dbdc:	9307      	strlt	r3, [sp, #28]
 800dbde:	bfb8      	it	lt
 800dbe0:	9204      	strlt	r2, [sp, #16]
 800dbe2:	7823      	ldrb	r3, [r4, #0]
 800dbe4:	2b2e      	cmp	r3, #46	; 0x2e
 800dbe6:	d10c      	bne.n	800dc02 <_vfiprintf_r+0x15a>
 800dbe8:	7863      	ldrb	r3, [r4, #1]
 800dbea:	2b2a      	cmp	r3, #42	; 0x2a
 800dbec:	d134      	bne.n	800dc58 <_vfiprintf_r+0x1b0>
 800dbee:	9b03      	ldr	r3, [sp, #12]
 800dbf0:	1d1a      	adds	r2, r3, #4
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	9203      	str	r2, [sp, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	bfb8      	it	lt
 800dbfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbfe:	3402      	adds	r4, #2
 800dc00:	9305      	str	r3, [sp, #20]
 800dc02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dcd8 <_vfiprintf_r+0x230>
 800dc06:	7821      	ldrb	r1, [r4, #0]
 800dc08:	2203      	movs	r2, #3
 800dc0a:	4650      	mov	r0, sl
 800dc0c:	f7f2 fac0 	bl	8000190 <memchr>
 800dc10:	b138      	cbz	r0, 800dc22 <_vfiprintf_r+0x17a>
 800dc12:	9b04      	ldr	r3, [sp, #16]
 800dc14:	eba0 000a 	sub.w	r0, r0, sl
 800dc18:	2240      	movs	r2, #64	; 0x40
 800dc1a:	4082      	lsls	r2, r0
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	3401      	adds	r4, #1
 800dc20:	9304      	str	r3, [sp, #16]
 800dc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc26:	4829      	ldr	r0, [pc, #164]	; (800dccc <_vfiprintf_r+0x224>)
 800dc28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc2c:	2206      	movs	r2, #6
 800dc2e:	f7f2 faaf 	bl	8000190 <memchr>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d03f      	beq.n	800dcb6 <_vfiprintf_r+0x20e>
 800dc36:	4b26      	ldr	r3, [pc, #152]	; (800dcd0 <_vfiprintf_r+0x228>)
 800dc38:	bb1b      	cbnz	r3, 800dc82 <_vfiprintf_r+0x1da>
 800dc3a:	9b03      	ldr	r3, [sp, #12]
 800dc3c:	3307      	adds	r3, #7
 800dc3e:	f023 0307 	bic.w	r3, r3, #7
 800dc42:	3308      	adds	r3, #8
 800dc44:	9303      	str	r3, [sp, #12]
 800dc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc48:	443b      	add	r3, r7
 800dc4a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc4c:	e768      	b.n	800db20 <_vfiprintf_r+0x78>
 800dc4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc52:	460c      	mov	r4, r1
 800dc54:	2001      	movs	r0, #1
 800dc56:	e7a6      	b.n	800dba6 <_vfiprintf_r+0xfe>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	3401      	adds	r4, #1
 800dc5c:	9305      	str	r3, [sp, #20]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	f04f 0c0a 	mov.w	ip, #10
 800dc64:	4620      	mov	r0, r4
 800dc66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc6a:	3a30      	subs	r2, #48	; 0x30
 800dc6c:	2a09      	cmp	r2, #9
 800dc6e:	d903      	bls.n	800dc78 <_vfiprintf_r+0x1d0>
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d0c6      	beq.n	800dc02 <_vfiprintf_r+0x15a>
 800dc74:	9105      	str	r1, [sp, #20]
 800dc76:	e7c4      	b.n	800dc02 <_vfiprintf_r+0x15a>
 800dc78:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e7f0      	b.n	800dc64 <_vfiprintf_r+0x1bc>
 800dc82:	ab03      	add	r3, sp, #12
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	462a      	mov	r2, r5
 800dc88:	4b12      	ldr	r3, [pc, #72]	; (800dcd4 <_vfiprintf_r+0x22c>)
 800dc8a:	a904      	add	r1, sp, #16
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	f3af 8000 	nop.w
 800dc92:	4607      	mov	r7, r0
 800dc94:	1c78      	adds	r0, r7, #1
 800dc96:	d1d6      	bne.n	800dc46 <_vfiprintf_r+0x19e>
 800dc98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc9a:	07d9      	lsls	r1, r3, #31
 800dc9c:	d405      	bmi.n	800dcaa <_vfiprintf_r+0x202>
 800dc9e:	89ab      	ldrh	r3, [r5, #12]
 800dca0:	059a      	lsls	r2, r3, #22
 800dca2:	d402      	bmi.n	800dcaa <_vfiprintf_r+0x202>
 800dca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dca6:	f7ff fdce 	bl	800d846 <__retarget_lock_release_recursive>
 800dcaa:	89ab      	ldrh	r3, [r5, #12]
 800dcac:	065b      	lsls	r3, r3, #25
 800dcae:	f53f af1d 	bmi.w	800daec <_vfiprintf_r+0x44>
 800dcb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcb4:	e71c      	b.n	800daf0 <_vfiprintf_r+0x48>
 800dcb6:	ab03      	add	r3, sp, #12
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	462a      	mov	r2, r5
 800dcbc:	4b05      	ldr	r3, [pc, #20]	; (800dcd4 <_vfiprintf_r+0x22c>)
 800dcbe:	a904      	add	r1, sp, #16
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f000 f879 	bl	800ddb8 <_printf_i>
 800dcc6:	e7e4      	b.n	800dc92 <_vfiprintf_r+0x1ea>
 800dcc8:	0800f784 	.word	0x0800f784
 800dccc:	0800f78e 	.word	0x0800f78e
 800dcd0:	00000000 	.word	0x00000000
 800dcd4:	0800da83 	.word	0x0800da83
 800dcd8:	0800f78a 	.word	0x0800f78a

0800dcdc <_printf_common>:
 800dcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dce0:	4616      	mov	r6, r2
 800dce2:	4699      	mov	r9, r3
 800dce4:	688a      	ldr	r2, [r1, #8]
 800dce6:	690b      	ldr	r3, [r1, #16]
 800dce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcec:	4293      	cmp	r3, r2
 800dcee:	bfb8      	it	lt
 800dcf0:	4613      	movlt	r3, r2
 800dcf2:	6033      	str	r3, [r6, #0]
 800dcf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcf8:	4607      	mov	r7, r0
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	b10a      	cbz	r2, 800dd02 <_printf_common+0x26>
 800dcfe:	3301      	adds	r3, #1
 800dd00:	6033      	str	r3, [r6, #0]
 800dd02:	6823      	ldr	r3, [r4, #0]
 800dd04:	0699      	lsls	r1, r3, #26
 800dd06:	bf42      	ittt	mi
 800dd08:	6833      	ldrmi	r3, [r6, #0]
 800dd0a:	3302      	addmi	r3, #2
 800dd0c:	6033      	strmi	r3, [r6, #0]
 800dd0e:	6825      	ldr	r5, [r4, #0]
 800dd10:	f015 0506 	ands.w	r5, r5, #6
 800dd14:	d106      	bne.n	800dd24 <_printf_common+0x48>
 800dd16:	f104 0a19 	add.w	sl, r4, #25
 800dd1a:	68e3      	ldr	r3, [r4, #12]
 800dd1c:	6832      	ldr	r2, [r6, #0]
 800dd1e:	1a9b      	subs	r3, r3, r2
 800dd20:	42ab      	cmp	r3, r5
 800dd22:	dc26      	bgt.n	800dd72 <_printf_common+0x96>
 800dd24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd28:	1e13      	subs	r3, r2, #0
 800dd2a:	6822      	ldr	r2, [r4, #0]
 800dd2c:	bf18      	it	ne
 800dd2e:	2301      	movne	r3, #1
 800dd30:	0692      	lsls	r2, r2, #26
 800dd32:	d42b      	bmi.n	800dd8c <_printf_common+0xb0>
 800dd34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd38:	4649      	mov	r1, r9
 800dd3a:	4638      	mov	r0, r7
 800dd3c:	47c0      	blx	r8
 800dd3e:	3001      	adds	r0, #1
 800dd40:	d01e      	beq.n	800dd80 <_printf_common+0xa4>
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	6922      	ldr	r2, [r4, #16]
 800dd46:	f003 0306 	and.w	r3, r3, #6
 800dd4a:	2b04      	cmp	r3, #4
 800dd4c:	bf02      	ittt	eq
 800dd4e:	68e5      	ldreq	r5, [r4, #12]
 800dd50:	6833      	ldreq	r3, [r6, #0]
 800dd52:	1aed      	subeq	r5, r5, r3
 800dd54:	68a3      	ldr	r3, [r4, #8]
 800dd56:	bf0c      	ite	eq
 800dd58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd5c:	2500      	movne	r5, #0
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	bfc4      	itt	gt
 800dd62:	1a9b      	subgt	r3, r3, r2
 800dd64:	18ed      	addgt	r5, r5, r3
 800dd66:	2600      	movs	r6, #0
 800dd68:	341a      	adds	r4, #26
 800dd6a:	42b5      	cmp	r5, r6
 800dd6c:	d11a      	bne.n	800dda4 <_printf_common+0xc8>
 800dd6e:	2000      	movs	r0, #0
 800dd70:	e008      	b.n	800dd84 <_printf_common+0xa8>
 800dd72:	2301      	movs	r3, #1
 800dd74:	4652      	mov	r2, sl
 800dd76:	4649      	mov	r1, r9
 800dd78:	4638      	mov	r0, r7
 800dd7a:	47c0      	blx	r8
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	d103      	bne.n	800dd88 <_printf_common+0xac>
 800dd80:	f04f 30ff 	mov.w	r0, #4294967295
 800dd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd88:	3501      	adds	r5, #1
 800dd8a:	e7c6      	b.n	800dd1a <_printf_common+0x3e>
 800dd8c:	18e1      	adds	r1, r4, r3
 800dd8e:	1c5a      	adds	r2, r3, #1
 800dd90:	2030      	movs	r0, #48	; 0x30
 800dd92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd96:	4422      	add	r2, r4
 800dd98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dda0:	3302      	adds	r3, #2
 800dda2:	e7c7      	b.n	800dd34 <_printf_common+0x58>
 800dda4:	2301      	movs	r3, #1
 800dda6:	4622      	mov	r2, r4
 800dda8:	4649      	mov	r1, r9
 800ddaa:	4638      	mov	r0, r7
 800ddac:	47c0      	blx	r8
 800ddae:	3001      	adds	r0, #1
 800ddb0:	d0e6      	beq.n	800dd80 <_printf_common+0xa4>
 800ddb2:	3601      	adds	r6, #1
 800ddb4:	e7d9      	b.n	800dd6a <_printf_common+0x8e>
	...

0800ddb8 <_printf_i>:
 800ddb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddbc:	7e0f      	ldrb	r7, [r1, #24]
 800ddbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ddc0:	2f78      	cmp	r7, #120	; 0x78
 800ddc2:	4691      	mov	r9, r2
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	469a      	mov	sl, r3
 800ddca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ddce:	d807      	bhi.n	800dde0 <_printf_i+0x28>
 800ddd0:	2f62      	cmp	r7, #98	; 0x62
 800ddd2:	d80a      	bhi.n	800ddea <_printf_i+0x32>
 800ddd4:	2f00      	cmp	r7, #0
 800ddd6:	f000 80d4 	beq.w	800df82 <_printf_i+0x1ca>
 800ddda:	2f58      	cmp	r7, #88	; 0x58
 800dddc:	f000 80c0 	beq.w	800df60 <_printf_i+0x1a8>
 800dde0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dde4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dde8:	e03a      	b.n	800de60 <_printf_i+0xa8>
 800ddea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ddee:	2b15      	cmp	r3, #21
 800ddf0:	d8f6      	bhi.n	800dde0 <_printf_i+0x28>
 800ddf2:	a101      	add	r1, pc, #4	; (adr r1, 800ddf8 <_printf_i+0x40>)
 800ddf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ddf8:	0800de51 	.word	0x0800de51
 800ddfc:	0800de65 	.word	0x0800de65
 800de00:	0800dde1 	.word	0x0800dde1
 800de04:	0800dde1 	.word	0x0800dde1
 800de08:	0800dde1 	.word	0x0800dde1
 800de0c:	0800dde1 	.word	0x0800dde1
 800de10:	0800de65 	.word	0x0800de65
 800de14:	0800dde1 	.word	0x0800dde1
 800de18:	0800dde1 	.word	0x0800dde1
 800de1c:	0800dde1 	.word	0x0800dde1
 800de20:	0800dde1 	.word	0x0800dde1
 800de24:	0800df69 	.word	0x0800df69
 800de28:	0800de91 	.word	0x0800de91
 800de2c:	0800df23 	.word	0x0800df23
 800de30:	0800dde1 	.word	0x0800dde1
 800de34:	0800dde1 	.word	0x0800dde1
 800de38:	0800df8b 	.word	0x0800df8b
 800de3c:	0800dde1 	.word	0x0800dde1
 800de40:	0800de91 	.word	0x0800de91
 800de44:	0800dde1 	.word	0x0800dde1
 800de48:	0800dde1 	.word	0x0800dde1
 800de4c:	0800df2b 	.word	0x0800df2b
 800de50:	682b      	ldr	r3, [r5, #0]
 800de52:	1d1a      	adds	r2, r3, #4
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	602a      	str	r2, [r5, #0]
 800de58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de60:	2301      	movs	r3, #1
 800de62:	e09f      	b.n	800dfa4 <_printf_i+0x1ec>
 800de64:	6820      	ldr	r0, [r4, #0]
 800de66:	682b      	ldr	r3, [r5, #0]
 800de68:	0607      	lsls	r7, r0, #24
 800de6a:	f103 0104 	add.w	r1, r3, #4
 800de6e:	6029      	str	r1, [r5, #0]
 800de70:	d501      	bpl.n	800de76 <_printf_i+0xbe>
 800de72:	681e      	ldr	r6, [r3, #0]
 800de74:	e003      	b.n	800de7e <_printf_i+0xc6>
 800de76:	0646      	lsls	r6, r0, #25
 800de78:	d5fb      	bpl.n	800de72 <_printf_i+0xba>
 800de7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de7e:	2e00      	cmp	r6, #0
 800de80:	da03      	bge.n	800de8a <_printf_i+0xd2>
 800de82:	232d      	movs	r3, #45	; 0x2d
 800de84:	4276      	negs	r6, r6
 800de86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de8a:	485a      	ldr	r0, [pc, #360]	; (800dff4 <_printf_i+0x23c>)
 800de8c:	230a      	movs	r3, #10
 800de8e:	e012      	b.n	800deb6 <_printf_i+0xfe>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	6820      	ldr	r0, [r4, #0]
 800de94:	1d19      	adds	r1, r3, #4
 800de96:	6029      	str	r1, [r5, #0]
 800de98:	0605      	lsls	r5, r0, #24
 800de9a:	d501      	bpl.n	800dea0 <_printf_i+0xe8>
 800de9c:	681e      	ldr	r6, [r3, #0]
 800de9e:	e002      	b.n	800dea6 <_printf_i+0xee>
 800dea0:	0641      	lsls	r1, r0, #25
 800dea2:	d5fb      	bpl.n	800de9c <_printf_i+0xe4>
 800dea4:	881e      	ldrh	r6, [r3, #0]
 800dea6:	4853      	ldr	r0, [pc, #332]	; (800dff4 <_printf_i+0x23c>)
 800dea8:	2f6f      	cmp	r7, #111	; 0x6f
 800deaa:	bf0c      	ite	eq
 800deac:	2308      	moveq	r3, #8
 800deae:	230a      	movne	r3, #10
 800deb0:	2100      	movs	r1, #0
 800deb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800deb6:	6865      	ldr	r5, [r4, #4]
 800deb8:	60a5      	str	r5, [r4, #8]
 800deba:	2d00      	cmp	r5, #0
 800debc:	bfa2      	ittt	ge
 800debe:	6821      	ldrge	r1, [r4, #0]
 800dec0:	f021 0104 	bicge.w	r1, r1, #4
 800dec4:	6021      	strge	r1, [r4, #0]
 800dec6:	b90e      	cbnz	r6, 800decc <_printf_i+0x114>
 800dec8:	2d00      	cmp	r5, #0
 800deca:	d04b      	beq.n	800df64 <_printf_i+0x1ac>
 800decc:	4615      	mov	r5, r2
 800dece:	fbb6 f1f3 	udiv	r1, r6, r3
 800ded2:	fb03 6711 	mls	r7, r3, r1, r6
 800ded6:	5dc7      	ldrb	r7, [r0, r7]
 800ded8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dedc:	4637      	mov	r7, r6
 800dede:	42bb      	cmp	r3, r7
 800dee0:	460e      	mov	r6, r1
 800dee2:	d9f4      	bls.n	800dece <_printf_i+0x116>
 800dee4:	2b08      	cmp	r3, #8
 800dee6:	d10b      	bne.n	800df00 <_printf_i+0x148>
 800dee8:	6823      	ldr	r3, [r4, #0]
 800deea:	07de      	lsls	r6, r3, #31
 800deec:	d508      	bpl.n	800df00 <_printf_i+0x148>
 800deee:	6923      	ldr	r3, [r4, #16]
 800def0:	6861      	ldr	r1, [r4, #4]
 800def2:	4299      	cmp	r1, r3
 800def4:	bfde      	ittt	le
 800def6:	2330      	movle	r3, #48	; 0x30
 800def8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800defc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df00:	1b52      	subs	r2, r2, r5
 800df02:	6122      	str	r2, [r4, #16]
 800df04:	f8cd a000 	str.w	sl, [sp]
 800df08:	464b      	mov	r3, r9
 800df0a:	aa03      	add	r2, sp, #12
 800df0c:	4621      	mov	r1, r4
 800df0e:	4640      	mov	r0, r8
 800df10:	f7ff fee4 	bl	800dcdc <_printf_common>
 800df14:	3001      	adds	r0, #1
 800df16:	d14a      	bne.n	800dfae <_printf_i+0x1f6>
 800df18:	f04f 30ff 	mov.w	r0, #4294967295
 800df1c:	b004      	add	sp, #16
 800df1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df22:	6823      	ldr	r3, [r4, #0]
 800df24:	f043 0320 	orr.w	r3, r3, #32
 800df28:	6023      	str	r3, [r4, #0]
 800df2a:	4833      	ldr	r0, [pc, #204]	; (800dff8 <_printf_i+0x240>)
 800df2c:	2778      	movs	r7, #120	; 0x78
 800df2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	6829      	ldr	r1, [r5, #0]
 800df36:	061f      	lsls	r7, r3, #24
 800df38:	f851 6b04 	ldr.w	r6, [r1], #4
 800df3c:	d402      	bmi.n	800df44 <_printf_i+0x18c>
 800df3e:	065f      	lsls	r7, r3, #25
 800df40:	bf48      	it	mi
 800df42:	b2b6      	uxthmi	r6, r6
 800df44:	07df      	lsls	r7, r3, #31
 800df46:	bf48      	it	mi
 800df48:	f043 0320 	orrmi.w	r3, r3, #32
 800df4c:	6029      	str	r1, [r5, #0]
 800df4e:	bf48      	it	mi
 800df50:	6023      	strmi	r3, [r4, #0]
 800df52:	b91e      	cbnz	r6, 800df5c <_printf_i+0x1a4>
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	f023 0320 	bic.w	r3, r3, #32
 800df5a:	6023      	str	r3, [r4, #0]
 800df5c:	2310      	movs	r3, #16
 800df5e:	e7a7      	b.n	800deb0 <_printf_i+0xf8>
 800df60:	4824      	ldr	r0, [pc, #144]	; (800dff4 <_printf_i+0x23c>)
 800df62:	e7e4      	b.n	800df2e <_printf_i+0x176>
 800df64:	4615      	mov	r5, r2
 800df66:	e7bd      	b.n	800dee4 <_printf_i+0x12c>
 800df68:	682b      	ldr	r3, [r5, #0]
 800df6a:	6826      	ldr	r6, [r4, #0]
 800df6c:	6961      	ldr	r1, [r4, #20]
 800df6e:	1d18      	adds	r0, r3, #4
 800df70:	6028      	str	r0, [r5, #0]
 800df72:	0635      	lsls	r5, r6, #24
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	d501      	bpl.n	800df7c <_printf_i+0x1c4>
 800df78:	6019      	str	r1, [r3, #0]
 800df7a:	e002      	b.n	800df82 <_printf_i+0x1ca>
 800df7c:	0670      	lsls	r0, r6, #25
 800df7e:	d5fb      	bpl.n	800df78 <_printf_i+0x1c0>
 800df80:	8019      	strh	r1, [r3, #0]
 800df82:	2300      	movs	r3, #0
 800df84:	6123      	str	r3, [r4, #16]
 800df86:	4615      	mov	r5, r2
 800df88:	e7bc      	b.n	800df04 <_printf_i+0x14c>
 800df8a:	682b      	ldr	r3, [r5, #0]
 800df8c:	1d1a      	adds	r2, r3, #4
 800df8e:	602a      	str	r2, [r5, #0]
 800df90:	681d      	ldr	r5, [r3, #0]
 800df92:	6862      	ldr	r2, [r4, #4]
 800df94:	2100      	movs	r1, #0
 800df96:	4628      	mov	r0, r5
 800df98:	f7f2 f8fa 	bl	8000190 <memchr>
 800df9c:	b108      	cbz	r0, 800dfa2 <_printf_i+0x1ea>
 800df9e:	1b40      	subs	r0, r0, r5
 800dfa0:	6060      	str	r0, [r4, #4]
 800dfa2:	6863      	ldr	r3, [r4, #4]
 800dfa4:	6123      	str	r3, [r4, #16]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfac:	e7aa      	b.n	800df04 <_printf_i+0x14c>
 800dfae:	6923      	ldr	r3, [r4, #16]
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	4649      	mov	r1, r9
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	47d0      	blx	sl
 800dfb8:	3001      	adds	r0, #1
 800dfba:	d0ad      	beq.n	800df18 <_printf_i+0x160>
 800dfbc:	6823      	ldr	r3, [r4, #0]
 800dfbe:	079b      	lsls	r3, r3, #30
 800dfc0:	d413      	bmi.n	800dfea <_printf_i+0x232>
 800dfc2:	68e0      	ldr	r0, [r4, #12]
 800dfc4:	9b03      	ldr	r3, [sp, #12]
 800dfc6:	4298      	cmp	r0, r3
 800dfc8:	bfb8      	it	lt
 800dfca:	4618      	movlt	r0, r3
 800dfcc:	e7a6      	b.n	800df1c <_printf_i+0x164>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	4632      	mov	r2, r6
 800dfd2:	4649      	mov	r1, r9
 800dfd4:	4640      	mov	r0, r8
 800dfd6:	47d0      	blx	sl
 800dfd8:	3001      	adds	r0, #1
 800dfda:	d09d      	beq.n	800df18 <_printf_i+0x160>
 800dfdc:	3501      	adds	r5, #1
 800dfde:	68e3      	ldr	r3, [r4, #12]
 800dfe0:	9903      	ldr	r1, [sp, #12]
 800dfe2:	1a5b      	subs	r3, r3, r1
 800dfe4:	42ab      	cmp	r3, r5
 800dfe6:	dcf2      	bgt.n	800dfce <_printf_i+0x216>
 800dfe8:	e7eb      	b.n	800dfc2 <_printf_i+0x20a>
 800dfea:	2500      	movs	r5, #0
 800dfec:	f104 0619 	add.w	r6, r4, #25
 800dff0:	e7f5      	b.n	800dfde <_printf_i+0x226>
 800dff2:	bf00      	nop
 800dff4:	0800f795 	.word	0x0800f795
 800dff8:	0800f7a6 	.word	0x0800f7a6

0800dffc <__sflush_r>:
 800dffc:	898a      	ldrh	r2, [r1, #12]
 800dffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e002:	4605      	mov	r5, r0
 800e004:	0710      	lsls	r0, r2, #28
 800e006:	460c      	mov	r4, r1
 800e008:	d458      	bmi.n	800e0bc <__sflush_r+0xc0>
 800e00a:	684b      	ldr	r3, [r1, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	dc05      	bgt.n	800e01c <__sflush_r+0x20>
 800e010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e012:	2b00      	cmp	r3, #0
 800e014:	dc02      	bgt.n	800e01c <__sflush_r+0x20>
 800e016:	2000      	movs	r0, #0
 800e018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e01c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e01e:	2e00      	cmp	r6, #0
 800e020:	d0f9      	beq.n	800e016 <__sflush_r+0x1a>
 800e022:	2300      	movs	r3, #0
 800e024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e028:	682f      	ldr	r7, [r5, #0]
 800e02a:	6a21      	ldr	r1, [r4, #32]
 800e02c:	602b      	str	r3, [r5, #0]
 800e02e:	d032      	beq.n	800e096 <__sflush_r+0x9a>
 800e030:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e032:	89a3      	ldrh	r3, [r4, #12]
 800e034:	075a      	lsls	r2, r3, #29
 800e036:	d505      	bpl.n	800e044 <__sflush_r+0x48>
 800e038:	6863      	ldr	r3, [r4, #4]
 800e03a:	1ac0      	subs	r0, r0, r3
 800e03c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e03e:	b10b      	cbz	r3, 800e044 <__sflush_r+0x48>
 800e040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e042:	1ac0      	subs	r0, r0, r3
 800e044:	2300      	movs	r3, #0
 800e046:	4602      	mov	r2, r0
 800e048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e04a:	6a21      	ldr	r1, [r4, #32]
 800e04c:	4628      	mov	r0, r5
 800e04e:	47b0      	blx	r6
 800e050:	1c43      	adds	r3, r0, #1
 800e052:	89a3      	ldrh	r3, [r4, #12]
 800e054:	d106      	bne.n	800e064 <__sflush_r+0x68>
 800e056:	6829      	ldr	r1, [r5, #0]
 800e058:	291d      	cmp	r1, #29
 800e05a:	d82b      	bhi.n	800e0b4 <__sflush_r+0xb8>
 800e05c:	4a29      	ldr	r2, [pc, #164]	; (800e104 <__sflush_r+0x108>)
 800e05e:	410a      	asrs	r2, r1
 800e060:	07d6      	lsls	r6, r2, #31
 800e062:	d427      	bmi.n	800e0b4 <__sflush_r+0xb8>
 800e064:	2200      	movs	r2, #0
 800e066:	6062      	str	r2, [r4, #4]
 800e068:	04d9      	lsls	r1, r3, #19
 800e06a:	6922      	ldr	r2, [r4, #16]
 800e06c:	6022      	str	r2, [r4, #0]
 800e06e:	d504      	bpl.n	800e07a <__sflush_r+0x7e>
 800e070:	1c42      	adds	r2, r0, #1
 800e072:	d101      	bne.n	800e078 <__sflush_r+0x7c>
 800e074:	682b      	ldr	r3, [r5, #0]
 800e076:	b903      	cbnz	r3, 800e07a <__sflush_r+0x7e>
 800e078:	6560      	str	r0, [r4, #84]	; 0x54
 800e07a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e07c:	602f      	str	r7, [r5, #0]
 800e07e:	2900      	cmp	r1, #0
 800e080:	d0c9      	beq.n	800e016 <__sflush_r+0x1a>
 800e082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e086:	4299      	cmp	r1, r3
 800e088:	d002      	beq.n	800e090 <__sflush_r+0x94>
 800e08a:	4628      	mov	r0, r5
 800e08c:	f7ff fbea 	bl	800d864 <_free_r>
 800e090:	2000      	movs	r0, #0
 800e092:	6360      	str	r0, [r4, #52]	; 0x34
 800e094:	e7c0      	b.n	800e018 <__sflush_r+0x1c>
 800e096:	2301      	movs	r3, #1
 800e098:	4628      	mov	r0, r5
 800e09a:	47b0      	blx	r6
 800e09c:	1c41      	adds	r1, r0, #1
 800e09e:	d1c8      	bne.n	800e032 <__sflush_r+0x36>
 800e0a0:	682b      	ldr	r3, [r5, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0c5      	beq.n	800e032 <__sflush_r+0x36>
 800e0a6:	2b1d      	cmp	r3, #29
 800e0a8:	d001      	beq.n	800e0ae <__sflush_r+0xb2>
 800e0aa:	2b16      	cmp	r3, #22
 800e0ac:	d101      	bne.n	800e0b2 <__sflush_r+0xb6>
 800e0ae:	602f      	str	r7, [r5, #0]
 800e0b0:	e7b1      	b.n	800e016 <__sflush_r+0x1a>
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0b8:	81a3      	strh	r3, [r4, #12]
 800e0ba:	e7ad      	b.n	800e018 <__sflush_r+0x1c>
 800e0bc:	690f      	ldr	r7, [r1, #16]
 800e0be:	2f00      	cmp	r7, #0
 800e0c0:	d0a9      	beq.n	800e016 <__sflush_r+0x1a>
 800e0c2:	0793      	lsls	r3, r2, #30
 800e0c4:	680e      	ldr	r6, [r1, #0]
 800e0c6:	bf08      	it	eq
 800e0c8:	694b      	ldreq	r3, [r1, #20]
 800e0ca:	600f      	str	r7, [r1, #0]
 800e0cc:	bf18      	it	ne
 800e0ce:	2300      	movne	r3, #0
 800e0d0:	eba6 0807 	sub.w	r8, r6, r7
 800e0d4:	608b      	str	r3, [r1, #8]
 800e0d6:	f1b8 0f00 	cmp.w	r8, #0
 800e0da:	dd9c      	ble.n	800e016 <__sflush_r+0x1a>
 800e0dc:	6a21      	ldr	r1, [r4, #32]
 800e0de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0e0:	4643      	mov	r3, r8
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	47b0      	blx	r6
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	dc06      	bgt.n	800e0fa <__sflush_r+0xfe>
 800e0ec:	89a3      	ldrh	r3, [r4, #12]
 800e0ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f2:	81a3      	strh	r3, [r4, #12]
 800e0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f8:	e78e      	b.n	800e018 <__sflush_r+0x1c>
 800e0fa:	4407      	add	r7, r0
 800e0fc:	eba8 0800 	sub.w	r8, r8, r0
 800e100:	e7e9      	b.n	800e0d6 <__sflush_r+0xda>
 800e102:	bf00      	nop
 800e104:	dfbffffe 	.word	0xdfbffffe

0800e108 <_fflush_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	690b      	ldr	r3, [r1, #16]
 800e10c:	4605      	mov	r5, r0
 800e10e:	460c      	mov	r4, r1
 800e110:	b913      	cbnz	r3, 800e118 <_fflush_r+0x10>
 800e112:	2500      	movs	r5, #0
 800e114:	4628      	mov	r0, r5
 800e116:	bd38      	pop	{r3, r4, r5, pc}
 800e118:	b118      	cbz	r0, 800e122 <_fflush_r+0x1a>
 800e11a:	6a03      	ldr	r3, [r0, #32]
 800e11c:	b90b      	cbnz	r3, 800e122 <_fflush_r+0x1a>
 800e11e:	f7ff f995 	bl	800d44c <__sinit>
 800e122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d0f3      	beq.n	800e112 <_fflush_r+0xa>
 800e12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e12c:	07d0      	lsls	r0, r2, #31
 800e12e:	d404      	bmi.n	800e13a <_fflush_r+0x32>
 800e130:	0599      	lsls	r1, r3, #22
 800e132:	d402      	bmi.n	800e13a <_fflush_r+0x32>
 800e134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e136:	f7ff fb85 	bl	800d844 <__retarget_lock_acquire_recursive>
 800e13a:	4628      	mov	r0, r5
 800e13c:	4621      	mov	r1, r4
 800e13e:	f7ff ff5d 	bl	800dffc <__sflush_r>
 800e142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e144:	07da      	lsls	r2, r3, #31
 800e146:	4605      	mov	r5, r0
 800e148:	d4e4      	bmi.n	800e114 <_fflush_r+0xc>
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	059b      	lsls	r3, r3, #22
 800e14e:	d4e1      	bmi.n	800e114 <_fflush_r+0xc>
 800e150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e152:	f7ff fb78 	bl	800d846 <__retarget_lock_release_recursive>
 800e156:	e7dd      	b.n	800e114 <_fflush_r+0xc>

0800e158 <__swhatbuf_r>:
 800e158:	b570      	push	{r4, r5, r6, lr}
 800e15a:	460c      	mov	r4, r1
 800e15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e160:	2900      	cmp	r1, #0
 800e162:	b096      	sub	sp, #88	; 0x58
 800e164:	4615      	mov	r5, r2
 800e166:	461e      	mov	r6, r3
 800e168:	da0d      	bge.n	800e186 <__swhatbuf_r+0x2e>
 800e16a:	89a3      	ldrh	r3, [r4, #12]
 800e16c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e170:	f04f 0100 	mov.w	r1, #0
 800e174:	bf0c      	ite	eq
 800e176:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e17a:	2340      	movne	r3, #64	; 0x40
 800e17c:	2000      	movs	r0, #0
 800e17e:	6031      	str	r1, [r6, #0]
 800e180:	602b      	str	r3, [r5, #0]
 800e182:	b016      	add	sp, #88	; 0x58
 800e184:	bd70      	pop	{r4, r5, r6, pc}
 800e186:	466a      	mov	r2, sp
 800e188:	f000 f87c 	bl	800e284 <_fstat_r>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	dbec      	blt.n	800e16a <__swhatbuf_r+0x12>
 800e190:	9901      	ldr	r1, [sp, #4]
 800e192:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e196:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e19a:	4259      	negs	r1, r3
 800e19c:	4159      	adcs	r1, r3
 800e19e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1a2:	e7eb      	b.n	800e17c <__swhatbuf_r+0x24>

0800e1a4 <__smakebuf_r>:
 800e1a4:	898b      	ldrh	r3, [r1, #12]
 800e1a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1a8:	079d      	lsls	r5, r3, #30
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	460c      	mov	r4, r1
 800e1ae:	d507      	bpl.n	800e1c0 <__smakebuf_r+0x1c>
 800e1b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1b4:	6023      	str	r3, [r4, #0]
 800e1b6:	6123      	str	r3, [r4, #16]
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	6163      	str	r3, [r4, #20]
 800e1bc:	b002      	add	sp, #8
 800e1be:	bd70      	pop	{r4, r5, r6, pc}
 800e1c0:	ab01      	add	r3, sp, #4
 800e1c2:	466a      	mov	r2, sp
 800e1c4:	f7ff ffc8 	bl	800e158 <__swhatbuf_r>
 800e1c8:	9900      	ldr	r1, [sp, #0]
 800e1ca:	4605      	mov	r5, r0
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f7ff fbb5 	bl	800d93c <_malloc_r>
 800e1d2:	b948      	cbnz	r0, 800e1e8 <__smakebuf_r+0x44>
 800e1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1d8:	059a      	lsls	r2, r3, #22
 800e1da:	d4ef      	bmi.n	800e1bc <__smakebuf_r+0x18>
 800e1dc:	f023 0303 	bic.w	r3, r3, #3
 800e1e0:	f043 0302 	orr.w	r3, r3, #2
 800e1e4:	81a3      	strh	r3, [r4, #12]
 800e1e6:	e7e3      	b.n	800e1b0 <__smakebuf_r+0xc>
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	6020      	str	r0, [r4, #0]
 800e1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f0:	81a3      	strh	r3, [r4, #12]
 800e1f2:	9b00      	ldr	r3, [sp, #0]
 800e1f4:	6163      	str	r3, [r4, #20]
 800e1f6:	9b01      	ldr	r3, [sp, #4]
 800e1f8:	6120      	str	r0, [r4, #16]
 800e1fa:	b15b      	cbz	r3, 800e214 <__smakebuf_r+0x70>
 800e1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e200:	4630      	mov	r0, r6
 800e202:	f000 f851 	bl	800e2a8 <_isatty_r>
 800e206:	b128      	cbz	r0, 800e214 <__smakebuf_r+0x70>
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	f023 0303 	bic.w	r3, r3, #3
 800e20e:	f043 0301 	orr.w	r3, r3, #1
 800e212:	81a3      	strh	r3, [r4, #12]
 800e214:	89a3      	ldrh	r3, [r4, #12]
 800e216:	431d      	orrs	r5, r3
 800e218:	81a5      	strh	r5, [r4, #12]
 800e21a:	e7cf      	b.n	800e1bc <__smakebuf_r+0x18>

0800e21c <_putc_r>:
 800e21c:	b570      	push	{r4, r5, r6, lr}
 800e21e:	460d      	mov	r5, r1
 800e220:	4614      	mov	r4, r2
 800e222:	4606      	mov	r6, r0
 800e224:	b118      	cbz	r0, 800e22e <_putc_r+0x12>
 800e226:	6a03      	ldr	r3, [r0, #32]
 800e228:	b90b      	cbnz	r3, 800e22e <_putc_r+0x12>
 800e22a:	f7ff f90f 	bl	800d44c <__sinit>
 800e22e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e230:	07d8      	lsls	r0, r3, #31
 800e232:	d405      	bmi.n	800e240 <_putc_r+0x24>
 800e234:	89a3      	ldrh	r3, [r4, #12]
 800e236:	0599      	lsls	r1, r3, #22
 800e238:	d402      	bmi.n	800e240 <_putc_r+0x24>
 800e23a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e23c:	f7ff fb02 	bl	800d844 <__retarget_lock_acquire_recursive>
 800e240:	68a3      	ldr	r3, [r4, #8]
 800e242:	3b01      	subs	r3, #1
 800e244:	2b00      	cmp	r3, #0
 800e246:	60a3      	str	r3, [r4, #8]
 800e248:	da05      	bge.n	800e256 <_putc_r+0x3a>
 800e24a:	69a2      	ldr	r2, [r4, #24]
 800e24c:	4293      	cmp	r3, r2
 800e24e:	db12      	blt.n	800e276 <_putc_r+0x5a>
 800e250:	b2eb      	uxtb	r3, r5
 800e252:	2b0a      	cmp	r3, #10
 800e254:	d00f      	beq.n	800e276 <_putc_r+0x5a>
 800e256:	6823      	ldr	r3, [r4, #0]
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	6022      	str	r2, [r4, #0]
 800e25c:	701d      	strb	r5, [r3, #0]
 800e25e:	b2ed      	uxtb	r5, r5
 800e260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e262:	07da      	lsls	r2, r3, #31
 800e264:	d405      	bmi.n	800e272 <_putc_r+0x56>
 800e266:	89a3      	ldrh	r3, [r4, #12]
 800e268:	059b      	lsls	r3, r3, #22
 800e26a:	d402      	bmi.n	800e272 <_putc_r+0x56>
 800e26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e26e:	f7ff faea 	bl	800d846 <__retarget_lock_release_recursive>
 800e272:	4628      	mov	r0, r5
 800e274:	bd70      	pop	{r4, r5, r6, pc}
 800e276:	4629      	mov	r1, r5
 800e278:	4622      	mov	r2, r4
 800e27a:	4630      	mov	r0, r6
 800e27c:	f7ff f9d5 	bl	800d62a <__swbuf_r>
 800e280:	4605      	mov	r5, r0
 800e282:	e7ed      	b.n	800e260 <_putc_r+0x44>

0800e284 <_fstat_r>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4d07      	ldr	r5, [pc, #28]	; (800e2a4 <_fstat_r+0x20>)
 800e288:	2300      	movs	r3, #0
 800e28a:	4604      	mov	r4, r0
 800e28c:	4608      	mov	r0, r1
 800e28e:	4611      	mov	r1, r2
 800e290:	602b      	str	r3, [r5, #0]
 800e292:	f7f4 fde6 	bl	8002e62 <_fstat>
 800e296:	1c43      	adds	r3, r0, #1
 800e298:	d102      	bne.n	800e2a0 <_fstat_r+0x1c>
 800e29a:	682b      	ldr	r3, [r5, #0]
 800e29c:	b103      	cbz	r3, 800e2a0 <_fstat_r+0x1c>
 800e29e:	6023      	str	r3, [r4, #0]
 800e2a0:	bd38      	pop	{r3, r4, r5, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20001d58 	.word	0x20001d58

0800e2a8 <_isatty_r>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4d06      	ldr	r5, [pc, #24]	; (800e2c4 <_isatty_r+0x1c>)
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	4608      	mov	r0, r1
 800e2b2:	602b      	str	r3, [r5, #0]
 800e2b4:	f7f4 fde5 	bl	8002e82 <_isatty>
 800e2b8:	1c43      	adds	r3, r0, #1
 800e2ba:	d102      	bne.n	800e2c2 <_isatty_r+0x1a>
 800e2bc:	682b      	ldr	r3, [r5, #0]
 800e2be:	b103      	cbz	r3, 800e2c2 <_isatty_r+0x1a>
 800e2c0:	6023      	str	r3, [r4, #0]
 800e2c2:	bd38      	pop	{r3, r4, r5, pc}
 800e2c4:	20001d58 	.word	0x20001d58

0800e2c8 <_sbrk_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	4d06      	ldr	r5, [pc, #24]	; (800e2e4 <_sbrk_r+0x1c>)
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	4608      	mov	r0, r1
 800e2d2:	602b      	str	r3, [r5, #0]
 800e2d4:	f7f4 fdee 	bl	8002eb4 <_sbrk>
 800e2d8:	1c43      	adds	r3, r0, #1
 800e2da:	d102      	bne.n	800e2e2 <_sbrk_r+0x1a>
 800e2dc:	682b      	ldr	r3, [r5, #0]
 800e2de:	b103      	cbz	r3, 800e2e2 <_sbrk_r+0x1a>
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	20001d58 	.word	0x20001d58

0800e2e8 <_init>:
 800e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ea:	bf00      	nop
 800e2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ee:	bc08      	pop	{r3}
 800e2f0:	469e      	mov	lr, r3
 800e2f2:	4770      	bx	lr

0800e2f4 <_fini>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	bf00      	nop
 800e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2fa:	bc08      	pop	{r3}
 800e2fc:	469e      	mov	lr, r3
 800e2fe:	4770      	bx	lr
